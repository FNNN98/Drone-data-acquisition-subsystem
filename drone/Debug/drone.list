
drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001523c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000960  08015440  08015440  00025440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015da0  08015da0  000303b4  2**0
                  CONTENTS
  4 .ARM          00000008  08015da0  08015da0  00025da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015da8  08015da8  000303b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015da8  08015da8  00025da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015dac  08015dac  00025dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b4  20000000  08015db0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000590c  200003b4  08016164  000303b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005cc0  08016164  00035cc0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b123  00000000  00000000  000303e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007037  00000000  00000000  0007b505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003630  00000000  00000000  00082540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003348  00000000  00000000  00085b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eabb  00000000  00000000  00088eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031de4  00000000  00000000  000b7973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b7e1  00000000  00000000  000e9757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00204f38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f6bc  00000000  00000000  00204f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200003b4 	.word	0x200003b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08015424 	.word	0x08015424

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200003b8 	.word	0x200003b8
 800023c:	08015424 	.word	0x08015424

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <applyAccelerationTrims>:
acc_t acc;
accelerationRuntime_t accelerationRuntime;
accelerometerConfig_t accelerometerConfig;

static void applyAccelerationTrims(const flightDynamicsTrims_t *accelerationTrims)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    acc.accADC[X] -= accelerationTrims->raw[X];
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <applyAccelerationTrims+0x70>)
 80005fe:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000608:	ee07 3a90 	vmov	s15, r3
 800060c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <applyAccelerationTrims+0x70>)
 8000616:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    acc.accADC[Y] -= accelerationTrims->raw[Y];
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <applyAccelerationTrims+0x70>)
 800061c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000626:	ee07 3a90 	vmov	s15, r3
 800062a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <applyAccelerationTrims+0x70>)
 8000634:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    acc.accADC[Z] -= accelerationTrims->raw[Z];
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <applyAccelerationTrims+0x70>)
 800063a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000644:	ee07 3a90 	vmov	s15, r3
 8000648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800064c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <applyAccelerationTrims+0x70>)
 8000652:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200003d0 	.word	0x200003d0

08000668 <accInitFilters>:


static void accInitFilters(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	accelerometerConfig.acc_lpf_hz = 50;
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <accInitFilters+0xc0>)
 8000670:	2232      	movs	r2, #50	; 0x32
 8000672:	801a      	strh	r2, [r3, #0]

    // Only set the lowpass cutoff if the ACC sample rate is detected otherwise
    // the filter initialization is not defined (sample rate = 0)
    accelerationRuntime.accLpfCutHz = (acc.sampleRateHz) ? accelerometerConfig.acc_lpf_hz : 0;
 8000674:	4b2d      	ldr	r3, [pc, #180]	; (800072c <accInitFilters+0xc4>)
 8000676:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <accInitFilters+0x1c>
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <accInitFilters+0xc0>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	e000      	b.n	8000686 <accInitFilters+0x1e>
 8000684:	2300      	movs	r3, #0
 8000686:	4a2a      	ldr	r2, [pc, #168]	; (8000730 <accInitFilters+0xc8>)
 8000688:	8013      	strh	r3, [r2, #0]
    if (accelerationRuntime.accLpfCutHz) {
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <accInitFilters+0xc8>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d02c      	beq.n	80006ec <accInitFilters+0x84>
        const uint32_t accSampleTimeUs = 1e6 / acc.sampleRateHz;
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <accInitFilters+0xc4>)
 8000694:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006a0:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000720 <accInitFilters+0xb8>
 80006a4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80006a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006ac:	ee17 3a90 	vmov	r3, s15
 80006b0:	603b      	str	r3, [r7, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	e016      	b.n	80006e6 <accInitFilters+0x7e>
            biquadFilterInitLPF(&accelerationRuntime.accFilter[axis], accelerationRuntime.accLpfCutHz, accSampleTimeUs);
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <accInitFilters+0xc8>)
 80006c4:	4413      	add	r3, r2
 80006c6:	3304      	adds	r3, #4
 80006c8:	4a19      	ldr	r2, [pc, #100]	; (8000730 <accInitFilters+0xc8>)
 80006ca:	8812      	ldrh	r2, [r2, #0]
 80006cc:	ee07 2a90 	vmov	s15, r2
 80006d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006d4:	6839      	ldr	r1, [r7, #0]
 80006d6:	eeb0 0a67 	vmov.f32	s0, s15
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fbe2 	bl	8000ea4 <biquadFilterInitLPF>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3301      	adds	r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	dde5      	ble.n	80006b8 <accInitFilters+0x50>
        }
    }

    accelerationRuntime.accumulatedMeasurementCount = 0;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <accInitFilters+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    accelerationRuntime.accumulatedMeasurements[0] = 0.0f;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <accInitFilters+0xc8>)
 80006f6:	f04f 0200 	mov.w	r2, #0
 80006fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    accelerationRuntime.accumulatedMeasurements[1] = 0.0f;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <accInitFilters+0xc8>)
 8000700:	f04f 0200 	mov.w	r2, #0
 8000704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    accelerationRuntime.accumulatedMeasurements[2] = 0.0f;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <accInitFilters+0xc8>)
 800070a:	f04f 0200 	mov.w	r2, #0
 800070e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	f3af 8000 	nop.w
 8000720:	00000000 	.word	0x00000000
 8000724:	412e8480 	.word	0x412e8480
 8000728:	200004c4 	.word	0x200004c4
 800072c:	200003d0 	.word	0x200003d0
 8000730:	20000430 	.word	0x20000430

08000734 <setAccelerationTrims>:

static void setAccelerationTrims(flightDynamicsTrims_t *accelerationTrimsToUse)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    accelerationRuntime.accelerationTrims = accelerationTrimsToUse;
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <setAccelerationTrims+0x1c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000430 	.word	0x20000430

08000754 <accInit>:

void accInit(sensorAccInitFuncPtr initFn, sensorAccReadFuncPtr readFn) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	memset(&acc, 0, sizeof(acc));
 800075e:	2260      	movs	r2, #96	; 0x60
 8000760:	2100      	movs	r1, #0
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <accInit+0xa0>)
 8000764:	f011 ffd3 	bl	801270e <memset>
	// copy over the common gyro mpu settings
	acc.dev.gyro = &gyro.gyroSensor1.gyroDev;
 8000768:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <accInit+0xa0>)
 800076a:	4a23      	ldr	r2, [pc, #140]	; (80007f8 <accInit+0xa4>)
 800076c:	621a      	str	r2, [r3, #32]
	acc.dev.acc_high_fsr = accelerometerConfig.acc_high_fsr;
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <accInit+0xa8>)
 8000770:	78da      	ldrb	r2, [r3, #3]
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <accInit+0xa0>)
 8000774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	// Copy alignment from active gyro, as all production boards use acc-gyro-combi chip.
	// Exceptions are STM32F3DISCOVERY and STM32F411DISCOVERY, and (may be) handled in future enhancement.

	sensor_align_e alignment = gyro.gyroSensor1.gyroDev.gyroAlign;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <accInit+0xac>)
 800077a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800077e:	73fb      	strb	r3, [r7, #15]
	sensorAlignment_t customAlignment;
	buildAlignmentFromStandardAlignment(&customAlignment, alignment);
 8000780:	7bfa      	ldrb	r2, [r7, #15]
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f005 f8bb 	bl	8005904 <buildAlignmentFromStandardAlignment>

	acc.dev.accAlign = alignment;
 800078e:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <accInit+0xa0>)
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	7793      	strb	r3, [r2, #30]
	buildRotationMatrixFromAlignment(&customAlignment, &acc.dev.rotationMatrix);
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	491a      	ldr	r1, [pc, #104]	; (8000804 <accInit+0xb0>)
 800079a:	4618      	mov	r0, r3
 800079c:	f005 f86e 	bl	800587c <buildRotationMatrixFromAlignment>

	acc.dev.initFn = initFn;
 80007a0:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <accInit+0xa0>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6053      	str	r3, [r2, #4]
	acc.dev.readFn = readFn;
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <accInit+0xa0>)
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	6093      	str	r3, [r2, #8]

	acc.dev.acc_1G = 256; // set default
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <accInit+0xa0>)
 80007ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007b2:	819a      	strh	r2, [r3, #12]
	acc.dev.initFn(&acc.dev); // driver initialisation
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <accInit+0xa0>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	480e      	ldr	r0, [pc, #56]	; (80007f4 <accInit+0xa0>)
 80007ba:	4798      	blx	r3
	acc.dev.acc_1G_rec = 1.0f / acc.dev.acc_1G;
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <accInit+0xa0>)
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	ee07 3a90 	vmov	s15, r3
 80007c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80007cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <accInit+0xa0>)
 80007d2:	edc3 7a00 	vstr	s15, [r3]

	acc.sampleRateHz = 1000;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <accInit+0xa0>)
 80007d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	setAccelerationTrims(&accelerometerConfig.accZero);
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <accInit+0xb4>)
 80007e2:	f7ff ffa7 	bl	8000734 <setAccelerationTrims>

	accInitFilters();
 80007e6:	f7ff ff3f 	bl	8000668 <accInitFilters>
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200003d0 	.word	0x200003d0
 80007f8:	20000670 	.word	0x20000670
 80007fc:	200004c4 	.word	0x200004c4
 8000800:	20000634 	.word	0x20000634
 8000804:	200003f8 	.word	0x200003f8
 8000808:	200004c8 	.word	0x200004c8

0800080c <accUpdate>:

void accUpdate(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
    if (!acc.dev.readFn(&acc.dev)) {
 8000812:	4b41      	ldr	r3, [pc, #260]	; (8000918 <accUpdate+0x10c>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	4840      	ldr	r0, [pc, #256]	; (8000918 <accUpdate+0x10c>)
 8000818:	4798      	blx	r3
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d077      	beq.n	8000910 <accUpdate+0x104>
        return;
    }
    acc.isAccelUpdatedAtLeastOnce = true;
 8000820:	4b3d      	ldr	r3, [pc, #244]	; (8000918 <accUpdate+0x10c>)
 8000822:	2201      	movs	r2, #1
 8000824:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e00e      	b.n	800084c <accUpdate+0x40>
        acc.accADC[axis] = acc.dev.accADC[axis];
 800082e:	4a3a      	ldr	r2, [pc, #232]	; (8000918 <accUpdate+0x10c>)
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3304      	adds	r3, #4
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	4937      	ldr	r1, [pc, #220]	; (8000918 <accUpdate+0x10c>)
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	3314      	adds	r3, #20
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	440b      	add	r3, r1
 8000844:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b02      	cmp	r3, #2
 8000850:	dded      	ble.n	800082e <accUpdate+0x22>
    }

    if (accelerationRuntime.accLpfCutHz) {
 8000852:	4b32      	ldr	r3, [pc, #200]	; (800091c <accUpdate+0x110>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d025      	beq.n	80008a6 <accUpdate+0x9a>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	e01f      	b.n	80008a0 <accUpdate+0x94>
            acc.accADC[axis] = biquadFilterApply(&accelerationRuntime.accFilter[axis], acc.accADC[axis]);
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	4613      	mov	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	4a2c      	ldr	r2, [pc, #176]	; (800091c <accUpdate+0x110>)
 800086c:	4413      	add	r3, r2
 800086e:	1d1a      	adds	r2, r3, #4
 8000870:	4929      	ldr	r1, [pc, #164]	; (8000918 <accUpdate+0x10c>)
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	3314      	adds	r3, #20
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	440b      	add	r3, r1
 800087a:	edd3 7a00 	vldr	s15, [r3]
 800087e:	eeb0 0a67 	vmov.f32	s0, s15
 8000882:	4610      	mov	r0, r2
 8000884:	f000 fb26 	bl	8000ed4 <biquadFilterApply>
 8000888:	eef0 7a40 	vmov.f32	s15, s0
 800088c:	4a22      	ldr	r2, [pc, #136]	; (8000918 <accUpdate+0x10c>)
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3314      	adds	r3, #20
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3301      	adds	r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	dddc      	ble.n	8000860 <accUpdate+0x54>
        }
    }

    alignSensorViaRotation(acc.accADC, acc.dev.accAlign);
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <accUpdate+0x10c>)
 80008a8:	7f9b      	ldrb	r3, [r3, #30]
 80008aa:	4619      	mov	r1, r3
 80008ac:	481c      	ldr	r0, [pc, #112]	; (8000920 <accUpdate+0x114>)
 80008ae:	f005 f877 	bl	80059a0 <alignSensorViaRotation>

    applyAccelerationTrims(accelerationRuntime.accelerationTrims);
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <accUpdate+0x110>)
 80008b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe9c 	bl	80005f4 <applyAccelerationTrims>

    ++accelerationRuntime.accumulatedMeasurementCount;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <accUpdate+0x110>)
 80008be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a15      	ldr	r2, [pc, #84]	; (800091c <accUpdate+0x110>)
 80008c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	e01b      	b.n	8000908 <accUpdate+0xfc>
        accelerationRuntime.accumulatedMeasurements[axis] += acc.accADC[axis];
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <accUpdate+0x110>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3320      	adds	r3, #32
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	3304      	adds	r3, #4
 80008dc:	ed93 7a00 	vldr	s14, [r3]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <accUpdate+0x10c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3314      	adds	r3, #20
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	edd3 7a00 	vldr	s15, [r3]
 80008ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <accUpdate+0x110>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3320      	adds	r3, #32
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	3304      	adds	r3, #4
 80008fe:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3301      	adds	r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b02      	cmp	r3, #2
 800090c:	dde0      	ble.n	80008d0 <accUpdate+0xc4>
 800090e:	e000      	b.n	8000912 <accUpdate+0x106>
        return;
 8000910:	bf00      	nop
    }
}
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200003d0 	.word	0x200003d0
 800091c:	20000430 	.word	0x20000430
 8000920:	20000420 	.word	0x20000420

08000924 <accGetAccumulationAverage>:

bool accGetAccumulationAverage(float *accumulationAverage)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    if (accelerationRuntime.accumulatedMeasurementCount > 0) {
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <accGetAccumulationAverage+0xa0>)
 800092e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000932:	2b00      	cmp	r3, #0
 8000934:	dd2e      	ble.n	8000994 <accGetAccumulationAverage+0x70>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e022      	b.n	8000982 <accGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accelerationRuntime.accumulatedMeasurements[axis] / accelerationRuntime.accumulatedMeasurementCount;
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <accGetAccumulationAverage+0xa0>)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3320      	adds	r3, #32
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	3304      	adds	r3, #4
 8000948:	edd3 6a00 	vldr	s13, [r3]
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <accGetAccumulationAverage+0xa0>)
 800094e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000952:	ee07 3a90 	vmov	s15, r3
 8000956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000966:	edc3 7a00 	vstr	s15, [r3]
            accelerationRuntime.accumulatedMeasurements[axis] = 0.0f;
 800096a:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <accGetAccumulationAverage+0xa0>)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3320      	adds	r3, #32
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	4413      	add	r3, r2
 8000974:	3304      	adds	r3, #4
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3301      	adds	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	2b02      	cmp	r3, #2
 8000986:	ddd9      	ble.n	800093c <accGetAccumulationAverage+0x18>
        }
        accelerationRuntime.accumulatedMeasurementCount = 0;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <accGetAccumulationAverage+0xa0>)
 800098a:	2200      	movs	r2, #0
 800098c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        return true;
 8000990:	2301      	movs	r3, #1
 8000992:	e010      	b.n	80009b6 <accGetAccumulationAverage+0x92>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	e009      	b.n	80009ae <accGetAccumulationAverage+0x8a>
            accumulationAverage[axis] = 0.0f;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	f04f 0200 	mov.w	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	3301      	adds	r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	ddf2      	ble.n	800099a <accGetAccumulationAverage+0x76>
        }
        return false;
 80009b4:	2300      	movs	r3, #0
    }
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000430 	.word	0x20000430

080009c8 <attitudeInit>:
 */

#include "attitude.h"
#include "imu.h"

void attitudeInit(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	imuInit();
 80009cc:	f001 fefe 	bl	80027cc <imuInit>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <attitudeUpdate>:

void attitudeUpdate(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	imuCalculateEstimatedAttitude();
 80009d8:	f002 fc08 	bl	80031ec <imuCalculateEstimatedAttitude>
	imuCalculateThrottleAngleCorrection();
 80009dc:	f002 fce8 	bl	80033b0 <imuCalculateThrottleAngleCorrection>
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <barometerConfig>:
    ioTag_t baro_xclr_tag;
} barometerConfig_t;

barometerConfig_t barometerConfig_System;

static inline const barometerConfig_t* barometerConfig(void) { return &barometerConfig_System; }
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4b02      	ldr	r3, [pc, #8]	; (80009f4 <barometerConfig+0x10>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	2000058c 	.word	0x2000058c

080009f8 <pgResetFn_barometerConfig>:

static void pgResetFn_barometerConfig(barometerConfig_t *barometerConfig)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
    barometerConfig->baro_hardware = BARO_LPS;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2205      	movs	r2, #5
 8000a04:	715a      	strb	r2, [r3, #5]
    barometerConfig->baro_busType = BUS_TYPE_I2C;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
    barometerConfig->baro_i2c_device = I2C_DEV_TO_CFG(BARO_I2C_INSTANCE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	70da      	strb	r2, [r3, #3]
    barometerConfig->baro_i2c_address = DEFAULT_BARO_I2C_ADDRESS;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	711a      	strb	r2, [r3, #4]
    barometerConfig->baro_spi_device = SPI_DEV_TO_CFG(SPIINVALID);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	705a      	strb	r2, [r3, #1]
    barometerConfig->baro_spi_csn = IO_TAG_NONE;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	709a      	strb	r2, [r3, #2]
    barometerConfig->baro_eoc_tag = IO_TAG(BARO_EOC_PIN);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	719a      	strb	r2, [r3, #6]
    barometerConfig->baro_xclr_tag = IO_TAG(BARO_XCLR_PIN);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	71da      	strb	r2, [r3, #7]
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <lpsNothing>:

static void lpsNothing(baroDev_t *baro)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    (void)(baro);
    return;
 8000a44:	bf00      	nop
}
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <lpsNothingBool>:

static bool lpsNothingBool(baroDev_t *baro)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	(void)(baro);
    return true;
 8000a58:	2301      	movs	r3, #1
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <lpsNothingCalculate>:

static void lpsNothingCalculate(int32_t *pressure, int32_t *temperature)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
	(void)(*pressure);
	(void)(*temperature);
    return;
 8000a70:	bf00      	nop
}
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <lpsDetect>:

static bool lpsDetect(baroDev_t *baro)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    baro->combined_read = true;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    baro->ut_delay = 1;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    baro->up_delay = 1000000 / 24;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f24a 22c2 	movw	r2, #41666	; 0xa2c2
 8000a9a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    baro->start_ut = lpsNothing;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <lpsDetect+0x68>)
 8000aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    baro->get_ut = lpsNothingBool;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a0f      	ldr	r2, [pc, #60]	; (8000ae8 <lpsDetect+0x6c>)
 8000aaa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    baro->read_ut = lpsNothingBool;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <lpsDetect+0x6c>)
 8000ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    baro->start_up = lpsNothing;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <lpsDetect+0x68>)
 8000aba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    baro->get_up = lpsNothingBool;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <lpsDetect+0x6c>)
 8000ac2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    baro->read_up = lpsNothingBool;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <lpsDetect+0x6c>)
 8000aca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    baro->calculate = lpsNothingCalculate;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <lpsDetect+0x70>)
 8000ad2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    return true;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	08000a3d 	.word	0x08000a3d
 8000ae8:	08000a51 	.word	0x08000a51
 8000aec:	08000a67 	.word	0x08000a67

08000af0 <baroDetect>:

static bool baroDetect(baroDev_t *baroDev, baroSensor_e baroHardwareToUse)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	70fb      	strb	r3, [r7, #3]
    extDevice_t *dev = &baroDev->dev;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	60bb      	str	r3, [r7, #8]

    // Detect what pressure sensors are available. baro->update() is set to sensor-specific update function

    baroSensor_e baroHardware = baroHardwareToUse;
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	73fb      	strb	r3, [r7, #15]

    switch (barometerConfig()->baro_busType) {
 8000b04:	f7ff ff6e 	bl	80009e4 <barometerConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d12b      	bne.n	8000b68 <baroDetect+0x78>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, barometerConfig()->baro_i2c_device);
 8000b10:	f7ff ff68 	bl	80009e4 <barometerConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	68b8      	ldr	r0, [r7, #8]
 8000b1c:	f000 f8c6 	bl	8000cac <i2cBusSetInstance>
        dev->busType_u.i2c.address = barometerConfig()->baro_i2c_address;
 8000b20:	f7ff ff60 	bl	80009e4 <barometerConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	791a      	ldrb	r2, [r3, #4]
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	711a      	strb	r2, [r3, #4]
        break;
 8000b2c:	bf00      	nop
    default:
        return false;
    }

    switch (baroHardware) {
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	2b0a      	cmp	r3, #10
 8000b32:	d827      	bhi.n	8000b84 <baroDetect+0x94>
 8000b34:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <baroDetect+0x4c>)
 8000b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3a:	bf00      	nop
 8000b3c:	08000b6d 	.word	0x08000b6d
 8000b40:	08000b7f 	.word	0x08000b7f
 8000b44:	08000b6d 	.word	0x08000b6d
 8000b48:	08000b6d 	.word	0x08000b6d
 8000b4c:	08000b7f 	.word	0x08000b7f
 8000b50:	08000b6d 	.word	0x08000b6d
 8000b54:	08000b7f 	.word	0x08000b7f
 8000b58:	08000b7f 	.word	0x08000b7f
 8000b5c:	08000b7f 	.word	0x08000b7f
 8000b60:	08000b7f 	.word	0x08000b7f
 8000b64:	08000b7f 	.word	0x08000b7f
        return false;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e011      	b.n	8000b90 <baroDetect+0xa0>
    case BARO_DEFAULT:
    case BARO_BMP085:
    case BARO_MS5611:
    case BARO_LPS:
        if (lpsDetect(baroDev)) {
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff85 	bl	8000a7c <lpsDetect>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <baroDetect+0x8e>
            baroHardware = BARO_LPS;
 8000b78:	2305      	movs	r3, #5
 8000b7a:	73fb      	strb	r3, [r7, #15]
            break;
 8000b7c:	e002      	b.n	8000b84 <baroDetect+0x94>
    case BARO_BMP280:
    case BARO_QMP6988:
    case BARO_2SMPB_02B:
    case BARO_VIRTUAL:
    case BARO_NONE:
        baroHardware = BARO_NONE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
        break;
 8000b82:	bf00      	nop
    }

    if (baroHardware == BARO_NONE) {
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d101      	bne.n	8000b8e <baroDetect+0x9e>
        return false;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <baroDetect+0xa0>
    }

    return true;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <pressureToAltitude>:

static float pressureToAltitude(const float pressure)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (1.0f - powf(pressure / 101325.0f, 0.190295f)) * 4433000.0f;
 8000ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ba6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000bd8 <pressureToAltitude+0x40>
 8000baa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000bae:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000bdc <pressureToAltitude+0x44>
 8000bb2:	eeb0 0a47 	vmov.f32	s0, s14
 8000bb6:	f014 fa6b 	bl	8015090 <powf>
 8000bba:	eef0 7a40 	vmov.f32	s15, s0
 8000bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bc6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000be0 <pressureToAltitude+0x48>
 8000bca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000bce:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	47c5e680 	.word	0x47c5e680
 8000bdc:	3e42dcb1 	.word	0x3e42dcb1
 8000be0:	4a8748d0 	.word	0x4a8748d0

08000be4 <baroInit>:

void baroInit(sensorBaroInitFuncPtr initFn, sensorBaroReadFuncPtr readFn)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
	pgResetFn_barometerConfig(&barometerConfig_System);
 8000bee:	4818      	ldr	r0, [pc, #96]	; (8000c50 <baroInit+0x6c>)
 8000bf0:	f7ff ff02 	bl	80009f8 <pgResetFn_barometerConfig>
    baroDetect(&baro.dev, barometerConfig()->baro_hardware);
 8000bf4:	f7ff fef6 	bl	80009e4 <barometerConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	795b      	ldrb	r3, [r3, #5]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4815      	ldr	r0, [pc, #84]	; (8000c54 <baroInit+0x70>)
 8000c00:	f7ff ff76 	bl	8000af0 <baroDetect>
    baro.dev.read_ut = readFn;
 8000c04:	4a13      	ldr	r2, [pc, #76]	; (8000c54 <baroInit+0x70>)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    initFn(&baro.dev);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4811      	ldr	r0, [pc, #68]	; (8000c54 <baroInit+0x70>)
 8000c10:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <baroInit+0x70>)
 8000c14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dd10      	ble.n	8000c3e <baroInit+0x5a>
    	baro.ground_altitude = pressureToAltitude(baro.dev.baroADC);
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <baroInit+0x70>)
 8000c1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c22:	ee07 3a90 	vmov	s15, r3
 8000c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c2e:	f7ff ffb3 	bl	8000b98 <pressureToAltitude>
 8000c32:	eef0 7a40 	vmov.f32	s15, s0
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <baroInit+0x70>)
 8000c38:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
    } else {
    	baro.ground_altitude = 0;
    }
}
 8000c3c:	e004      	b.n	8000c48 <baroInit+0x64>
    	baro.ground_altitude = 0;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <baroInit+0x70>)
 8000c40:	f04f 0200 	mov.w	r2, #0
 8000c44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000058c 	.word	0x2000058c
 8000c54:	200004d4 	.word	0x200004d4

08000c58 <baroUpdate>:

void baroUpdate(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
    baro.dev.read_ut(&baro.dev);
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <baroUpdate+0x50>)
 8000c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c64:	4810      	ldr	r0, [pc, #64]	; (8000ca8 <baroUpdate+0x50>)
 8000c66:	4798      	blx	r3
    if (baro.dev.baroADC > 0) {
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <baroUpdate+0x50>)
 8000c6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	dd16      	ble.n	8000ca0 <baroUpdate+0x48>
        const float altitude = pressureToAltitude(baro.dev.baroADC);
 8000c72:	4b0d      	ldr	r3, [pc, #52]	; (8000ca8 <baroUpdate+0x50>)
 8000c74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c80:	eeb0 0a67 	vmov.f32	s0, s15
 8000c84:	f7ff ff88 	bl	8000b98 <pressureToAltitude>
 8000c88:	ed87 0a01 	vstr	s0, [r7, #4]
        baro.altitude = altitude - baro.ground_altitude;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <baroUpdate+0x50>)
 8000c8e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8000c92:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c9a:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <baroUpdate+0x50>)
 8000c9c:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
    }
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200004d4 	.word	0x200004d4

08000cac <i2cBusSetInstance>:

#define I2CDEV_COUNT 4
#define I2C_CFG_TO_DEV(x)   ((x) - 1)

bool i2cBusSetInstance(extDevice_t *dev, uint32_t device)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    // I2C bus structures to associate with external devices
    static busDevice_t i2cBus[I2CDEV_COUNT];

    if ((device < 1) || (device > I2CDEV_COUNT)) {
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d002      	beq.n	8000cc2 <i2cBusSetInstance+0x16>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d901      	bls.n	8000cc6 <i2cBusSetInstance+0x1a>
        return false;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e016      	b.n	8000cf4 <i2cBusSetInstance+0x48>
    }

    dev->bus = &i2cBus[I2C_CFG_TO_DEV(device)];
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	1e5a      	subs	r2, r3, #1
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <i2cBusSetInstance+0x54>)
 8000cd4:	441a      	add	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
    dev->bus->busType = BUS_TYPE_I2C;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
    dev->bus->busType_u.i2c.device = I2C_CFG_TO_DEV(device);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	b252      	sxtb	r2, r2
 8000cf0:	711a      	strb	r2, [r3, #4]

    return true;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	20000594 	.word	0x20000594

08000d04 <controlMotorInit>:

#include "control_motor.h"

#include "pid.h"

void controlMotorInit(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	pidInit();
 8000d08:	f003 fe9a 	bl	8004a40 <pidInit>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <controlMotorUpdate>:

void controlMotorUpdate(void) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
    pidIncUpdateCounter();
 8000d14:	f004 fcd6 	bl	80056c4 <pidIncUpdateCounter>
    processRcCommand();
 8000d18:	f004 fcf4 	bl	8005704 <processRcCommand>
    pidController();
 8000d1c:	f003 fffa 	bl	8004d14 <pidController>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <filterGetNotchQ>:
#include "filter.h"
#include "flight_math.h"


float filterGetNotchQ(float centerFreq, float cutoffFreq)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d2e:	edc7 0a00 	vstr	s1, [r7]
    return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
 8000d32:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d36:	edd7 7a00 	vldr	s15, [r7]
 8000d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d42:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8000d46:	edd7 7a00 	vldr	s15, [r7]
 8000d4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000d4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d52:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000d56:	eef0 7a66 	vmov.f32	s15, s13
}
 8000d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <nullFilterApply>:

float nullFilterApply(filter_t *filter, float input)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	ed87 0a00 	vstr	s0, [r7]
    return input;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	ee07 3a90 	vmov	s15, r3
}
 8000d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <pt1FilterGain>:

float pt1FilterGain(float f_cut, float dT)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d92:	edc7 0a00 	vstr	s1, [r7]
    float RC = 1 / (2 * M_PIf * f_cut);
 8000d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d9a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000dd4 <pt1FilterGain+0x4c>
 8000d9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000daa:	edc7 7a03 	vstr	s15, [r7, #12]
    return dT / (RC + dT);
 8000dae:	ed97 7a03 	vldr	s14, [r7, #12]
 8000db2:	edd7 7a00 	vldr	s15, [r7]
 8000db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dba:	ed97 7a00 	vldr	s14, [r7]
 8000dbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000dc2:	eef0 7a66 	vmov.f32	s15, s13
}
 8000dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	40c90fdb 	.word	0x40c90fdb

08000dd8 <pt1FilterInit>:

void pt1FilterInit(pt1Filter_t *filter, float k)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
    filter->k = k;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	605a      	str	r2, [r3, #4]
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <pt1FilterApply>:

float pt1FilterApply(pt1Filter_t *filter, float input)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	ed87 0a00 	vstr	s0, [r7]
    filter->state = filter->state + filter->k * (input - filter->state);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	ed93 7a00 	vldr	s14, [r3]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	edd3 7a00 	vldr	s15, [r3]
 8000e1c:	ed97 6a00 	vldr	s12, [r7]
 8000e20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	ee07 3a90 	vmov	s15, r3
}
 8000e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <biquadFilterInit>:

void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6178      	str	r0, [r7, #20]
 8000e50:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e54:	60f9      	str	r1, [r7, #12]
 8000e56:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	ed87 1a00 	vstr	s2, [r7]
 8000e60:	71fb      	strb	r3, [r7, #7]
    biquadFilterUpdate(filter, filterFreq, refreshRate, Q, filterType, weight);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	ed97 1a00 	vldr	s2, [r7]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	edd7 0a02 	vldr	s1, [r7, #8]
 8000e6e:	68f9      	ldr	r1, [r7, #12]
 8000e70:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e74:	6978      	ldr	r0, [r7, #20]
 8000e76:	f000 f877 	bl	8000f68 <biquadFilterUpdate>

    // zero initial samples
    filter->x1 = filter->x2 = 0;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	699a      	ldr	r2, [r3, #24]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	615a      	str	r2, [r3, #20]
    filter->y1 = filter->y2 = 0;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f04f 0200 	mov.w	r2, #0
 8000e90:	621a      	str	r2, [r3, #32]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	6a1a      	ldr	r2, [r3, #32]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	61da      	str	r2, [r3, #28]
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <biquadFilterInitLPF>:

#define BIQUAD_Q 1.0f / sqrtf(2.0f)

void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eb0:	6079      	str	r1, [r7, #4]
    biquadFilterInit(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF, 1.0f);
 8000eb2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	eddf 0a05 	vldr	s1, [pc, #20]	; 8000ed0 <biquadFilterInitLPF+0x2c>
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff ffc0 	bl	8000e48 <biquadFilterInit>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	3f3504f3 	.word	0x3f3504f3

08000ed4 <biquadFilterApply>:

float biquadFilterApply(biquadFilter_t *filter, float input)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	ed87 0a00 	vstr	s0, [r7]
    const float result = filter->b0 * input + filter->x1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	ed93 7a00 	vldr	s14, [r3]
 8000ee6:	edd7 7a00 	vldr	s15, [r7]
 8000eea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef8:	edc7 7a03 	vstr	s15, [r7, #12]

    filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f02:	edd7 7a00 	vldr	s15, [r7]
 8000f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->x2 = filter->b2 * input - filter->a2 * result;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f32:	edd7 7a00 	vldr	s15, [r7]
 8000f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edc3 7a06 	vstr	s15, [r3, #24]

    return result;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	ee07 3a90 	vmov	s15, r3
}
 8000f58:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <biquadFilterUpdate>:

void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biquadFilterType_e filterType, float weight)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6178      	str	r0, [r7, #20]
 8000f70:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f74:	60f9      	str	r1, [r7, #12]
 8000f76:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	ed87 1a00 	vstr	s2, [r7]
 8000f80:	71fb      	strb	r3, [r7, #7]
    // setup variables
    const float omega = 2.0f * M_PIf * filterFreq * refreshRate * 0.000001f;
 8000f82:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f86:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001140 <biquadFilterUpdate+0x1d8>
 8000f8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f9c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001144 <biquadFilterUpdate+0x1dc>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float sn = sin_approx(omega);
 8000fa8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000fac:	f000 fa24 	bl	80013f8 <sin_approx>
 8000fb0:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    const float cs = cos_approx(omega);
 8000fb4:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8000fb8:	f000 fac8 	bl	800154c <cos_approx>
 8000fbc:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    const float alpha = sn / (2.0f * Q);
 8000fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000fc8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fd0:	edc7 7a08 	vstr	s15, [r7, #32]

    switch (filterType) {
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d04f      	beq.n	800107a <biquadFilterUpdate+0x112>
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	dc6e      	bgt.n	80010bc <biquadFilterUpdate+0x154>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d002      	beq.n	8000fe8 <biquadFilterUpdate+0x80>
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d02a      	beq.n	800103c <biquadFilterUpdate+0xd4>
 8000fe6:	e069      	b.n	80010bc <biquadFilterUpdate+0x154>
    case FILTER_LPF:
        // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
        // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
        filter->b1 = 1 - cs;
 8000fe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b0 = filter->b1 * 0.5f;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001000:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	edc3 7a00 	vstr	s15, [r3]
        filter->b2 = filter->b0;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	609a      	str	r2, [r3, #8]
        filter->a1 = -2 * cs;
 8001016:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800101a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800101e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 8001028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800102c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 800103a:	e03f      	b.n	80010bc <biquadFilterUpdate+0x154>
    case FILTER_NOTCH:
        filter->b0 = 1;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001042:	601a      	str	r2, [r3, #0]
        filter->b1 = -2 * cs;
 8001044:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001048:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800104c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	edc3 7a01 	vstr	s15, [r3, #4]
        filter->b2 = 1;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800105c:	609a      	str	r2, [r3, #8]
        filter->a1 = filter->b1;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	60da      	str	r2, [r3, #12]
        filter->a2 = 1 - alpha;
 8001066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800106a:	edd7 7a08 	vldr	s15, [r7, #32]
 800106e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 8001078:	e020      	b.n	80010bc <biquadFilterUpdate+0x154>
    case FILTER_BPF:
        filter->b0 = alpha;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	6a3a      	ldr	r2, [r7, #32]
 800107e:	601a      	str	r2, [r3, #0]
        filter->b1 = 0;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
        filter->b2 = -alpha;
 8001088:	edd7 7a08 	vldr	s15, [r7, #32]
 800108c:	eef1 7a67 	vneg.f32	s15, s15
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	edc3 7a02 	vstr	s15, [r3, #8]
        filter->a1 = -2 * cs;
 8001096:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800109a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800109e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	edc3 7a03 	vstr	s15, [r3, #12]
        filter->a2 = 1 - alpha;
 80010a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80010b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	edc3 7a04 	vstr	s15, [r3, #16]
        break;
 80010ba:	bf00      	nop
    }

    const float a0 = 1 + alpha;
 80010bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80010c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c8:	edc7 7a07 	vstr	s15, [r7, #28]

    // precompute the coefficients
    filter->b0 /= a0;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	edd3 6a00 	vldr	s13, [r3]
 80010d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80010e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80010fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80010fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	edd3 6a03 	vldr	s13, [r3, #12]
 800110e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001122:	ed97 7a07 	vldr	s14, [r7, #28]
 8001126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	edc3 7a04 	vstr	s15, [r3, #16]

    // update weight
    filter->weight = weight;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40c90fdb 	.word	0x40c90fdb
 8001144:	358637bd 	.word	0x358637bd

08001148 <pt2FilterGain>:

float pt2FilterGain(float f_cut, float dT)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001152:	edc7 0a00 	vstr	s1, [r7]
    const float order = 2.0f;
 8001156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800115a:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 800115c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001160:	edd7 7a05 	vldr	s15, [r7, #20]
 8001164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001168:	eef0 0a47 	vmov.f32	s1, s14
 800116c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001170:	f013 ff8e 	bl	8015090 <powf>
 8001174:	eef0 7a40 	vmov.f32	s15, s0
 8001178:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800117c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001180:	eeb0 0a67 	vmov.f32	s0, s15
 8001184:	f014 f8e4 	bl	8015350 <sqrtf>
 8001188:	eeb0 7a40 	vmov.f32	s14, s0
 800118c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001194:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 8001198:	edd7 7a04 	vldr	s15, [r7, #16]
 800119c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80011e0 <pt2FilterGain+0x98>
 80011a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b8:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.553773974f * M_PIf * f_cut);
    // where 1.553773974 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 2
    return dT / (RC + dT);
 80011bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80011c0:	edd7 7a00 	vldr	s15, [r7]
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	ed97 7a00 	vldr	s14, [r7]
 80011cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011d0:	eef0 7a66 	vmov.f32	s15, s13
}
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40490fdb 	.word	0x40490fdb

080011e4 <pt2FilterInit>:

void pt2FilterInit(pt2Filter_t *filter, float k)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
    filter->k = k;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	609a      	str	r2, [r3, #8]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <pt2FilterApply>:

float pt2FilterApply(pt2Filter_t *filter, float input)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	ed93 7a01 	vldr	s14, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edd3 6a02 	vldr	s13, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001230:	ed97 6a00 	vldr	s12, [r7]
 8001234:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state = filter->state + filter->k * (filter->state1 - filter->state);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	ed93 7a00 	vldr	s14, [r3]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	ed93 6a01 	vldr	s12, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	ee07 3a90 	vmov	s15, r3
}
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <pt3FilterGain>:

float pt3FilterGain(float f_cut, float dT)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001292:	edc7 0a00 	vstr	s1, [r7]
    const float order = 3.0f;
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <pt3FilterGain+0x94>)
 8001298:	617b      	str	r3, [r7, #20]
    const float orderCutoffCorrection = 1 / sqrtf(powf(2, 1.0f / order) - 1);
 800129a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800129e:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012a6:	eef0 0a47 	vmov.f32	s1, s14
 80012aa:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80012ae:	f013 feef 	bl	8015090 <powf>
 80012b2:	eef0 7a40 	vmov.f32	s15, s0
 80012b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	f014 f845 	bl	8015350 <sqrtf>
 80012c6:	eeb0 7a40 	vmov.f32	s14, s0
 80012ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d2:	edc7 7a04 	vstr	s15, [r7, #16]
    float RC = 1 / (2 * orderCutoffCorrection * M_PIf * f_cut);
 80012d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001320 <pt3FilterGain+0x98>
 80012e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f6:	edc7 7a03 	vstr	s15, [r7, #12]
    // float RC = 1 / (2 * 1.961459177f * M_PIf * f_cut);
    // where 1.961459177 = 1 / sqrt( (2^(1 / order) - 1) ) and order is 3
    return dT / (RC + dT);
 80012fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80012fe:	edd7 7a00 	vldr	s15, [r7]
 8001302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001306:	ed97 7a00 	vldr	s14, [r7]
 800130a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800130e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40400000 	.word	0x40400000
 8001320:	40490fdb 	.word	0x40490fdb

08001324 <pt3FilterInit>:

void pt3FilterInit(pt3Filter_t *filter, float k)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	ed87 0a00 	vstr	s0, [r7]
    filter->state = 0.0f;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
    filter->state1 = 0.0f;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
    filter->state2 = 0.0f;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
    filter->k = k;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	60da      	str	r2, [r3, #12]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <pt3FilterApply>:
float pt3FilterApply(pt3Filter_t *filter, float input)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	ed87 0a00 	vstr	s0, [r7]
    filter->state1 = filter->state1 + filter->k * (input - filter->state1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	ed93 7a01 	vldr	s14, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edd3 7a01 	vldr	s15, [r3, #4]
 8001378:	ed97 6a00 	vldr	s12, [r7]
 800137c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001380:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->state2 = filter->state2 + filter->k * (filter->state1 - filter->state2);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	ed93 7a02 	vldr	s14, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 6a03 	vldr	s13, [r3, #12]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	ed93 6a01 	vldr	s12, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013a6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->state = filter->state + filter->k * (filter->state2 - filter->state);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	ed93 7a00 	vldr	s14, [r3]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edd3 6a03 	vldr	s13, [r3, #12]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	ed93 6a02 	vldr	s12, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edc3 7a00 	vstr	s15, [r3]
    return filter->state;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	ee07 3a90 	vmov	s15, r3
}
 80013ea:	eeb0 0a67 	vmov.f32	s0, s15
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <sin_approx>:
#define sinPolyCoef5  8.312366210e-3f
#define sinPolyCoef7 -1.849218155e-4f
#define sinPolyCoef9  0

float sin_approx(float x)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 8001402:	edd7 7a01 	vldr	s15, [r7, #4]
 8001406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140a:	ee17 3a90 	vmov	r3, s15
 800140e:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f113 0f20 	cmn.w	r3, #32
 8001416:	db02      	blt.n	800141e <sin_approx+0x26>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b20      	cmp	r3, #32
 800141c:	dd0a      	ble.n	8001434 <sin_approx+0x3c>
 800141e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8001528 <sin_approx+0x130>
 8001422:	e079      	b.n	8001518 <sin_approx+0x120>
    while (x >  M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8001424:	edd7 7a01 	vldr	s15, [r7, #4]
 8001428:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800152c <sin_approx+0x134>
 800142c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001430:	edc7 7a01 	vstr	s15, [r7, #4]
 8001434:	edd7 7a01 	vldr	s15, [r7, #4]
 8001438:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001530 <sin_approx+0x138>
 800143c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001444:	dcee      	bgt.n	8001424 <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8001446:	e007      	b.n	8001458 <sin_approx+0x60>
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800152c <sin_approx+0x134>
 8001450:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001454:	edc7 7a01 	vstr	s15, [r7, #4]
 8001458:	edd7 7a01 	vldr	s15, [r7, #4]
 800145c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001534 <sin_approx+0x13c>
 8001460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	d4ee      	bmi.n	8001448 <sin_approx+0x50>
    if (x >  (0.5f * M_PIf)) x =  (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 800146a:	edd7 7a01 	vldr	s15, [r7, #4]
 800146e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001538 <sin_approx+0x140>
 8001472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147a:	dd0c      	ble.n	8001496 <sin_approx+0x9e>
 800147c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001480:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001538 <sin_approx+0x140>
 8001484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001488:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001538 <sin_approx+0x140>
 800148c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001490:	edc7 7a01 	vstr	s15, [r7, #4]
 8001494:	e014      	b.n	80014c0 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 8001496:	edd7 7a01 	vldr	s15, [r7, #4]
 800149a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800153c <sin_approx+0x144>
 800149e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a6:	d50b      	bpl.n	80014c0 <sin_approx+0xc8>
 80014a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ac:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001538 <sin_approx+0x140>
 80014b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800153c <sin_approx+0x144>
 80014b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014bc:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 80014c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014c8:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 80014cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014dc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001528 <sin_approx+0x130>
 80014e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014e4:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001540 <sin_approx+0x148>
 80014e8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80014ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f4:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001544 <sin_approx+0x14c>
 80014f8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80014fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001504:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001548 <sin_approx+0x150>
 8001508:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800150c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001510:	edd7 7a01 	vldr	s15, [r7, #4]
 8001514:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	3714      	adds	r7, #20
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	00000000 	.word	0x00000000
 800152c:	40c90fdb 	.word	0x40c90fdb
 8001530:	40490fdb 	.word	0x40490fdb
 8001534:	c0490fdb 	.word	0xc0490fdb
 8001538:	3fc90fdb 	.word	0x3fc90fdb
 800153c:	bfc90fdb 	.word	0xbfc90fdb
 8001540:	3941e792 	.word	0x3941e792
 8001544:	3c083097 	.word	0x3c083097
 8001548:	3e2aa815 	.word	0x3e2aa815

0800154c <cos_approx>:

float cos_approx(float x)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001578 <cos_approx+0x2c>
 800155e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001562:	eeb0 0a67 	vmov.f32	s0, s15
 8001566:	f7ff ff47 	bl	80013f8 <sin_approx>
 800156a:	eef0 7a40 	vmov.f32	s15, s0
}
 800156e:	eeb0 0a67 	vmov.f32	s0, s15
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	3fc90fdb 	.word	0x3fc90fdb

0800157c <acos_approx>:

float acos_approx(float x)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	ed87 0a01 	vstr	s0, [r7, #4]
    float xa = fabsf(x);
 8001586:	edd7 7a01 	vldr	s15, [r7, #4]
 800158a:	eef0 7ae7 	vabs.f32	s15, s15
 800158e:	edc7 7a03 	vstr	s15, [r7, #12]
    float result = sqrtf(1.0f - xa) * (1.5707288f + xa * (-0.2121144f + xa * (0.0742610f + (-0.0187293f * xa))));
 8001592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001596:	edd7 7a03 	vldr	s15, [r7, #12]
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	f013 fed5 	bl	8015350 <sqrtf>
 80015a6:	eef0 6a40 	vmov.f32	s13, s0
 80015aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001610 <acos_approx+0x94>
 80015b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001614 <acos_approx+0x98>
 80015ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80015be:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001618 <acos_approx+0x9c>
 80015ca:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80015ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800161c <acos_approx+0xa0>
 80015da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e2:	edc7 7a02 	vstr	s15, [r7, #8]
    if (x < 0.0f)
 80015e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f2:	d506      	bpl.n	8001602 <acos_approx+0x86>
        return M_PIf - result;
 80015f4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001620 <acos_approx+0xa4>
 80015f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001600:	e001      	b.n	8001606 <acos_approx+0x8a>
    else
        return result;
 8001602:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	bc996e30 	.word	0xbc996e30
 8001614:	3d981627 	.word	0x3d981627
 8001618:	3e593484 	.word	0x3e593484
 800161c:	3fc90da4 	.word	0x3fc90da4
 8001620:	40490fdb 	.word	0x40490fdb

08001624 <atan2_approx>:

float atan2_approx(float y, float x)
{
 8001624:	b480      	push	{r7}
 8001626:	b08b      	sub	sp, #44	; 0x2c
 8001628:	af00      	add	r7, sp, #0
 800162a:	ed87 0a01 	vstr	s0, [r7, #4]
 800162e:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 8001632:	edd7 7a00 	vldr	s15, [r7]
 8001636:	eef0 7ae7 	vabs.f32	s15, s15
 800163a:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 800163e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001642:	eef0 7ae7 	vabs.f32	s15, s15
 8001646:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	ed97 7a06 	vldr	s14, [r7, #24]
 8001656:	edd7 7a05 	vldr	s15, [r7, #20]
 800165a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	dd01      	ble.n	8001668 <atan2_approx+0x44>
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	e000      	b.n	800166a <atan2_approx+0x46>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    if (res) res = MIN(absX, absY) / res;
 800166c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001670:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001678:	d018      	beq.n	80016ac <atan2_approx+0x88>
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	ed97 7a04 	vldr	s14, [r7, #16]
 8001686:	edd7 7a03 	vldr	s15, [r7, #12]
 800168a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001692:	d502      	bpl.n	800169a <atan2_approx+0x76>
 8001694:	edd7 7a04 	vldr	s15, [r7, #16]
 8001698:	e001      	b.n	800169e <atan2_approx+0x7a>
 800169a:	edd7 7a03 	vldr	s15, [r7, #12]
 800169e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80016a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016a6:	ed87 7a09 	vstr	s14, [r7, #36]	; 0x24
 80016aa:	e002      	b.n	80016b2 <atan2_approx+0x8e>
    else res = 0.0f;
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 80016b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016b6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001794 <atan2_approx+0x170>
 80016ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016be:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001798 <atan2_approx+0x174>
 80016c2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ce:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800179c <atan2_approx+0x178>
 80016d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016de:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017a0 <atan2_approx+0x17c>
 80016e2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80016e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ee:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80017a4 <atan2_approx+0x180>
 80016f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016f6:	eef1 6a67 	vneg.f32	s13, s15
 80016fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016fe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80017a8 <atan2_approx+0x184>
 8001702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001706:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80017ac <atan2_approx+0x188>
 800170a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800170e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800171a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800171e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001722:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (absY > absX) res = (M_PIf / 2.0f) - res;
 8001726:	ed97 7a07 	vldr	s14, [r7, #28]
 800172a:	edd7 7a08 	vldr	s15, [r7, #32]
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	dd07      	ble.n	8001748 <atan2_approx+0x124>
 8001738:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80017b0 <atan2_approx+0x18c>
 800173c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001744:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (x < 0) res = M_PIf - res;
 8001748:	edd7 7a00 	vldr	s15, [r7]
 800174c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d507      	bpl.n	8001766 <atan2_approx+0x142>
 8001756:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80017b4 <atan2_approx+0x190>
 800175a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800175e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001762:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    if (y < 0) res = -res;
 8001766:	edd7 7a01 	vldr	s15, [r7, #4]
 800176a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800176e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001772:	d505      	bpl.n	8001780 <atan2_approx+0x15c>
 8001774:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001778:	eef1 7a67 	vneg.f32	s15, s15
 800177c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    return res;
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	ee07 3a90 	vmov	s15, r3
}
 8001786:	eeb0 0a67 	vmov.f32	s0, s15
 800178a:	372c      	adds	r7, #44	; 0x2c
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	3d4e0939 	.word	0x3d4e0939
 8001798:	3e9eb5e3 	.word	0x3e9eb5e3
 800179c:	3e16fa88 	.word	0x3e16fa88
 80017a0:	3f7ffe45 	.word	0x3f7ffe45
 80017a4:	34a8dfa7 	.word	0x34a8dfa7
 80017a8:	3f24fb99 	.word	0x3f24fb99
 80017ac:	3e16a269 	.word	0x3e16a269
 80017b0:	3fc90fdb 	.word	0x3fc90fdb
 80017b4:	40490fdb 	.word	0x40490fdb

080017b8 <rotateVector>:

void rotateVector(float v[XYZ_AXIS_COUNT], float rotation[XYZ_AXIS_COUNT])
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    // rotate v around rotation vector rotation
    // rotation in radians, all elements must be small
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e054      	b.n	8001872 <rotateVector+0xba>
        int i_1 = (i + 1) % 3;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <rotateVector+0xd0>)
 80017ce:	fb83 3102 	smull	r3, r1, r3, r2
 80017d2:	17d3      	asrs	r3, r2, #31
 80017d4:	1ac9      	subs	r1, r1, r3
 80017d6:	460b      	mov	r3, r1
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	440b      	add	r3, r1
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	613b      	str	r3, [r7, #16]
        int i_2 = (i + 2) % 3;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	1c9a      	adds	r2, r3, #2
 80017e4:	4b28      	ldr	r3, [pc, #160]	; (8001888 <rotateVector+0xd0>)
 80017e6:	fb83 3102 	smull	r3, r1, r3, r2
 80017ea:	17d3      	asrs	r3, r2, #31
 80017ec:	1ac9      	subs	r1, r1, r3
 80017ee:	460b      	mov	r3, r1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	440b      	add	r3, r1
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	60fb      	str	r3, [r7, #12]
        float newV = v[i_1] + v[i_2] * rotation[i];
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	edd3 6a00 	vldr	s13, [r3]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	4413      	add	r3, r2
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001824:	edc7 7a02 	vstr	s15, [r7, #8]
        v[i_2] -= v[i_1] * rotation[i];
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	ed93 7a00 	vldr	s14, [r3]
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	edd3 6a00 	vldr	s13, [r3]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	4413      	add	r3, r2
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185c:	edc3 7a00 	vstr	s15, [r3]
        v[i_1] = newV;
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	4413      	add	r3, r2
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b02      	cmp	r3, #2
 8001876:	dda7      	ble.n	80017c8 <rotateVector+0x10>
    }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	371c      	adds	r7, #28
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	55555556 	.word	0x55555556

0800188c <buildRotationMatrix>:

void buildRotationMatrix(fp_angles_t *delta, fp_rotationMatrix_t *rotation)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
    float cosx, sinx, cosy, siny, cosz, sinz;
    float coszcosx, sinzcosx, coszsinx, sinzsinx;

    cosx = cos_approx(delta->angles.roll);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	f7ff fe54 	bl	800154c <cos_approx>
 80018a4:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
    sinx = sin_approx(delta->angles.roll);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	eeb0 0a67 	vmov.f32	s0, s15
 80018b2:	f7ff fda1 	bl	80013f8 <sin_approx>
 80018b6:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    cosy = cos_approx(delta->angles.pitch);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80018c0:	eeb0 0a67 	vmov.f32	s0, s15
 80018c4:	f7ff fe42 	bl	800154c <cos_approx>
 80018c8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    siny = sin_approx(delta->angles.pitch);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d2:	eeb0 0a67 	vmov.f32	s0, s15
 80018d6:	f7ff fd8f 	bl	80013f8 <sin_approx>
 80018da:	ed87 0a08 	vstr	s0, [r7, #32]
    cosz = cos_approx(delta->angles.yaw);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e4:	eeb0 0a67 	vmov.f32	s0, s15
 80018e8:	f7ff fe30 	bl	800154c <cos_approx>
 80018ec:	ed87 0a07 	vstr	s0, [r7, #28]
    sinz = sin_approx(delta->angles.yaw);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	f7ff fd7d 	bl	80013f8 <sin_approx>
 80018fe:	ed87 0a06 	vstr	s0, [r7, #24]

    coszcosx = cosz * cosx;
 8001902:	ed97 7a07 	vldr	s14, [r7, #28]
 8001906:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800190a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190e:	edc7 7a05 	vstr	s15, [r7, #20]
    sinzcosx = sinz * cosx;
 8001912:	ed97 7a06 	vldr	s14, [r7, #24]
 8001916:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800191a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191e:	edc7 7a04 	vstr	s15, [r7, #16]
    coszsinx = sinx * cosz;
 8001922:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001926:	edd7 7a07 	vldr	s15, [r7, #28]
 800192a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192e:	edc7 7a03 	vstr	s15, [r7, #12]
    sinzsinx = sinx * sinz;
 8001932:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001936:	edd7 7a06 	vldr	s15, [r7, #24]
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	edc7 7a02 	vstr	s15, [r7, #8]

    rotation->m[0][X] = cosz * cosy;
 8001942:	ed97 7a07 	vldr	s14, [r7, #28]
 8001946:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800194a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	edc3 7a00 	vstr	s15, [r3]
    rotation->m[0][Y] = -cosy * sinz;
 8001954:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001958:	eeb1 7a67 	vneg.f32	s14, s15
 800195c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	edc3 7a01 	vstr	s15, [r3, #4]
    rotation->m[0][Z] = siny;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6a3a      	ldr	r2, [r7, #32]
 800196e:	609a      	str	r2, [r3, #8]
    rotation->m[1][X] = sinzcosx + (coszsinx * siny);
 8001970:	ed97 7a03 	vldr	s14, [r7, #12]
 8001974:	edd7 7a08 	vldr	s15, [r7, #32]
 8001978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800197c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	edc3 7a03 	vstr	s15, [r3, #12]
    rotation->m[1][Y] = coszcosx - (sinzsinx * siny);
 800198a:	ed97 7a02 	vldr	s14, [r7, #8]
 800198e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001996:	ed97 7a05 	vldr	s14, [r7, #20]
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	edc3 7a04 	vstr	s15, [r3, #16]
    rotation->m[1][Z] = -sinx * cosy;
 80019a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80019a8:	eeb1 7a67 	vneg.f32	s14, s15
 80019ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	edc3 7a05 	vstr	s15, [r3, #20]
    rotation->m[2][X] = (sinzsinx) - (coszcosx * siny);
 80019ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80019be:	edd7 7a08 	vldr	s15, [r7, #32]
 80019c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80019ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	edc3 7a06 	vstr	s15, [r3, #24]
    rotation->m[2][Y] = (coszsinx) + (sinzcosx * siny);
 80019d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80019d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80019dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	edc3 7a07 	vstr	s15, [r3, #28]
    rotation->m[2][Z] = cosy * cosx;
 80019ee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80019f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001a00:	bf00      	nop
 8001a02:	3730      	adds	r7, #48	; 0x30
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <degreesToRadians>:

float degreesToRadians(int16_t degrees)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
    return degrees * RAD;
 8001a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001a34 <degreesToRadians+0x2c>
 8001a22:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001a26:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	3c8efa35 	.word	0x3c8efa35

08001a38 <gyroSetTargetLooptime>:
static float accumulatedMeasurements[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static float gyroPrevious[XYZ_AXIS_COUNT] = { 0.0f, 0.0f, 0.0f };
static int accumulatedMeasurementCount = 0;

static void gyroSetTargetLooptime(uint8_t pidDenom)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
    activePidLoopDenom = pidDenom;
 8001a42:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <gyroSetTargetLooptime+0x90>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	7013      	strb	r3, [r2, #0]
    if (gyro.sampleRateHz) {
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <gyroSetTargetLooptime+0x94>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d028      	beq.n	8001aa2 <gyroSetTargetLooptime+0x6a>
        gyro.sampleLooptime = 1e6 / gyro.sampleRateHz;
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <gyroSetTargetLooptime+0x94>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	ee07 3a90 	vmov	s15, r3
 8001a58:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a5c:	ed9f 5b18 	vldr	d5, [pc, #96]	; 8001ac0 <gyroSetTargetLooptime+0x88>
 8001a60:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a68:	ee17 2a90 	vmov	r2, s15
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <gyroSetTargetLooptime+0x94>)
 8001a6e:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = activePidLoopDenom * 1e6 / gyro.sampleRateHz;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <gyroSetTargetLooptime+0x90>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001a7c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001ac0 <gyroSetTargetLooptime+0x88>
 8001a80:	ee27 5b06 	vmul.f64	d5, d7, d6
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <gyroSetTargetLooptime+0x94>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001a94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001a98:	ee17 2a90 	vmov	r2, s15
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <gyroSetTargetLooptime+0x94>)
 8001a9e:	605a      	str	r2, [r3, #4]
    } else {
        gyro.sampleLooptime = 0;
        gyro.targetLooptime = 0;
    }
}
 8001aa0:	e005      	b.n	8001aae <gyroSetTargetLooptime+0x76>
        gyro.sampleLooptime = 0;
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <gyroSetTargetLooptime+0x94>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
        gyro.targetLooptime = 0;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <gyroSetTargetLooptime+0x94>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	f3af 8000 	nop.w
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	412e8480 	.word	0x412e8480
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000634 	.word	0x20000634

08001ad0 <gyroSetSampleRate>:

static uint16_t gyroSetSampleRate(gyroDev_t *gyro) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	gyro->gyroRateKHz = GYRO_RATE_6664_Hz;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2204      	movs	r2, #4
 8001adc:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
	uint16_t gyroSampleRateHz = 6664;
 8001ae0:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001ae4:	81fb      	strh	r3, [r7, #14]
	uint16_t accSampleRateHz = 6664;
 8001ae6:	f641 2308 	movw	r3, #6664	; 0x1a08
 8001aea:	81bb      	strh	r3, [r7, #12]

	gyro->mpuDividerDrops  = 0; // we no longer use the gyro's sample divider
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	gyro->accSampleRateHz = accSampleRateHz;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	89ba      	ldrh	r2, [r7, #12]
 8001af8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	return gyroSampleRateHz;
 8001afc:	89fb      	ldrh	r3, [r7, #14]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <gyroInitSlewLimiter>:

static void gyroInitSlewLimiter(gyroSensor_t *gyroSensor) {
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e009      	b.n	8001b2c <gyroInitSlewLimiter+0x22>
        gyroSensor->gyroDev.gyroADCRawPrevious[axis] = 0;
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	332a      	adds	r3, #42	; 0x2a
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	2200      	movs	r2, #0
 8001b24:	605a      	str	r2, [r3, #4]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	ddf2      	ble.n	8001b18 <gyroInitSlewLimiter+0xe>
    }
}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <gyroInitSensorFilters>:

static void gyroInitSensorFilters(gyroSensor_t *gyroSensor)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    gyroInitSlewLimiter(gyroSensor);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ffde 	bl	8001b0a <gyroInitSlewLimiter>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <gyroInitSensor>:

static void gyroInitSensor(gyroSensor_t *gyroSensor)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
    gyroSensor->gyroDev.gyro_high_fsr = true;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
    gyroSensor->gyroDev.gyroAlign = CW90_DEG;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
    sensorAlignment_t customAlignment;
    buildAlignmentFromStandardAlignment(&customAlignment, gyroSensor->gyroDev.gyroAlign);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fec2 	bl	8005904 <buildAlignmentFromStandardAlignment>
    buildRotationMatrixFromAlignment(&customAlignment, &gyroSensor->gyroDev.rotationMatrix);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fe75 	bl	800587c <buildRotationMatrixFromAlignment>
    gyroSensor->gyroDev.mpuIntExtiTag = 0U;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
    gyroSensor->gyroDev.hardware_lpf = 0U;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

    // The targetLooptime gets set later based on the active sensor's gyroSampleRateHz and pid_process_denom
    gyroSensor->gyroDev.gyroSampleRateHz = gyroSetSampleRate(&gyroSensor->gyroDev);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff93 	bl	8001ad0 <gyroSetSampleRate>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461a      	mov	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
    gyroSensor->gyroDev.initFn(&gyroSensor->gyroDev);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4798      	blx	r3

    // As new gyros are supported, be sure to add them below based on whether they are subject to the overflow/inversion bug
    // Any gyro not explicitly defined will default to not having built-in overflow protection as a safe alternative.
    gyroSensor->gyroDev.gyroHasOverflowProtection = false;  // default catch for newly added gyros until proven to be unaffected
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb

    gyroInitSensorFilters(gyroSensor);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffba 	bl	8001b40 <gyroInitSensorFilters>
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <calculateNyquistAdjustedNotchHz>:
    FILTER_LPF1 = 0,
    FILTER_LPF2
};

static uint16_t calculateNyquistAdjustedNotchHz(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460a      	mov	r2, r1
 8001bde:	80fb      	strh	r3, [r7, #6]
 8001be0:	4613      	mov	r3, r2
 8001be2:	80bb      	strh	r3, [r7, #4]
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / gyro.targetLooptime;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <calculateNyquistAdjustedNotchHz+0x44>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <calculateNyquistAdjustedNotchHz+0x48>)
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
    if (notchHz > gyroFrequencyNyquist) {
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d208      	bcs.n	8001c0a <calculateNyquistAdjustedNotchHz+0x36>
        if (notchCutoffHz < gyroFrequencyNyquist) {
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d902      	bls.n	8001c06 <calculateNyquistAdjustedNotchHz+0x32>
            notchHz = gyroFrequencyNyquist;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	80fb      	strh	r3, [r7, #6]
 8001c04:	e001      	b.n	8001c0a <calculateNyquistAdjustedNotchHz+0x36>
        } else {
            notchHz = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	80fb      	strh	r3, [r7, #6]
        }
    }

    return notchHz;
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	20000634 	.word	0x20000634
 8001c1c:	0007a120 	.word	0x0007a120

08001c20 <gyroInitLowpassFilterLpf>:

static bool gyroInitLowpassFilterLpf(int slot, int type, uint16_t lpfHz, uint32_t looptime)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	; 0x38
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	80fb      	strh	r3, [r7, #6]
    filterApplyFnPtr *lowpassFilterApplyFn;
    gyroLowpassFilter_t *lowpassFilter = NULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30

    switch (slot) {
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <gyroInitLowpassFilterLpf+0x22>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d005      	beq.n	8001c4c <gyroInitLowpassFilterLpf+0x2c>
 8001c40:	e009      	b.n	8001c56 <gyroInitLowpassFilterLpf+0x36>
    case FILTER_LPF1:
        lowpassFilterApplyFn = &gyro.lowpassFilterApplyFn;
 8001c42:	4b65      	ldr	r3, [pc, #404]	; (8001dd8 <gyroInitLowpassFilterLpf+0x1b8>)
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpassFilter;
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <gyroInitLowpassFilterLpf+0x1bc>)
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8001c4a:	e006      	b.n	8001c5a <gyroInitLowpassFilterLpf+0x3a>

    case FILTER_LPF2:
        lowpassFilterApplyFn = &gyro.lowpass2FilterApplyFn;
 8001c4c:	4b64      	ldr	r3, [pc, #400]	; (8001de0 <gyroInitLowpassFilterLpf+0x1c0>)
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
        lowpassFilter = gyro.lowpass2Filter;
 8001c50:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <gyroInitLowpassFilterLpf+0x1c4>)
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8001c54:	e001      	b.n	8001c5a <gyroInitLowpassFilterLpf+0x3a>

    default:
        return false;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e0b9      	b.n	8001dce <gyroInitLowpassFilterLpf+0x1ae>
    }

    bool ret = false;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Establish some common constants
    const uint32_t gyroFrequencyNyquist = 1000000 / 2 / looptime;
 8001c60:	4a61      	ldr	r2, [pc, #388]	; (8001de8 <gyroInitLowpassFilterLpf+0x1c8>)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	61bb      	str	r3, [r7, #24]
    const float gyroDt = looptime * 1e-6f;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c74:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001dec <gyroInitLowpassFilterLpf+0x1cc>
 8001c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7c:	edc7 7a05 	vstr	s15, [r7, #20]

    // Gain could be calculated a little later as it is specific to the pt1/bqrcf2/fkf branches
    const float gain = pt1FilterGain(lpfHz, gyroDt);
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8a:	edd7 0a05 	vldr	s1, [r7, #20]
 8001c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c92:	f7ff f879 	bl	8000d88 <pt1FilterGain>
 8001c96:	ed87 0a04 	vstr	s0, [r7, #16]

    // Dereference the pointer to null before checking valid cutoff and filter
    // type. It will be overridden for positive cases.
    *lowpassFilterApplyFn = nullFilterApply;
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	4a54      	ldr	r2, [pc, #336]	; (8001df0 <gyroInitLowpassFilterLpf+0x1d0>)
 8001c9e:	601a      	str	r2, [r3, #0]

    // If lowpass cutoff has been specified
    if (lpfHz) {
 8001ca0:	88fb      	ldrh	r3, [r7, #6]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 808e 	beq.w	8001dc4 <gyroInitLowpassFilterLpf+0x1a4>
        switch (type) {
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	f200 808d 	bhi.w	8001dca <gyroInitLowpassFilterLpf+0x1aa>
 8001cb0:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <gyroInitLowpassFilterLpf+0x98>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001cc9 	.word	0x08001cc9
 8001cbc:	08001d03 	.word	0x08001d03
 8001cc0:	08001d51 	.word	0x08001d51
 8001cc4:	08001d8b 	.word	0x08001d8b
        case FILTER_PT1:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt1FilterApply;
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	4a4a      	ldr	r2, [pc, #296]	; (8001df4 <gyroInitLowpassFilterLpf+0x1d4>)
 8001ccc:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd2:	e00f      	b.n	8001cf4 <gyroInitLowpassFilterLpf+0xd4>
                pt1FilterInit(&lowpassFilter[axis].pt1FilterState, gain);
 8001cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce2:	4413      	add	r3, r2
 8001ce4:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff f875 	bl	8000dd8 <pt1FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	ddec      	ble.n	8001cd4 <gyroInitLowpassFilterLpf+0xb4>
            }
            ret = true;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001d00:	e063      	b.n	8001dca <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_BIQUAD:
            if (lpfHz <= gyroFrequencyNyquist) {
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d35e      	bcc.n	8001dc8 <gyroInitLowpassFilterLpf+0x1a8>
                *lowpassFilterApplyFn = (filterApplyFnPtr) biquadFilterApply;
 8001d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <gyroInitLowpassFilterLpf+0x1d8>)
 8001d0e:	601a      	str	r2, [r3, #0]
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
 8001d14:	e015      	b.n	8001d42 <gyroInitLowpassFilterLpf+0x122>
                    biquadFilterInitLPF(&lowpassFilter[axis].biquadFilterState, lpfHz, looptime);
 8001d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	461a      	mov	r2, r3
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	4413      	add	r3, r2
 8001d26:	88fa      	ldrh	r2, [r7, #6]
 8001d28:	ee07 2a90 	vmov	s15, r2
 8001d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	eeb0 0a67 	vmov.f32	s0, s15
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f8b4 	bl	8000ea4 <biquadFilterInitLPF>
                for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	3301      	adds	r3, #1
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	dde6      	ble.n	8001d16 <gyroInitLowpassFilterLpf+0xf6>
                }
                ret = true;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            break;
 8001d4e:	e03b      	b.n	8001dc8 <gyroInitLowpassFilterLpf+0x1a8>
        case FILTER_PT2:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt2FilterApply;
 8001d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d52:	4a2a      	ldr	r2, [pc, #168]	; (8001dfc <gyroInitLowpassFilterLpf+0x1dc>)
 8001d54:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
 8001d5a:	e00f      	b.n	8001d7c <gyroInitLowpassFilterLpf+0x15c>
                pt2FilterInit(&lowpassFilter[axis].pt2FilterState, gain);
 8001d5c:	6a3a      	ldr	r2, [r7, #32]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	461a      	mov	r2, r3
 8001d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6a:	4413      	add	r3, r2
 8001d6c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fa37 	bl	80011e4 <pt2FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	ddec      	ble.n	8001d5c <gyroInitLowpassFilterLpf+0x13c>
            }
            ret = true;
 8001d82:	2301      	movs	r3, #1
 8001d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001d88:	e01f      	b.n	8001dca <gyroInitLowpassFilterLpf+0x1aa>
        case FILTER_PT3:
            *lowpassFilterApplyFn = (filterApplyFnPtr) pt3FilterApply;
 8001d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <gyroInitLowpassFilterLpf+0x1e0>)
 8001d8e:	601a      	str	r2, [r3, #0]
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	e00f      	b.n	8001db6 <gyroInitLowpassFilterLpf+0x196>
                pt3FilterInit(&lowpassFilter[axis].pt3FilterState, gain);
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	461a      	mov	r2, r3
 8001da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da4:	4413      	add	r3, r2
 8001da6:	ed97 0a04 	vldr	s0, [r7, #16]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff faba 	bl	8001324 <pt3FilterInit>
            for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	3301      	adds	r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	ddec      	ble.n	8001d96 <gyroInitLowpassFilterLpf+0x176>
            }
            ret = true;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 8001dc2:	e002      	b.n	8001dca <gyroInitLowpassFilterLpf+0x1aa>
        }
    }
 8001dc4:	bf00      	nop
 8001dc6:	e000      	b.n	8001dca <gyroInitLowpassFilterLpf+0x1aa>
            break;
 8001dc8:	bf00      	nop
    return ret;
 8001dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3738      	adds	r7, #56	; 0x38
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200007bc 	.word	0x200007bc
 8001ddc:	200007c0 	.word	0x200007c0
 8001de0:	20000838 	.word	0x20000838
 8001de4:	2000083c 	.word	0x2000083c
 8001de8:	0007a120 	.word	0x0007a120
 8001dec:	358637bd 	.word	0x358637bd
 8001df0:	08000d69 	.word	0x08000d69
 8001df4:	08000dff 	.word	0x08000dff
 8001df8:	08000ed5 	.word	0x08000ed5
 8001dfc:	08001213 	.word	0x08001213
 8001e00:	0800135b 	.word	0x0800135b

08001e04 <gyroInitFilterNotch1>:

static void gyroInitFilterNotch1(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	80fb      	strh	r3, [r7, #6]
 8001e10:	4613      	mov	r3, r2
 8001e12:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter1ApplyFn = nullFilterApply;
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <gyroInitFilterNotch1+0xb0>)
 8001e16:	4a28      	ldr	r2, [pc, #160]	; (8001eb8 <gyroInitFilterNotch1+0xb4>)
 8001e18:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8001e1c:	88ba      	ldrh	r2, [r7, #4]
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fed6 	bl	8001bd4 <calculateNyquistAdjustedNotchHz>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d03c      	beq.n	8001eac <gyroInitFilterNotch1+0xa8>
 8001e32:	88bb      	ldrh	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d039      	beq.n	8001eac <gyroInitFilterNotch1+0xa8>
        gyro.notchFilter1ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <gyroInitFilterNotch1+0xb0>)
 8001e3a:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <gyroInitFilterNotch1+0xb8>)
 8001e3c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4a:	88bb      	ldrh	r3, [r7, #4]
 8001e4c:	ee07 3a10 	vmov	s14, r3
 8001e50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001e54:	eef0 0a47 	vmov.f32	s1, s14
 8001e58:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5c:	f7fe ff62 	bl	8000d24 <filterGetNotchQ>
 8001e60:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001e64:	2300      	movs	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e01d      	b.n	8001ea6 <gyroInitFilterNotch1+0xa2>
            biquadFilterInit(&gyro.notchFilter1[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <gyroInitFilterNotch1+0xb0>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	ee07 2a90 	vmov	s15, r2
 8001e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <gyroInitFilterNotch1+0xb0>)
 8001e8a:	6851      	ldr	r1, [r2, #4]
 8001e8c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001e90:	2201      	movs	r2, #1
 8001e92:	edd7 0a02 	vldr	s1, [r7, #8]
 8001e96:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe ffd4 	bl	8000e48 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	ddde      	ble.n	8001e6a <gyroInitFilterNotch1+0x66>
        }
    }
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000634 	.word	0x20000634
 8001eb8:	08000d69 	.word	0x08000d69
 8001ebc:	08000ed5 	.word	0x08000ed5

08001ec0 <gyroInitFilterNotch2>:

static void gyroInitFilterNotch2(uint16_t notchHz, uint16_t notchCutoffHz)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460a      	mov	r2, r1
 8001eca:	80fb      	strh	r3, [r7, #6]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	80bb      	strh	r3, [r7, #4]
    gyro.notchFilter2ApplyFn = nullFilterApply;
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <gyroInitFilterNotch2+0xb0>)
 8001ed2:	4a28      	ldr	r2, [pc, #160]	; (8001f74 <gyroInitFilterNotch2+0xb4>)
 8001ed4:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

    notchHz = calculateNyquistAdjustedNotchHz(notchHz, notchCutoffHz);
 8001ed8:	88ba      	ldrh	r2, [r7, #4]
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fe78 	bl	8001bd4 <calculateNyquistAdjustedNotchHz>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	80fb      	strh	r3, [r7, #6]

    if (notchHz != 0 && notchCutoffHz != 0) {
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03b      	beq.n	8001f66 <gyroInitFilterNotch2+0xa6>
 8001eee:	88bb      	ldrh	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d038      	beq.n	8001f66 <gyroInitFilterNotch2+0xa6>
        gyro.notchFilter2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <gyroInitFilterNotch2+0xb0>)
 8001ef6:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <gyroInitFilterNotch2+0xb8>)
 8001ef8:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
        const float notchQ = filterGetNotchQ(notchHz, notchCutoffHz);
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f06:	88bb      	ldrh	r3, [r7, #4]
 8001f08:	ee07 3a10 	vmov	s14, r3
 8001f0c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001f10:	eef0 0a47 	vmov.f32	s1, s14
 8001f14:	eeb0 0a67 	vmov.f32	s0, s15
 8001f18:	f7fe ff04 	bl	8000d24 <filterGetNotchQ>
 8001f1c:	ed87 0a02 	vstr	s0, [r7, #8]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	e01c      	b.n	8001f60 <gyroInitFilterNotch2+0xa0>
            biquadFilterInit(&gyro.notchFilter2[axis], notchHz, gyro.targetLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f34:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <gyroInitFilterNotch2+0xb0>)
 8001f36:	4413      	add	r3, r2
 8001f38:	88fa      	ldrh	r2, [r7, #6]
 8001f3a:	ee07 2a90 	vmov	s15, r2
 8001f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <gyroInitFilterNotch2+0xb0>)
 8001f44:	6851      	ldr	r1, [r2, #4]
 8001f46:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	edd7 0a02 	vldr	s1, [r7, #8]
 8001f50:	eeb0 0a67 	vmov.f32	s0, s15
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe ff77 	bl	8000e48 <biquadFilterInit>
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	dddf      	ble.n	8001f26 <gyroInitFilterNotch2+0x66>
        }
    }
}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000634 	.word	0x20000634
 8001f74:	08000d69 	.word	0x08000d69
 8001f78:	08000ed5 	.word	0x08000ed5

08001f7c <gyroInitFilters>:

static void gyroInitFilters(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
    gyroInitLowpassFilterLpf(
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <gyroInitFilters+0x44>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7ff fe48 	bl	8001c20 <gyroInitLowpassFilterLpf>
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.targetLooptime
    );

    gyro.downsampleFilterEnabled = gyroInitLowpassFilterLpf(
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <gyroInitFilters+0x44>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7ff fe40 	bl	8001c20 <gyroInitLowpassFilterLpf>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <gyroInitFilters+0x44>)
 8001fa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  FILTER_PT1,
	  LPF_MAX_HZ,
      gyro.sampleLooptime
    );

    gyroInitFilterNotch1(0, 0);
 8001faa:	2100      	movs	r1, #0
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff ff29 	bl	8001e04 <gyroInitFilterNotch1>
    gyroInitFilterNotch2(0, 0);
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7ff ff83 	bl	8001ec0 <gyroInitFilterNotch2>
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000634 	.word	0x20000634

08001fc4 <gyroInit>:

#define PID_PROCESS_DENOM_DEFAULT       1

void gyroInit(sensorGyroInitFuncPtr initFn, sensorGyroReadFuncPtr readFn)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
    gyro.gyroDebugMode = DEBUG_NONE;
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <gyroInit+0xb0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 237b 	strb.w	r2, [r3, #891]	; 0x37b
    gyro.useDualGyroDebugging = false;
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <gyroInit+0xb0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
    gyro.gyroHasOverflowProtection = false;
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <gyroInit+0xb0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
    gyro.gyroToUse = GYRO_CONFIG_USE_GYRO_1;
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <gyroInit+0xb0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 237a 	strb.w	r2, [r3, #890]	; 0x37a
    gyro.gyroDebugAxis = FD_ROLL;
 8001fee:	4b21      	ldr	r3, [pc, #132]	; (8002074 <gyroInit+0xb0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

	gyro.gyroSensor1.gyroDev.initFn = initFn;
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <gyroInit+0xb0>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	63d3      	str	r3, [r2, #60]	; 0x3c
	gyro.gyroSensor1.gyroDev.readFn = readFn;
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <gyroInit+0xb0>)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
    static uint8_t gyroBuf1[GYRO_BUF_SIZE];
    // SPI DMA buffer required per device
    gyro.gyroSensor1.gyroDev.dev.txBuf = gyroBuf1;
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <gyroInit+0xb0>)
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <gyroInit+0xb4>)
 8002006:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    gyro.gyroSensor1.gyroDev.dev.rxBuf = &gyroBuf1[GYRO_BUF_SIZE / 2];
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <gyroInit+0xb0>)
 800200c:	4a1b      	ldr	r2, [pc, #108]	; (800207c <gyroInit+0xb8>)
 800200e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    gyroInitSensor(&gyro.gyroSensor1);
 8002012:	481b      	ldr	r0, [pc, #108]	; (8002080 <gyroInit+0xbc>)
 8002014:	f7ff fd9f 	bl	8001b56 <gyroInitSensor>

    // Copy the sensor's scale to the high-level gyro object. If running in "BOTH" mode
    // then logic above requires both sensors to be the same so we'll use sensor1's scale.
    // This will need to be revised if we ever allow different sensor types to be used simultaneously.
    // Likewise determine the appropriate raw data for use in DEBUG_GYRO_RAW
    gyro.scale = gyro.gyroSensor1.gyroDev.scale;
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <gyroInit+0xb0>)
 800201a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <gyroInit+0xb0>)
 8002020:	60d3      	str	r3, [r2, #12]
    gyro.rawSensorDev = &gyro.gyroSensor1.gyroDev;
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <gyroInit+0xb0>)
 8002024:	4a16      	ldr	r2, [pc, #88]	; (8002080 <gyroInit+0xbc>)
 8002026:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    if (gyro.rawSensorDev) {
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <gyroInit+0xb0>)
 800202c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00f      	beq.n	8002054 <gyroInit+0x90>
        gyro.sampleRateHz = gyro.rawSensorDev->gyroSampleRateHz;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <gyroInit+0xb0>)
 8002036:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800203a:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <gyroInit+0xb0>)
 8002040:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = gyro.rawSensorDev->accSampleRateHz;
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <gyroInit+0xb0>)
 8002044:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002048:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	; 0xf6
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <gyroInit+0xb0>)
 800204e:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
 8002052:	e006      	b.n	8002062 <gyroInit+0x9e>
    } else {
        gyro.sampleRateHz = 0;
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <gyroInit+0xb0>)
 8002056:	2200      	movs	r2, #0
 8002058:	801a      	strh	r2, [r3, #0]
        gyro.accSampleRateHz = 0;
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <gyroInit+0xb0>)
 800205c:	2200      	movs	r2, #0
 800205e:	f8a3 2378 	strh.w	r2, [r3, #888]	; 0x378
    }

	gyroSetTargetLooptime(PID_PROCESS_DENOM_DEFAULT);
 8002062:	2001      	movs	r0, #1
 8002064:	f7ff fce8 	bl	8001a38 <gyroSetTargetLooptime>
	gyroInitFilters();
 8002068:	f7ff ff88 	bl	8001f7c <gyroInitFilters>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000634 	.word	0x20000634
 8002078:	200009d0 	.word	0x200009d0
 800207c:	200009e0 	.word	0x200009e0
 8002080:	20000670 	.word	0x20000670

08002084 <gyroUpdateSensor>:

static void gyroUpdateSensor(gyroSensor_t *gyroSensor)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    if (!gyroSensor->gyroDev.readFn(&gyroSensor->gyroDev)) {
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4610      	mov	r0, r2
 8002094:	4798      	blx	r3
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d02f      	beq.n	80020fc <gyroUpdateSensor+0x78>
        return;
    }
    gyroSensor->gyroDev.dataReady = false;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    // move 16-bit gyro data into 32-bit variables to avoid overflows in calculations
    gyroSensor->gyroDev.gyroADC[X] = gyroSensor->gyroDev.gyroADC[X] - gyroSensor->gyroDev.gyroZero[X];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 80020b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
    gyroSensor->gyroDev.gyroADC[Y] = gyroSensor->gyroDev.gyroADC[Y] - gyroSensor->gyroDev.gyroZero[Y];
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 80020c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    gyroSensor->gyroDev.gyroADC[Z] = gyroSensor->gyroDev.gyroADC[Z] - gyroSensor->gyroDev.gyroZero[Z];
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80020dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
    alignSensorViaRotation(gyroSensor->gyroDev.gyroADC, gyroSensor->gyroDev.gyroAlign);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 80020f2:	4619      	mov	r1, r3
 80020f4:	4610      	mov	r0, r2
 80020f6:	f003 fc53 	bl	80059a0 <alignSensorViaRotation>
 80020fa:	e000      	b.n	80020fe <gyroUpdateSensor+0x7a>
        return;
 80020fc:	bf00      	nop
}
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <gyroFilter>:


static void gyroFilter(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	e074      	b.n	80021fa <gyroFilter+0xf6>
        // downsample the individual gyro samples
        float gyroADCf = 0;
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
        if (gyro.downsampleFilterEnabled) {
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <gyroFilter+0x10c>)
 8002118:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <gyroFilter+0x2e>
            // using gyro lowpass 2 filter for downsampling
            gyroADCf = gyro.sampleSum[axis];
 8002120:	4a3b      	ldr	r2, [pc, #236]	; (8002210 <gyroFilter+0x10c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	330a      	adds	r3, #10
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3304      	adds	r3, #4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	e020      	b.n	8002174 <gyroFilter+0x70>
        } else {
            // using simple average for downsampling
            if (gyro.sampleCount) {
 8002132:	4b37      	ldr	r3, [pc, #220]	; (8002210 <gyroFilter+0x10c>)
 8002134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	d012      	beq.n	8002162 <gyroFilter+0x5e>
                gyroADCf = gyro.sampleSum[axis] / gyro.sampleCount;
 800213c:	4a34      	ldr	r2, [pc, #208]	; (8002210 <gyroFilter+0x10c>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	330a      	adds	r3, #10
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	3304      	adds	r3, #4
 8002148:	edd3 6a00 	vldr	s13, [r3]
 800214c:	4b30      	ldr	r3, [pc, #192]	; (8002210 <gyroFilter+0x10c>)
 800214e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800215a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800215e:	edc7 7a00 	vstr	s15, [r7]
            }
            gyro.sampleSum[axis] = 0;
 8002162:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <gyroFilter+0x10c>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	330a      	adds	r3, #10
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	3304      	adds	r3, #4
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
        }

        // apply static notch filters and software lowpass filters
        gyroADCf = gyro.notchFilter1ApplyFn((filter_t *)&gyro.notchFilter1[axis], gyroADCf);
 8002174:	4b26      	ldr	r3, [pc, #152]	; (8002210 <gyroFilter+0x10c>)
 8002176:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002188:	4a21      	ldr	r2, [pc, #132]	; (8002210 <gyroFilter+0x10c>)
 800218a:	4413      	add	r3, r2
 800218c:	3304      	adds	r3, #4
 800218e:	ed97 0a00 	vldr	s0, [r7]
 8002192:	4618      	mov	r0, r3
 8002194:	4788      	blx	r1
 8002196:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.notchFilter2ApplyFn((filter_t *)&gyro.notchFilter2[axis], gyroADCf);
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <gyroFilter+0x10c>)
 800219c:	f8d3 12fc 	ldr.w	r1, [r3, #764]	; 0x2fc
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <gyroFilter+0x10c>)
 80021b0:	4413      	add	r3, r2
 80021b2:	ed97 0a00 	vldr	s0, [r7]
 80021b6:	4618      	mov	r0, r3
 80021b8:	4788      	blx	r1
 80021ba:	ed87 0a00 	vstr	s0, [r7]
        gyroADCf = gyro.lowpassFilterApplyFn((filter_t *)&gyro.lowpassFilter[axis], gyroADCf);
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <gyroFilter+0x10c>)
 80021c0:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80021d2:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <gyroFilter+0x10c>)
 80021d4:	4413      	add	r3, r2
 80021d6:	3304      	adds	r3, #4
 80021d8:	ed97 0a00 	vldr	s0, [r7]
 80021dc:	4618      	mov	r0, r3
 80021de:	4788      	blx	r1
 80021e0:	ed87 0a00 	vstr	s0, [r7]


        gyro.gyroADCf[axis] = gyroADCf;
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <gyroFilter+0x10c>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3306      	adds	r3, #6
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3301      	adds	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	dd87      	ble.n	8002110 <gyroFilter+0xc>
    }
    gyro.sampleCount = 0;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <gyroFilter+0x10c>)
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000634 	.word	0x20000634

08002214 <gyroAccumulateMeasurements>:

static void gyroAccumulateMeasurements(void) {
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	e038      	b.n	8002292 <gyroAccumulateMeasurements+0x7e>
        // integrate using trapezium rule to avoid bias
        accumulatedMeasurements[axis] += 0.5f * (gyroPrevious[axis] + gyro.gyroADCf[axis]) * gyro.targetLooptime;
 8002220:	4a23      	ldr	r2, [pc, #140]	; (80022b0 <gyroAccumulateMeasurements+0x9c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	ed93 7a00 	vldr	s14, [r3]
 800222c:	4a21      	ldr	r2, [pc, #132]	; (80022b4 <gyroAccumulateMeasurements+0xa0>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	edd3 6a00 	vldr	s13, [r3]
 8002238:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <gyroAccumulateMeasurements+0xa4>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3306      	adds	r3, #6
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3304      	adds	r3, #4
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800224c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002250:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002254:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <gyroAccumulateMeasurements+0xa4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	ee07 3a90 	vmov	s15, r3
 800225c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <gyroAccumulateMeasurements+0x9c>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	edc3 7a00 	vstr	s15, [r3]
        gyroPrevious[axis] = gyro.gyroADCf[axis];
 8002274:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <gyroAccumulateMeasurements+0xa4>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3306      	adds	r3, #6
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	3304      	adds	r3, #4
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	490c      	ldr	r1, [pc, #48]	; (80022b4 <gyroAccumulateMeasurements+0xa0>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3301      	adds	r3, #1
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b02      	cmp	r3, #2
 8002296:	ddc3      	ble.n	8002220 <gyroAccumulateMeasurements+0xc>
    }
    accumulatedMeasurementCount++;
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <gyroAccumulateMeasurements+0xa8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	4a07      	ldr	r2, [pc, #28]	; (80022bc <gyroAccumulateMeasurements+0xa8>)
 80022a0:	6013      	str	r3, [r2, #0]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200009b4 	.word	0x200009b4
 80022b4:	200009c0 	.word	0x200009c0
 80022b8:	20000634 	.word	0x20000634
 80022bc:	200009cc 	.word	0x200009cc

080022c0 <gyroUpdate>:

void gyroUpdate(void) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	gyroUpdateSensor(&gyro.gyroSensor1);
 80022c4:	4842      	ldr	r0, [pc, #264]	; (80023d0 <gyroUpdate+0x110>)
 80022c6:	f7ff fedd 	bl	8002084 <gyroUpdateSensor>

	gyro.gyroADC[X] = gyro.gyroSensor1.gyroDev.gyroADC[X] * gyro.gyroSensor1.gyroDev.scale;
 80022ca:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <gyroUpdate+0x114>)
 80022cc:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 80022d0:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <gyroUpdate+0x114>)
 80022d2:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80022d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022da:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <gyroUpdate+0x114>)
 80022dc:	edc3 7a04 	vstr	s15, [r3, #16]
	gyro.gyroADC[Y] = gyro.gyroSensor1.gyroDev.gyroADC[Y] * gyro.gyroSensor1.gyroDev.scale;
 80022e0:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <gyroUpdate+0x114>)
 80022e2:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <gyroUpdate+0x114>)
 80022e8:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <gyroUpdate+0x114>)
 80022f2:	edc3 7a05 	vstr	s15, [r3, #20]
	gyro.gyroADC[Z] = gyro.gyroSensor1.gyroDev.gyroADC[Z] * gyro.gyroSensor1.gyroDev.scale;
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <gyroUpdate+0x114>)
 80022f8:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 80022fc:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <gyroUpdate+0x114>)
 80022fe:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8002302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002306:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <gyroUpdate+0x114>)
 8002308:	edc3 7a06 	vstr	s15, [r3, #24]

    if (gyro.downsampleFilterEnabled) {
 800230c:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <gyroUpdate+0x114>)
 800230e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002312:	2b00      	cmp	r3, #0
 8002314:	d02d      	beq.n	8002372 <gyroUpdate+0xb2>
        // using gyro lowpass 2 filter for downsampling
        gyro.sampleSum[X] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[X], gyro.gyroADC[X]);
 8002316:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <gyroUpdate+0x114>)
 8002318:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800231c:	4a2d      	ldr	r2, [pc, #180]	; (80023d4 <gyroUpdate+0x114>)
 800231e:	edd2 7a04 	vldr	s15, [r2, #16]
 8002322:	eeb0 0a67 	vmov.f32	s0, s15
 8002326:	482c      	ldr	r0, [pc, #176]	; (80023d8 <gyroUpdate+0x118>)
 8002328:	4798      	blx	r3
 800232a:	eef0 7a40 	vmov.f32	s15, s0
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <gyroUpdate+0x114>)
 8002330:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Y], gyro.gyroADC[Y]);
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <gyroUpdate+0x114>)
 8002336:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800233a:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <gyroUpdate+0x114>)
 800233c:	edd2 7a05 	vldr	s15, [r2, #20]
 8002340:	eeb0 0a67 	vmov.f32	s0, s15
 8002344:	4825      	ldr	r0, [pc, #148]	; (80023dc <gyroUpdate+0x11c>)
 8002346:	4798      	blx	r3
 8002348:	eef0 7a40 	vmov.f32	s15, s0
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <gyroUpdate+0x114>)
 800234e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] = gyro.lowpass2FilterApplyFn((filter_t *)&gyro.lowpass2Filter[Z], gyro.gyroADC[Z]);
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <gyroUpdate+0x114>)
 8002354:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002358:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <gyroUpdate+0x114>)
 800235a:	edd2 7a06 	vldr	s15, [r2, #24]
 800235e:	eeb0 0a67 	vmov.f32	s0, s15
 8002362:	481f      	ldr	r0, [pc, #124]	; (80023e0 <gyroUpdate+0x120>)
 8002364:	4798      	blx	r3
 8002366:	eef0 7a40 	vmov.f32	s15, s0
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <gyroUpdate+0x114>)
 800236c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8002370:	e028      	b.n	80023c4 <gyroUpdate+0x104>
    } else {
        // using simple averaging for downsampling
        gyro.sampleSum[X] += gyro.gyroADC[X];
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <gyroUpdate+0x114>)
 8002374:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <gyroUpdate+0x114>)
 800237a:	edd3 7a04 	vldr	s15, [r3, #16]
 800237e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <gyroUpdate+0x114>)
 8002384:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        gyro.sampleSum[Y] += gyro.gyroADC[Y];
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <gyroUpdate+0x114>)
 800238a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <gyroUpdate+0x114>)
 8002390:	edd3 7a05 	vldr	s15, [r3, #20]
 8002394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <gyroUpdate+0x114>)
 800239a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        gyro.sampleSum[Z] += gyro.gyroADC[Z];
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <gyroUpdate+0x114>)
 80023a0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <gyroUpdate+0x114>)
 80023a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80023aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <gyroUpdate+0x114>)
 80023b0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        gyro.sampleCount++;
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <gyroUpdate+0x114>)
 80023b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023ba:	3301      	adds	r3, #1
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <gyroUpdate+0x114>)
 80023c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    gyroFilter();
 80023c4:	f7ff fe9e 	bl	8002104 <gyroFilter>
	gyroAccumulateMeasurements();
 80023c8:	f7ff ff24 	bl	8002214 <gyroAccumulateMeasurements>
}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000670 	.word	0x20000670
 80023d4:	20000634 	.word	0x20000634
 80023d8:	2000083c 	.word	0x2000083c
 80023dc:	20000864 	.word	0x20000864
 80023e0:	2000088c 	.word	0x2000088c

080023e4 <gyroGetAccumulationAverage>:

bool gyroGetAccumulationAverage(float *accumulationAverage)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    if (accumulatedMeasurementCount) {
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <gyroGetAccumulationAverage+0x9c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d02e      	beq.n	8002452 <gyroGetAccumulationAverage+0x6e>
        // If we have gyro data accumulated, calculate average rate that will yield the same rotation
        const timeUs_t accumulatedMeasurementTimeUs = accumulatedMeasurementCount * gyro.targetLooptime;
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <gyroGetAccumulationAverage+0xa0>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a21      	ldr	r2, [pc, #132]	; (8002480 <gyroGetAccumulationAverage+0x9c>)
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	fb02 f303 	mul.w	r3, r2, r3
 8002400:	60fb      	str	r3, [r7, #12]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e01c      	b.n	8002442 <gyroGetAccumulationAverage+0x5e>
            accumulationAverage[axis] = accumulatedMeasurements[axis] / accumulatedMeasurementTimeUs;
 8002408:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <gyroGetAccumulationAverage+0xa4>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	edd3 6a00 	vldr	s13, [r3]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	ee07 3a90 	vmov	s15, r3
 800241a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242a:	edc3 7a00 	vstr	s15, [r3]
            accumulatedMeasurements[axis] = 0.0f;
 800242e:	4a16      	ldr	r2, [pc, #88]	; (8002488 <gyroGetAccumulationAverage+0xa4>)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3301      	adds	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b02      	cmp	r3, #2
 8002446:	dddf      	ble.n	8002408 <gyroGetAccumulationAverage+0x24>
        }
        accumulatedMeasurementCount = 0;
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <gyroGetAccumulationAverage+0x9c>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
        return true;
 800244e:	2301      	movs	r3, #1
 8002450:	e010      	b.n	8002474 <gyroGetAccumulationAverage+0x90>
    } else {
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	e009      	b.n	800246c <gyroGetAccumulationAverage+0x88>
            accumulationAverage[axis] = 0.0f;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
        for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	3301      	adds	r3, #1
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b02      	cmp	r3, #2
 8002470:	ddf2      	ble.n	8002458 <gyroGetAccumulationAverage+0x74>
        }
        return false;
 8002472:	2300      	movs	r3, #0
    }
}
 8002474:	4618      	mov	r0, r3
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	200009cc 	.word	0x200009cc
 8002484:	20000634 	.word	0x20000634
 8002488:	200009b4 	.word	0x200009b4

0800248c <gyroOverflowDetected>:

bool gyroOverflowDetected(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
    return false;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <getCosTiltAngle>:
static int throttleAngleValue;
static float fc_acc;
static float smallAngleCosZ = 0;

static float getCosTiltAngle(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
    return rMat[2][2];
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <getCosTiltAngle+0x18>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	ee07 3a90 	vmov	s15, r3
}
 80024a8:	eeb0 0a67 	vmov.f32	s0, s15
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	20000a00 	.word	0x20000a00

080024b8 <imuQuaternionComputeProducts>:

static void imuQuaternionComputeProducts(quaternion *quat, quaternionProducts *quatProd)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
    quatProd->ww = quat->w * quat->w;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	ed93 7a00 	vldr	s14, [r3]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	edc3 7a00 	vstr	s15, [r3]
    quatProd->wx = quat->w * quat->x;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	ed93 7a00 	vldr	s14, [r3]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	edc3 7a01 	vstr	s15, [r3, #4]
    quatProd->wy = quat->w * quat->y;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80024fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	edc3 7a02 	vstr	s15, [r3, #8]
    quatProd->wz = quat->w * quat->z;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	ed93 7a00 	vldr	s14, [r3]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	edc3 7a03 	vstr	s15, [r3, #12]
    quatProd->xx = quat->x * quat->x;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	edd3 7a01 	vldr	s15, [r3, #4]
 8002526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	edc3 7a04 	vstr	s15, [r3, #16]
    quatProd->xy = quat->x * quat->y;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	ed93 7a01 	vldr	s14, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	edd3 7a02 	vldr	s15, [r3, #8]
 800253c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	edc3 7a05 	vstr	s15, [r3, #20]
    quatProd->xz = quat->x * quat->z;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	ed93 7a01 	vldr	s14, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	edc3 7a06 	vstr	s15, [r3, #24]
    quatProd->yy = quat->y * quat->y;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	edd3 7a02 	vldr	s15, [r3, #8]
 8002568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	edc3 7a07 	vstr	s15, [r3, #28]
    quatProd->yz = quat->y * quat->z;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	ed93 7a02 	vldr	s14, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	edd3 7a03 	vldr	s15, [r3, #12]
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	edc3 7a08 	vstr	s15, [r3, #32]
    quatProd->zz = quat->z * quat->z;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	ed93 7a03 	vldr	s14, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	edd3 7a03 	vldr	s15, [r3, #12]
 8002594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <imuComputeRotationMatrix>:

static void imuComputeRotationMatrix(void){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
    imuQuaternionComputeProducts(&q, &qP);
 80025b0:	4946      	ldr	r1, [pc, #280]	; (80026cc <imuComputeRotationMatrix+0x120>)
 80025b2:	4847      	ldr	r0, [pc, #284]	; (80026d0 <imuComputeRotationMatrix+0x124>)
 80025b4:	f7ff ff80 	bl	80024b8 <imuQuaternionComputeProducts>

    rMat[0][0] = 1.0f - 2.0f * qP.yy - 2.0f * qP.zz;
 80025b8:	4b44      	ldr	r3, [pc, #272]	; (80026cc <imuComputeRotationMatrix+0x120>)
 80025ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80025be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ca:	4b40      	ldr	r3, [pc, #256]	; (80026cc <imuComputeRotationMatrix+0x120>)
 80025cc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80025d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d8:	4b3e      	ldr	r3, [pc, #248]	; (80026d4 <imuComputeRotationMatrix+0x128>)
 80025da:	edc3 7a00 	vstr	s15, [r3]
    rMat[0][1] = 2.0f * (qP.xy + -qP.wz);
 80025de:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <imuComputeRotationMatrix+0x120>)
 80025e0:	ed93 7a05 	vldr	s14, [r3, #20]
 80025e4:	4b39      	ldr	r3, [pc, #228]	; (80026cc <imuComputeRotationMatrix+0x120>)
 80025e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80025ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80025f2:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <imuComputeRotationMatrix+0x128>)
 80025f4:	edc3 7a01 	vstr	s15, [r3, #4]
    rMat[0][2] = 2.0f * (qP.xz - -qP.wy);
 80025f8:	4b34      	ldr	r3, [pc, #208]	; (80026cc <imuComputeRotationMatrix+0x120>)
 80025fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80025fe:	4b33      	ldr	r3, [pc, #204]	; (80026cc <imuComputeRotationMatrix+0x120>)
 8002600:	edd3 7a02 	vldr	s15, [r3, #8]
 8002604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002608:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800260c:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <imuComputeRotationMatrix+0x128>)
 800260e:	edc3 7a02 	vstr	s15, [r3, #8]

    rMat[1][0] = 2.0f * (qP.xy - -qP.wz);
 8002612:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <imuComputeRotationMatrix+0x120>)
 8002614:	ed93 7a05 	vldr	s14, [r3, #20]
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <imuComputeRotationMatrix+0x120>)
 800261a:	edd3 7a03 	vldr	s15, [r3, #12]
 800261e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002622:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002626:	4b2b      	ldr	r3, [pc, #172]	; (80026d4 <imuComputeRotationMatrix+0x128>)
 8002628:	edc3 7a03 	vstr	s15, [r3, #12]
    rMat[1][1] = 1.0f - 2.0f * qP.xx - 2.0f * qP.zz;
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <imuComputeRotationMatrix+0x120>)
 800262e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002632:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800263a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <imuComputeRotationMatrix+0x120>)
 8002640:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002644:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264c:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <imuComputeRotationMatrix+0x128>)
 800264e:	edc3 7a04 	vstr	s15, [r3, #16]
    rMat[1][2] = 2.0f * (qP.yz + -qP.wx);
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <imuComputeRotationMatrix+0x120>)
 8002654:	ed93 7a08 	vldr	s14, [r3, #32]
 8002658:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <imuComputeRotationMatrix+0x120>)
 800265a:	edd3 7a01 	vldr	s15, [r3, #4]
 800265e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002662:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <imuComputeRotationMatrix+0x128>)
 8002668:	edc3 7a05 	vstr	s15, [r3, #20]

    rMat[2][0] = 2.0f * (qP.xz + -qP.wy);
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <imuComputeRotationMatrix+0x120>)
 800266e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002672:	4b16      	ldr	r3, [pc, #88]	; (80026cc <imuComputeRotationMatrix+0x120>)
 8002674:	edd3 7a02 	vldr	s15, [r3, #8]
 8002678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <imuComputeRotationMatrix+0x128>)
 8002682:	edc3 7a06 	vstr	s15, [r3, #24]
    rMat[2][1] = 2.0f * (qP.yz - -qP.wx);
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <imuComputeRotationMatrix+0x120>)
 8002688:	ed93 7a08 	vldr	s14, [r3, #32]
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <imuComputeRotationMatrix+0x120>)
 800268e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <imuComputeRotationMatrix+0x128>)
 800269c:	edc3 7a07 	vstr	s15, [r3, #28]
    rMat[2][2] = 1.0f - 2.0f * qP.xx - 2.0f * qP.yy;
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <imuComputeRotationMatrix+0x120>)
 80026a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80026a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <imuComputeRotationMatrix+0x120>)
 80026b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80026b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <imuComputeRotationMatrix+0x128>)
 80026c2:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000014 	.word	0x20000014
 80026d0:	20000004 	.word	0x20000004
 80026d4:	20000a00 	.word	0x20000a00

080026d8 <calculateAccZLowPassFilterRCTimeConstant>:

static float calculateAccZLowPassFilterRCTimeConstant(float accz_lpf_cutoff)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	ed87 0a01 	vstr	s0, [r7, #4]
    return 0.5f / (M_PIf * accz_lpf_cutoff);
 80026e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026e6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002708 <calculateAccZLowPassFilterRCTimeConstant+0x30>
 80026ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80026fa:	eeb0 0a67 	vmov.f32	s0, s15
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40490fdb 	.word	0x40490fdb

0800270c <calculateThrottleAngleScale>:

static float calculateThrottleAngleScale(uint16_t throttle_correction_angle)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
    return (1800.0f / M_PIf) * (900.0f / throttle_correction_angle);
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002720:	eddf 6a07 	vldr	s13, [pc, #28]	; 8002740 <calculateThrottleAngleScale+0x34>
 8002724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002728:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002744 <calculateThrottleAngleScale+0x38>
 800272c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002730:	eeb0 0a67 	vmov.f32	s0, s15
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	44610000 	.word	0x44610000
 8002744:	440f3d4c 	.word	0x440f3d4c

08002748 <imuConfigure>:

static void imuConfigure(uint16_t throttle_correction_angle, uint8_t throttle_correction_value)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	460a      	mov	r2, r1
 8002752:	80fb      	strh	r3, [r7, #6]
 8002754:	4613      	mov	r3, r2
 8002756:	717b      	strb	r3, [r7, #5]
    imuRuntimeConfig.dcm_kp = 2500 / 10000.0f;
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <imuConfigure+0x70>)
 800275a:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800275e:	605a      	str	r2, [r3, #4]
    imuRuntimeConfig.dcm_ki = 5000 / 10000.0f;
 8002760:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <imuConfigure+0x70>)
 8002762:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002766:	601a      	str	r2, [r3, #0]

    smallAngleCosZ = cos_approx(degreesToRadians(25));
 8002768:	2019      	movs	r0, #25
 800276a:	f7ff f94d 	bl	8001a08 <degreesToRadians>
 800276e:	eef0 7a40 	vmov.f32	s15, s0
 8002772:	eeb0 0a67 	vmov.f32	s0, s15
 8002776:	f7fe fee9 	bl	800154c <cos_approx>
 800277a:	eef0 7a40 	vmov.f32	s15, s0
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <imuConfigure+0x74>)
 8002780:	edc3 7a00 	vstr	s15, [r3]

    fc_acc = calculateAccZLowPassFilterRCTimeConstant(5.0f); // Set to fix value
 8002784:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002788:	f7ff ffa6 	bl	80026d8 <calculateAccZLowPassFilterRCTimeConstant>
 800278c:	eef0 7a40 	vmov.f32	s15, s0
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <imuConfigure+0x78>)
 8002792:	edc3 7a00 	vstr	s15, [r3]
    throttleAngleScale = calculateThrottleAngleScale(throttle_correction_angle);
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ffb7 	bl	800270c <calculateThrottleAngleScale>
 800279e:	eef0 7a40 	vmov.f32	s15, s0
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <imuConfigure+0x7c>)
 80027a4:	edc3 7a00 	vstr	s15, [r3]

    throttleAngleValue = throttle_correction_value;
 80027a8:	797b      	ldrb	r3, [r7, #5]
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <imuConfigure+0x80>)
 80027ac:	6013      	str	r3, [r2, #0]
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200009f8 	.word	0x200009f8
 80027bc:	20000a3c 	.word	0x20000a3c
 80027c0:	20000a38 	.word	0x20000a38
 80027c4:	20000a30 	.word	0x20000a30
 80027c8:	20000a34 	.word	0x20000a34

080027cc <imuInit>:

void imuInit(void) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
	imuConfigure(800, 10);
 80027d0:	210a      	movs	r1, #10
 80027d2:	f44f 7048 	mov.w	r0, #800	; 0x320
 80027d6:	f7ff ffb7 	bl	8002748 <imuConfigure>
    canUseGPSHeading = false;
 80027da:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <imuInit+0x1c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]

    imuComputeRotationMatrix();
 80027e0:	f7ff fee4 	bl	80025ac <imuComputeRotationMatrix>
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000001 	.word	0x20000001

080027ec <imuIsAccelerometerHealthy>:

static bool imuIsAccelerometerHealthy(float *accAverage)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    float accMagnitudeSq = 0;
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e012      	b.n	8002826 <imuIsAccelerometerHealthy+0x3a>
        const float a = accAverage[axis];
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60fb      	str	r3, [r7, #12]
        accMagnitudeSq += a * a;
 800280c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002810:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002814:	ed97 7a05 	vldr	s14, [r7, #20]
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	3301      	adds	r3, #1
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b02      	cmp	r3, #2
 800282a:	dde9      	ble.n	8002800 <imuIsAccelerometerHealthy+0x14>
    }

    accMagnitudeSq = accMagnitudeSq * sq(acc.dev.acc_1G_rec);
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <imuIsAccelerometerHealthy+0x94>)
 800282e:	ed93 7a00 	vldr	s14, [r3]
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <imuIsAccelerometerHealthy+0x94>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002844:	edc7 7a05 	vstr	s15, [r7, #20]

    // Accept accel readings only in range 0.9g - 1.1g
    return (0.81f < accMagnitudeSq) && (accMagnitudeSq < 1.21f);
 8002848:	edd7 7a05 	vldr	s15, [r7, #20]
 800284c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8002884 <imuIsAccelerometerHealthy+0x98>
 8002850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	dd0a      	ble.n	8002870 <imuIsAccelerometerHealthy+0x84>
 800285a:	edd7 7a05 	vldr	s15, [r7, #20]
 800285e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002888 <imuIsAccelerometerHealthy+0x9c>
 8002862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	d501      	bpl.n	8002870 <imuIsAccelerometerHealthy+0x84>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <imuIsAccelerometerHealthy+0x86>
 8002870:	2300      	movs	r3, #0
 8002872:	b2db      	uxtb	r3, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	200003d0 	.word	0x200003d0
 8002884:	3f4f5c29 	.word	0x3f4f5c29
 8002888:	3f9ae148 	.word	0x3f9ae148

0800288c <invSqrt>:

static float invSqrt(float x)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1.0f / sqrtf(x);
 8002896:	ed97 0a01 	vldr	s0, [r7, #4]
 800289a:	f012 fd59 	bl	8015350 <sqrtf>
 800289e:	eef0 7a40 	vmov.f32	s15, s0
 80028a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80028ae:	eeb0 0a67 	vmov.f32	s0, s15
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <imuMahonyAHRSupdate>:

static void imuMahonyAHRSupdate(float dt, float gx, float gy, float gz,
                                bool useAcc, float ax, float ay, float az,
                                bool useMag,
                                bool useCOG, float courseOverGround, const float dcmKpGain)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	ed2d 8b02 	vpush	{d8}
 80028be:	b09e      	sub	sp, #120	; 0x78
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80028c6:	edc7 0a08 	vstr	s1, [r7, #32]
 80028ca:	ed87 1a07 	vstr	s2, [r7, #28]
 80028ce:	edc7 1a06 	vstr	s3, [r7, #24]
 80028d2:	4603      	mov	r3, r0
 80028d4:	ed87 2a04 	vstr	s4, [r7, #16]
 80028d8:	edc7 2a03 	vstr	s5, [r7, #12]
 80028dc:	ed87 3a02 	vstr	s6, [r7, #8]
 80028e0:	edc7 3a01 	vstr	s7, [r7, #4]
 80028e4:	ed87 4a00 	vstr	s8, [r7]
 80028e8:	75fb      	strb	r3, [r7, #23]
 80028ea:	460b      	mov	r3, r1
 80028ec:	75bb      	strb	r3, [r7, #22]
 80028ee:	4613      	mov	r3, r2
 80028f0:	757b      	strb	r3, [r7, #21]
    static float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;    // integral error terms scaled by Ki

    // Calculate general spin rate (rad/s)
    const float spin_rate = sqrtf(sq(gx) + sq(gy) + sq(gz));
 80028f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80028f6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80028fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80028fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002902:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002906:	edd7 7a06 	vldr	s15, [r7, #24]
 800290a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800290e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002912:	eeb0 0a67 	vmov.f32	s0, s15
 8002916:	f012 fd1b 	bl	8015350 <sqrtf>
 800291a:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

    // Use raw heading error (from GPS or whatever else)
    float ex = 0, ey = 0, ez = 0;
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	677b      	str	r3, [r7, #116]	; 0x74
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	673b      	str	r3, [r7, #112]	; 0x70
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (useCOG) {
 8002930:	7d7b      	ldrb	r3, [r7, #21]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d060      	beq.n	80029f8 <imuMahonyAHRSupdate+0x140>
        while (courseOverGround >  M_PIf) {
 8002936:	e007      	b.n	8002948 <imuMahonyAHRSupdate+0x90>
            courseOverGround -= (2.0f * M_PIf);
 8002938:	edd7 7a01 	vldr	s15, [r7, #4]
 800293c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002960 <imuMahonyAHRSupdate+0xa8>
 8002940:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002944:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround >  M_PIf) {
 8002948:	edd7 7a01 	vldr	s15, [r7, #4]
 800294c:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800295c <imuMahonyAHRSupdate+0xa4>
 8002950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002958:	dcee      	bgt.n	8002938 <imuMahonyAHRSupdate+0x80>
        }

        while (courseOverGround < -M_PIf) {
 800295a:	e00d      	b.n	8002978 <imuMahonyAHRSupdate+0xc0>
 800295c:	40490fdb 	.word	0x40490fdb
 8002960:	40c90fdb 	.word	0x40c90fdb
 8002964:	c0490fdb 	.word	0xc0490fdb
            courseOverGround += (2.0f * M_PIf);
 8002968:	edd7 7a01 	vldr	s15, [r7, #4]
 800296c:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8002960 <imuMahonyAHRSupdate+0xa8>
 8002970:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002974:	edc7 7a01 	vstr	s15, [r7, #4]
        while (courseOverGround < -M_PIf) {
 8002978:	edd7 7a01 	vldr	s15, [r7, #4]
 800297c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8002964 <imuMahonyAHRSupdate+0xac>
 8002980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002988:	d4ee      	bmi.n	8002968 <imuMahonyAHRSupdate+0xb0>
        }

        const float ez_ef = (- sin_approx(courseOverGround) * rMat[0][0] - cos_approx(courseOverGround) * rMat[1][0]);
 800298a:	ed97 0a01 	vldr	s0, [r7, #4]
 800298e:	f7fe fd33 	bl	80013f8 <sin_approx>
 8002992:	eef0 7a40 	vmov.f32	s15, s0
 8002996:	eeb1 7a67 	vneg.f32	s14, s15
 800299a:	4bdb      	ldr	r3, [pc, #876]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80029a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80029a8:	f7fe fdd0 	bl	800154c <cos_approx>
 80029ac:	eeb0 7a40 	vmov.f32	s14, s0
 80029b0:	4bd5      	ldr	r3, [pc, #852]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 80029b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80029b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ba:	ee78 7a67 	vsub.f32	s15, s16, s15
 80029be:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

        ex = rMat[2][0] * ez_ef;
 80029c2:	4bd1      	ldr	r3, [pc, #836]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 80029c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80029c8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80029cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey = rMat[2][1] * ez_ef;
 80029d4:	4bcc      	ldr	r3, [pc, #816]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 80029d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80029da:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80029de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez = rMat[2][2] * ez_ef;
 80029e6:	4bc8      	ldr	r3, [pc, #800]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 80029e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80029ec:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80029f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured magnetic field vector
    float mx = mag.magADC[X];
 80029f8:	4bc4      	ldr	r3, [pc, #784]	; (8002d0c <imuMahonyAHRSupdate+0x454>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	663b      	str	r3, [r7, #96]	; 0x60
    float my = mag.magADC[Y];
 80029fe:	4bc3      	ldr	r3, [pc, #780]	; (8002d0c <imuMahonyAHRSupdate+0x454>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	65fb      	str	r3, [r7, #92]	; 0x5c
    float mz = mag.magADC[Z];
 8002a04:	4bc1      	ldr	r3, [pc, #772]	; (8002d0c <imuMahonyAHRSupdate+0x454>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	65bb      	str	r3, [r7, #88]	; 0x58
    float recipMagNorm = sq(mx) + sq(my) + sq(mz);
 8002a0a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002a0e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002a12:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a1e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    if (useMag && recipMagNorm > 0.01f) {
 8002a2e:	7dbb      	ldrb	r3, [r7, #22]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 809f 	beq.w	8002b74 <imuMahonyAHRSupdate+0x2bc>
 8002a36:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a3a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002d10 <imuMahonyAHRSupdate+0x458>
 8002a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	f340 8095 	ble.w	8002b74 <imuMahonyAHRSupdate+0x2bc>
        // Normalise magnetometer measurement
        recipMagNorm = invSqrt(recipMagNorm);
 8002a4a:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8002a4e:	f7ff ff1d 	bl	800288c <invSqrt>
 8002a52:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
        mx *= recipMagNorm;
 8002a56:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002a5a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a62:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        my *= recipMagNorm;
 8002a66:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002a6a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        mz *= recipMagNorm;
 8002a76:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002a7a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        // For magnetometer correction we make an assumption that magnetic field is perpendicular to gravity (ignore Z-component in EF).
        // This way magnetic field will only affect heading and wont mess roll/pitch angles

        // (hx; hy; 0) - measured mag field vector in EF (assuming Z-component is zero)
        // (bx; 0; 0) - reference mag field vector heading due North in EF (assuming Z-component is zero)
        const float hx = rMat[0][0] * mx + rMat[0][1] * my + rMat[0][2] * mz;
 8002a86:	4ba0      	ldr	r3, [pc, #640]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002a88:	ed93 7a00 	vldr	s14, [r3]
 8002a8c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a94:	4b9c      	ldr	r3, [pc, #624]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002a96:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a9a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa6:	4b98      	ldr	r3, [pc, #608]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002aa8:	edd3 6a02 	vldr	s13, [r3, #8]
 8002aac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        const float hy = rMat[1][0] * mx + rMat[1][1] * my + rMat[1][2] * mz;
 8002abc:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002abe:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ac2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aca:	4b8f      	ldr	r3, [pc, #572]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002acc:	edd3 6a04 	vldr	s13, [r3, #16]
 8002ad0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002adc:	4b8a      	ldr	r3, [pc, #552]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002ade:	edd3 6a05 	vldr	s13, [r3, #20]
 8002ae2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aee:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        const float bx = sqrtf(hx * hx + hy * hy);
 8002af2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002af6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002afa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002afe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0a:	f012 fc21 	bl	8015350 <sqrtf>
 8002b0e:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48

        // magnetometer error is cross product between estimated magnetic north and measured magnetic north (calculated in EF)
        const float ez_ef = -(hy * bx);
 8002b12:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002b16:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	eef1 7a67 	vneg.f32	s15, s15
 8002b22:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        // Rotate mag error vector back to BF and accumulate
        ex += rMat[2][0] * ez_ef;
 8002b26:	4b78      	ldr	r3, [pc, #480]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002b28:	ed93 7a06 	vldr	s14, [r3, #24]
 8002b2c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b34:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += rMat[2][1] * ez_ef;
 8002b40:	4b71      	ldr	r3, [pc, #452]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002b42:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b56:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += rMat[2][2] * ez_ef;
 8002b5a:	4b6b      	ldr	r3, [pc, #428]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002b5c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b68:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002b6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b70:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Use measured acceleration vector
    float recipAccNorm = sq(ax) + sq(ay) + sq(az);
 8002b74:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b78:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b88:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b94:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (useAcc && recipAccNorm > 0.01f) {
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d068      	beq.n	8002c70 <imuMahonyAHRSupdate+0x3b8>
 8002b9e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002ba2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002d10 <imuMahonyAHRSupdate+0x458>
 8002ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bae:	dd5f      	ble.n	8002c70 <imuMahonyAHRSupdate+0x3b8>
        // Normalise accelerometer measurement
        recipAccNorm = invSqrt(recipAccNorm);
 8002bb0:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002bb4:	f7ff fe6a 	bl	800288c <invSqrt>
 8002bb8:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
        ax *= recipAccNorm;
 8002bbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bc0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc8:	edc7 7a04 	vstr	s15, [r7, #16]
        ay *= recipAccNorm;
 8002bcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bd0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd8:	edc7 7a03 	vstr	s15, [r7, #12]
        az *= recipAccNorm;
 8002bdc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002be0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be8:	edc7 7a02 	vstr	s15, [r7, #8]

        // Error is sum of cross product between estimated direction and measured direction of gravity
        ex += (ay * rMat[2][2] - az * rMat[2][1]);
 8002bec:	4b46      	ldr	r3, [pc, #280]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002bee:	ed93 7a08 	vldr	s14, [r3, #32]
 8002bf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfa:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002bfc:	edd3 6a07 	vldr	s13, [r3, #28]
 8002c00:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c0c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c14:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        ey += (az * rMat[2][0] - ax * rMat[2][2]);
 8002c18:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002c1a:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c26:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002c28:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c38:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c40:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
        ez += (ax * rMat[2][1] - ay * rMat[2][0]);
 8002c44:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002c46:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c52:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <imuMahonyAHRSupdate+0x450>)
 8002c54:	edd3 6a06 	vldr	s13, [r3, #24]
 8002c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c64:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Compute and apply integral feedback if enabled
    if (imuRuntimeConfig.dcm_ki > 0.0f) {
 8002c70:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <imuMahonyAHRSupdate+0x45c>)
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7e:	dd53      	ble.n	8002d28 <imuMahonyAHRSupdate+0x470>
        // Stop integrating if spinning beyond the certain limit
        if (spin_rate < DEGREES_TO_RADIANS(SPIN_RATE_LIMIT)) {
 8002c80:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002c84:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002d18 <imuMahonyAHRSupdate+0x460>
 8002c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c90:	d556      	bpl.n	8002d40 <imuMahonyAHRSupdate+0x488>
            const float dcmKiGain = imuRuntimeConfig.dcm_ki;
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <imuMahonyAHRSupdate+0x45c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
            integralFBx += dcmKiGain * ex * dt;    // integral error scaled by Ki
 8002c98:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c9c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cac:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <imuMahonyAHRSupdate+0x464>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <imuMahonyAHRSupdate+0x464>)
 8002cb8:	edc3 7a00 	vstr	s15, [r3]
            integralFBy += dcmKiGain * ey * dt;
 8002cbc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002cc0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd0:	4b13      	ldr	r3, [pc, #76]	; (8002d20 <imuMahonyAHRSupdate+0x468>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <imuMahonyAHRSupdate+0x468>)
 8002cdc:	edc3 7a00 	vstr	s15, [r3]
            integralFBz += dcmKiGain * ez * dt;
 8002ce0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002ce4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <imuMahonyAHRSupdate+0x46c>)
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <imuMahonyAHRSupdate+0x46c>)
 8002d00:	edc3 7a00 	vstr	s15, [r3]
 8002d04:	e01c      	b.n	8002d40 <imuMahonyAHRSupdate+0x488>
 8002d06:	bf00      	nop
 8002d08:	20000a00 	.word	0x20000a00
 8002d0c:	20000a60 	.word	0x20000a60
 8002d10:	3c23d70a 	.word	0x3c23d70a
 8002d14:	200009f8 	.word	0x200009f8
 8002d18:	3eb2b8c2 	.word	0x3eb2b8c2
 8002d1c:	20000a40 	.word	0x20000a40
 8002d20:	20000a44 	.word	0x20000a44
 8002d24:	20000a48 	.word	0x20000a48
        }
    } else {
        integralFBx = 0.0f;    // prevent integral windup
 8002d28:	4ba3      	ldr	r3, [pc, #652]	; (8002fb8 <imuMahonyAHRSupdate+0x700>)
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
        integralFBy = 0.0f;
 8002d30:	4ba2      	ldr	r3, [pc, #648]	; (8002fbc <imuMahonyAHRSupdate+0x704>)
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
        integralFBz = 0.0f;
 8002d38:	4ba1      	ldr	r3, [pc, #644]	; (8002fc0 <imuMahonyAHRSupdate+0x708>)
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional and integral feedback
    gx += dcmKpGain * ex + integralFBx;
 8002d40:	ed97 7a00 	vldr	s14, [r7]
 8002d44:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d4c:	4b9a      	ldr	r3, [pc, #616]	; (8002fb8 <imuMahonyAHRSupdate+0x700>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5e:	edc7 7a08 	vstr	s15, [r7, #32]
    gy += dcmKpGain * ey + integralFBy;
 8002d62:	ed97 7a00 	vldr	s14, [r7]
 8002d66:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d6e:	4b93      	ldr	r3, [pc, #588]	; (8002fbc <imuMahonyAHRSupdate+0x704>)
 8002d70:	edd3 7a00 	vldr	s15, [r3]
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d80:	edc7 7a07 	vstr	s15, [r7, #28]
    gz += dcmKpGain * ez + integralFBz;
 8002d84:	ed97 7a00 	vldr	s14, [r7]
 8002d88:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002d8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d90:	4b8b      	ldr	r3, [pc, #556]	; (8002fc0 <imuMahonyAHRSupdate+0x708>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integrate rate of change of quaternion
    gx *= (0.5f * dt);
 8002da6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002daa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db2:	ed97 7a08 	vldr	s14, [r7, #32]
 8002db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dba:	edc7 7a08 	vstr	s15, [r7, #32]
    gy *= (0.5f * dt);
 8002dbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dca:	ed97 7a07 	vldr	s14, [r7, #28]
 8002dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd2:	edc7 7a07 	vstr	s15, [r7, #28]
    gz *= (0.5f * dt);
 8002dd6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002dda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dea:	edc7 7a06 	vstr	s15, [r7, #24]

    quaternion buffer;
    buffer.w = q.w;
 8002dee:	4b75      	ldr	r3, [pc, #468]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
    buffer.x = q.x;
 8002df4:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    buffer.y = q.y;
 8002dfa:	4b72      	ldr	r3, [pc, #456]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
    buffer.z = q.z;
 8002e00:	4b70      	ldr	r3, [pc, #448]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34

    q.w += (-buffer.x * gx - buffer.y * gy - buffer.z * gz);
 8002e06:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e10:	eef1 6a67 	vneg.f32	s13, s15
 8002e14:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e1c:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002e20:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e28:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e2c:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002e30:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e40:	4b60      	ldr	r3, [pc, #384]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002e42:	edc3 7a00 	vstr	s15, [r3]
    q.x += (+buffer.w * gx + buffer.y * gz - buffer.z * gy);
 8002e46:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002e48:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e4c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002e50:	edd7 7a08 	vldr	s15, [r7, #32]
 8002e54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e58:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002e5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e60:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e64:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e68:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002e6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7c:	4b51      	ldr	r3, [pc, #324]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002e7e:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y += (+buffer.w * gy - buffer.x * gz + buffer.z * gx);
 8002e82:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002e84:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e88:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002e8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e94:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8002e98:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e9c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ea0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ea4:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002ea8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002eac:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eb8:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002eba:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z += (+buffer.w * gz + buffer.x * gy - buffer.y * gx);
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002ec0:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ec4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002ec8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ecc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ed0:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 8002ed4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ed8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002edc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ee0:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8002ee4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ee8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002eec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002ef6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalise quaternion
    float recipNorm = invSqrt(sq(q.w) + sq(q.x) + sq(q.y) + sq(q.z));
 8002efa:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002efc:	ed93 7a00 	vldr	s14, [r3]
 8002f00:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f0a:	4b2e      	ldr	r3, [pc, #184]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f0c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002f10:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f12:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f1e:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f20:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f24:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f26:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f32:	4b24      	ldr	r3, [pc, #144]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f34:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f38:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f46:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4a:	f7ff fc9f 	bl	800288c <invSqrt>
 8002f4e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    q.w *= recipNorm;
 8002f52:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f54:	ed93 7a00 	vldr	s14, [r3]
 8002f58:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f60:	4b18      	ldr	r3, [pc, #96]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f62:	edc3 7a00 	vstr	s15, [r3]
    q.x *= recipNorm;
 8002f66:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f68:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f6c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f76:	edc3 7a01 	vstr	s15, [r3, #4]
    q.y *= recipNorm;
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f80:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f88:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f8a:	edc3 7a02 	vstr	s15, [r3, #8]
    q.z *= recipNorm;
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f90:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <imuMahonyAHRSupdate+0x70c>)
 8002f9e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Pre-compute rotation matrix from quaternion
    imuComputeRotationMatrix();
 8002fa2:	f7ff fb03 	bl	80025ac <imuComputeRotationMatrix>

    attitudeIsEstablished = true;
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <imuMahonyAHRSupdate+0x710>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
}
 8002fac:	bf00      	nop
 8002fae:	3778      	adds	r7, #120	; 0x78
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	ecbd 8b02 	vpop	{d8}
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000a40 	.word	0x20000a40
 8002fbc:	20000a44 	.word	0x20000a44
 8002fc0:	20000a48 	.word	0x20000a48
 8002fc4:	20000004 	.word	0x20000004
 8002fc8:	200009f6 	.word	0x200009f6

08002fcc <imuUpdateEulerAngles>:

static void imuUpdateEulerAngles(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
    attitude.values.roll = lrintf(atan2_approx(rMat[2][1], rMat[2][2]) * (1800.0f / M_PIf));
 8002fd0:	4b30      	ldr	r3, [pc, #192]	; (8003094 <imuUpdateEulerAngles+0xc8>)
 8002fd2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <imuUpdateEulerAngles+0xc8>)
 8002fd8:	ed93 7a08 	vldr	s14, [r3, #32]
 8002fdc:	eef0 0a47 	vmov.f32	s1, s14
 8002fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe4:	f7fe fb1e 	bl	8001624 <atan2_approx>
 8002fe8:	eef0 7a40 	vmov.f32	s15, s0
 8002fec:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003098 <imuUpdateEulerAngles+0xcc>
 8002ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ff8:	f011 fff0 	bl	8014fdc <lrintf>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	b21a      	sxth	r2, r3
 8003000:	4b26      	ldr	r3, [pc, #152]	; (800309c <imuUpdateEulerAngles+0xd0>)
 8003002:	801a      	strh	r2, [r3, #0]
    attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(-rMat[2][0])) * (1800.0f / M_PIf));
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <imuUpdateEulerAngles+0xc8>)
 8003006:	edd3 7a06 	vldr	s15, [r3, #24]
 800300a:	eef1 7a67 	vneg.f32	s15, s15
 800300e:	eeb0 0a67 	vmov.f32	s0, s15
 8003012:	f7fe fab3 	bl	800157c <acos_approx>
 8003016:	eef0 7a40 	vmov.f32	s15, s0
 800301a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80030a0 <imuUpdateEulerAngles+0xd4>
 800301e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003022:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003098 <imuUpdateEulerAngles+0xcc>
 8003026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800302a:	eeb0 0a67 	vmov.f32	s0, s15
 800302e:	f011 ffd5 	bl	8014fdc <lrintf>
 8003032:	4603      	mov	r3, r0
 8003034:	b21a      	sxth	r2, r3
 8003036:	4b19      	ldr	r3, [pc, #100]	; (800309c <imuUpdateEulerAngles+0xd0>)
 8003038:	805a      	strh	r2, [r3, #2]
    attitude.values.yaw = lrintf((-atan2_approx(rMat[1][0], rMat[0][0]) * (1800.0f / M_PIf)));
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <imuUpdateEulerAngles+0xc8>)
 800303c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <imuUpdateEulerAngles+0xc8>)
 8003042:	ed93 7a00 	vldr	s14, [r3]
 8003046:	eef0 0a47 	vmov.f32	s1, s14
 800304a:	eeb0 0a67 	vmov.f32	s0, s15
 800304e:	f7fe fae9 	bl	8001624 <atan2_approx>
 8003052:	eef0 7a40 	vmov.f32	s15, s0
 8003056:	eef1 7a67 	vneg.f32	s15, s15
 800305a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003098 <imuUpdateEulerAngles+0xcc>
 800305e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003062:	eeb0 0a67 	vmov.f32	s0, s15
 8003066:	f011 ffb9 	bl	8014fdc <lrintf>
 800306a:	4603      	mov	r3, r0
 800306c:	b21a      	sxth	r2, r3
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <imuUpdateEulerAngles+0xd0>)
 8003070:	809a      	strh	r2, [r3, #4]

    if (attitude.values.yaw < 0) {
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <imuUpdateEulerAngles+0xd0>)
 8003074:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	da09      	bge.n	8003090 <imuUpdateEulerAngles+0xc4>
        attitude.values.yaw += 3600;
 800307c:	4b07      	ldr	r3, [pc, #28]	; (800309c <imuUpdateEulerAngles+0xd0>)
 800307e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8003088:	b29b      	uxth	r3, r3
 800308a:	b21a      	sxth	r2, r3
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <imuUpdateEulerAngles+0xd0>)
 800308e:	809a      	strh	r2, [r3, #4]
    }
}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000a00 	.word	0x20000a00
 8003098:	440f3d4c 	.word	0x440f3d4c
 800309c:	200009f0 	.word	0x200009f0
 80030a0:	3fc90fdb 	.word	0x3fc90fdb

080030a4 <imuCalcKpGain>:

static float imuCalcKpGain(timeUs_t currentTimeUs, bool useAcc, float *gyroAverage)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	460b      	mov	r3, r1
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	72fb      	strb	r3, [r7, #11]
    static bool lastArmState = false;
    static timeUs_t gyroQuietPeriodTimeEnd = 0;
    static timeUs_t attitudeResetTimeEnd = 0;
    static bool attitudeResetCompleted = false;
    float ret;
    bool attitudeResetActive = false;
 80030b2:	2300      	movs	r3, #0
 80030b4:	74fb      	strb	r3, [r7, #19]

    const bool armState = false;
 80030b6:	2300      	movs	r3, #0
 80030b8:	74bb      	strb	r3, [r7, #18]

    if (!armState) {
 80030ba:	7cbb      	ldrb	r3, [r7, #18]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d163      	bne.n	8003188 <imuCalcKpGain+0xe4>
        }

        // If gyro activity exceeds the threshold then restart the quiet period.
        // Also, if the attitude reset has been complete and there is subsequent gyro activity then
        // start the reset cycle again. This addresses the case where the pilot rights the craft after a crash.
        if ((attitudeResetTimeEnd > 0) || (gyroQuietPeriodTimeEnd > 0) || attitudeResetCompleted) {
 80030c0:	4b42      	ldr	r3, [pc, #264]	; (80031cc <imuCalcKpGain+0x128>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <imuCalcKpGain+0x34>
 80030c8:	4b41      	ldr	r3, [pc, #260]	; (80031d0 <imuCalcKpGain+0x12c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <imuCalcKpGain+0x34>
 80030d0:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <imuCalcKpGain+0x130>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d030      	beq.n	800313a <imuCalcKpGain+0x96>
            if ((fabsf(gyroAverage[X]) > ATTITUDE_RESET_GYRO_LIMIT)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	eef0 7ae7 	vabs.f32	s15, s15
 80030e2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80030e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ee:	dc1c      	bgt.n	800312a <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Y]) > ATTITUDE_RESET_GYRO_LIMIT)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	edd3 7a00 	vldr	s15, [r3]
 80030f8:	eef0 7ae7 	vabs.f32	s15, s15
 80030fc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8003100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	dc0f      	bgt.n	800312a <imuCalcKpGain+0x86>
                || (fabsf(gyroAverage[Z]) > ATTITUDE_RESET_GYRO_LIMIT)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3308      	adds	r3, #8
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	eef0 7ae7 	vabs.f32	s15, s15
 8003116:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800311a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	dc02      	bgt.n	800312a <imuCalcKpGain+0x86>
                || (!useAcc)) {
 8003124:	7afb      	ldrb	r3, [r7, #11]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <imuCalcKpGain+0x96>

                gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <imuCalcKpGain+0x134>)
 800312e:	4413      	add	r3, r2
 8003130:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <imuCalcKpGain+0x12c>)
 8003132:	6013      	str	r3, [r2, #0]
                attitudeResetTimeEnd = 0;
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <imuCalcKpGain+0x128>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
            }
        }
        if (attitudeResetTimeEnd > 0) {        // Resetting the attitude estimation
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <imuCalcKpGain+0x128>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d011      	beq.n	8003166 <imuCalcKpGain+0xc2>
            if (currentTimeUs >= attitudeResetTimeEnd) {
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <imuCalcKpGain+0x128>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	429a      	cmp	r2, r3
 800314a:	d309      	bcc.n	8003160 <imuCalcKpGain+0xbc>
                gyroQuietPeriodTimeEnd = 0;
 800314c:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <imuCalcKpGain+0x12c>)
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
                attitudeResetTimeEnd = 0;
 8003152:	4b1e      	ldr	r3, [pc, #120]	; (80031cc <imuCalcKpGain+0x128>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
                attitudeResetCompleted = true;
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <imuCalcKpGain+0x130>)
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e013      	b.n	8003188 <imuCalcKpGain+0xe4>
            } else {
                attitudeResetActive = true;
 8003160:	2301      	movs	r3, #1
 8003162:	74fb      	strb	r3, [r7, #19]
 8003164:	e010      	b.n	8003188 <imuCalcKpGain+0xe4>
            }
        } else if ((gyroQuietPeriodTimeEnd > 0) && (currentTimeUs >= gyroQuietPeriodTimeEnd)) {
 8003166:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <imuCalcKpGain+0x12c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <imuCalcKpGain+0xe4>
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <imuCalcKpGain+0x12c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	429a      	cmp	r2, r3
 8003176:	d307      	bcc.n	8003188 <imuCalcKpGain+0xe4>
            // Start the high gain period to bring the estimation into convergence
            attitudeResetTimeEnd = currentTimeUs + ATTITUDE_RESET_ACTIVE_TIME;
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <imuCalcKpGain+0x138>)
 800317c:	4413      	add	r3, r2
 800317e:	4a13      	ldr	r2, [pc, #76]	; (80031cc <imuCalcKpGain+0x128>)
 8003180:	6013      	str	r3, [r2, #0]
            gyroQuietPeriodTimeEnd = 0;
 8003182:	4b13      	ldr	r3, [pc, #76]	; (80031d0 <imuCalcKpGain+0x12c>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
        }
    }
    lastArmState = armState;
 8003188:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <imuCalcKpGain+0x13c>)
 800318a:	7cbb      	ldrb	r3, [r7, #18]
 800318c:	7013      	strb	r3, [r2, #0]

    if (attitudeResetActive) {
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <imuCalcKpGain+0xf6>
        ret = ATTITUDE_RESET_KP_GAIN;
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <imuCalcKpGain+0x140>)
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e00d      	b.n	80031b6 <imuCalcKpGain+0x112>
    } else {
       ret = imuRuntimeConfig.dcm_kp;
 800319a:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <imuCalcKpGain+0x144>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	617b      	str	r3, [r7, #20]
       if (!armState) {
 80031a0:	7cbb      	ldrb	r3, [r7, #18]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d107      	bne.n	80031b6 <imuCalcKpGain+0x112>
          ret = ret * 10.0f; // Scale the kP to generally converge faster when disarmed.
 80031a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031aa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031b2:	edc7 7a05 	vstr	s15, [r7, #20]
       }
    }

    return ret;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	ee07 3a90 	vmov	s15, r3
}
 80031bc:	eeb0 0a67 	vmov.f32	s0, s15
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000a50 	.word	0x20000a50
 80031d0:	20000a54 	.word	0x20000a54
 80031d4:	20000a58 	.word	0x20000a58
 80031d8:	0003d090 	.word	0x0003d090
 80031dc:	0007a120 	.word	0x0007a120
 80031e0:	20000a4c 	.word	0x20000a4c
 80031e4:	41c80000 	.word	0x41c80000
 80031e8:	200009f8 	.word	0x200009f8

080031ec <imuCalculateEstimatedAttitude>:

void imuCalculateEstimatedAttitude()
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	ed2d 8b08 	vpush	{d8-d11}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
    static timeUs_t previousIMUUpdateTime;
    bool useAcc = false;
 80031f6:	2300      	movs	r3, #0
 80031f8:	77fb      	strb	r3, [r7, #31]
    bool useMag = false;
 80031fa:	2300      	movs	r3, #0
 80031fc:	77bb      	strb	r3, [r7, #30]
    bool useCOG = true; // Whether or not correct yaw via imuMahonyAHRSupdate from our ground course
 80031fe:	2301      	movs	r3, #1
 8003200:	777b      	strb	r3, [r7, #29]
    float courseOverGround = DECIDEGREES_TO_RADIANS(65535); // worst case
 8003202:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <imuCalculateEstimatedAttitude+0xec>)
 8003204:	61bb      	str	r3, [r7, #24]

    const timeDelta_t deltaT = 10000;
 8003206:	f242 7310 	movw	r3, #10000	; 0x2710
 800320a:	617b      	str	r3, [r7, #20]
    timeUs_t currentTimeUs = previousIMUUpdateTime + deltaT;
 800320c:	4b33      	ldr	r3, [pc, #204]	; (80032dc <imuCalculateEstimatedAttitude+0xf0>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	4413      	add	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
    previousIMUUpdateTime = currentTimeUs;
 8003216:	4a31      	ldr	r2, [pc, #196]	; (80032dc <imuCalculateEstimatedAttitude+0xf0>)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	6013      	str	r3, [r2, #0]

    useMag = true;
 800321c:	2301      	movs	r3, #1
 800321e:	77bb      	strb	r3, [r7, #30]

    float gyroAverage[XYZ_AXIS_COUNT];
    gyroGetAccumulationAverage(gyroAverage);
 8003220:	1d3b      	adds	r3, r7, #4
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f8de 	bl	80023e4 <gyroGetAccumulationAverage>

    if (accGetAccumulationAverage(accAverage)) {
 8003228:	482d      	ldr	r0, [pc, #180]	; (80032e0 <imuCalculateEstimatedAttitude+0xf4>)
 800322a:	f7fd fb7b 	bl	8000924 <accGetAccumulationAverage>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <imuCalculateEstimatedAttitude+0x52>
        useAcc = imuIsAccelerometerHealthy(accAverage);
 8003234:	482a      	ldr	r0, [pc, #168]	; (80032e0 <imuCalculateEstimatedAttitude+0xf4>)
 8003236:	f7ff fad9 	bl	80027ec <imuIsAccelerometerHealthy>
 800323a:	4603      	mov	r3, r0
 800323c:	77fb      	strb	r3, [r7, #31]
    }

    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003248:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80032e4 <imuCalculateEstimatedAttitude+0xf8>
 800324c:	ee27 8a87 	vmul.f32	s16, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003250:	edd7 7a01 	vldr	s15, [r7, #4]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003254:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80032e8 <imuCalculateEstimatedAttitude+0xfc>
 8003258:	ee67 8a87 	vmul.f32	s17, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 800325c:	edd7 7a02 	vldr	s15, [r7, #8]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 8003260:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80032e8 <imuCalculateEstimatedAttitude+0xfc>
 8003264:	ee27 9a87 	vmul.f32	s18, s15, s14
                        DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEGREES_TO_RADIANS(gyroAverage[Z]),
 8003268:	edd7 7a03 	vldr	s15, [r7, #12]
    imuMahonyAHRSupdate(deltaT * 1e-6f,
 800326c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80032e8 <imuCalculateEstimatedAttitude+0xfc>
 8003270:	ee67 9a87 	vmul.f32	s19, s15, s14
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <imuCalculateEstimatedAttitude+0xf4>)
 8003276:	ed93 aa00 	vldr	s20, [r3]
 800327a:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <imuCalculateEstimatedAttitude+0xf4>)
 800327c:	edd3 aa01 	vldr	s21, [r3, #4]
 8003280:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <imuCalculateEstimatedAttitude+0xf4>)
 8003282:	ed93 ba02 	vldr	s22, [r3, #8]
 8003286:	1d3a      	adds	r2, r7, #4
 8003288:	7ffb      	ldrb	r3, [r7, #31]
 800328a:	4619      	mov	r1, r3
 800328c:	6938      	ldr	r0, [r7, #16]
 800328e:	f7ff ff09 	bl	80030a4 <imuCalcKpGain>
 8003292:	eef0 7a40 	vmov.f32	s15, s0
 8003296:	7f7a      	ldrb	r2, [r7, #29]
 8003298:	7fb9      	ldrb	r1, [r7, #30]
 800329a:	7ffb      	ldrb	r3, [r7, #31]
 800329c:	eeb0 4a67 	vmov.f32	s8, s15
 80032a0:	edd7 3a06 	vldr	s7, [r7, #24]
 80032a4:	eeb0 3a4b 	vmov.f32	s6, s22
 80032a8:	eef0 2a6a 	vmov.f32	s5, s21
 80032ac:	eeb0 2a4a 	vmov.f32	s4, s20
 80032b0:	4618      	mov	r0, r3
 80032b2:	eef0 1a69 	vmov.f32	s3, s19
 80032b6:	eeb0 1a49 	vmov.f32	s2, s18
 80032ba:	eef0 0a68 	vmov.f32	s1, s17
 80032be:	eeb0 0a48 	vmov.f32	s0, s16
 80032c2:	f7ff faf9 	bl	80028b8 <imuMahonyAHRSupdate>
                        useAcc, accAverage[X], accAverage[Y], accAverage[Z],
                        useMag,
                        useCOG, courseOverGround,  imuCalcKpGain(currentTimeUs, useAcc, gyroAverage));

    imuUpdateEulerAngles();
 80032c6:	f7ff fe81 	bl	8002fcc <imuUpdateEulerAngles>
}
 80032ca:	bf00      	nop
 80032cc:	3720      	adds	r7, #32
 80032ce:	46bd      	mov	sp, r7
 80032d0:	ecbd 8b08 	vpop	{d8-d11}
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	42e4c2a3 	.word	0x42e4c2a3
 80032dc:	20000a5c 	.word	0x20000a5c
 80032e0:	20000a24 	.word	0x20000a24
 80032e4:	358637bd 	.word	0x358637bd
 80032e8:	3c8efa35 	.word	0x3c8efa35

080032ec <calculateThrottleAngleCorrection>:

static int calculateThrottleAngleCorrection(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	ed2d 8b02 	vpush	{d8}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
    /*
    * Use 0 as the throttle angle correction if we are inverted, vertical or with a
    * small angle < 0.86 deg
    * TODO: Define this small angle in config.
    */
    if (getCosTiltAngle() <= 0.015f) {
 80032f6:	f7ff f8d1 	bl	800249c <getCosTiltAngle>
 80032fa:	eef0 7a40 	vmov.f32	s15, s0
 80032fe:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800338c <calculateThrottleAngleCorrection+0xa0>
 8003302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330a:	d801      	bhi.n	8003310 <calculateThrottleAngleCorrection+0x24>
        return 0;
 800330c:	2300      	movs	r3, #0
 800330e:	e036      	b.n	800337e <calculateThrottleAngleCorrection+0x92>
    }
    int angle = lrintf(acos_approx(getCosTiltAngle()) * throttleAngleScale);
 8003310:	f7ff f8c4 	bl	800249c <getCosTiltAngle>
 8003314:	eef0 7a40 	vmov.f32	s15, s0
 8003318:	eeb0 0a67 	vmov.f32	s0, s15
 800331c:	f7fe f92e 	bl	800157c <acos_approx>
 8003320:	eeb0 7a40 	vmov.f32	s14, s0
 8003324:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <calculateThrottleAngleCorrection+0xa4>)
 8003326:	edd3 7a00 	vldr	s15, [r3]
 800332a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332e:	eeb0 0a67 	vmov.f32	s0, s15
 8003332:	f011 fe53 	bl	8014fdc <lrintf>
 8003336:	6078      	str	r0, [r7, #4]
    if (angle > 900)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800333e:	dd02      	ble.n	8003346 <calculateThrottleAngleCorrection+0x5a>
        angle = 900;
 8003340:	f44f 7361 	mov.w	r3, #900	; 0x384
 8003344:	607b      	str	r3, [r7, #4]
    return lrintf(throttleAngleValue * sin_approx(angle / (900.0f * M_PIf / 2.0f)));
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <calculateThrottleAngleCorrection+0xa8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	ee07 3a90 	vmov	s15, r3
 8003358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800335c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003398 <calculateThrottleAngleCorrection+0xac>
 8003360:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003364:	eeb0 0a47 	vmov.f32	s0, s14
 8003368:	f7fe f846 	bl	80013f8 <sin_approx>
 800336c:	eef0 7a40 	vmov.f32	s15, s0
 8003370:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003374:	eeb0 0a67 	vmov.f32	s0, s15
 8003378:	f011 fe30 	bl	8014fdc <lrintf>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	ecbd 8b02 	vpop	{d8}
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	3c75c28f 	.word	0x3c75c28f
 8003390:	20000a30 	.word	0x20000a30
 8003394:	20000a34 	.word	0x20000a34
 8003398:	44b0b6ef 	.word	0x44b0b6ef

0800339c <mixerSetThrottleAngleCorrection>:

static void mixerSetThrottleAngleCorrection(int correctionValue) { }
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <imuCalculateThrottleAngleCorrection>:

void imuCalculateThrottleAngleCorrection(void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
	// Update the throttle correction for angle and supply it to the mixer
	int throttleAngleCorrection = calculateThrottleAngleCorrection();
 80033b6:	f7ff ff99 	bl	80032ec <calculateThrottleAngleCorrection>
 80033ba:	6078      	str	r0, [r7, #4]
	mixerSetThrottleAngleCorrection(throttleAngleCorrection);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ffed 	bl	800339c <mixerSetThrottleAngleCorrection>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <compassDetect>:
} compassConfig_t;

static compassConfig_t compassConfig;

static bool compassDetect(magDev_t *magDev, uint8_t *alignment)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
    *alignment = ALIGN_DEFAULT;  // may be overridden if target specifies MAG_*_ALIGN
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]

    magSensor_e magHardware = MAG_NONE;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]

    extDevice_t *dev = &magDev->dev;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3318      	adds	r3, #24
 80033e4:	60bb      	str	r3, [r7, #8]
    // Associate magnetometer bus with its device
    dev->bus = &magDev->bus;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	601a      	str	r2, [r3, #0]


    switch (compassConfig.mag_busType) {
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <compassDetect+0x8c>)
 80033f2:	789b      	ldrb	r3, [r3, #2]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10f      	bne.n	8003418 <compassDetect+0x4c>
    case BUS_TYPE_I2C:
        i2cBusSetInstance(dev, compassConfig.mag_i2c_device);
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <compassDetect+0x8c>)
 80033fa:	78db      	ldrb	r3, [r3, #3]
 80033fc:	4619      	mov	r1, r3
 80033fe:	68b8      	ldr	r0, [r7, #8]
 8003400:	f7fd fc54 	bl	8000cac <i2cBusSetInstance>
        dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <compassDetect+0x8c>)
 8003406:	791a      	ldrb	r2, [r3, #4]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	711a      	strb	r2, [r3, #4]
        break;
 800340c:	bf00      	nop
    case BUS_TYPE_SPI:
    default:
        return false;
    }

    switch (compassConfig.mag_hardware) {
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <compassDetect+0x8c>)
 8003410:	785b      	ldrb	r3, [r3, #1]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <compassDetect+0x54>
 8003416:	e001      	b.n	800341c <compassDetect+0x50>
        return false;
 8003418:	2300      	movs	r3, #0
 800341a:	e019      	b.n	8003450 <compassDetect+0x84>
    switch (compassConfig.mag_hardware) {
 800341c:	2b02      	cmp	r3, #2
 800341e:	d10e      	bne.n	800343e <compassDetect+0x72>
    case MAG_DEFAULT:
    case MAG_HMC5883:
        if (dev->bus->busType == BUS_TYPE_I2C) {
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d103      	bne.n	8003432 <compassDetect+0x66>
            dev->busType_u.i2c.address = compassConfig.mag_i2c_address;
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <compassDetect+0x8c>)
 800342c:	791a      	ldrb	r2, [r3, #4]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	711a      	strb	r2, [r3, #4]
        }

        *alignment = MAG_HMC5883_ALIGN;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2208      	movs	r2, #8
 8003436:	701a      	strb	r2, [r3, #0]
        magHardware = MAG_HMC5883;
 8003438:	2302      	movs	r3, #2
 800343a:	73fb      	strb	r3, [r7, #15]
        break;
 800343c:	e002      	b.n	8003444 <compassDetect+0x78>

    default:
        magHardware = MAG_NONE;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
        break;
 8003442:	bf00      	nop
    }

    // MAG_MPU925X_AK8963 is an MPU925x configured as I2C passthrough to the built-in AK8963 magnetometer
    // Passthrough mode disables the gyro/acc part of the MPU, so we only want to detect this sensor if mag_hardware was explicitly set to MAG_MPU925X_AK8963
    if (magHardware == MAG_NONE) {
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <compassDetect+0x82>
        return false;
 800344a:	2300      	movs	r3, #0
 800344c:	e000      	b.n	8003450 <compassDetect+0x84>
    }

    return true;
 800344e:	2301      	movs	r3, #1
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000b60 	.word	0x20000b60

0800345c <magInit>:


void magInit(sensorMagInitFuncPtr initFn, sensorMagReadFuncPtr readFn) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
	magDev.init = initFn;
 8003466:	4a16      	ldr	r2, [pc, #88]	; (80034c0 <magInit+0x64>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	60d3      	str	r3, [r2, #12]
	magDev.read = readFn;
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <magInit+0x64>)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6113      	str	r3, [r2, #16]

	//TODO

    sensor_align_e alignment;

    if (!compassDetect(&magDev, &alignment)) {
 8003472:	f107 030f 	add.w	r3, r7, #15
 8003476:	4619      	mov	r1, r3
 8003478:	4811      	ldr	r0, [pc, #68]	; (80034c0 <magInit+0x64>)
 800347a:	f7ff ffa7 	bl	80033cc <compassDetect>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d018      	beq.n	80034b6 <magInit+0x5a>
        return;
    }

    magDev.init(&magDev);
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <magInit+0x64>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	480d      	ldr	r0, [pc, #52]	; (80034c0 <magInit+0x64>)
 800348a:	4798      	blx	r3
    doneInit = true;
 800348c:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <magInit+0x68>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]

    magDev.magAlignment = alignment;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <magInit+0x64>)
 8003496:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    if (compassConfig.mag_alignment != ALIGN_DEFAULT) {
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <magInit+0x6c>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <magInit+0x50>
        magDev.magAlignment = compassConfig.mag_alignment;
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <magInit+0x6c>)
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <magInit+0x64>)
 80034a8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    }

    buildRotationMatrixFromAlignment(&compassConfig.mag_customAlignment, &magDev.rotationMatrix);
 80034ac:	4907      	ldr	r1, [pc, #28]	; (80034cc <magInit+0x70>)
 80034ae:	4808      	ldr	r0, [pc, #32]	; (80034d0 <magInit+0x74>)
 80034b0:	f002 f9e4 	bl	800587c <buildRotationMatrixFromAlignment>
 80034b4:	e000      	b.n	80034b8 <magInit+0x5c>
        return;
 80034b6:	bf00      	nop
}
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000a6c 	.word	0x20000a6c
 80034c4:	20000b5c 	.word	0x20000b5c
 80034c8:	20000b60 	.word	0x20000b60
 80034cc:	20000b30 	.word	0x20000b30
 80034d0:	20000b70 	.word	0x20000b70

080034d4 <magUpdate>:

void magUpdate(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
    if (!magDev.read(&magDev)) {
 80034da:	4b2c      	ldr	r3, [pc, #176]	; (800358c <magUpdate+0xb8>)
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	482b      	ldr	r0, [pc, #172]	; (800358c <magUpdate+0xb8>)
 80034e0:	4798      	blx	r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d04d      	beq.n	8003584 <magUpdate+0xb0>
        return;
    }

    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 80034e8:	2300      	movs	r3, #0
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	e00c      	b.n	8003508 <magUpdate+0x34>
    	mag.magADC[axis] = magDev.magADC[axis];
 80034ee:	4a27      	ldr	r2, [pc, #156]	; (800358c <magUpdate+0xb8>)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4925      	ldr	r1, [pc, #148]	; (8003590 <magUpdate+0xbc>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3301      	adds	r3, #1
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b02      	cmp	r3, #2
 800350c:	ddef      	ble.n	80034ee <magUpdate+0x1a>
    }

    alignSensorViaRotation(mag.magADC, magDev.magAlignment);
 800350e:	4b1f      	ldr	r3, [pc, #124]	; (800358c <magUpdate+0xb8>)
 8003510:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003514:	4619      	mov	r1, r3
 8003516:	481e      	ldr	r0, [pc, #120]	; (8003590 <magUpdate+0xbc>)
 8003518:	f002 fa42 	bl	80059a0 <alignSensorViaRotation>

    flightDynamicsTrims_t *magZero = &compassConfig.magZero;
 800351c:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <magUpdate+0xc0>)
 800351e:	603b      	str	r3, [r7, #0]
    if (doneInit) {              // we apply offset only once mag calibration is done
 8003520:	4b1d      	ldr	r3, [pc, #116]	; (8003598 <magUpdate+0xc4>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d02e      	beq.n	8003586 <magUpdate+0xb2>
        mag.magADC[X] -= magZero->raw[X];
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <magUpdate+0xbc>)
 800352a:	ed93 7a00 	vldr	s14, [r3]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800353c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003540:	4b13      	ldr	r3, [pc, #76]	; (8003590 <magUpdate+0xbc>)
 8003542:	edc3 7a00 	vstr	s15, [r3]
        mag.magADC[Y] -= magZero->raw[Y];
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <magUpdate+0xbc>)
 8003548:	ed93 7a01 	vldr	s14, [r3, #4]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800355a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <magUpdate+0xbc>)
 8003560:	edc3 7a01 	vstr	s15, [r3, #4]
        mag.magADC[Z] -= magZero->raw[Z];
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <magUpdate+0xbc>)
 8003566:	ed93 7a02 	vldr	s14, [r3, #8]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <magUpdate+0xbc>)
 800357e:	edc3 7a02 	vstr	s15, [r3, #8]
 8003582:	e000      	b.n	8003586 <magUpdate+0xb2>
        return;
 8003584:	bf00      	nop
    }
}
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	20000a6c 	.word	0x20000a6c
 8003590:	20000a60 	.word	0x20000a60
 8003594:	20000b68 	.word	0x20000b68
 8003598:	20000b5c 	.word	0x20000b5c

0800359c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035a0:	f008 f856 	bl	800b650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035a4:	f000 f8d2 	bl	800374c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035a8:	f000 f970 	bl	800388c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80035ac:	f000 f93e 	bl	800382c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf(" \r\n");
 80035b0:	4848      	ldr	r0, [pc, #288]	; (80036d4 <main+0x138>)
 80035b2:	f00f fe11 	bl	80131d8 <puts>
  // initializing and enabling LPS22HB BAROMETER
  IKS01A2_ENV_SENSOR_Init(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 80035b6:	2102      	movs	r1, #2
 80035b8:	2001      	movs	r0, #1
 80035ba:	f007 f97b 	bl	800a8b4 <IKS01A2_ENV_SENSOR_Init>
  IKS01A2_ENV_SENSOR_Enable(IKS01A2_LPS22HB_0, ENV_PRESSURE);
 80035be:	2102      	movs	r1, #2
 80035c0:	2001      	movs	r0, #1
 80035c2:	f007 fa37 	bl	800aa34 <IKS01A2_ENV_SENSOR_Enable>

  // initializing and enabling LSM303AGR ACCELEROMETER
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO);
 80035c6:	2102      	movs	r1, #2
 80035c8:	2001      	movs	r0, #1
 80035ca:	f007 fc75 	bl	800aeb8 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO);
 80035ce:	2102      	movs	r1, #2
 80035d0:	2001      	movs	r0, #1
 80035d2:	f007 fd6d 	bl	800b0b0 <IKS01A2_MOTION_SENSOR_Enable>

  // initializing and enabling LSM303AGR MAGNETOMETER
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80035d6:	2104      	movs	r1, #4
 80035d8:	2002      	movs	r0, #2
 80035da:	f007 fc6d 	bl	800aeb8 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80035de:	2104      	movs	r1, #4
 80035e0:	2002      	movs	r0, #2
 80035e2:	f007 fd65 	bl	800b0b0 <IKS01A2_MOTION_SENSOR_Enable>

  // initializing and enabling LSM6DSL ACCELLEROMETER
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80035e6:	2102      	movs	r1, #2
 80035e8:	2000      	movs	r0, #0
 80035ea:	f007 fc65 	bl	800aeb8 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80035ee:	2102      	movs	r1, #2
 80035f0:	2000      	movs	r0, #0
 80035f2:	f007 fd5d 	bl	800b0b0 <IKS01A2_MOTION_SENSOR_Enable>

  // initializing and enabling LSM6DSL GYROSCOPE
  IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80035f6:	2101      	movs	r1, #1
 80035f8:	2000      	movs	r0, #0
 80035fa:	f007 fc5d 	bl	800aeb8 <IKS01A2_MOTION_SENSOR_Init>
  IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80035fe:	2101      	movs	r1, #1
 8003600:	2000      	movs	r0, #0
 8003602:	f007 fd55 	bl	800b0b0 <IKS01A2_MOTION_SENSOR_Enable>

  //Setting LPS22HB ODR to its max value 50.0hz (75.0hz visible in lps22hb.c but not compliant (??))
  IKS01A2_ENV_SENSOR_SetOutputDataRate(IKS01A2_LPS22HB_0, ENV_PRESSURE, 50.0f);
 8003606:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80036d8 <main+0x13c>
 800360a:	2102      	movs	r1, #2
 800360c:	2001      	movs	r0, #1
 800360e:	f007 fa53 	bl	800aab8 <IKS01A2_ENV_SENSOR_SetOutputDataRate>
  //Setting LSM303AGR's accelerometer ODR to 200hz
  IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO, 200.0f);
 8003612:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80036dc <main+0x140>
 8003616:	2102      	movs	r1, #2
 8003618:	2001      	movs	r0, #1
 800361a:	f007 fdcf 	bl	800b1bc <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
  //Setting LSM303AGR's magnetometer ODR to 100hz (MAX ODR)
  IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, 100.0f);
 800361e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80036e0 <main+0x144>
 8003622:	2104      	movs	r1, #4
 8003624:	2002      	movs	r0, #2
 8003626:	f007 fdc9 	bl	800b1bc <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
  //Setting LSM6DSL's accelerometer ODR to 833hz
  IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, 833.0f);
 800362a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80036e4 <main+0x148>
 800362e:	2102      	movs	r1, #2
 8003630:	2000      	movs	r0, #0
 8003632:	f007 fdc3 	bl	800b1bc <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
  //Setting LSM6DSL's gyroscope ODR to 833hz
  IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_GYRO, 833.0f);
 8003636:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80036e4 <main+0x148>
 800363a:	2101      	movs	r1, #1
 800363c:	2000      	movs	r0, #0
 800363e:	f007 fdbd 	bl	800b1bc <IKS01A2_MOTION_SENSOR_SetOutputDataRate>

  /* initialization of control task */
  gyroInit(sensorGyroInit, sensorGyroRead);
 8003642:	4929      	ldr	r1, [pc, #164]	; (80036e8 <main+0x14c>)
 8003644:	4829      	ldr	r0, [pc, #164]	; (80036ec <main+0x150>)
 8003646:	f7fe fcbd 	bl	8001fc4 <gyroInit>
  controlMotorInit();
 800364a:	f7fd fb5b 	bl	8000d04 <controlMotorInit>

  /* initialization of attitude task*/
  accInit(sensorAccInit, sensorAccRead);
 800364e:	4928      	ldr	r1, [pc, #160]	; (80036f0 <main+0x154>)
 8003650:	4828      	ldr	r0, [pc, #160]	; (80036f4 <main+0x158>)
 8003652:	f7fd f87f 	bl	8000754 <accInit>
  magInit(sensorMagInit, sensorMagRead);
 8003656:	4928      	ldr	r1, [pc, #160]	; (80036f8 <main+0x15c>)
 8003658:	4828      	ldr	r0, [pc, #160]	; (80036fc <main+0x160>)
 800365a:	f7ff feff 	bl	800345c <magInit>
  attitudeInit();
 800365e:	f7fd f9b3 	bl	80009c8 <attitudeInit>

  /* initialization of altitude task */
  baroInit(sensorBaroInit, sensorBaroRead);
 8003662:	4927      	ldr	r1, [pc, #156]	; (8003700 <main+0x164>)
 8003664:	4827      	ldr	r0, [pc, #156]	; (8003704 <main+0x168>)
 8003666:	f7fd fabd 	bl	8000be4 <baroInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800366a:	f00b fb81 	bl	800ed70 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semaphoreDataStore */
  semaphoreDataStoreHandle = osSemaphoreNew(1, 1, &semaphoreDataStore_attributes);
 800366e:	4a26      	ldr	r2, [pc, #152]	; (8003708 <main+0x16c>)
 8003670:	2101      	movs	r1, #1
 8003672:	2001      	movs	r0, #1
 8003674:	f00b fcba 	bl	800efec <osSemaphoreNew>
 8003678:	4603      	mov	r3, r0
 800367a:	4a24      	ldr	r2, [pc, #144]	; (800370c <main+0x170>)
 800367c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of tControlMotor */
  tControlMotorHandle = osThreadNew(startTaskControlMotor, NULL, &tControlMotor_attributes);
 800367e:	4a24      	ldr	r2, [pc, #144]	; (8003710 <main+0x174>)
 8003680:	2100      	movs	r1, #0
 8003682:	4824      	ldr	r0, [pc, #144]	; (8003714 <main+0x178>)
 8003684:	f00b fbde 	bl	800ee44 <osThreadNew>
 8003688:	4603      	mov	r3, r0
 800368a:	4a23      	ldr	r2, [pc, #140]	; (8003718 <main+0x17c>)
 800368c:	6013      	str	r3, [r2, #0]

  /* creation of tAttitude */
  tAttitudeHandle = osThreadNew(startTaskAttitude, NULL, &tAttitude_attributes);
 800368e:	4a23      	ldr	r2, [pc, #140]	; (800371c <main+0x180>)
 8003690:	2100      	movs	r1, #0
 8003692:	4823      	ldr	r0, [pc, #140]	; (8003720 <main+0x184>)
 8003694:	f00b fbd6 	bl	800ee44 <osThreadNew>
 8003698:	4603      	mov	r3, r0
 800369a:	4a22      	ldr	r2, [pc, #136]	; (8003724 <main+0x188>)
 800369c:	6013      	str	r3, [r2, #0]

  /* creation of tAltitude */
  tAltitudeHandle = osThreadNew(startTaskAltitude, NULL, &tAltitude_attributes);
 800369e:	4a22      	ldr	r2, [pc, #136]	; (8003728 <main+0x18c>)
 80036a0:	2100      	movs	r1, #0
 80036a2:	4822      	ldr	r0, [pc, #136]	; (800372c <main+0x190>)
 80036a4:	f00b fbce 	bl	800ee44 <osThreadNew>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4a21      	ldr	r2, [pc, #132]	; (8003730 <main+0x194>)
 80036ac:	6013      	str	r3, [r2, #0]

  /* creation of printUart */
  printUartHandle = osThreadNew(startPrintUart, NULL, &printUart_attributes);
 80036ae:	4a21      	ldr	r2, [pc, #132]	; (8003734 <main+0x198>)
 80036b0:	2100      	movs	r1, #0
 80036b2:	4821      	ldr	r0, [pc, #132]	; (8003738 <main+0x19c>)
 80036b4:	f00b fbc6 	bl	800ee44 <osThreadNew>
 80036b8:	4603      	mov	r3, r0
 80036ba:	4a20      	ldr	r2, [pc, #128]	; (800373c <main+0x1a0>)
 80036bc:	6013      	str	r3, [r2, #0]

  /* creation of taskI2cRead */
  taskI2cReadHandle = osThreadNew(taskI2cR, NULL, &taskI2cRead_attributes);
 80036be:	4a20      	ldr	r2, [pc, #128]	; (8003740 <main+0x1a4>)
 80036c0:	2100      	movs	r1, #0
 80036c2:	4820      	ldr	r0, [pc, #128]	; (8003744 <main+0x1a8>)
 80036c4:	f00b fbbe 	bl	800ee44 <osThreadNew>
 80036c8:	4603      	mov	r3, r0
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <main+0x1ac>)
 80036cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80036ce:	f00b fb83 	bl	800edd8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036d2:	e7fe      	b.n	80036d2 <main+0x136>
 80036d4:	08015494 	.word	0x08015494
 80036d8:	42480000 	.word	0x42480000
 80036dc:	43480000 	.word	0x43480000
 80036e0:	42c80000 	.word	0x42c80000
 80036e4:	44504000 	.word	0x44504000
 80036e8:	08003ad5 	.word	0x08003ad5
 80036ec:	08003ac1 	.word	0x08003ac1
 80036f0:	08003b21 	.word	0x08003b21
 80036f4:	08003b0d 	.word	0x08003b0d
 80036f8:	08003b69 	.word	0x08003b69
 80036fc:	08003b55 	.word	0x08003b55
 8003700:	08003bb9 	.word	0x08003bb9
 8003704:	08003b9d 	.word	0x08003b9d
 8003708:	08015690 	.word	0x08015690
 800370c:	20000c14 	.word	0x20000c14
 8003710:	08015600 	.word	0x08015600
 8003714:	08003e49 	.word	0x08003e49
 8003718:	20000c00 	.word	0x20000c00
 800371c:	08015624 	.word	0x08015624
 8003720:	08003e61 	.word	0x08003e61
 8003724:	20000c04 	.word	0x20000c04
 8003728:	08015648 	.word	0x08015648
 800372c:	08003e7d 	.word	0x08003e7d
 8003730:	20000c08 	.word	0x20000c08
 8003734:	2000003c 	.word	0x2000003c
 8003738:	08003e91 	.word	0x08003e91
 800373c:	20000c0c 	.word	0x20000c0c
 8003740:	0801566c 	.word	0x0801566c
 8003744:	08003ff9 	.word	0x08003ff9
 8003748:	20000c10 	.word	0x20000c10

0800374c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b094      	sub	sp, #80	; 0x50
 8003750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003752:	f107 031c 	add.w	r3, r7, #28
 8003756:	2234      	movs	r2, #52	; 0x34
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f00e ffd7 	bl	801270e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003760:	f107 0308 	add.w	r3, r7, #8
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003770:	f009 f99e 	bl	800cab0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003774:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <SystemClock_Config+0xd8>)
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <SystemClock_Config+0xd8>)
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377e:	6413      	str	r3, [r2, #64]	; 0x40
 8003780:	4b28      	ldr	r3, [pc, #160]	; (8003824 <SystemClock_Config+0xd8>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800378c:	4b26      	ldr	r3, [pc, #152]	; (8003828 <SystemClock_Config+0xdc>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a25      	ldr	r2, [pc, #148]	; (8003828 <SystemClock_Config+0xdc>)
 8003792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b23      	ldr	r3, [pc, #140]	; (8003828 <SystemClock_Config+0xdc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037a0:	603b      	str	r3, [r7, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80037a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80037ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ae:	2302      	movs	r3, #2
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80037b8:	2304      	movs	r3, #4
 80037ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80037bc:	23d8      	movs	r3, #216	; 0xd8
 80037be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037c0:	2302      	movs	r3, #2
 80037c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80037c4:	2309      	movs	r3, #9
 80037c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037c8:	2302      	movs	r3, #2
 80037ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037cc:	f107 031c 	add.w	r3, r7, #28
 80037d0:	4618      	mov	r0, r3
 80037d2:	f009 f9cd 	bl	800cb70 <HAL_RCC_OscConfig>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037dc:	f000 fc3c 	bl	8004058 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80037e0:	f009 f976 	bl	800cad0 <HAL_PWREx_EnableOverDrive>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80037ea:	f000 fc35 	bl	8004058 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ee:	230f      	movs	r3, #15
 80037f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037f2:	2302      	movs	r3, #2
 80037f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003804:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	2107      	movs	r1, #7
 800380c:	4618      	mov	r0, r3
 800380e:	f009 fc5d 	bl	800d0cc <HAL_RCC_ClockConfig>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003818:	f000 fc1e 	bl	8004058 <Error_Handler>
  }
}
 800381c:	bf00      	nop
 800381e:	3750      	adds	r7, #80	; 0x50
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000

0800382c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <MX_USART3_UART_Init+0x58>)
 8003832:	4a15      	ldr	r2, [pc, #84]	; (8003888 <MX_USART3_UART_Init+0x5c>)
 8003834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003836:	4b13      	ldr	r3, [pc, #76]	; (8003884 <MX_USART3_UART_Init+0x58>)
 8003838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800383c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <MX_USART3_UART_Init+0x58>)
 8003840:	2200      	movs	r2, #0
 8003842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <MX_USART3_UART_Init+0x58>)
 8003846:	2200      	movs	r2, #0
 8003848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <MX_USART3_UART_Init+0x58>)
 800384c:	2200      	movs	r2, #0
 800384e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <MX_USART3_UART_Init+0x58>)
 8003852:	220c      	movs	r2, #12
 8003854:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <MX_USART3_UART_Init+0x58>)
 8003858:	2200      	movs	r2, #0
 800385a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <MX_USART3_UART_Init+0x58>)
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <MX_USART3_UART_Init+0x58>)
 8003864:	2200      	movs	r2, #0
 8003866:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003868:	4b06      	ldr	r3, [pc, #24]	; (8003884 <MX_USART3_UART_Init+0x58>)
 800386a:	2200      	movs	r2, #0
 800386c:	625a      	str	r2, [r3, #36]	; 0x24
   if (HAL_UART_Init(&huart3) != HAL_OK)
 800386e:	4805      	ldr	r0, [pc, #20]	; (8003884 <MX_USART3_UART_Init+0x58>)
 8003870:	f00a fd8c 	bl	800e38c <HAL_UART_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800387a:	f000 fbed 	bl	8004058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000b78 	.word	0x20000b78
 8003888:	40004800 	.word	0x40004800

0800388c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	; 0x30
 8003890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003892:	f107 031c 	add.w	r3, r7, #28
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a2:	4b77      	ldr	r3, [pc, #476]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a76      	ldr	r2, [pc, #472]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038a8:	f043 0304 	orr.w	r3, r3, #4
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b74      	ldr	r3, [pc, #464]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038ba:	4b71      	ldr	r3, [pc, #452]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4a70      	ldr	r2, [pc, #448]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b6e      	ldr	r3, [pc, #440]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d2:	4b6b      	ldr	r3, [pc, #428]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	4a6a      	ldr	r2, [pc, #424]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6313      	str	r3, [r2, #48]	; 0x30
 80038de:	4b68      	ldr	r3, [pc, #416]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ea:	4b65      	ldr	r3, [pc, #404]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a64      	ldr	r2, [pc, #400]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038f0:	f043 0302 	orr.w	r3, r3, #2
 80038f4:	6313      	str	r3, [r2, #48]	; 0x30
 80038f6:	4b62      	ldr	r3, [pc, #392]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003902:	4b5f      	ldr	r3, [pc, #380]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a5e      	ldr	r2, [pc, #376]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 8003908:	f043 0308 	orr.w	r3, r3, #8
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b5c      	ldr	r3, [pc, #368]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800391a:	4b59      	ldr	r3, [pc, #356]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	4a58      	ldr	r2, [pc, #352]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 8003920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003924:	6313      	str	r3, [r2, #48]	; 0x30
 8003926:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <MX_GPIO_Init+0x1f4>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003932:	2200      	movs	r2, #0
 8003934:	f244 0181 	movw	r1, #16513	; 0x4081
 8003938:	4852      	ldr	r0, [pc, #328]	; (8003a84 <MX_GPIO_Init+0x1f8>)
 800393a:	f008 fa51 	bl	800bde0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800393e:	2200      	movs	r2, #0
 8003940:	2140      	movs	r1, #64	; 0x40
 8003942:	4851      	ldr	r0, [pc, #324]	; (8003a88 <MX_GPIO_Init+0x1fc>)
 8003944:	f008 fa4c 	bl	800bde0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800394c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800394e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003958:	f107 031c 	add.w	r3, r7, #28
 800395c:	4619      	mov	r1, r3
 800395e:	484b      	ldr	r0, [pc, #300]	; (8003a8c <MX_GPIO_Init+0x200>)
 8003960:	f007 ff86 	bl	800b870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003964:	2332      	movs	r3, #50	; 0x32
 8003966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003970:	2303      	movs	r3, #3
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003974:	230b      	movs	r3, #11
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003978:	f107 031c 	add.w	r3, r7, #28
 800397c:	4619      	mov	r1, r3
 800397e:	4843      	ldr	r0, [pc, #268]	; (8003a8c <MX_GPIO_Init+0x200>)
 8003980:	f007 ff76 	bl	800b870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003984:	2386      	movs	r3, #134	; 0x86
 8003986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003990:	2303      	movs	r3, #3
 8003992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003994:	230b      	movs	r3, #11
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003998:	f107 031c 	add.w	r3, r7, #28
 800399c:	4619      	mov	r1, r3
 800399e:	483c      	ldr	r0, [pc, #240]	; (8003a90 <MX_GPIO_Init+0x204>)
 80039a0:	f007 ff66 	bl	800b870 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80039a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80039a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039aa:	2301      	movs	r3, #1
 80039ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b2:	2300      	movs	r3, #0
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b6:	f107 031c 	add.w	r3, r7, #28
 80039ba:	4619      	mov	r1, r3
 80039bc:	4831      	ldr	r0, [pc, #196]	; (8003a84 <MX_GPIO_Init+0x1f8>)
 80039be:	f007 ff57 	bl	800b870 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80039c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c8:	2302      	movs	r3, #2
 80039ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d0:	2303      	movs	r3, #3
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039d4:	230b      	movs	r3, #11
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80039d8:	f107 031c 	add.w	r3, r7, #28
 80039dc:	4619      	mov	r1, r3
 80039de:	4829      	ldr	r0, [pc, #164]	; (8003a84 <MX_GPIO_Init+0x1f8>)
 80039e0:	f007 ff46 	bl	800b870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80039e4:	2340      	movs	r3, #64	; 0x40
 80039e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039e8:	2301      	movs	r3, #1
 80039ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f0:	2300      	movs	r3, #0
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80039f4:	f107 031c 	add.w	r3, r7, #28
 80039f8:	4619      	mov	r1, r3
 80039fa:	4823      	ldr	r0, [pc, #140]	; (8003a88 <MX_GPIO_Init+0x1fc>)
 80039fc:	f007 ff38 	bl	800b870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a04:	2300      	movs	r3, #0
 8003a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	4619      	mov	r1, r3
 8003a12:	481d      	ldr	r0, [pc, #116]	; (8003a88 <MX_GPIO_Init+0x1fc>)
 8003a14:	f007 ff2c 	bl	800b870 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003a18:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a26:	2303      	movs	r3, #3
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2e:	f107 031c 	add.w	r3, r7, #28
 8003a32:	4619      	mov	r1, r3
 8003a34:	4816      	ldr	r0, [pc, #88]	; (8003a90 <MX_GPIO_Init+0x204>)
 8003a36:	f007 ff1b 	bl	800b870 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a40:	2300      	movs	r3, #0
 8003a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a48:	f107 031c 	add.w	r3, r7, #28
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4810      	ldr	r0, [pc, #64]	; (8003a90 <MX_GPIO_Init+0x204>)
 8003a50:	f007 ff0e 	bl	800b870 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003a54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a62:	2303      	movs	r3, #3
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a66:	230b      	movs	r3, #11
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a6a:	f107 031c 	add.w	r3, r7, #28
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4805      	ldr	r0, [pc, #20]	; (8003a88 <MX_GPIO_Init+0x1fc>)
 8003a72:	f007 fefd 	bl	800b870 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a76:	bf00      	nop
 8003a78:	3730      	adds	r7, #48	; 0x30
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40020400 	.word	0x40020400
 8003a88:	40021800 	.word	0x40021800
 8003a8c:	40020800 	.word	0x40020800
 8003a90:	40020000 	.word	0x40020000

08003a94 <_write>:

/* USER CODE BEGIN 4 */


int _write(int file, char *ptr, int len){
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	4804      	ldr	r0, [pc, #16]	; (8003abc <_write+0x28>)
 8003aac:	f00a fcbc 	bl	800e428 <HAL_UART_Transmit>
	return len;
 8003ab0:	687b      	ldr	r3, [r7, #4]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000b78 	.word	0x20000b78

08003ac0 <sensorGyroInit>:

static void sensorGyroInit(struct gyroDev_s *gyro) { }
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <sensorGyroRead>:

static bool sensorGyroRead(struct gyroDev_s *gyro) {
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	gyro->gyroADC[0] = sensorData.gyroX;
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <sensorGyroRead+0x34>)
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	gyro->gyroADC[1] = sensorData.gyroY;
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <sensorGyroRead+0x34>)
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	gyro->gyroADC[2] = sensorData.gyroZ;
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <sensorGyroRead+0x34>)
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	return true;
 8003afa:	2301      	movs	r3, #1
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	20000c18 	.word	0x20000c18

08003b0c <sensorAccInit>:

static void sensorAccInit(struct accDev_s *acc) { }
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <sensorAccRead>:

static bool sensorAccRead(struct accDev_s *acc) {
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	acc->accADC[0] = sensorData.accX;
 8003b28:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <sensorAccRead+0x30>)
 8003b2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	611a      	str	r2, [r3, #16]
	acc->accADC[1] = sensorData.accY;
 8003b30:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <sensorAccRead+0x30>)
 8003b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	615a      	str	r2, [r3, #20]
	acc->accADC[2] = sensorData.accZ;
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <sensorAccRead+0x30>)
 8003b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	619a      	str	r2, [r3, #24]
	return true;
 8003b40:	2301      	movs	r3, #1
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000c18 	.word	0x20000c18

08003b54 <sensorMagInit>:

static void sensorMagInit(struct magDev_s *mag) { }
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <sensorMagRead>:

static bool sensorMagRead(struct magDev_s *mag) {
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	mag->magADC[0] = sensorData.magX;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <sensorMagRead+0x30>)
 8003b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	601a      	str	r2, [r3, #0]
	mag->magADC[1] = sensorData.magY;
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <sensorMagRead+0x30>)
 8003b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	605a      	str	r2, [r3, #4]
	mag->magADC[2] = sensorData.magZ;
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <sensorMagRead+0x30>)
 8003b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	609a      	str	r2, [r3, #8]
	return true;
 8003b88:	2301      	movs	r3, #1
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000c18 	.word	0x20000c18

08003b9c <sensorBaroInit>:

static void sensorBaroInit(struct baroDev_s *baro) {
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	baro->baroADC = 0;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <sensorBaroRead>:

static bool sensorBaroRead(struct baroDev_s *baro) {
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	baro->baroADC = sensorData.baro;
 8003bc0:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <sensorBaroRead+0x2c>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bca:	ee17 2a90 	vmov	r2, s15
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	return true;
 8003bd4:	2301      	movs	r3, #1
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000c18 	.word	0x20000c18

08003be8 <gyroDataRead>:

static void gyroDataRead() {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0

	IKS01A2_MOTION_SENSOR_AxesRaw_t gyroAxes;
	IKS01A2_MOTION_SENSOR_GetAxesRaw(IKS01A2_LSM6DSL_0, MOTION_GYRO, &gyroAxes);
 8003bee:	463b      	mov	r3, r7
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f007 fa9d 	bl	800b134 <IKS01A2_MOTION_SENSOR_GetAxesRaw>

	// converting Raw Data to mdps and multiplying by 0.0000174 to get the value in radiant
	sensorData.gyroX = (lsm6dsl_from_fs2000dps_to_mdps(gyroAxes.x))* mdpsToRadDivSec1;
 8003bfa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f006 fb4a 	bl	800a298 <lsm6dsl_from_fs2000dps_to_mdps>
 8003c04:	eef0 7a40 	vmov.f32	s15, s0
 8003c08:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003c58 <gyroDataRead+0x70>
 8003c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c10:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <gyroDataRead+0x74>)
 8003c12:	edc3 7a01 	vstr	s15, [r3, #4]
	sensorData.gyroY = (lsm6dsl_from_fs2000dps_to_mdps(gyroAxes.x))* mdpsToRadDivSec1;
 8003c16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f006 fb3c 	bl	800a298 <lsm6dsl_from_fs2000dps_to_mdps>
 8003c20:	eef0 7a40 	vmov.f32	s15, s0
 8003c24:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003c58 <gyroDataRead+0x70>
 8003c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <gyroDataRead+0x74>)
 8003c2e:	edc3 7a02 	vstr	s15, [r3, #8]
	sensorData.gyroZ = (lsm6dsl_from_fs2000dps_to_mdps(gyroAxes.x))* mdpsToRadDivSec1;
 8003c32:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f006 fb2e 	bl	800a298 <lsm6dsl_from_fs2000dps_to_mdps>
 8003c3c:	eef0 7a40 	vmov.f32	s15, s0
 8003c40:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003c58 <gyroDataRead+0x70>
 8003c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <gyroDataRead+0x74>)
 8003c4a:	edc3 7a03 	vstr	s15, [r3, #12]

}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	3791f637 	.word	0x3791f637
 8003c5c:	20000c18 	.word	0x20000c18

08003c60 <accDataRead>:

static void accDataRead() {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0

	IKS01A2_MOTION_SENSOR_AxesRaw_t  acclsm303agrAxes;
	IKS01A2_MOTION_SENSOR_AxesRaw_t  acclsm6dslAxes;
	IKS01A2_MOTION_SENSOR_GetAxesRaw(IKS01A2_LSM303AGR_ACC_0, MOTION_ACCELERO, &acclsm303agrAxes);
 8003c66:	f107 0308 	add.w	r3, r7, #8
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2102      	movs	r1, #2
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f007 fa60 	bl	800b134 <IKS01A2_MOTION_SENSOR_GetAxesRaw>
	IKS01A2_MOTION_SENSOR_GetAxesRaw(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, &acclsm6dslAxes);
 8003c74:	463b      	mov	r3, r7
 8003c76:	461a      	mov	r2, r3
 8003c78:	2102      	movs	r1, #2
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f007 fa5a 	bl	800b134 <IKS01A2_MOTION_SENSOR_GetAxesRaw>

	//Converting Raw data to milligravity and then converting to m/sec^2
	sensorData.acc303AGR_X = (lsm303agr_from_fs_2g_nm_to_mg(acclsm303agrAxes.x)) * mgToMeterDivSec2;
 8003c80:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f004 ff87 	bl	8008b98 <lsm303agr_from_fs_2g_nm_to_mg>
 8003c8a:	eef0 7a40 	vmov.f32	s15, s0
 8003c8e:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003d8c <accDataRead+0x12c>
 8003c92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c96:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <accDataRead+0x130>)
 8003c98:	edc3 7a07 	vstr	s15, [r3, #28]
	sensorData.acc303AGR_Y = (lsm303agr_from_fs_2g_nm_to_mg(acclsm303agrAxes.y)) * mgToMeterDivSec2;
 8003c9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f004 ff79 	bl	8008b98 <lsm303agr_from_fs_2g_nm_to_mg>
 8003ca6:	eef0 7a40 	vmov.f32	s15, s0
 8003caa:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003d8c <accDataRead+0x12c>
 8003cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cb2:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <accDataRead+0x130>)
 8003cb4:	edc3 7a08 	vstr	s15, [r3, #32]
	sensorData.acc303AGR_Z = (lsm303agr_from_fs_2g_nm_to_mg(acclsm303agrAxes.z)) * mgToMeterDivSec2;
 8003cb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f004 ff6b 	bl	8008b98 <lsm303agr_from_fs_2g_nm_to_mg>
 8003cc2:	eef0 7a40 	vmov.f32	s15, s0
 8003cc6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003d8c <accDataRead+0x12c>
 8003cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cce:	4b30      	ldr	r3, [pc, #192]	; (8003d90 <accDataRead+0x130>)
 8003cd0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	sensorData.acc6DSL_X = (lsm6dsl_from_fs2g_to_mg(acclsm6dslAxes.x)) * mgToMeterDivSec2;
 8003cd4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f006 fac5 	bl	800a268 <lsm6dsl_from_fs2g_to_mg>
 8003cde:	eef0 7a40 	vmov.f32	s15, s0
 8003ce2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003d8c <accDataRead+0x12c>
 8003ce6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cea:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <accDataRead+0x130>)
 8003cec:	edc3 7a04 	vstr	s15, [r3, #16]
	sensorData.acc6DSL_Y = (lsm6dsl_from_fs2g_to_mg(acclsm6dslAxes.y)) * mgToMeterDivSec2;
 8003cf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f006 fab7 	bl	800a268 <lsm6dsl_from_fs2g_to_mg>
 8003cfa:	eef0 7a40 	vmov.f32	s15, s0
 8003cfe:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003d8c <accDataRead+0x12c>
 8003d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d06:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <accDataRead+0x130>)
 8003d08:	edc3 7a05 	vstr	s15, [r3, #20]
	sensorData.acc6DSL_Z = (lsm6dsl_from_fs2g_to_mg(acclsm6dslAxes.z)) * mgToMeterDivSec2;
 8003d0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f006 faa9 	bl	800a268 <lsm6dsl_from_fs2g_to_mg>
 8003d16:	eef0 7a40 	vmov.f32	s15, s0
 8003d1a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003d8c <accDataRead+0x12c>
 8003d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d22:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <accDataRead+0x130>)
 8003d24:	edc3 7a06 	vstr	s15, [r3, #24]

	sensorData.accX  = (sensorData.acc6DSL_X + sensorData.acc303AGR_X)/2;
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <accDataRead+0x130>)
 8003d2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8003d2e:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <accDataRead+0x130>)
 8003d30:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d38:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d40:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <accDataRead+0x130>)
 8003d42:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	sensorData.accY  = (sensorData.acc6DSL_Y + sensorData.acc303AGR_Y)/2;
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <accDataRead+0x130>)
 8003d48:	ed93 7a05 	vldr	s14, [r3, #20]
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <accDataRead+0x130>)
 8003d4e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d56:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <accDataRead+0x130>)
 8003d60:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	sensorData.accZ  = (sensorData.acc6DSL_Z + sensorData.acc303AGR_Z)/2;
 8003d64:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <accDataRead+0x130>)
 8003d66:	ed93 7a06 	vldr	s14, [r3, #24]
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <accDataRead+0x130>)
 8003d6c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <accDataRead+0x130>)
 8003d7e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	3c20abdd 	.word	0x3c20abdd
 8003d90:	20000c18 	.word	0x20000c18

08003d94 <magDataRead>:

static void magDataRead() {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0

	IKS01A2_MOTION_SENSOR_AxesRaw_t  magAxes;
	IKS01A2_MOTION_SENSOR_GetAxesRaw(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, &magAxes);
 8003d9a:	463b      	mov	r3, r7
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2104      	movs	r1, #4
 8003da0:	2002      	movs	r0, #2
 8003da2:	f007 f9c7 	bl	800b134 <IKS01A2_MOTION_SENSOR_GetAxesRaw>

	//Dividing raw value as unit/LSB and converting the result to the desired measurement unit
	sensorData.magX = (lsm303agr_from_lsb_to_mgauss(magAxes.x)) * mGaussToMicroT;
 8003da6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f004 ff12 	bl	8008bd4 <lsm303agr_from_lsb_to_mgauss>
 8003db0:	eef0 7a40 	vmov.f32	s15, s0
 8003db4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003e04 <magDataRead+0x70>
 8003db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dbc:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <magDataRead+0x74>)
 8003dbe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	sensorData.magY = (lsm303agr_from_lsb_to_mgauss(magAxes.y)) * mGaussToMicroT;
 8003dc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 ff04 	bl	8008bd4 <lsm303agr_from_lsb_to_mgauss>
 8003dcc:	eef0 7a40 	vmov.f32	s15, s0
 8003dd0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003e04 <magDataRead+0x70>
 8003dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <magDataRead+0x74>)
 8003dda:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	sensorData.magZ = (lsm303agr_from_lsb_to_mgauss(magAxes.z)) * mGaussToMicroT;
 8003dde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f004 fef6 	bl	8008bd4 <lsm303agr_from_lsb_to_mgauss>
 8003de8:	eef0 7a40 	vmov.f32	s15, s0
 8003dec:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003e04 <magDataRead+0x70>
 8003df0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <magDataRead+0x74>)
 8003df6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	3dcccccd 	.word	0x3dcccccd
 8003e08:	20000c18 	.word	0x20000c18

08003e0c <baroDataRead>:

static void baroDataRead() {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
	float pressure;

	IKS01A2_ENV_SENSOR_GetValue(IKS01A2_LPS22HB_0, ENV_PRESSURE, &pressure);
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	461a      	mov	r2, r3
 8003e16:	2102      	movs	r1, #2
 8003e18:	2001      	movs	r0, #1
 8003e1a:	f006 fe93 	bl	800ab44 <IKS01A2_ENV_SENSOR_GetValue>

	//The absolute LPS22HB pressure range is 260 to 1260 but it occasionally output 0.00f
	if(pressure >= 260){
 8003e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e22:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003e40 <baroDataRead+0x34>
 8003e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2e:	da00      	bge.n	8003e32 <baroDataRead+0x26>
		sensorData.baro = pressure;
	}
}
 8003e30:	e002      	b.n	8003e38 <baroDataRead+0x2c>
		sensorData.baro = pressure;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a03      	ldr	r2, [pc, #12]	; (8003e44 <baroDataRead+0x38>)
 8003e36:	6013      	str	r3, [r2, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	43820000 	.word	0x43820000
 8003e44:	20000c18 	.word	0x20000c18

08003e48 <startTaskControlMotor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startTaskControlMotor */
void startTaskControlMotor(void *argument)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	gyroUpdate();
 8003e50:	f7fe fa36 	bl	80022c0 <gyroUpdate>
	controlMotorUpdate();
 8003e54:	f7fc ff5c 	bl	8000d10 <controlMotorUpdate>
    osDelay(2);
 8003e58:	2002      	movs	r0, #2
 8003e5a:	f00b f899 	bl	800ef90 <osDelay>
	gyroUpdate();
 8003e5e:	e7f7      	b.n	8003e50 <startTaskControlMotor+0x8>

08003e60 <startTaskAttitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAttitude */
void startTaskAttitude(void *argument)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAttitude */
  /* Infinite loop */
  for(;;)
  {
    accUpdate();
 8003e68:	f7fc fcd0 	bl	800080c <accUpdate>
    magUpdate();
 8003e6c:	f7ff fb32 	bl	80034d4 <magUpdate>
    attitudeUpdate();
 8003e70:	f7fc fdb0 	bl	80009d4 <attitudeUpdate>
    osDelay(10);
 8003e74:	200a      	movs	r0, #10
 8003e76:	f00b f88b 	bl	800ef90 <osDelay>
    accUpdate();
 8003e7a:	e7f5      	b.n	8003e68 <startTaskAttitude+0x8>

08003e7c <startTaskAltitude>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTaskAltitude */
void startTaskAltitude(void *argument)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTaskAltitude */
  /* Infinite loop */
  for(;;)
  {
    baroUpdate();
 8003e84:	f7fc fee8 	bl	8000c58 <baroUpdate>
    osDelay(25);
 8003e88:	2019      	movs	r0, #25
 8003e8a:	f00b f881 	bl	800ef90 <osDelay>
    baroUpdate();
 8003e8e:	e7f9      	b.n	8003e84 <startTaskAltitude+0x8>

08003e90 <startPrintUart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintUart */
void startPrintUart(void *argument)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af04      	add	r7, sp, #16
 8003e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPrintUart */
  /* Infinite loop */
  for(;;)
  {
	  printUart_attributes.priority = osPriorityNormal7;
 8003e98:	4b4d      	ldr	r3, [pc, #308]	; (8003fd0 <startPrintUart+0x140>)
 8003e9a:	221f      	movs	r2, #31
 8003e9c:	619a      	str	r2, [r3, #24]

	  osSemaphoreAcquire(semaphoreDataStoreHandle, osWaitForever);
 8003e9e:	4b4d      	ldr	r3, [pc, #308]	; (8003fd4 <startPrintUart+0x144>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f00b f93c 	bl	800f124 <osSemaphoreAcquire>

	  printf("Gyroscope LSM6DSL (rad/sec): X= %.2f Y= %.2f Z= %.2f\r\n", sensorData.gyroX, sensorData.gyroY, sensorData.gyroZ);
 8003eac:	4b4a      	ldr	r3, [pc, #296]	; (8003fd8 <startPrintUart+0x148>)
 8003eae:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eb2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003eb6:	4b48      	ldr	r3, [pc, #288]	; (8003fd8 <startPrintUart+0x148>)
 8003eb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ebc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ec0:	4b45      	ldr	r3, [pc, #276]	; (8003fd8 <startPrintUart+0x148>)
 8003ec2:	edd3 6a03 	vldr	s13, [r3, #12]
 8003ec6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003eca:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003ece:	ed8d 7b00 	vstr	d7, [sp]
 8003ed2:	ec53 2b15 	vmov	r2, r3, d5
 8003ed6:	4841      	ldr	r0, [pc, #260]	; (8003fdc <startPrintUart+0x14c>)
 8003ed8:	f00f f8f8 	bl	80130cc <iprintf>
	  printf("Accelerometer LSM6DSL (m/sec^2): X= %.2f Y= %.2f Z= %.2f\r\n", sensorData.acc6DSL_X, sensorData.acc6DSL_Y, sensorData.acc6DSL_Z);
 8003edc:	4b3e      	ldr	r3, [pc, #248]	; (8003fd8 <startPrintUart+0x148>)
 8003ede:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ee2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003ee6:	4b3c      	ldr	r3, [pc, #240]	; (8003fd8 <startPrintUart+0x148>)
 8003ee8:	edd3 7a05 	vldr	s15, [r3, #20]
 8003eec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ef0:	4b39      	ldr	r3, [pc, #228]	; (8003fd8 <startPrintUart+0x148>)
 8003ef2:	edd3 6a06 	vldr	s13, [r3, #24]
 8003ef6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003efa:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003efe:	ed8d 7b00 	vstr	d7, [sp]
 8003f02:	ec53 2b15 	vmov	r2, r3, d5
 8003f06:	4836      	ldr	r0, [pc, #216]	; (8003fe0 <startPrintUart+0x150>)
 8003f08:	f00f f8e0 	bl	80130cc <iprintf>
	  printf("Accelerometer LSM303AGR (m/sec^2): X= %.2f Y= %.2f Z= %.2f\r\n", sensorData.acc303AGR_X, sensorData.acc303AGR_Y, sensorData.acc303AGR_Z);
 8003f0c:	4b32      	ldr	r3, [pc, #200]	; (8003fd8 <startPrintUart+0x148>)
 8003f0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003f12:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003f16:	4b30      	ldr	r3, [pc, #192]	; (8003fd8 <startPrintUart+0x148>)
 8003f18:	edd3 7a08 	vldr	s15, [r3, #32]
 8003f1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f20:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <startPrintUart+0x148>)
 8003f22:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003f26:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003f2a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003f2e:	ed8d 7b00 	vstr	d7, [sp]
 8003f32:	ec53 2b15 	vmov	r2, r3, d5
 8003f36:	482b      	ldr	r0, [pc, #172]	; (8003fe4 <startPrintUart+0x154>)
 8003f38:	f00f f8c8 	bl	80130cc <iprintf>
	  printf("Accelerometer Average (m/sec^2): X= %.2f Y= %.2f Z= %.2f\r\n", sensorData.accX, sensorData.accY, sensorData.accZ);
 8003f3c:	4b26      	ldr	r3, [pc, #152]	; (8003fd8 <startPrintUart+0x148>)
 8003f3e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003f42:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <startPrintUart+0x148>)
 8003f48:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003f4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f50:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <startPrintUart+0x148>)
 8003f52:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003f56:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003f5a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003f5e:	ed8d 7b00 	vstr	d7, [sp]
 8003f62:	ec53 2b15 	vmov	r2, r3, d5
 8003f66:	4820      	ldr	r0, [pc, #128]	; (8003fe8 <startPrintUart+0x158>)
 8003f68:	f00f f8b0 	bl	80130cc <iprintf>
	  printf("Magnetometer LSM303AGR (Microtesla uT): X= %.2f Y= %.2f Z= %.2f\r\n", sensorData.magX, sensorData.magY, sensorData.magZ);
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <startPrintUart+0x148>)
 8003f6e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003f72:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003f76:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <startPrintUart+0x148>)
 8003f78:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003f7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f80:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <startPrintUart+0x148>)
 8003f82:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8003f86:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003f8a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003f8e:	ed8d 7b00 	vstr	d7, [sp]
 8003f92:	ec53 2b15 	vmov	r2, r3, d5
 8003f96:	4815      	ldr	r0, [pc, #84]	; (8003fec <startPrintUart+0x15c>)
 8003f98:	f00f f898 	bl	80130cc <iprintf>
	  printf("Barometer= %.1fhPa \r\n", sensorData.baro);
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <startPrintUart+0x148>)
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fa6:	ec53 2b17 	vmov	r2, r3, d7
 8003faa:	4811      	ldr	r0, [pc, #68]	; (8003ff0 <startPrintUart+0x160>)
 8003fac:	f00f f88e 	bl	80130cc <iprintf>

	  printf("\r\n");
 8003fb0:	4810      	ldr	r0, [pc, #64]	; (8003ff4 <startPrintUart+0x164>)
 8003fb2:	f00f f911 	bl	80131d8 <puts>

	osSemaphoreRelease(semaphoreDataStoreHandle);
 8003fb6:	4b07      	ldr	r3, [pc, #28]	; (8003fd4 <startPrintUart+0x144>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f00b f918 	bl	800f1f0 <osSemaphoreRelease>

	printUart_attributes.priority = osPriorityNormal3;
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <startPrintUart+0x140>)
 8003fc2:	221b      	movs	r2, #27
 8003fc4:	619a      	str	r2, [r3, #24]

    osDelay(1500);
 8003fc6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003fca:	f00a ffe1 	bl	800ef90 <osDelay>
	  printUart_attributes.priority = osPriorityNormal7;
 8003fce:	e763      	b.n	8003e98 <startPrintUart+0x8>
 8003fd0:	2000003c 	.word	0x2000003c
 8003fd4:	20000c14 	.word	0x20000c14
 8003fd8:	20000c18 	.word	0x20000c18
 8003fdc:	08015498 	.word	0x08015498
 8003fe0:	080154d0 	.word	0x080154d0
 8003fe4:	0801550c 	.word	0x0801550c
 8003fe8:	0801554c 	.word	0x0801554c
 8003fec:	08015588 	.word	0x08015588
 8003ff0:	080155cc 	.word	0x080155cc
 8003ff4:	080155e4 	.word	0x080155e4

08003ff8 <taskI2cR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskI2cR */
void taskI2cR(void *argument)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskI2cR */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(semaphoreDataStoreHandle, osWaitForever);
 8004000:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <taskI2cR+0x38>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f04f 31ff 	mov.w	r1, #4294967295
 8004008:	4618      	mov	r0, r3
 800400a:	f00b f88b 	bl	800f124 <osSemaphoreAcquire>
	  gyroDataRead();
 800400e:	f7ff fdeb 	bl	8003be8 <gyroDataRead>
	  accDataRead();
 8004012:	f7ff fe25 	bl	8003c60 <accDataRead>
	  magDataRead();
 8004016:	f7ff febd 	bl	8003d94 <magDataRead>
	  baroDataRead();
 800401a:	f7ff fef7 	bl	8003e0c <baroDataRead>
	  osSemaphoreRelease(semaphoreDataStoreHandle);
 800401e:	4b04      	ldr	r3, [pc, #16]	; (8004030 <taskI2cR+0x38>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f00b f8e4 	bl	800f1f0 <osSemaphoreRelease>

    osDelay(2);
 8004028:	2002      	movs	r0, #2
 800402a:	f00a ffb1 	bl	800ef90 <osDelay>
	  osSemaphoreAcquire(semaphoreDataStoreHandle, osWaitForever);
 800402e:	e7e7      	b.n	8004000 <taskI2cR+0x8>
 8004030:	20000c14 	.word	0x20000c14

08004034 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a04      	ldr	r2, [pc, #16]	; (8004054 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004046:	f007 fb11 	bl	800b66c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000

08004058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800405c:	b672      	cpsid	i
}
 800405e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004060:	e7fe      	b.n	8004060 <Error_Handler+0x8>

08004062 <constrain>:
#define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
#define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
#define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)

static inline int constrain(int amt, int low, int high)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
    if (amt < low)
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	da01      	bge.n	800407a <constrain+0x18>
        return low;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	e006      	b.n	8004088 <constrain+0x26>
    else if (amt > high)
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	429a      	cmp	r2, r3
 8004080:	dd01      	ble.n	8004086 <constrain+0x24>
        return high;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	e000      	b.n	8004088 <constrain+0x26>
    else
        return amt;
 8004086:	68fb      	ldr	r3, [r7, #12]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <constrainf>:

static inline float constrainf(float amt, float low, float high)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	ed87 0a03 	vstr	s0, [r7, #12]
 800409e:	edc7 0a02 	vstr	s1, [r7, #8]
 80040a2:	ed87 1a01 	vstr	s2, [r7, #4]
    if (amt < low)
 80040a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80040aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80040ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b6:	d501      	bpl.n	80040bc <constrainf+0x28>
        return low;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	e00b      	b.n	80040d4 <constrainf+0x40>
    else if (amt > high)
 80040bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80040c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80040c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	dd01      	ble.n	80040d2 <constrainf+0x3e>
        return high;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	e000      	b.n	80040d4 <constrainf+0x40>
    else
        return amt;
 80040d2:	68fb      	ldr	r3, [r7, #12]
}
 80040d4:	ee07 3a90 	vmov	s15, r3
 80040d8:	eeb0 0a67 	vmov.f32	s0, s15
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <isUsingSticksForArming>:
static float applyActualRates(const int, float, const float);
typedef float (*applyRatesFn)(const int axis, float rcCommandf, const float rcCommandfAbs);
static applyRatesFn applyRates = applyActualRates;

static bool isUsingSticksForArming(void)
{
 80040e6:	b480      	push	{r7}
 80040e8:	af00      	add	r7, sp, #0
    return true;
 80040ea:	2301      	movs	r3, #1
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <pidAntiGravityEnabled>:

static bool pidAntiGravityEnabled(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
    return pidRuntime.antiGravityEnabled;
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <pidAntiGravityEnabled+0x14>)
 80040fe:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
}
 8004102:	4618      	mov	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	20000cf0 	.word	0x20000cf0

08004110 <pidSetTargetLooptime>:

static void pidSetTargetLooptime(uint32_t pidLooptime)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
    targetPidLooptime = pidLooptime;
 8004118:	4a0f      	ldr	r2, [pc, #60]	; (8004158 <pidSetTargetLooptime+0x48>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6013      	str	r3, [r2, #0]
    pidRuntime.dT = targetPidLooptime * 1e-6f;
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <pidSetTargetLooptime+0x48>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	ee07 3a90 	vmov	s15, r3
 8004126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800415c <pidSetTargetLooptime+0x4c>
 800412e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <pidSetTargetLooptime+0x50>)
 8004134:	edc3 7a00 	vstr	s15, [r3]
    pidRuntime.pidFrequency = 1.0f / pidRuntime.dT;
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <pidSetTargetLooptime+0x50>)
 800413a:	ed93 7a00 	vldr	s14, [r3]
 800413e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <pidSetTargetLooptime+0x50>)
 8004148:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	20000f3c 	.word	0x20000f3c
 800415c:	358637bd 	.word	0x358637bd
 8004160:	20000cf0 	.word	0x20000cf0

08004164 <pidInitFilters>:

static void pidInitFilters(const pidProfile_t *pidProfile)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b091      	sub	sp, #68	; 0x44
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
    if (targetPidLooptime == 0) {
 800416c:	4bb0      	ldr	r3, [pc, #704]	; (8004430 <pidInitFilters+0x2cc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10f      	bne.n	8004194 <pidInitFilters+0x30>
        // no looptime set, so set all the filters to null
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 8004174:	4baf      	ldr	r3, [pc, #700]	; (8004434 <pidInitFilters+0x2d0>)
 8004176:	4ab0      	ldr	r2, [pc, #704]	; (8004438 <pidInitFilters+0x2d4>)
 8004178:	619a      	str	r2, [r3, #24]
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 800417a:	4bae      	ldr	r3, [pc, #696]	; (8004434 <pidInitFilters+0x2d0>)
 800417c:	4aae      	ldr	r2, [pc, #696]	; (8004438 <pidInitFilters+0x2d4>)
 800417e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 8004182:	4bac      	ldr	r3, [pc, #688]	; (8004434 <pidInitFilters+0x2d0>)
 8004184:	4aac      	ldr	r2, [pc, #688]	; (8004438 <pidInitFilters+0x2d4>)
 8004186:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 800418a:	4baa      	ldr	r3, [pc, #680]	; (8004434 <pidInitFilters+0x2d0>)
 800418c:	4aaa      	ldr	r2, [pc, #680]	; (8004438 <pidInitFilters+0x2d4>)
 800418e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        return;
 8004192:	e267      	b.n	8004664 <pidInitFilters+0x500>
    }

    const uint32_t pidFrequencyNyquist = pidRuntime.pidFrequency / 2; // No rounding needed
 8004194:	4ba7      	ldr	r3, [pc, #668]	; (8004434 <pidInitFilters+0x2d0>)
 8004196:	ed93 7a01 	vldr	s14, [r3, #4]
 800419a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800419e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a6:	ee17 3a90 	vmov	r3, s15
 80041aa:	617b      	str	r3, [r7, #20]

    uint16_t dTermNotchHz;
    if (pidProfile->dterm_notch_hz <= pidFrequencyNyquist) {
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	889b      	ldrh	r3, [r3, #4]
 80041b0:	461a      	mov	r2, r3
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d303      	bcc.n	80041c0 <pidInitFilters+0x5c>
        dTermNotchHz = pidProfile->dterm_notch_hz;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	889b      	ldrh	r3, [r3, #4]
 80041bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80041be:	e00a      	b.n	80041d6 <pidInitFilters+0x72>
    } else {
        if (pidProfile->dterm_notch_cutoff < pidFrequencyNyquist) {
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	88db      	ldrh	r3, [r3, #6]
 80041c4:	461a      	mov	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d902      	bls.n	80041d2 <pidInitFilters+0x6e>
            dTermNotchHz = pidFrequencyNyquist;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80041d0:	e001      	b.n	80041d6 <pidInitFilters+0x72>
        } else {
            dTermNotchHz = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        }
    }

    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 80041d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d03d      	beq.n	8004258 <pidInitFilters+0xf4>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	88db      	ldrh	r3, [r3, #6]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d039      	beq.n	8004258 <pidInitFilters+0xf4>
        pidRuntime.dtermNotchApplyFn = (filterApplyFnPtr)biquadFilterApply;
 80041e4:	4b93      	ldr	r3, [pc, #588]	; (8004434 <pidInitFilters+0x2d0>)
 80041e6:	4a95      	ldr	r2, [pc, #596]	; (800443c <pidInitFilters+0x2d8>)
 80041e8:	619a      	str	r2, [r3, #24]
        const float notchQ = filterGetNotchQ(dTermNotchHz, pidProfile->dterm_notch_cutoff);
 80041ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80041ec:	ee07 3a90 	vmov	s15, r3
 80041f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	88db      	ldrh	r3, [r3, #6]
 80041f8:	ee07 3a10 	vmov	s14, r3
 80041fc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004200:	eef0 0a47 	vmov.f32	s1, s14
 8004204:	eeb0 0a67 	vmov.f32	s0, s15
 8004208:	f7fc fd8c 	bl	8000d24 <filterGetNotchQ>
 800420c:	ed87 0a04 	vstr	s0, [r7, #16]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004210:	2300      	movs	r3, #0
 8004212:	63bb      	str	r3, [r7, #56]	; 0x38
 8004214:	e01c      	b.n	8004250 <pidInitFilters+0xec>
            biquadFilterInit(&pidRuntime.dtermNotch[axis], dTermNotchHz, targetPidLooptime, notchQ, FILTER_NOTCH, 1.0f);
 8004216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	3318      	adds	r3, #24
 8004222:	4a84      	ldr	r2, [pc, #528]	; (8004434 <pidInitFilters+0x2d0>)
 8004224:	4413      	add	r3, r2
 8004226:	3304      	adds	r3, #4
 8004228:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800422a:	ee07 2a90 	vmov	s15, r2
 800422e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004232:	4a7f      	ldr	r2, [pc, #508]	; (8004430 <pidInitFilters+0x2cc>)
 8004234:	6811      	ldr	r1, [r2, #0]
 8004236:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800423a:	2201      	movs	r2, #1
 800423c:	edd7 0a04 	vldr	s1, [r7, #16]
 8004240:	eeb0 0a67 	vmov.f32	s0, s15
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc fdff 	bl	8000e48 <biquadFilterInit>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424c:	3301      	adds	r3, #1
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	2b02      	cmp	r3, #2
 8004254:	dddf      	ble.n	8004216 <pidInitFilters+0xb2>
    if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 8004256:	e002      	b.n	800425e <pidInitFilters+0xfa>
        }
    } else {
        pidRuntime.dtermNotchApplyFn = nullFilterApply;
 8004258:	4b76      	ldr	r3, [pc, #472]	; (8004434 <pidInitFilters+0x2d0>)
 800425a:	4a77      	ldr	r2, [pc, #476]	; (8004438 <pidInitFilters+0x2d4>)
 800425c:	619a      	str	r2, [r3, #24]
    }

    //1st Dterm Lowpass Filter
    uint16_t dterm_lpf1_init_hz = pidProfile->dterm_lpf1_static_hz;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	885b      	ldrh	r3, [r3, #2]
 8004262:	81fb      	strh	r3, [r7, #14]

    if (dterm_lpf1_init_hz > 0) {
 8004264:	89fb      	ldrh	r3, [r7, #14]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 80c6 	beq.w	80043f8 <pidInitFilters+0x294>
        switch (pidProfile->dterm_lpf1_type) {
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004272:	2b03      	cmp	r3, #3
 8004274:	f200 80bb 	bhi.w	80043ee <pidInitFilters+0x28a>
 8004278:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <pidInitFilters+0x11c>)
 800427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427e:	bf00      	nop
 8004280:	08004291 	.word	0x08004291
 8004284:	080042e7 	.word	0x080042e7
 8004288:	08004343 	.word	0x08004343
 800428c:	08004399 	.word	0x08004399
        case FILTER_PT1:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 8004290:	4b68      	ldr	r3, [pc, #416]	; (8004434 <pidInitFilters+0x2d0>)
 8004292:	4a6b      	ldr	r2, [pc, #428]	; (8004440 <pidInitFilters+0x2dc>)
 8004294:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004298:	2300      	movs	r3, #0
 800429a:	637b      	str	r3, [r7, #52]	; 0x34
 800429c:	e01f      	b.n	80042de <pidInitFilters+0x17a>
                pt1FilterInit(&pidRuntime.dtermLowpass[axis].pt1Filter, pt1FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 800429e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	3398      	adds	r3, #152	; 0x98
 80042aa:	4a62      	ldr	r2, [pc, #392]	; (8004434 <pidInitFilters+0x2d0>)
 80042ac:	189c      	adds	r4, r3, r2
 80042ae:	89fb      	ldrh	r3, [r7, #14]
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b8:	4b5e      	ldr	r3, [pc, #376]	; (8004434 <pidInitFilters+0x2d0>)
 80042ba:	ed93 7a00 	vldr	s14, [r3]
 80042be:	eef0 0a47 	vmov.f32	s1, s14
 80042c2:	eeb0 0a67 	vmov.f32	s0, s15
 80042c6:	f7fc fd5f 	bl	8000d88 <pt1FilterGain>
 80042ca:	eef0 7a40 	vmov.f32	s15, s0
 80042ce:	eeb0 0a67 	vmov.f32	s0, s15
 80042d2:	4620      	mov	r0, r4
 80042d4:	f7fc fd80 	bl	8000dd8 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80042d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042da:	3301      	adds	r3, #1
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
 80042de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	dddc      	ble.n	800429e <pidInitFilters+0x13a>
            }
            break;
 80042e4:	e08c      	b.n	8004400 <pidInitFilters+0x29c>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf1_static_hz < pidFrequencyNyquist) {
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	885b      	ldrh	r3, [r3, #2]
 80042ea:	461a      	mov	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d922      	bls.n	8004338 <pidInitFilters+0x1d4>
                pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)biquadFilterApply;
 80042f2:	4b50      	ldr	r3, [pc, #320]	; (8004434 <pidInitFilters+0x2d0>)
 80042f4:	4a51      	ldr	r2, [pc, #324]	; (800443c <pidInitFilters+0x2d8>)
 80042f6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80042fa:	2300      	movs	r3, #0
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30
 80042fe:	e017      	b.n	8004330 <pidInitFilters+0x1cc>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass[axis].biquadFilter, dterm_lpf1_init_hz, targetPidLooptime);
 8004300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	3398      	adds	r3, #152	; 0x98
 800430c:	4a49      	ldr	r2, [pc, #292]	; (8004434 <pidInitFilters+0x2d0>)
 800430e:	4413      	add	r3, r2
 8004310:	89fa      	ldrh	r2, [r7, #14]
 8004312:	ee07 2a90 	vmov	s15, r2
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	4a45      	ldr	r2, [pc, #276]	; (8004430 <pidInitFilters+0x2cc>)
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	4611      	mov	r1, r2
 8004320:	eeb0 0a67 	vmov.f32	s0, s15
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc fdbd 	bl	8000ea4 <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	3301      	adds	r3, #1
 800432e:	633b      	str	r3, [r7, #48]	; 0x30
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	2b02      	cmp	r3, #2
 8004334:	dde4      	ble.n	8004300 <pidInitFilters+0x19c>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 8004336:	e063      	b.n	8004400 <pidInitFilters+0x29c>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004338:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <pidInitFilters+0x2d0>)
 800433a:	4a3f      	ldr	r2, [pc, #252]	; (8004438 <pidInitFilters+0x2d4>)
 800433c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 8004340:	e05e      	b.n	8004400 <pidInitFilters+0x29c>
        case FILTER_PT2:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt2FilterApply;
 8004342:	4b3c      	ldr	r3, [pc, #240]	; (8004434 <pidInitFilters+0x2d0>)
 8004344:	4a3f      	ldr	r2, [pc, #252]	; (8004444 <pidInitFilters+0x2e0>)
 8004346:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800434a:	2300      	movs	r3, #0
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800434e:	e01f      	b.n	8004390 <pidInitFilters+0x22c>
                pt2FilterInit(&pidRuntime.dtermLowpass[axis].pt2Filter, pt2FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 8004350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	3398      	adds	r3, #152	; 0x98
 800435c:	4a35      	ldr	r2, [pc, #212]	; (8004434 <pidInitFilters+0x2d0>)
 800435e:	189c      	adds	r4, r3, r2
 8004360:	89fb      	ldrh	r3, [r7, #14]
 8004362:	ee07 3a90 	vmov	s15, r3
 8004366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436a:	4b32      	ldr	r3, [pc, #200]	; (8004434 <pidInitFilters+0x2d0>)
 800436c:	ed93 7a00 	vldr	s14, [r3]
 8004370:	eef0 0a47 	vmov.f32	s1, s14
 8004374:	eeb0 0a67 	vmov.f32	s0, s15
 8004378:	f7fc fee6 	bl	8001148 <pt2FilterGain>
 800437c:	eef0 7a40 	vmov.f32	s15, s0
 8004380:	eeb0 0a67 	vmov.f32	s0, s15
 8004384:	4620      	mov	r0, r4
 8004386:	f7fc ff2d 	bl	80011e4 <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	3301      	adds	r3, #1
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	2b02      	cmp	r3, #2
 8004394:	dddc      	ble.n	8004350 <pidInitFilters+0x1ec>
            }
            break;
 8004396:	e033      	b.n	8004400 <pidInitFilters+0x29c>
        case FILTER_PT3:
            pidRuntime.dtermLowpassApplyFn = (filterApplyFnPtr)pt3FilterApply;
 8004398:	4b26      	ldr	r3, [pc, #152]	; (8004434 <pidInitFilters+0x2d0>)
 800439a:	4a2b      	ldr	r2, [pc, #172]	; (8004448 <pidInitFilters+0x2e4>)
 800439c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80043a0:	2300      	movs	r3, #0
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a4:	e01f      	b.n	80043e6 <pidInitFilters+0x282>
                pt3FilterInit(&pidRuntime.dtermLowpass[axis].pt3Filter, pt3FilterGain(dterm_lpf1_init_hz, pidRuntime.dT));
 80043a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	3398      	adds	r3, #152	; 0x98
 80043b2:	4a20      	ldr	r2, [pc, #128]	; (8004434 <pidInitFilters+0x2d0>)
 80043b4:	189c      	adds	r4, r3, r2
 80043b6:	89fb      	ldrh	r3, [r7, #14]
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c0:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <pidInitFilters+0x2d0>)
 80043c2:	ed93 7a00 	vldr	s14, [r3]
 80043c6:	eef0 0a47 	vmov.f32	s1, s14
 80043ca:	eeb0 0a67 	vmov.f32	s0, s15
 80043ce:	f7fc ff5b 	bl	8001288 <pt3FilterGain>
 80043d2:	eef0 7a40 	vmov.f32	s15, s0
 80043d6:	eeb0 0a67 	vmov.f32	s0, s15
 80043da:	4620      	mov	r0, r4
 80043dc:	f7fc ffa2 	bl	8001324 <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	3301      	adds	r3, #1
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	dddc      	ble.n	80043a6 <pidInitFilters+0x242>
            }
            break;
 80043ec:	e008      	b.n	8004400 <pidInitFilters+0x29c>
        default:
            pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 80043ee:	4b11      	ldr	r3, [pc, #68]	; (8004434 <pidInitFilters+0x2d0>)
 80043f0:	4a11      	ldr	r2, [pc, #68]	; (8004438 <pidInitFilters+0x2d4>)
 80043f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 80043f6:	e003      	b.n	8004400 <pidInitFilters+0x29c>
        }
    } else {
        pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <pidInitFilters+0x2d0>)
 80043fa:	4a0f      	ldr	r2, [pc, #60]	; (8004438 <pidInitFilters+0x2d4>)
 80043fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    //2nd Dterm Lowpass Filter
    if (pidProfile->dterm_lpf2_static_hz > 0) {
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80e5 	beq.w	80045d6 <pidInitFilters+0x472>
        switch (pidProfile->dterm_lpf2_type) {
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004412:	2b03      	cmp	r3, #3
 8004414:	f200 80da 	bhi.w	80045cc <pidInitFilters+0x468>
 8004418:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <pidInitFilters+0x2bc>)
 800441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441e:	bf00      	nop
 8004420:	0800444d 	.word	0x0800444d
 8004424:	080044ab 	.word	0x080044ab
 8004428:	08004511 	.word	0x08004511
 800442c:	0800456f 	.word	0x0800456f
 8004430:	20000f3c 	.word	0x20000f3c
 8004434:	20000cf0 	.word	0x20000cf0
 8004438:	08000d69 	.word	0x08000d69
 800443c:	08000ed5 	.word	0x08000ed5
 8004440:	08000dff 	.word	0x08000dff
 8004444:	08001213 	.word	0x08001213
 8004448:	0800135b 	.word	0x0800135b
        case FILTER_PT1:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt1FilterApply;
 800444c:	4b87      	ldr	r3, [pc, #540]	; (800466c <pidInitFilters+0x508>)
 800444e:	4a88      	ldr	r2, [pc, #544]	; (8004670 <pidInitFilters+0x50c>)
 8004450:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004454:	2300      	movs	r3, #0
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
 8004458:	e023      	b.n	80044a2 <pidInitFilters+0x33e>
                pt1FilterInit(&pidRuntime.dtermLowpass2[axis].pt1Filter, pt1FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 800445a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445c:	4613      	mov	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004468:	4a80      	ldr	r2, [pc, #512]	; (800466c <pidInitFilters+0x508>)
 800446a:	4413      	add	r3, r2
 800446c:	1d1c      	adds	r4, r3, #4
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447c:	4b7b      	ldr	r3, [pc, #492]	; (800466c <pidInitFilters+0x508>)
 800447e:	ed93 7a00 	vldr	s14, [r3]
 8004482:	eef0 0a47 	vmov.f32	s1, s14
 8004486:	eeb0 0a67 	vmov.f32	s0, s15
 800448a:	f7fc fc7d 	bl	8000d88 <pt1FilterGain>
 800448e:	eef0 7a40 	vmov.f32	s15, s0
 8004492:	eeb0 0a67 	vmov.f32	s0, s15
 8004496:	4620      	mov	r0, r4
 8004498:	f7fc fc9e 	bl	8000dd8 <pt1FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	3301      	adds	r3, #1
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	ddd8      	ble.n	800445a <pidInitFilters+0x2f6>
            }
            break;
 80044a8:	e099      	b.n	80045de <pidInitFilters+0x47a>
        case FILTER_BIQUAD:
            if (pidProfile->dterm_lpf2_static_hz < pidFrequencyNyquist) {
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80044b0:	461a      	mov	r2, r3
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d926      	bls.n	8004506 <pidInitFilters+0x3a2>
                pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)biquadFilterApply;
 80044b8:	4b6c      	ldr	r3, [pc, #432]	; (800466c <pidInitFilters+0x508>)
 80044ba:	4a6e      	ldr	r2, [pc, #440]	; (8004674 <pidInitFilters+0x510>)
 80044bc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80044c0:	2300      	movs	r3, #0
 80044c2:	623b      	str	r3, [r7, #32]
 80044c4:	e01b      	b.n	80044fe <pidInitFilters+0x39a>
                    biquadFilterInitLPF(&pidRuntime.dtermLowpass2[axis].biquadFilter, pidProfile->dterm_lpf2_static_hz, targetPidLooptime);
 80044c6:	6a3a      	ldr	r2, [r7, #32]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80044d4:	4a65      	ldr	r2, [pc, #404]	; (800466c <pidInitFilters+0x508>)
 80044d6:	4413      	add	r3, r2
 80044d8:	1d1a      	adds	r2, r3, #4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e8:	4b63      	ldr	r3, [pc, #396]	; (8004678 <pidInitFilters+0x514>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4619      	mov	r1, r3
 80044ee:	eeb0 0a67 	vmov.f32	s0, s15
 80044f2:	4610      	mov	r0, r2
 80044f4:	f7fc fcd6 	bl	8000ea4 <biquadFilterInitLPF>
                for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	3301      	adds	r3, #1
 80044fc:	623b      	str	r3, [r7, #32]
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	2b02      	cmp	r3, #2
 8004502:	dde0      	ble.n	80044c6 <pidInitFilters+0x362>
                }
            } else {
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
            }
            break;
 8004504:	e06b      	b.n	80045de <pidInitFilters+0x47a>
                pidRuntime.dtermLowpassApplyFn = nullFilterApply;
 8004506:	4b59      	ldr	r3, [pc, #356]	; (800466c <pidInitFilters+0x508>)
 8004508:	4a5c      	ldr	r2, [pc, #368]	; (800467c <pidInitFilters+0x518>)
 800450a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            break;
 800450e:	e066      	b.n	80045de <pidInitFilters+0x47a>
        case FILTER_PT2:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt2FilterApply;
 8004510:	4b56      	ldr	r3, [pc, #344]	; (800466c <pidInitFilters+0x508>)
 8004512:	4a5b      	ldr	r2, [pc, #364]	; (8004680 <pidInitFilters+0x51c>)
 8004514:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004518:	2300      	movs	r3, #0
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e023      	b.n	8004566 <pidInitFilters+0x402>
                pt2FilterInit(&pidRuntime.dtermLowpass2[axis].pt2Filter, pt2FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 800451e:	69fa      	ldr	r2, [r7, #28]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800452c:	4a4f      	ldr	r2, [pc, #316]	; (800466c <pidInitFilters+0x508>)
 800452e:	4413      	add	r3, r2
 8004530:	1d1c      	adds	r4, r3, #4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004538:	ee07 3a90 	vmov	s15, r3
 800453c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004540:	4b4a      	ldr	r3, [pc, #296]	; (800466c <pidInitFilters+0x508>)
 8004542:	ed93 7a00 	vldr	s14, [r3]
 8004546:	eef0 0a47 	vmov.f32	s1, s14
 800454a:	eeb0 0a67 	vmov.f32	s0, s15
 800454e:	f7fc fdfb 	bl	8001148 <pt2FilterGain>
 8004552:	eef0 7a40 	vmov.f32	s15, s0
 8004556:	eeb0 0a67 	vmov.f32	s0, s15
 800455a:	4620      	mov	r0, r4
 800455c:	f7fc fe42 	bl	80011e4 <pt2FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	3301      	adds	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	2b02      	cmp	r3, #2
 800456a:	ddd8      	ble.n	800451e <pidInitFilters+0x3ba>
            }
            break;
 800456c:	e037      	b.n	80045de <pidInitFilters+0x47a>
        case FILTER_PT3:
            pidRuntime.dtermLowpass2ApplyFn = (filterApplyFnPtr)pt3FilterApply;
 800456e:	4b3f      	ldr	r3, [pc, #252]	; (800466c <pidInitFilters+0x508>)
 8004570:	4a44      	ldr	r2, [pc, #272]	; (8004684 <pidInitFilters+0x520>)
 8004572:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	e023      	b.n	80045c4 <pidInitFilters+0x460>
                pt3FilterInit(&pidRuntime.dtermLowpass2[axis].pt3Filter, pt3FilterGain(pidProfile->dterm_lpf2_static_hz, pidRuntime.dT));
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800458a:	4a38      	ldr	r2, [pc, #224]	; (800466c <pidInitFilters+0x508>)
 800458c:	4413      	add	r3, r2
 800458e:	1d1c      	adds	r4, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459e:	4b33      	ldr	r3, [pc, #204]	; (800466c <pidInitFilters+0x508>)
 80045a0:	ed93 7a00 	vldr	s14, [r3]
 80045a4:	eef0 0a47 	vmov.f32	s1, s14
 80045a8:	eeb0 0a67 	vmov.f32	s0, s15
 80045ac:	f7fc fe6c 	bl	8001288 <pt3FilterGain>
 80045b0:	eef0 7a40 	vmov.f32	s15, s0
 80045b4:	eeb0 0a67 	vmov.f32	s0, s15
 80045b8:	4620      	mov	r0, r4
 80045ba:	f7fc feb3 	bl	8001324 <pt3FilterInit>
            for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	ddd8      	ble.n	800457c <pidInitFilters+0x418>
            }
            break;
 80045ca:	e008      	b.n	80045de <pidInitFilters+0x47a>
        default:
            pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <pidInitFilters+0x508>)
 80045ce:	4a2b      	ldr	r2, [pc, #172]	; (800467c <pidInitFilters+0x518>)
 80045d0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            break;
 80045d4:	e003      	b.n	80045de <pidInitFilters+0x47a>
        }
    } else {
        pidRuntime.dtermLowpass2ApplyFn = nullFilterApply;
 80045d6:	4b25      	ldr	r3, [pc, #148]	; (800466c <pidInitFilters+0x508>)
 80045d8:	4a28      	ldr	r2, [pc, #160]	; (800467c <pidInitFilters+0x518>)
 80045da:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    }

    if (pidProfile->yaw_lowpass_hz == 0) {
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d104      	bne.n	80045f0 <pidInitFilters+0x48c>
        pidRuntime.ptermYawLowpassApplyFn = nullFilterApply;
 80045e6:	4b21      	ldr	r3, [pc, #132]	; (800466c <pidInitFilters+0x508>)
 80045e8:	4a24      	ldr	r2, [pc, #144]	; (800467c <pidInitFilters+0x518>)
 80045ea:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 80045ee:	e019      	b.n	8004624 <pidInitFilters+0x4c0>
    } else {
        pidRuntime.ptermYawLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 80045f0:	4b1e      	ldr	r3, [pc, #120]	; (800466c <pidInitFilters+0x508>)
 80045f2:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <pidInitFilters+0x50c>)
 80045f4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        pt1FilterInit(&pidRuntime.ptermYawLowpass, pt1FilterGain(pidProfile->yaw_lowpass_hz, pidRuntime.dT));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <pidInitFilters+0x508>)
 8004606:	ed93 7a00 	vldr	s14, [r3]
 800460a:	eef0 0a47 	vmov.f32	s1, s14
 800460e:	eeb0 0a67 	vmov.f32	s0, s15
 8004612:	f7fc fbb9 	bl	8000d88 <pt1FilterGain>
 8004616:	eef0 7a40 	vmov.f32	s15, s0
 800461a:	eeb0 0a67 	vmov.f32	s0, s15
 800461e:	481a      	ldr	r0, [pc, #104]	; (8004688 <pidInitFilters+0x524>)
 8004620:	f7fc fbda 	bl	8000dd8 <pt1FilterInit>
    }

    pt1FilterInit(&pidRuntime.antiGravityThrottleLpf, pt1FilterGain(ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF, pidRuntime.dT));
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <pidInitFilters+0x508>)
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	eef0 0a67 	vmov.f32	s1, s15
 800462e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8004632:	f7fc fba9 	bl	8000d88 <pt1FilterGain>
 8004636:	eef0 7a40 	vmov.f32	s15, s0
 800463a:	eeb0 0a67 	vmov.f32	s0, s15
 800463e:	4813      	ldr	r0, [pc, #76]	; (800468c <pidInitFilters+0x528>)
 8004640:	f7fc fbca 	bl	8000dd8 <pt1FilterInit>
    pt1FilterInit(&pidRuntime.antiGravitySmoothLpf, pt1FilterGain(ANTI_GRAVITY_SMOOTH_FILTER_CUTOFF, pidRuntime.dT));
 8004644:	4b09      	ldr	r3, [pc, #36]	; (800466c <pidInitFilters+0x508>)
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	eef0 0a67 	vmov.f32	s1, s15
 800464e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004652:	f7fc fb99 	bl	8000d88 <pt1FilterGain>
 8004656:	eef0 7a40 	vmov.f32	s15, s0
 800465a:	eeb0 0a67 	vmov.f32	s0, s15
 800465e:	480c      	ldr	r0, [pc, #48]	; (8004690 <pidInitFilters+0x52c>)
 8004660:	f7fc fbba 	bl	8000dd8 <pt1FilterInit>
}
 8004664:	3744      	adds	r7, #68	; 0x44
 8004666:	46bd      	mov	sp, r7
 8004668:	bd90      	pop	{r4, r7, pc}
 800466a:	bf00      	nop
 800466c:	20000cf0 	.word	0x20000cf0
 8004670:	08000dff 	.word	0x08000dff
 8004674:	08000ed5 	.word	0x08000ed5
 8004678:	20000f3c 	.word	0x20000f3c
 800467c:	08000d69 	.word	0x08000d69
 8004680:	08001213 	.word	0x08001213
 8004684:	0800135b 	.word	0x0800135b
 8004688:	20000e80 	.word	0x20000e80
 800468c:	20000e8c 	.word	0x20000e8c
 8004690:	20000e94 	.word	0x20000e94

08004694 <pidInitConfig>:

static void pidInitConfig(const pidProfile_t *pidProfile)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e069      	b.n	8004776 <pidInitConfig+0xe2>
        pidRuntime.pidCoefficient[axis].Kp = PTERM_SCALE * pidProfile->pid[axis].P;
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	440b      	add	r3, r1
 80046b0:	3308      	adds	r3, #8
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046bc:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80049f0 <pidInitConfig+0x35c>
 80046c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046c4:	4acb      	ldr	r2, [pc, #812]	; (80049f4 <pidInitConfig+0x360>)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	331c      	adds	r3, #28
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	4413      	add	r3, r2
 80046ce:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Ki = ITERM_SCALE * pidProfile->pid[axis].I;
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4613      	mov	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	440b      	add	r3, r1
 80046e0:	3309      	adds	r3, #9
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	ee07 3a90 	vmov	s15, r3
 80046e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ec:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 80049f8 <pidInitConfig+0x364>
 80046f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046f4:	4abf      	ldr	r2, [pc, #764]	; (80049f4 <pidInitConfig+0x360>)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	331c      	adds	r3, #28
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	4413      	add	r3, r2
 80046fe:	3304      	adds	r3, #4
 8004700:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kd = DTERM_SCALE * pidProfile->pid[axis].D;
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4613      	mov	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	440b      	add	r3, r1
 8004712:	330a      	adds	r3, #10
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800471e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80049fc <pidInitConfig+0x368>
 8004722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004726:	4ab3      	ldr	r2, [pc, #716]	; (80049f4 <pidInitConfig+0x360>)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	4413      	add	r3, r2
 800472e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004732:	edc3 7a00 	vstr	s15, [r3]
        pidRuntime.pidCoefficient[axis].Kf = FEEDFORWARD_SCALE * (pidProfile->pid[axis].F / 100.0f);
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	440b      	add	r3, r1
 8004744:	330c      	adds	r3, #12
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004750:	eddf 6aab 	vldr	s13, [pc, #684]	; 8004a00 <pidInitConfig+0x36c>
 8004754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004758:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004a04 <pidInitConfig+0x370>
 800475c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004760:	4aa4      	ldr	r2, [pc, #656]	; (80049f4 <pidInitConfig+0x360>)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	4413      	add	r3, r2
 8004768:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800476c:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b02      	cmp	r3, #2
 800477a:	dd92      	ble.n	80046a2 <pidInitConfig+0xe>
    }
    {
        pidRuntime.pidCoefficient[FD_YAW].Ki *= 2.5f;
 800477c:	4b9d      	ldr	r3, [pc, #628]	; (80049f4 <pidInitConfig+0x360>)
 800477e:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8004782:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8004786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800478a:	4b9a      	ldr	r3, [pc, #616]	; (80049f4 <pidInitConfig+0x360>)
 800478c:	edc3 7a79 	vstr	s15, [r3, #484]	; 0x1e4
    }
    pidRuntime.levelGain = pidProfile->pid[PID_LEVEL].P / 10.0f;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	7e9b      	ldrb	r3, [r3, #26]
 8004794:	ee07 3a90 	vmov	s15, r3
 8004798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800479c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80047a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047a4:	4b93      	ldr	r3, [pc, #588]	; (80049f4 <pidInitConfig+0x360>)
 80047a6:	edc3 7a7c 	vstr	s15, [r3, #496]	; 0x1f0
    pidRuntime.horizonGain = pidProfile->pid[PID_LEVEL].I / 10.0f;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	7edb      	ldrb	r3, [r3, #27]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047b6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80047ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047be:	4b8d      	ldr	r3, [pc, #564]	; (80049f4 <pidInitConfig+0x360>)
 80047c0:	edc3 7a7d 	vstr	s15, [r3, #500]	; 0x1f4
    pidRuntime.horizonTransition = (float)pidProfile->pid[PID_LEVEL].D;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	7f1b      	ldrb	r3, [r3, #28]
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d0:	4b88      	ldr	r3, [pc, #544]	; (80049f4 <pidInitConfig+0x360>)
 80047d2:	edc3 7a7e 	vstr	s15, [r3, #504]	; 0x1f8
    pidRuntime.horizonTiltExpertMode = pidProfile->horizon_tilt_expert_mode;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80047dc:	4b85      	ldr	r3, [pc, #532]	; (80049f4 <pidInitConfig+0x360>)
 80047de:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
    pidRuntime.horizonCutoffDegrees = (175 - pidProfile->horizon_tilt_effect) * 1.8f;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80047e8:	f1c3 03af 	rsb	r3, r3, #175	; 0xaf
 80047ec:	ee07 3a90 	vmov	s15, r3
 80047f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047f4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004a08 <pidInitConfig+0x374>
 80047f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047fc:	4b7d      	ldr	r3, [pc, #500]	; (80049f4 <pidInitConfig+0x360>)
 80047fe:	edc3 7a7f 	vstr	s15, [r3, #508]	; 0x1fc
    pidRuntime.horizonFactorRatio = (100 - pidProfile->horizon_tilt_effect) * 0.01f;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004808:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800480c:	ee07 3a90 	vmov	s15, r3
 8004810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004814:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004a0c <pidInitConfig+0x378>
 8004818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800481c:	4b75      	ldr	r3, [pc, #468]	; (80049f4 <pidInitConfig+0x360>)
 800481e:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
    pidRuntime.maxVelocity[FD_ROLL] = pidRuntime.maxVelocity[FD_PITCH] = pidProfile->rateAccelLimit * 100 * pidRuntime.dT;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004826:	461a      	mov	r2, r3
 8004828:	2364      	movs	r3, #100	; 0x64
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004836:	4b6f      	ldr	r3, [pc, #444]	; (80049f4 <pidInitConfig+0x360>)
 8004838:	edd3 7a00 	vldr	s15, [r3]
 800483c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004840:	4b6c      	ldr	r3, [pc, #432]	; (80049f4 <pidInitConfig+0x360>)
 8004842:	edc3 7a83 	vstr	s15, [r3, #524]	; 0x20c
 8004846:	4b6b      	ldr	r3, [pc, #428]	; (80049f4 <pidInitConfig+0x360>)
 8004848:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800484c:	4a69      	ldr	r2, [pc, #420]	; (80049f4 <pidInitConfig+0x360>)
 800484e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
    pidRuntime.maxVelocity[FD_YAW] = pidProfile->yawRateAccelLimit * 100 * pidRuntime.dT;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004856:	461a      	mov	r2, r3
 8004858:	2364      	movs	r3, #100	; 0x64
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004866:	4b63      	ldr	r3, [pc, #396]	; (80049f4 <pidInitConfig+0x360>)
 8004868:	edd3 7a00 	vldr	s15, [r3]
 800486c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004870:	4b60      	ldr	r3, [pc, #384]	; (80049f4 <pidInitConfig+0x360>)
 8004872:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
    pidRuntime.itermWindupPointInv = 1.0f;
 8004876:	4b5f      	ldr	r3, [pc, #380]	; (80049f4 <pidInitConfig+0x360>)
 8004878:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800487c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    if (pidProfile->itermWindupPointPercent < 100) {
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004886:	2b63      	cmp	r3, #99	; 0x63
 8004888:	d819      	bhi.n	80048be <pidInitConfig+0x22a>
        const float itermWindupPoint = pidProfile->itermWindupPointPercent / 100.0f;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004898:	eddf 6a59 	vldr	s13, [pc, #356]	; 8004a00 <pidInitConfig+0x36c>
 800489c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048a0:	edc7 7a02 	vstr	s15, [r7, #8]
        pidRuntime.itermWindupPointInv = 1.0f / (1.0f - itermWindupPoint);
 80048a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b8:	4b4e      	ldr	r3, [pc, #312]	; (80049f4 <pidInitConfig+0x360>)
 80048ba:	edc3 7a85 	vstr	s15, [r3, #532]	; 0x214
    }
    pidRuntime.itermAcceleratorGain = pidProfile->itermAcceleratorGain;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80048c2:	4b4c      	ldr	r3, [pc, #304]	; (80049f4 <pidInitConfig+0x360>)
 80048c4:	f8a3 21bc 	strh.w	r2, [r3, #444]	; 0x1bc
    pidRuntime.crashTimeLimitUs = pidProfile->crash_time * 1000;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80048ce:	461a      	mov	r2, r3
 80048d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
 80048d8:	4a46      	ldr	r2, [pc, #280]	; (80049f4 <pidInitConfig+0x360>)
 80048da:	f8c2 3220 	str.w	r3, [r2, #544]	; 0x220
    pidRuntime.crashTimeDelayUs = pidProfile->crash_delay * 1000;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80048e4:	461a      	mov	r2, r3
 80048e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	4a41      	ldr	r2, [pc, #260]	; (80049f4 <pidInitConfig+0x360>)
 80048f0:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
    pidRuntime.crashRecoveryAngleDeciDegrees = pidProfile->crash_recovery_angle * 10;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048fa:	461a      	mov	r2, r3
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	461a      	mov	r2, r3
 8004906:	4b3b      	ldr	r3, [pc, #236]	; (80049f4 <pidInitConfig+0x360>)
 8004908:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    pidRuntime.crashRecoveryRate = pidProfile->crash_recovery_rate;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491a:	4b36      	ldr	r3, [pc, #216]	; (80049f4 <pidInitConfig+0x360>)
 800491c:	edc3 7a8b 	vstr	s15, [r3, #556]	; 0x22c
    pidRuntime.crashGyroThreshold = pidProfile->crash_gthreshold;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004924:	ee07 3a90 	vmov	s15, r3
 8004928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492c:	4b31      	ldr	r3, [pc, #196]	; (80049f4 <pidInitConfig+0x360>)
 800492e:	edc3 7a8c 	vstr	s15, [r3, #560]	; 0x230
    pidRuntime.crashDtermThreshold = pidProfile->crash_dthreshold;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	4b2d      	ldr	r3, [pc, #180]	; (80049f4 <pidInitConfig+0x360>)
 8004940:	edc3 7a8d 	vstr	s15, [r3, #564]	; 0x234
    pidRuntime.crashSetpointThreshold = pidProfile->crash_setpoint_threshold;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004950:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <pidInitConfig+0x360>)
 8004952:	edc3 7a8e 	vstr	s15, [r3, #568]	; 0x238
    pidRuntime.crashLimitYaw = pidProfile->crash_limit_yaw;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800495c:	ee07 3a90 	vmov	s15, r3
 8004960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004964:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <pidInitConfig+0x360>)
 8004966:	edc3 7a8f 	vstr	s15, [r3, #572]	; 0x23c
    pidRuntime.itermLimit = pidProfile->itermLimit;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004978:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <pidInitConfig+0x360>)
 800497a:	edc3 7a90 	vstr	s15, [r3, #576]	; 0x240
    pidRuntime.itermRotation = pidProfile->iterm_rotation;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8004984:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <pidInitConfig+0x360>)
 8004986:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
    pidRuntime.antiGravityMode = pidProfile->antiGravityMode;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004990:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <pidInitConfig+0x360>)
 8004992:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
    // Calculate the anti-gravity value that will trigger the OSD display.
    // For classic AG it's either 1.0 for off and > 1.0 for on.
    // For the new AG it's a continuous floating value so we want to trigger the OSD
    // display when it exceeds 25% of its possible range. This gives a useful indication
    // of AG activity without excessive display.
    pidRuntime.antiGravityOsdCutoff = 0.0f;
 8004996:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <pidInitConfig+0x360>)
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    if (pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) {
 80049a0:	4b14      	ldr	r3, [pc, #80]	; (80049f4 <pidInitConfig+0x360>)
 80049a2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d116      	bne.n	80049d8 <pidInitConfig+0x344>
        pidRuntime.antiGravityOsdCutoff += (pidRuntime.itermAcceleratorGain / 1000.0f) * 0.25f;
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <pidInitConfig+0x360>)
 80049ac:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <pidInitConfig+0x360>)
 80049b2:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80049be:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8004a10 <pidInitConfig+0x37c>
 80049c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80049c6:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80049ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80049ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d2:	4b08      	ldr	r3, [pc, #32]	; (80049f4 <pidInitConfig+0x360>)
 80049d4:	edc3 7a6b 	vstr	s15, [r3, #428]	; 0x1ac
    }

    pidRuntime.levelRaceMode = pidProfile->level_race_mode;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <pidInitConfig+0x360>)
 80049e0:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	3d0330d7 	.word	0x3d0330d7
 80049f4:	20000cf0 	.word	0x20000cf0
 80049f8:	3e7a3f03 	.word	0x3e7a3f03
 80049fc:	3a0aac97 	.word	0x3a0aac97
 8004a00:	42c80000 	.word	0x42c80000
 8004a04:	3c615875 	.word	0x3c615875
 8004a08:	3fe66666 	.word	0x3fe66666
 8004a0c:	3c23d70a 	.word	0x3c23d70a
 8004a10:	447a0000 	.word	0x447a0000

08004a14 <resetPidProfile>:

static void resetPidProfile(pidProfile_t *pidProfile)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
    RESET_CONFIG(pidProfile_t, pidProfile,
 8004a1c:	2294      	movs	r2, #148	; 0x94
 8004a1e:	4907      	ldr	r1, [pc, #28]	; (8004a3c <resetPidProfile+0x28>)
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f00d fe66 	bl	80126f2 <memcpy>
        .simplified_pitch_pi_gain = SIMPLIFIED_TUNING_DEFAULT,
        .simplified_dterm_filter = true,
        .simplified_dterm_filter_multiplier = SIMPLIFIED_TUNING_DEFAULT,
    );

    pidProfile->pid[PID_ROLL].D = 30;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	221e      	movs	r2, #30
 8004a2a:	729a      	strb	r2, [r3, #10]
    pidProfile->pid[PID_PITCH].D = 32;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	741a      	strb	r2, [r3, #16]
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	080156a0 	.word	0x080156a0

08004a40 <pidInit>:

void pidInit(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
	resetPidProfile(currentPidProfile);
 8004a46:	4b2c      	ldr	r3, [pc, #176]	; (8004af8 <pidInit+0xb8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ffe2 	bl	8004a14 <resetPidProfile>
    pidSetTargetLooptime(gyro.targetLooptime);
 8004a50:	4b2a      	ldr	r3, [pc, #168]	; (8004afc <pidInit+0xbc>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fb5b 	bl	8004110 <pidSetTargetLooptime>
    pidInitFilters(currentPidProfile);
 8004a5a:	4b27      	ldr	r3, [pc, #156]	; (8004af8 <pidInit+0xb8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fb80 	bl	8004164 <pidInitFilters>
    pidInitConfig(currentPidProfile);
 8004a64:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <pidInit+0xb8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fe13 	bl	8004694 <pidInitConfig>
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	e038      	b.n	8004ae6 <pidInit+0xa6>
        pidData[axis].P = 0.0f;
 8004a74:	4922      	ldr	r1, [pc, #136]	; (8004b00 <pidInit+0xc0>)
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
        pidData[axis].I = 0.0f;
 8004a88:	491d      	ldr	r1, [pc, #116]	; (8004b00 <pidInit+0xc0>)
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	3304      	adds	r3, #4
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
        pidData[axis].D = 0.0f;
 8004a9e:	4918      	ldr	r1, [pc, #96]	; (8004b00 <pidInit+0xc0>)
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3308      	adds	r3, #8
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
        pidData[axis].F = 0.0f;
 8004ab4:	4912      	ldr	r1, [pc, #72]	; (8004b00 <pidInit+0xc0>)
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
        pidData[axis].Sum = 0.0f;
 8004aca:	490d      	ldr	r1, [pc, #52]	; (8004b00 <pidInit+0xc0>)
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3310      	adds	r3, #16
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	ddc3      	ble.n	8004a74 <pidInit+0x34>
    }
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000060 	.word	0x20000060
 8004afc:	20000634 	.word	0x20000634
 8004b00:	20000f4c 	.word	0x20000f4c

08004b04 <rotateItermAndAxisError>:

static void rotateItermAndAxisError()
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af00      	add	r7, sp, #0
    if (pidRuntime.itermRotation
 8004b0a:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <rotateItermAndAxisError+0xdc>)
 8004b0c:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d060      	beq.n	8004bd6 <rotateItermAndAxisError+0xd2>
        ) {
        const float gyroToAngle = pidRuntime.dT * RAD;
 8004b14:	4b32      	ldr	r3, [pc, #200]	; (8004be0 <rotateItermAndAxisError+0xdc>)
 8004b16:	edd3 7a00 	vldr	s15, [r3]
 8004b1a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004be4 <rotateItermAndAxisError+0xe0>
 8004b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b22:	edc7 7a06 	vstr	s15, [r7, #24]
        float rotationRads[XYZ_AXIS_COUNT];
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 8004b26:	2300      	movs	r3, #0
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2a:	e015      	b.n	8004b58 <rotateItermAndAxisError+0x54>
            rotationRads[i] = gyro.gyroADCf[i] * gyroToAngle;
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	; (8004be8 <rotateItermAndAxisError+0xe4>)
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	3306      	adds	r3, #6
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	3304      	adds	r3, #4
 8004b38:	ed93 7a00 	vldr	s14, [r3]
 8004b3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	3328      	adds	r3, #40	; 0x28
 8004b4a:	443b      	add	r3, r7
 8004b4c:	3b1c      	subs	r3, #28
 8004b4e:	edc3 7a00 	vstr	s15, [r3]
        for (int i = FD_ROLL; i <= FD_YAW; i++) {
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	3301      	adds	r3, #1
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	dde6      	ble.n	8004b2c <rotateItermAndAxisError+0x28>
        }
        if (pidRuntime.itermRotation) {
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <rotateItermAndAxisError+0xdc>)
 8004b60:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d036      	beq.n	8004bd6 <rotateItermAndAxisError+0xd2>
            float v[XYZ_AXIS_COUNT];
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8004b68:	2300      	movs	r3, #0
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	e011      	b.n	8004b92 <rotateItermAndAxisError+0x8e>
                v[i] = pidData[i].I;
 8004b6e:	491f      	ldr	r1, [pc, #124]	; (8004bec <rotateItermAndAxisError+0xe8>)
 8004b70:	6a3a      	ldr	r2, [r7, #32]
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	3328      	adds	r3, #40	; 0x28
 8004b86:	443b      	add	r3, r7
 8004b88:	3b28      	subs	r3, #40	; 0x28
 8004b8a:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	623b      	str	r3, [r7, #32]
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	ddea      	ble.n	8004b6e <rotateItermAndAxisError+0x6a>
            }
            rotateVector(v, rotationRads);
 8004b98:	f107 020c 	add.w	r2, r7, #12
 8004b9c:	463b      	mov	r3, r7
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fc fe09 	bl	80017b8 <rotateVector>
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	e011      	b.n	8004bd0 <rotateItermAndAxisError+0xcc>
                pidData[i].I = v[i];
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	3328      	adds	r3, #40	; 0x28
 8004bb2:	443b      	add	r3, r7
 8004bb4:	3b28      	subs	r3, #40	; 0x28
 8004bb6:	6819      	ldr	r1, [r3, #0]
 8004bb8:	480c      	ldr	r0, [pc, #48]	; (8004bec <rotateItermAndAxisError+0xe8>)
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4403      	add	r3, r0
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	6019      	str	r1, [r3, #0]
            for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	61fb      	str	r3, [r7, #28]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	ddea      	ble.n	8004bac <rotateItermAndAxisError+0xa8>
            }
        }
    }
}
 8004bd6:	bf00      	nop
 8004bd8:	3728      	adds	r7, #40	; 0x28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000cf0 	.word	0x20000cf0
 8004be4:	3c8efa35 	.word	0x3c8efa35
 8004be8:	20000634 	.word	0x20000634
 8004bec:	20000f4c 	.word	0x20000f4c

08004bf0 <getSetpointRate>:

static float getSetpointRate(int axis)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    return rawSetpoint[axis];
 8004bf8:	4a06      	ldr	r2, [pc, #24]	; (8004c14 <getSetpointRate+0x24>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	ee07 3a90 	vmov	s15, r3
}
 8004c06:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	20000f40 	.word	0x20000f40

08004c18 <accelerationLimit>:

static float accelerationLimit(int axis, float currentPidSetpoint)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	ed87 0a00 	vstr	s0, [r7]
    static float previousSetpoint[XYZ_AXIS_COUNT];
    const float currentVelocity = currentPidSetpoint - previousSetpoint[axis];
 8004c24:	4a29      	ldr	r2, [pc, #164]	; (8004ccc <accelerationLimit+0xb4>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	edd3 7a00 	vldr	s15, [r3]
 8004c30:	ed97 7a00 	vldr	s14, [r7]
 8004c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c38:	edc7 7a03 	vstr	s15, [r7, #12]

    if (fabsf(currentVelocity) > pidRuntime.maxVelocity[axis]) {
 8004c3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c40:	eeb0 7ae7 	vabs.f32	s14, s15
 8004c44:	4a22      	ldr	r2, [pc, #136]	; (8004cd0 <accelerationLimit+0xb8>)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	3382      	adds	r3, #130	; 0x82
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	edd3 7a00 	vldr	s15, [r3]
 8004c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5a:	dd27      	ble.n	8004cac <accelerationLimit+0x94>
        currentPidSetpoint = (currentVelocity > 0) ? previousSetpoint[axis] + pidRuntime.maxVelocity[axis] : previousSetpoint[axis] - pidRuntime.maxVelocity[axis];
 8004c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c68:	dd0f      	ble.n	8004c8a <accelerationLimit+0x72>
 8004c6a:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <accelerationLimit+0xb4>)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	ed93 7a00 	vldr	s14, [r3]
 8004c76:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <accelerationLimit+0xb8>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3382      	adds	r3, #130	; 0x82
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	edd3 7a00 	vldr	s15, [r3]
 8004c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c88:	e00e      	b.n	8004ca8 <accelerationLimit+0x90>
 8004c8a:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <accelerationLimit+0xb4>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	ed93 7a00 	vldr	s14, [r3]
 8004c96:	4a0e      	ldr	r2, [pc, #56]	; (8004cd0 <accelerationLimit+0xb8>)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3382      	adds	r3, #130	; 0x82
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	edd3 7a00 	vldr	s15, [r3]
 8004ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca8:	edc7 7a00 	vstr	s15, [r7]
    }

    previousSetpoint[axis] = currentPidSetpoint;
 8004cac:	4a07      	ldr	r2, [pc, #28]	; (8004ccc <accelerationLimit+0xb4>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	601a      	str	r2, [r3, #0]
    return currentPidSetpoint;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	ee07 3a90 	vmov	s15, r3
}
 8004cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	20001034 	.word	0x20001034
 8004cd0:	20000cf0 	.word	0x20000cf0

08004cd4 <pidResetIterm>:

static void pidResetIterm(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
    for (int axis = 0; axis < 3; axis++) {
 8004cda:	2300      	movs	r3, #0
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	e00d      	b.n	8004cfc <pidResetIterm+0x28>
        pidData[axis].I = 0.0f;
 8004ce0:	490b      	ldr	r1, [pc, #44]	; (8004d10 <pidResetIterm+0x3c>)
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	3304      	adds	r3, #4
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
    for (int axis = 0; axis < 3; axis++) {
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	607b      	str	r3, [r7, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	ddee      	ble.n	8004ce0 <pidResetIterm+0xc>
    }
}
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000f4c 	.word	0x20000f4c

08004d14 <pidController>:

void pidController(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b09c      	sub	sp, #112	; 0x70
 8004d18:	af00      	add	r7, sp, #0
    static float previousGyroRateDterm[XYZ_AXIS_COUNT];

    const float tpaFactorKp = pidRuntime.tpaFactor;
 8004d1a:	4bbd      	ldr	r3, [pc, #756]	; (8005010 <pidController+0x2fc>)
 8004d1c:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8004d20:	65bb      	str	r3, [r7, #88]	; 0x58

    const bool launchControlActive = false;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Dynamic i component,
    if ((pidRuntime.antiGravityMode == ANTI_GRAVITY_SMOOTH) && pidRuntime.antiGravityEnabled) {
 8004d28:	4bb9      	ldr	r3, [pc, #740]	; (8005010 <pidController+0x2fc>)
 8004d2a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d140      	bne.n	8004db4 <pidController+0xa0>
 8004d32:	4bb7      	ldr	r3, [pc, #732]	; (8005010 <pidController+0x2fc>)
 8004d34:	f893 3198 	ldrb.w	r3, [r3, #408]	; 0x198
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d03b      	beq.n	8004db4 <pidController+0xa0>
        // traditional itermAccelerator factor for iTerm
        pidRuntime.itermAccelerator = pidRuntime.antiGravityThrottleHpf * 0.01f * pidRuntime.itermAcceleratorGain;
 8004d3c:	4bb4      	ldr	r3, [pc, #720]	; (8005010 <pidController+0x2fc>)
 8004d3e:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 8004d42:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 8005014 <pidController+0x300>
 8004d46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d4a:	4bb1      	ldr	r3, [pc, #708]	; (8005010 <pidController+0x2fc>)
 8004d4c:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5c:	4bac      	ldr	r3, [pc, #688]	; (8005010 <pidController+0x2fc>)
 8004d5e:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // users AG Gain changes P boost
        pidRuntime.antiGravityPBoost *= pidRuntime.itermAcceleratorGain;
 8004d62:	4bab      	ldr	r3, [pc, #684]	; (8005010 <pidController+0x2fc>)
 8004d64:	ed93 7a6d 	vldr	s14, [r3, #436]	; 0x1b4
 8004d68:	4ba9      	ldr	r3, [pc, #676]	; (8005010 <pidController+0x2fc>)
 8004d6a:	f8b3 31bc 	ldrh.w	r3, [r3, #444]	; 0x1bc
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d7a:	4ba5      	ldr	r3, [pc, #660]	; (8005010 <pidController+0x2fc>)
 8004d7c:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
        // add some percentage of that slower, longer acting P boost factor to prolong AG effect on iTerm
        pidRuntime.itermAccelerator += pidRuntime.antiGravityPBoost * 0.05f;
 8004d80:	4ba3      	ldr	r3, [pc, #652]	; (8005010 <pidController+0x2fc>)
 8004d82:	ed93 7a6e 	vldr	s14, [r3, #440]	; 0x1b8
 8004d86:	4ba2      	ldr	r3, [pc, #648]	; (8005010 <pidController+0x2fc>)
 8004d88:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8004d8c:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8005018 <pidController+0x304>
 8004d90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d98:	4b9d      	ldr	r3, [pc, #628]	; (8005010 <pidController+0x2fc>)
 8004d9a:	edc3 7a6e 	vstr	s15, [r3, #440]	; 0x1b8
        // set the final P boost amount
        pidRuntime.antiGravityPBoost *= 0.02f;
 8004d9e:	4b9c      	ldr	r3, [pc, #624]	; (8005010 <pidController+0x2fc>)
 8004da0:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8004da4:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 800501c <pidController+0x308>
 8004da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dac:	4b98      	ldr	r3, [pc, #608]	; (8005010 <pidController+0x2fc>)
 8004dae:	edc3 7a6d 	vstr	s15, [r3, #436]	; 0x1b4
 8004db2:	e004      	b.n	8004dbe <pidController+0xaa>
    } else {
        pidRuntime.antiGravityPBoost = 0.0f;
 8004db4:	4b96      	ldr	r3, [pc, #600]	; (8005010 <pidController+0x2fc>)
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }

    float agGain = pidRuntime.dT * pidRuntime.itermAccelerator * AG_KI;
 8004dbe:	4b94      	ldr	r3, [pc, #592]	; (8005010 <pidController+0x2fc>)
 8004dc0:	ed93 7a00 	vldr	s14, [r3]
 8004dc4:	4b92      	ldr	r3, [pc, #584]	; (8005010 <pidController+0x2fc>)
 8004dc6:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 8004dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dce:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8005020 <pidController+0x30c>
 8004dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dd6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

    // gradually scale back integration when above windup point
    float dynCi = pidRuntime.dT;
 8004dda:	4b8d      	ldr	r3, [pc, #564]	; (8005010 <pidController+0x2fc>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (pidRuntime.itermWindupPointInv > 1.0f) {
 8004de0:	4b8b      	ldr	r3, [pc, #556]	; (8005010 <pidController+0x2fc>)
 8004de2:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8004de6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df2:	dd1b      	ble.n	8004e2c <pidController+0x118>
        dynCi *= constrainf((1.0f - motorMixRange) * pidRuntime.itermWindupPointInv, 0.0f, 1.0f);
 8004df4:	4b8b      	ldr	r3, [pc, #556]	; (8005024 <pidController+0x310>)
 8004df6:	edd3 7a00 	vldr	s15, [r3]
 8004dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e02:	4b83      	ldr	r3, [pc, #524]	; (8005010 <pidController+0x2fc>)
 8004e04:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8004e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004e10:	eddf 0a85 	vldr	s1, [pc, #532]	; 8005028 <pidController+0x314>
 8004e14:	eeb0 0a67 	vmov.f32	s0, s15
 8004e18:	f7ff f93c 	bl	8004094 <constrainf>
 8004e1c:	eeb0 7a40 	vmov.f32	s14, s0
 8004e20:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004e24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e28:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    }

    // Precalculate gyro data for D-term here, this allows loop unrolling
    float gyroRateDterm[XYZ_AXIS_COUNT];
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e30:	e06e      	b.n	8004f10 <pidController+0x1fc>
        gyroRateDterm[axis] = gyro.gyroADCf[axis];
 8004e32:	4a7e      	ldr	r2, [pc, #504]	; (800502c <pidController+0x318>)
 8004e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e36:	3306      	adds	r3, #6
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	3370      	adds	r3, #112	; 0x70
 8004e46:	443b      	add	r3, r7
 8004e48:	3b6c      	subs	r3, #108	; 0x6c
 8004e4a:	601a      	str	r2, [r3, #0]

        gyroRateDterm[axis] = pidRuntime.dtermNotchApplyFn((filter_t *) &pidRuntime.dtermNotch[axis], gyroRateDterm[axis]);
 8004e4c:	4b70      	ldr	r3, [pc, #448]	; (8005010 <pidController+0x2fc>)
 8004e4e:	6999      	ldr	r1, [r3, #24]
 8004e50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	3318      	adds	r3, #24
 8004e5c:	4a6c      	ldr	r2, [pc, #432]	; (8005010 <pidController+0x2fc>)
 8004e5e:	4413      	add	r3, r2
 8004e60:	1d1a      	adds	r2, r3, #4
 8004e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	3370      	adds	r3, #112	; 0x70
 8004e68:	443b      	add	r3, r7
 8004e6a:	3b6c      	subs	r3, #108	; 0x6c
 8004e6c:	edd3 7a00 	vldr	s15, [r3]
 8004e70:	eeb0 0a67 	vmov.f32	s0, s15
 8004e74:	4610      	mov	r0, r2
 8004e76:	4788      	blx	r1
 8004e78:	eef0 7a40 	vmov.f32	s15, s0
 8004e7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	3370      	adds	r3, #112	; 0x70
 8004e82:	443b      	add	r3, r7
 8004e84:	3b6c      	subs	r3, #108	; 0x6c
 8004e86:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpassApplyFn((filter_t *) &pidRuntime.dtermLowpass[axis], gyroRateDterm[axis]);
 8004e8a:	4b61      	ldr	r3, [pc, #388]	; (8005010 <pidController+0x2fc>)
 8004e8c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8004e90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	3398      	adds	r3, #152	; 0x98
 8004e9c:	4a5c      	ldr	r2, [pc, #368]	; (8005010 <pidController+0x2fc>)
 8004e9e:	441a      	add	r2, r3
 8004ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	3370      	adds	r3, #112	; 0x70
 8004ea6:	443b      	add	r3, r7
 8004ea8:	3b6c      	subs	r3, #108	; 0x6c
 8004eaa:	edd3 7a00 	vldr	s15, [r3]
 8004eae:	eeb0 0a67 	vmov.f32	s0, s15
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4788      	blx	r1
 8004eb6:	eef0 7a40 	vmov.f32	s15, s0
 8004eba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	3370      	adds	r3, #112	; 0x70
 8004ec0:	443b      	add	r3, r7
 8004ec2:	3b6c      	subs	r3, #108	; 0x6c
 8004ec4:	edc3 7a00 	vstr	s15, [r3]
        gyroRateDterm[axis] = pidRuntime.dtermLowpass2ApplyFn((filter_t *) &pidRuntime.dtermLowpass2[axis], gyroRateDterm[axis]);
 8004ec8:	4b51      	ldr	r3, [pc, #324]	; (8005010 <pidController+0x2fc>)
 8004eca:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8004ece:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004edc:	4a4c      	ldr	r2, [pc, #304]	; (8005010 <pidController+0x2fc>)
 8004ede:	4413      	add	r3, r2
 8004ee0:	1d1a      	adds	r2, r3, #4
 8004ee2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	3370      	adds	r3, #112	; 0x70
 8004ee8:	443b      	add	r3, r7
 8004eea:	3b6c      	subs	r3, #108	; 0x6c
 8004eec:	edd3 7a00 	vldr	s15, [r3]
 8004ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4788      	blx	r1
 8004ef8:	eef0 7a40 	vmov.f32	s15, s0
 8004efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	3370      	adds	r3, #112	; 0x70
 8004f02:	443b      	add	r3, r7
 8004f04:	3b6c      	subs	r3, #108	; 0x6c
 8004f06:	edc3 7a00 	vstr	s15, [r3]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	dd8d      	ble.n	8004e32 <pidController+0x11e>
    }

    rotateItermAndAxisError();
 8004f16:	f7ff fdf5 	bl	8004b04 <rotateItermAndAxisError>

    // ----------PID controller----------
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f1e:	e1e4      	b.n	80052ea <pidController+0x5d6>

        float currentPidSetpoint = getSetpointRate(axis);
 8004f20:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004f22:	f7ff fe65 	bl	8004bf0 <getSetpointRate>
 8004f26:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        if (pidRuntime.maxVelocity[axis]) {
 8004f2a:	4a39      	ldr	r2, [pc, #228]	; (8005010 <pidController+0x2fc>)
 8004f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f2e:	3382      	adds	r3, #130	; 0x82
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	edd3 7a00 	vldr	s15, [r3]
 8004f38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	d006      	beq.n	8004f50 <pidController+0x23c>
            currentPidSetpoint = accelerationLimit(axis, currentPidSetpoint);
 8004f42:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8004f46:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004f48:	f7ff fe66 	bl	8004c18 <accelerationLimit>
 8004f4c:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
        // Yaw control is GYRO based, direct sticks control is applied to rate PID
        // When Race Mode is active PITCH control is also GYRO based in level or horizon mode


        // -----calculate error rate
        const float gyroRate = gyro.gyroADCf[axis]; // Process variable from gyro output in deg/sec
 8004f50:	4a36      	ldr	r2, [pc, #216]	; (800502c <pidController+0x318>)
 8004f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f54:	3306      	adds	r3, #6
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
        float errorRate = currentPidSetpoint - gyroRate; // r - y
 8004f60:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004f64:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f6c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

        const float previousIterm = pidData[axis].I;
 8004f70:	492f      	ldr	r1, [pc, #188]	; (8005030 <pidController+0x31c>)
 8004f72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	3304      	adds	r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	647b      	str	r3, [r7, #68]	; 0x44
        float itermErrorRate = errorRate;
 8004f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f86:	643b      	str	r3, [r7, #64]	; 0x40
        // --------low-level gyro-based PID based on 2DOF PID controller. ----------
        // 2-DOF PID controller with optional filter on derivative term.
        // b = 1 and only c (feedforward weight) can be tuned (amount derivative on measurement or error).

        // -----calculate P component
        pidData[axis].P = pidRuntime.pidCoefficient[axis].Kp * errorRate * tpaFactorKp;
 8004f88:	4a21      	ldr	r2, [pc, #132]	; (8005010 <pidController+0x2fc>)
 8004f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f8c:	331c      	adds	r3, #28
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	4413      	add	r3, r2
 8004f92:	ed93 7a00 	vldr	s14, [r3]
 8004f96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f9e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	4922      	ldr	r1, [pc, #136]	; (8005030 <pidController+0x31c>)
 8004fa8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	edc3 7a00 	vstr	s15, [r3]
        if (axis == FD_YAW) {
 8004fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d11a      	bne.n	8004ff4 <pidController+0x2e0>
            pidData[axis].P = pidRuntime.ptermYawLowpassApplyFn((filter_t *) &pidRuntime.ptermYawLowpass, pidData[axis].P);
 8004fbe:	4b14      	ldr	r3, [pc, #80]	; (8005010 <pidController+0x2fc>)
 8004fc0:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 8004fc4:	481a      	ldr	r0, [pc, #104]	; (8005030 <pidController+0x31c>)
 8004fc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4403      	add	r3, r0
 8004fd2:	edd3 7a00 	vldr	s15, [r3]
 8004fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8004fda:	4816      	ldr	r0, [pc, #88]	; (8005034 <pidController+0x320>)
 8004fdc:	4788      	blx	r1
 8004fde:	eef0 7a40 	vmov.f32	s15, s0
 8004fe2:	4913      	ldr	r1, [pc, #76]	; (8005030 <pidController+0x31c>)
 8004fe4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate I component
        float Ki;
        float axisDynCi;
        {
            Ki = pidRuntime.pidCoefficient[axis].Ki;
 8004ff4:	4a06      	ldr	r2, [pc, #24]	; (8005010 <pidController+0x2fc>)
 8004ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff8:	331c      	adds	r3, #28
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3304      	adds	r3, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	63fb      	str	r3, [r7, #60]	; 0x3c
            axisDynCi = (axis == FD_YAW) ? dynCi : pidRuntime.dT; // only apply windup protection to yaw
 8005004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005006:	2b02      	cmp	r3, #2
 8005008:	d016      	beq.n	8005038 <pidController+0x324>
 800500a:	4b01      	ldr	r3, [pc, #4]	; (8005010 <pidController+0x2fc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	e014      	b.n	800503a <pidController+0x326>
 8005010:	20000cf0 	.word	0x20000cf0
 8005014:	3c23d70a 	.word	0x3c23d70a
 8005018:	3d4ccccd 	.word	0x3d4ccccd
 800501c:	3ca3d70a 	.word	0x3ca3d70a
 8005020:	41acb227 	.word	0x41acb227
 8005024:	20000f88 	.word	0x20000f88
 8005028:	00000000 	.word	0x00000000
 800502c:	20000634 	.word	0x20000634
 8005030:	20000f4c 	.word	0x20000f4c
 8005034:	20000e80 	.word	0x20000e80
 8005038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        pidData[axis].I = constrainf(previousIterm + (Ki * axisDynCi + agGain) * itermErrorRate, -pidRuntime.itermLimit, pidRuntime.itermLimit);
 800503c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005040:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005048:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800504c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005050:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005058:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800505c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005060:	4baa      	ldr	r3, [pc, #680]	; (800530c <pidController+0x5f8>)
 8005062:	edd3 7a90 	vldr	s15, [r3, #576]	; 0x240
 8005066:	eef1 7a67 	vneg.f32	s15, s15
 800506a:	4ba8      	ldr	r3, [pc, #672]	; (800530c <pidController+0x5f8>)
 800506c:	edd3 6a90 	vldr	s13, [r3, #576]	; 0x240
 8005070:	eeb0 1a66 	vmov.f32	s2, s13
 8005074:	eef0 0a67 	vmov.f32	s1, s15
 8005078:	eeb0 0a47 	vmov.f32	s0, s14
 800507c:	f7ff f80a 	bl	8004094 <constrainf>
 8005080:	eef0 7a40 	vmov.f32	s15, s0
 8005084:	49a2      	ldr	r1, [pc, #648]	; (8005310 <pidController+0x5fc>)
 8005086:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	3304      	adds	r3, #4
 8005094:	edc3 7a00 	vstr	s15, [r3]

        // -----calculate pidSetpointDelta
        float pidSetpointDelta = 0;
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
        pidRuntime.previousPidSetpoint[axis] = currentPidSetpoint;
 800509e:	4a9b      	ldr	r2, [pc, #620]	; (800530c <pidController+0x5f8>)
 80050a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050a2:	3302      	adds	r3, #2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	3304      	adds	r3, #4
 80050aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050ac:	601a      	str	r2, [r3, #0]

        // -----calculate D component
        // disable D if launch control is active
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 80050ae:	4a97      	ldr	r2, [pc, #604]	; (800530c <pidController+0x5f8>)
 80050b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80050ba:	edd3 7a00 	vldr	s15, [r3]
 80050be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c6:	dd43      	ble.n	8005150 <pidController+0x43c>
 80050c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d13f      	bne.n	8005150 <pidController+0x43c>
            // dT is fixed and calculated from the target PID loop time
            // This is done to avoid DTerm spikes that occur with dynamically
            // calculated deltaT whenever another task causes the PID
            // loop execution to be delayed.
            const float delta =
                - (gyroRateDterm[axis] - previousGyroRateDterm[axis]) * pidRuntime.pidFrequency;
 80050d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	3370      	adds	r3, #112	; 0x70
 80050d6:	443b      	add	r3, r7
 80050d8:	3b6c      	subs	r3, #108	; 0x6c
 80050da:	ed93 7a00 	vldr	s14, [r3]
 80050de:	4a8d      	ldr	r2, [pc, #564]	; (8005314 <pidController+0x600>)
 80050e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	edd3 7a00 	vldr	s15, [r3]
 80050ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050ee:	eeb1 7a67 	vneg.f32	s14, s15
 80050f2:	4b86      	ldr	r3, [pc, #536]	; (800530c <pidController+0x5f8>)
 80050f4:	edd3 7a01 	vldr	s15, [r3, #4]
            const float delta =
 80050f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            float preTpaD = pidRuntime.pidCoefficient[axis].Kd * delta;
 8005100:	4a82      	ldr	r2, [pc, #520]	; (800530c <pidController+0x5f8>)
 8005102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	4413      	add	r3, r2
 8005108:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800510c:	edd3 7a00 	vldr	s15, [r3]
 8005110:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005118:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

            pidData[axis].D = preTpaD * pidRuntime.tpaFactor;
 800511c:	4b7b      	ldr	r3, [pc, #492]	; (800530c <pidController+0x5f8>)
 800511e:	ed93 7a92 	vldr	s14, [r3, #584]	; 0x248
 8005122:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512a:	4979      	ldr	r1, [pc, #484]	; (8005310 <pidController+0x5fc>)
 800512c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	3308      	adds	r3, #8
 800513a:	edc3 7a00 	vstr	s15, [r3]

            // Log the value of D pre application of TPA
            preTpaD *= D_LPF_FILT_SCALE;
 800513e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005142:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8005146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800514a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        if ((pidRuntime.pidCoefficient[axis].Kd > 0) && !launchControlActive) {
 800514e:	e00a      	b.n	8005166 <pidController+0x452>

        } else {
            pidData[axis].D = 0;
 8005150:	496f      	ldr	r1, [pc, #444]	; (8005310 <pidController+0x5fc>)
 8005152:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	3308      	adds	r3, #8
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

        }

        previousGyroRateDterm[axis] = gyroRateDterm[axis];
 8005166:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	3370      	adds	r3, #112	; 0x70
 800516c:	443b      	add	r3, r7
 800516e:	3b6c      	subs	r3, #108	; 0x6c
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4968      	ldr	r1, [pc, #416]	; (8005314 <pidController+0x600>)
 8005174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	601a      	str	r2, [r3, #0]

        // -----calculate feedforward component

        // no feedforward in launch control
        float feedforwardGain = launchControlActive ? 0.0f : pidRuntime.pidCoefficient[axis].Kf;
 800517c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <pidController+0x480>
 8005184:	4a61      	ldr	r2, [pc, #388]	; (800530c <pidController+0x5f8>)
 8005186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	4413      	add	r3, r2
 800518c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	e001      	b.n	8005198 <pidController+0x484>
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	62bb      	str	r3, [r7, #40]	; 0x28
        if (feedforwardGain > 0) {
 800519a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800519e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a6:	dd17      	ble.n	80051d8 <pidController+0x4c4>
            // halve feedforward in Level mode since stick sensitivity is weaker by about half
            feedforwardGain *= 1.0f;
            // transition now calculated in feedforward.c when new RC data arrives
            float feedForward = feedforwardGain * pidSetpointDelta * pidRuntime.pidFrequency;
 80051a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80051ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80051b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051b4:	4b55      	ldr	r3, [pc, #340]	; (800530c <pidController+0x5f8>)
 80051b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            pidData[axis].F = feedForward;
 80051c2:	4953      	ldr	r1, [pc, #332]	; (8005310 <pidController+0x5fc>)
 80051c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	330c      	adds	r3, #12
 80051d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e00a      	b.n	80051ee <pidController+0x4da>
       } else {
            pidData[axis].F = 0;
 80051d8:	494d      	ldr	r1, [pc, #308]	; (8005310 <pidController+0x5fc>)
 80051da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	330c      	adds	r3, #12
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
        }

        // P boost at the end of throttle chop
        // attenuate effect if turning more than 50 deg/s, half at 100 deg/s
        float agBoostAttenuator = fabsf(currentPidSetpoint) / 50.0f;
 80051ee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80051f2:	eeb0 7ae7 	vabs.f32	s14, s15
 80051f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005318 <pidController+0x604>
 80051fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051fe:	edc7 7a08 	vstr	s15, [r7, #32]
        agBoostAttenuator = MAX(agBoostAttenuator, 1.0f);
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005210:	edd7 7a06 	vldr	s15, [r7, #24]
 8005214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521c:	dd01      	ble.n	8005222 <pidController+0x50e>
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	e000      	b.n	8005224 <pidController+0x510>
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	623b      	str	r3, [r7, #32]
        const float agBoost = 1.0f + (pidRuntime.antiGravityPBoost / agBoostAttenuator);
 8005226:	4b39      	ldr	r3, [pc, #228]	; (800530c <pidController+0x5f8>)
 8005228:	edd3 6a6d 	vldr	s13, [r3, #436]	; 0x1b4
 800522c:	ed97 7a08 	vldr	s14, [r7, #32]
 8005230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005234:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800523c:	edc7 7a05 	vstr	s15, [r7, #20]
        if (axis != FD_YAW) {
 8005240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005242:	2b02      	cmp	r3, #2
 8005244:	d015      	beq.n	8005272 <pidController+0x55e>
            pidData[axis].P *= agBoost;
 8005246:	4932      	ldr	r1, [pc, #200]	; (8005310 <pidController+0x5fc>)
 8005248:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	ed93 7a00 	vldr	s14, [r3]
 8005258:	edd7 7a05 	vldr	s15, [r7, #20]
 800525c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005260:	492b      	ldr	r1, [pc, #172]	; (8005310 <pidController+0x5fc>)
 8005262:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	edc3 7a00 	vstr	s15, [r3]
        }

        const float pidSum = pidData[axis].P + pidData[axis].I + pidData[axis].D + pidData[axis].F;
 8005272:	4927      	ldr	r1, [pc, #156]	; (8005310 <pidController+0x5fc>)
 8005274:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	ed93 7a00 	vldr	s14, [r3]
 8005284:	4922      	ldr	r1, [pc, #136]	; (8005310 <pidController+0x5fc>)
 8005286:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	3304      	adds	r3, #4
 8005294:	edd3 7a00 	vldr	s15, [r3]
 8005298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800529c:	491c      	ldr	r1, [pc, #112]	; (8005310 <pidController+0x5fc>)
 800529e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	3308      	adds	r3, #8
 80052ac:	edd3 7a00 	vldr	s15, [r3]
 80052b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052b4:	4916      	ldr	r1, [pc, #88]	; (8005310 <pidController+0x5fc>)
 80052b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	330c      	adds	r3, #12
 80052c4:	edd3 7a00 	vldr	s15, [r3]
 80052c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052cc:	edc7 7a04 	vstr	s15, [r7, #16]
        {
            pidData[axis].Sum = pidSum;
 80052d0:	490f      	ldr	r1, [pc, #60]	; (8005310 <pidController+0x5fc>)
 80052d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	3310      	adds	r3, #16
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	601a      	str	r2, [r3, #0]
    for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 80052e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052e6:	3301      	adds	r3, #1
 80052e8:	667b      	str	r3, [r7, #100]	; 0x64
 80052ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f77f ae17 	ble.w	8004f20 <pidController+0x20c>
        }
    }

    // Disable PID control if at zero throttle or if gyro overflow detected
    // This may look very innefficient, but it is done on purpose to always show real CPU usage as in flight
    if (!pidRuntime.pidStabilisationEnabled || gyroOverflowDetected()) {
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <pidController+0x5f8>)
 80052f4:	7a1b      	ldrb	r3, [r3, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <pidController+0x5f0>
 80052fa:	f7fd f8c7 	bl	800248c <gyroOverflowDetected>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d048      	beq.n	8005396 <pidController+0x682>
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005304:	2300      	movs	r3, #0
 8005306:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005308:	e041      	b.n	800538e <pidController+0x67a>
 800530a:	bf00      	nop
 800530c:	20000cf0 	.word	0x20000cf0
 8005310:	20000f4c 	.word	0x20000f4c
 8005314:	20001040 	.word	0x20001040
 8005318:	42480000 	.word	0x42480000
            pidData[axis].P = 0;
 800531c:	4924      	ldr	r1, [pc, #144]	; (80053b0 <pidController+0x69c>)
 800531e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
            pidData[axis].I = 0;
 8005330:	491f      	ldr	r1, [pc, #124]	; (80053b0 <pidController+0x69c>)
 8005332:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	3304      	adds	r3, #4
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
            pidData[axis].D = 0;
 8005346:	491a      	ldr	r1, [pc, #104]	; (80053b0 <pidController+0x69c>)
 8005348:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800534a:	4613      	mov	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	3308      	adds	r3, #8
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
            pidData[axis].F = 0;
 800535c:	4914      	ldr	r1, [pc, #80]	; (80053b0 <pidController+0x69c>)
 800535e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	330c      	adds	r3, #12
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	601a      	str	r2, [r3, #0]

            pidData[axis].Sum = 0;
 8005372:	490f      	ldr	r1, [pc, #60]	; (80053b0 <pidController+0x69c>)
 8005374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3310      	adds	r3, #16
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
        for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 8005388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800538a:	3301      	adds	r3, #1
 800538c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800538e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005390:	2b02      	cmp	r3, #2
 8005392:	ddc3      	ble.n	800531c <pidController+0x608>
 8005394:	e007      	b.n	80053a6 <pidController+0x692>
        }
    } else if (pidRuntime.zeroThrottleItermReset) {
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <pidController+0x6a0>)
 8005398:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <pidController+0x692>
        pidResetIterm();
 80053a0:	f7ff fc98 	bl	8004cd4 <pidResetIterm>
    }
}
 80053a4:	e7ff      	b.n	80053a6 <pidController+0x692>
 80053a6:	bf00      	nop
 80053a8:	3770      	adds	r7, #112	; 0x70
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000f4c 	.word	0x20000f4c
 80053b4:	20000cf0 	.word	0x20000cf0

080053b8 <pidSetItermAccelerator>:


static void pidSetItermAccelerator(float newItermAccelerator)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	ed87 0a01 	vstr	s0, [r7, #4]
    pidRuntime.itermAccelerator = newItermAccelerator;
 80053c2:	4a05      	ldr	r2, [pc, #20]	; (80053d8 <pidSetItermAccelerator+0x20>)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000cf0 	.word	0x20000cf0

080053dc <checkForThrottleErrorResetState>:

static void checkForThrottleErrorResetState(uint16_t rxRefreshRate)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
    static int index;
    static int16_t rcCommandThrottlePrevious[THROTTLE_BUFFER_MAX];

    const int rxRefreshRateMs = rxRefreshRate / 1000;
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	4a35      	ldr	r2, [pc, #212]	; (80054c0 <checkForThrottleErrorResetState+0xe4>)
 80053ea:	fba2 2303 	umull	r2, r3, r2, r3
 80053ee:	099b      	lsrs	r3, r3, #6
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	617b      	str	r3, [r7, #20]
    const int indexMax = constrain(THROTTLE_DELTA_MS / rxRefreshRateMs, 1, THROTTLE_BUFFER_MAX);
 80053f4:	2264      	movs	r2, #100	; 0x64
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80053fc:	2214      	movs	r2, #20
 80053fe:	2101      	movs	r1, #1
 8005400:	4618      	mov	r0, r3
 8005402:	f7fe fe2e 	bl	8004062 <constrain>
 8005406:	6138      	str	r0, [r7, #16]
    const int16_t throttleVelocityThreshold =  currentPidProfile->itermThrottleThreshold / 2;
 8005408:	4b2e      	ldr	r3, [pc, #184]	; (80054c4 <checkForThrottleErrorResetState+0xe8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	81fb      	strh	r3, [r7, #14]

    rcCommandThrottlePrevious[index++] = rcCommand[THROTTLE];
 8005414:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <checkForThrottleErrorResetState+0xec>)
 8005416:	edd3 7a03 	vldr	s15, [r3, #12]
 800541a:	4b2c      	ldr	r3, [pc, #176]	; (80054cc <checkForThrottleErrorResetState+0xf0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	492a      	ldr	r1, [pc, #168]	; (80054cc <checkForThrottleErrorResetState+0xf0>)
 8005422:	600a      	str	r2, [r1, #0]
 8005424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005428:	ee17 2a90 	vmov	r2, s15
 800542c:	b211      	sxth	r1, r2
 800542e:	4a28      	ldr	r2, [pc, #160]	; (80054d0 <checkForThrottleErrorResetState+0xf4>)
 8005430:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    if (index >= indexMax) {
 8005434:	4b25      	ldr	r3, [pc, #148]	; (80054cc <checkForThrottleErrorResetState+0xf0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	429a      	cmp	r2, r3
 800543c:	dc02      	bgt.n	8005444 <checkForThrottleErrorResetState+0x68>
        index = 0;
 800543e:	4b23      	ldr	r3, [pc, #140]	; (80054cc <checkForThrottleErrorResetState+0xf0>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
    }

    const int16_t rcCommandSpeed = rcCommand[THROTTLE] - rcCommandThrottlePrevious[index];
 8005444:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <checkForThrottleErrorResetState+0xec>)
 8005446:	ed93 7a03 	vldr	s14, [r3, #12]
 800544a:	4b20      	ldr	r3, [pc, #128]	; (80054cc <checkForThrottleErrorResetState+0xf0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <checkForThrottleErrorResetState+0xf4>)
 8005450:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800545c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005464:	ee17 3a90 	vmov	r3, s15
 8005468:	81bb      	strh	r3, [r7, #12]

    if (currentPidProfile->antiGravityMode == ANTI_GRAVITY_STEP) {
 800546a:	4b16      	ldr	r3, [pc, #88]	; (80054c4 <checkForThrottleErrorResetState+0xe8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005472:	2b01      	cmp	r3, #1
 8005474:	d120      	bne.n	80054b8 <checkForThrottleErrorResetState+0xdc>
        if (ABS(rcCommandSpeed) > throttleVelocityThreshold) {
 8005476:	89bb      	ldrh	r3, [r7, #12]
 8005478:	817b      	strh	r3, [r7, #10]
 800547a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800547e:	2b00      	cmp	r3, #0
 8005480:	bfb8      	it	lt
 8005482:	425b      	neglt	r3, r3
 8005484:	b29b      	uxth	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800548c:	429a      	cmp	r2, r3
 800548e:	dd0f      	ble.n	80054b0 <checkForThrottleErrorResetState+0xd4>
            pidSetItermAccelerator(CONVERT_PARAMETER_TO_FLOAT(currentPidProfile->itermAcceleratorGain));
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <checkForThrottleErrorResetState+0xe8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800549e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80054d4 <checkForThrottleErrorResetState+0xf8>
 80054a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054a6:	eeb0 0a67 	vmov.f32	s0, s15
 80054aa:	f7ff ff85 	bl	80053b8 <pidSetItermAccelerator>
        } else {
            pidSetItermAccelerator(0.0f);
        }
    }
}
 80054ae:	e003      	b.n	80054b8 <checkForThrottleErrorResetState+0xdc>
            pidSetItermAccelerator(0.0f);
 80054b0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80054d8 <checkForThrottleErrorResetState+0xfc>
 80054b4:	f7ff ff80 	bl	80053b8 <pidSetItermAccelerator>
}
 80054b8:	bf00      	nop
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	10624dd3 	.word	0x10624dd3
 80054c4:	20000060 	.word	0x20000060
 80054c8:	20000f8c 	.word	0x20000f8c
 80054cc:	2000104c 	.word	0x2000104c
 80054d0:	20001050 	.word	0x20001050
 80054d4:	3a83126f 	.word	0x3a83126f
 80054d8:	00000000 	.word	0x00000000

080054dc <applyActualRates>:

static float applyActualRates(const int axis, float rcCommandf, const float rcCommandfAbs)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08a      	sub	sp, #40	; 0x28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80054e8:	edc7 0a01 	vstr	s1, [r7, #4]
    float expof = currentControlRateProfile->rcExpo[axis] / 100.0f;
 80054ec:	4b40      	ldr	r3, [pc, #256]	; (80055f0 <applyActualRates+0x114>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	3306      	adds	r3, #6
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005500:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80055f4 <applyActualRates+0x118>
 8005504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005508:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    expof = rcCommandfAbs * (powf(rcCommandf, 5) * expof + rcCommandf * (1 - expof));
 800550c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8005510:	ed97 0a02 	vldr	s0, [r7, #8]
 8005514:	f00f fdbc 	bl	8015090 <powf>
 8005518:	eeb0 7a40 	vmov.f32	s14, s0
 800551c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005524:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005528:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800552c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005530:	edd7 7a02 	vldr	s15, [r7, #8]
 8005534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800553c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005544:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    const float centerSensitivity = currentControlRateProfile->rcRates[axis] * 10.0f;
 8005548:	4b29      	ldr	r3, [pc, #164]	; (80055f0 <applyActualRates+0x114>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	3303      	adds	r3, #3
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	ee07 3a90 	vmov	s15, r3
 8005558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800555c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005564:	edc7 7a08 	vstr	s15, [r7, #32]
    const float stickMovement = MAX(0, currentControlRateProfile->rates[axis] * 10.0f - centerSensitivity);
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
 800556c:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <applyActualRates+0x114>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	3309      	adds	r3, #9
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005580:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005584:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005588:	edd7 7a08 	vldr	s15, [r7, #32]
 800558c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005590:	edc7 7a06 	vstr	s15, [r7, #24]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800559e:	ed97 7a06 	vldr	s14, [r7, #24]
 80055a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055aa:	d505      	bpl.n	80055b8 <applyActualRates+0xdc>
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b6:	e001      	b.n	80055bc <applyActualRates+0xe0>
 80055b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80055bc:	edc7 7a05 	vstr	s15, [r7, #20]
    const float angleRate = rcCommandf * centerSensitivity + stickMovement * expof;
 80055c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80055c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80055c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055cc:	edd7 6a05 	vldr	s13, [r7, #20]
 80055d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80055d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055dc:	edc7 7a04 	vstr	s15, [r7, #16]

    return angleRate;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	ee07 3a90 	vmov	s15, r3
}
 80055e6:	eeb0 0a67 	vmov.f32	s0, s15
 80055ea:	3728      	adds	r7, #40	; 0x28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20000070 	.word	0x20000070
 80055f4:	42c80000 	.word	0x42c80000

080055f8 <scaleRawSetpointToFpvCamAngle>:

static void scaleRawSetpointToFpvCamAngle(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
    //recalculate sin/cos only when rxConfig()->fpvCamAngleDegrees changed
    static float cosFactor = 1.0;
    static float sinFactor = 0.0;

    float roll = rawSetpoint[ROLL];
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	607b      	str	r3, [r7, #4]
    float yaw = rawSetpoint[YAW];
 8005604:	4b20      	ldr	r3, [pc, #128]	; (8005688 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	603b      	str	r3, [r7, #0]
    rawSetpoint[ROLL] = constrainf(roll * cosFactor -  yaw * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 800560a:	4b20      	ldr	r3, [pc, #128]	; (800568c <scaleRawSetpointToFpvCamAngle+0x94>)
 800560c:	ed93 7a00 	vldr	s14, [r3]
 8005610:	edd7 7a01 	vldr	s15, [r7, #4]
 8005614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005618:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <scaleRawSetpointToFpvCamAngle+0x98>)
 800561a:	edd3 6a00 	vldr	s13, [r3]
 800561e:	edd7 7a00 	vldr	s15, [r7]
 8005622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800562a:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8005694 <scaleRawSetpointToFpvCamAngle+0x9c>
 800562e:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8005698 <scaleRawSetpointToFpvCamAngle+0xa0>
 8005632:	eeb0 0a67 	vmov.f32	s0, s15
 8005636:	f7fe fd2d 	bl	8004094 <constrainf>
 800563a:	eef0 7a40 	vmov.f32	s15, s0
 800563e:	4b12      	ldr	r3, [pc, #72]	; (8005688 <scaleRawSetpointToFpvCamAngle+0x90>)
 8005640:	edc3 7a00 	vstr	s15, [r3]
    rawSetpoint[YAW]  = constrainf(yaw  * cosFactor + roll * sinFactor, -SETPOINT_RATE_LIMIT * 1.0f, SETPOINT_RATE_LIMIT * 1.0f);
 8005644:	4b11      	ldr	r3, [pc, #68]	; (800568c <scaleRawSetpointToFpvCamAngle+0x94>)
 8005646:	ed93 7a00 	vldr	s14, [r3]
 800564a:	edd7 7a00 	vldr	s15, [r7]
 800564e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005652:	4b0f      	ldr	r3, [pc, #60]	; (8005690 <scaleRawSetpointToFpvCamAngle+0x98>)
 8005654:	edd3 6a00 	vldr	s13, [r3]
 8005658:	edd7 7a01 	vldr	s15, [r7, #4]
 800565c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005664:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8005694 <scaleRawSetpointToFpvCamAngle+0x9c>
 8005668:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8005698 <scaleRawSetpointToFpvCamAngle+0xa0>
 800566c:	eeb0 0a67 	vmov.f32	s0, s15
 8005670:	f7fe fd10 	bl	8004094 <constrainf>
 8005674:	eef0 7a40 	vmov.f32	s15, s0
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <scaleRawSetpointToFpvCamAngle+0x90>)
 800567a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000f40 	.word	0x20000f40
 800568c:	20000078 	.word	0x20000078
 8005690:	20001078 	.word	0x20001078
 8005694:	44f9c000 	.word	0x44f9c000
 8005698:	c4f9c000 	.word	0xc4f9c000

0800569c <resetYawAxis>:

static void resetYawAxis(void)
{
 800569c:	b480      	push	{r7}
 800569e:	af00      	add	r7, sp, #0
    rcCommand[YAW] = 0;
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <resetYawAxis+0x20>)
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	609a      	str	r2, [r3, #8]
    setpointRate[YAW] = 0;
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <resetYawAxis+0x24>)
 80056aa:	f04f 0200 	mov.w	r2, #0
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	bf00      	nop
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20000f8c 	.word	0x20000f8c
 80056c0:	20000fe4 	.word	0x20000fe4

080056c4 <pidIncUpdateCounter>:

void pidIncUpdateCounter(void) {
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
	if (pidUpdateCounter % activePidLoopDenom == 0) {
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <pidIncUpdateCounter+0x38>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	4a0c      	ldr	r2, [pc, #48]	; (8005700 <pidIncUpdateCounter+0x3c>)
 80056ce:	7812      	ldrb	r2, [r2, #0]
 80056d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80056d4:	fb01 f202 	mul.w	r2, r1, r2
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <pidIncUpdateCounter+0x22>
		pidUpdateCounter = 0;
 80056e0:	4b06      	ldr	r3, [pc, #24]	; (80056fc <pidIncUpdateCounter+0x38>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	701a      	strb	r2, [r3, #0]
	}
	pidUpdateCounter++;
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <pidIncUpdateCounter+0x38>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	3301      	adds	r3, #1
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	4b03      	ldr	r3, [pc, #12]	; (80056fc <pidIncUpdateCounter+0x38>)
 80056f0:	701a      	strb	r2, [r3, #0]
}
 80056f2:	bf00      	nop
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	20000c58 	.word	0x20000c58
 8005700:	20000000 	.word	0x20000000

08005704 <processRcCommand>:


void processRcCommand(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
    // If we're armed, at minimum throttle, and we do arming via the
    // sticks, do not process yaw input from the rx.  We do this so the
    // motors do not spin up while we are trying to arm or disarm.
    // Allow yaw control for tricopters if the user wants the servo to move even when unarmed.
    if (isUsingSticksForArming() && rcData[THROTTLE] <= 1050) {
 800570a:	f7fe fcec 	bl	80040e6 <isUsingSticksForArming>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <processRcCommand+0x28>
 8005714:	4b4c      	ldr	r3, [pc, #304]	; (8005848 <processRcCommand+0x144>)
 8005716:	edd3 7a03 	vldr	s15, [r3, #12]
 800571a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800584c <processRcCommand+0x148>
 800571e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005726:	d801      	bhi.n	800572c <processRcCommand+0x28>
        resetYawAxis();
 8005728:	f7ff ffb8 	bl	800569c <resetYawAxis>
    }

    if (isRxDataNew) {
 800572c:	4b48      	ldr	r3, [pc, #288]	; (8005850 <processRcCommand+0x14c>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <processRcCommand+0x36>
        newRxDataForFF = true;
 8005734:	4b47      	ldr	r3, [pc, #284]	; (8005854 <processRcCommand+0x150>)
 8005736:	2201      	movs	r2, #1
 8005738:	701a      	strb	r2, [r3, #0]
    }

    if (isRxDataNew && pidAntiGravityEnabled()) {
 800573a:	4b45      	ldr	r3, [pc, #276]	; (8005850 <processRcCommand+0x14c>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <processRcCommand+0x52>
 8005742:	f7fe fcd9 	bl	80040f8 <pidAntiGravityEnabled>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d004      	beq.n	8005756 <processRcCommand+0x52>
        checkForThrottleErrorResetState(currentRxRefreshRate);
 800574c:	4b42      	ldr	r3, [pc, #264]	; (8005858 <processRcCommand+0x154>)
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fe43 	bl	80053dc <checkForThrottleErrorResetState>
    }

    if (isRxDataNew) {
 8005756:	4b3e      	ldr	r3, [pc, #248]	; (8005850 <processRcCommand+0x14c>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d06c      	beq.n	8005838 <processRcCommand+0x134>
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	e064      	b.n	800582e <processRcCommand+0x12a>
            float angleRate;

            {
                // scale rcCommandf to range [-1.0, 1.0]
                float rcCommandf;
                if (axis == FD_YAW) {
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d10d      	bne.n	8005786 <processRcCommand+0x82>
                    rcCommandf = rcCommand[axis] / rcCommandYawDivider;
 800576a:	4a3c      	ldr	r2, [pc, #240]	; (800585c <processRcCommand+0x158>)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	edd3 6a00 	vldr	s13, [r3]
 8005776:	4b3a      	ldr	r3, [pc, #232]	; (8005860 <processRcCommand+0x15c>)
 8005778:	ed93 7a00 	vldr	s14, [r3]
 800577c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005780:	edc7 7a02 	vstr	s15, [r7, #8]
 8005784:	e00c      	b.n	80057a0 <processRcCommand+0x9c>
                } else {
                    rcCommandf = rcCommand[axis] / rcCommandDivider;
 8005786:	4a35      	ldr	r2, [pc, #212]	; (800585c <processRcCommand+0x158>)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	edd3 6a00 	vldr	s13, [r3]
 8005792:	4b34      	ldr	r3, [pc, #208]	; (8005864 <processRcCommand+0x160>)
 8005794:	ed93 7a00 	vldr	s14, [r3]
 8005798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579c:	edc7 7a02 	vstr	s15, [r7, #8]
                }

                rcDeflection[axis] = rcCommandf;
 80057a0:	4a31      	ldr	r2, [pc, #196]	; (8005868 <processRcCommand+0x164>)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	601a      	str	r2, [r3, #0]
                const float rcCommandfAbs = fabsf(rcCommandf);
 80057ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80057b0:	eef0 7ae7 	vabs.f32	s15, s15
 80057b4:	edc7 7a01 	vstr	s15, [r7, #4]
                rcDeflectionAbs[axis] = rcCommandfAbs;
 80057b8:	4a2c      	ldr	r2, [pc, #176]	; (800586c <processRcCommand+0x168>)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	601a      	str	r2, [r3, #0]

                angleRate = applyRates(axis, rcCommandf, rcCommandfAbs);
 80057c4:	4b2a      	ldr	r3, [pc, #168]	; (8005870 <processRcCommand+0x16c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	edd7 0a01 	vldr	s1, [r7, #4]
 80057cc:	ed97 0a02 	vldr	s0, [r7, #8]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	4798      	blx	r3
 80057d4:	ed87 0a00 	vstr	s0, [r7]

            }
            rawSetpoint[axis] = constrainf(angleRate, -1.0f * currentControlRateProfile->rate_limit[axis], 1.0f * currentControlRateProfile->rate_limit[axis]);
 80057d8:	4b26      	ldr	r3, [pc, #152]	; (8005874 <processRcCommand+0x170>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3308      	adds	r3, #8
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	885b      	ldrh	r3, [r3, #2]
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057ee:	eef1 7a67 	vneg.f32	s15, s15
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <processRcCommand+0x170>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3308      	adds	r3, #8
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4413      	add	r3, r2
 80057fe:	885b      	ldrh	r3, [r3, #2]
 8005800:	ee07 3a10 	vmov	s14, r3
 8005804:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005808:	eeb0 1a47 	vmov.f32	s2, s14
 800580c:	eef0 0a67 	vmov.f32	s1, s15
 8005810:	ed97 0a00 	vldr	s0, [r7]
 8005814:	f7fe fc3e 	bl	8004094 <constrainf>
 8005818:	eef0 7a40 	vmov.f32	s15, s0
 800581c:	4a16      	ldr	r2, [pc, #88]	; (8005878 <processRcCommand+0x174>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	edc3 7a00 	vstr	s15, [r3]
        for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b02      	cmp	r3, #2
 8005832:	dd97      	ble.n	8005764 <processRcCommand+0x60>
        }
        scaleRawSetpointToFpvCamAngle();
 8005834:	f7ff fee0 	bl	80055f8 <scaleRawSetpointToFpvCamAngle>
    }

    isRxDataNew = false;
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <processRcCommand+0x14c>)
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
}
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000f9c 	.word	0x20000f9c
 800584c:	44834000 	.word	0x44834000
 8005850:	20001008 	.word	0x20001008
 8005854:	20001009 	.word	0x20001009
 8005858:	2000006c 	.word	0x2000006c
 800585c:	20000f8c 	.word	0x20000f8c
 8005860:	20000068 	.word	0x20000068
 8005864:	20000064 	.word	0x20000064
 8005868:	20000ff0 	.word	0x20000ff0
 800586c:	20000ffc 	.word	0x20000ffc
 8005870:	20000074 	.word	0x20000074
 8005874:	20000070 	.word	0x20000070
 8005878:	20000f40 	.word	0x20000f40

0800587c <buildRotationMatrixFromAlignment>:

#include <string.h>
#include "sensor_align.h"

void buildRotationMatrixFromAlignment(const sensorAlignment_t* sensorAlignment, fp_rotationMatrix_t* rm)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
    fp_angles_t rotationAngles;
    rotationAngles.angles.roll  = DECIDEGREES_TO_RADIANS(sensorAlignment->roll);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800588c:	ee07 3a90 	vmov	s15, r3
 8005890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005894:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800589c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005900 <buildRotationMatrixFromAlignment+0x84>
 80058a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058a4:	edc7 7a03 	vstr	s15, [r7, #12]
    rotationAngles.angles.pitch = DECIDEGREES_TO_RADIANS(sensorAlignment->pitch);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058b6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80058ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058be:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005900 <buildRotationMatrixFromAlignment+0x84>
 80058c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058c6:	edc7 7a04 	vstr	s15, [r7, #16]
    rotationAngles.angles.yaw   = DECIDEGREES_TO_RADIANS(sensorAlignment->yaw);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80058d0:	ee07 3a90 	vmov	s15, r3
 80058d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058d8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80058dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058e0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005900 <buildRotationMatrixFromAlignment+0x84>
 80058e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058e8:	edc7 7a05 	vstr	s15, [r7, #20]

    buildRotationMatrix(&rotationAngles, rm);
 80058ec:	f107 030c 	add.w	r3, r7, #12
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fb ffca 	bl	800188c <buildRotationMatrix>
}
 80058f8:	bf00      	nop
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	3c8efa35 	.word	0x3c8efa35

08005904 <buildAlignmentFromStandardAlignment>:

void buildAlignmentFromStandardAlignment(sensorAlignment_t* sensorAlignment, sensor_align_e alignment)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	70fb      	strb	r3, [r7, #3]
    if (alignment == ALIGN_CUSTOM || alignment == ALIGN_DEFAULT) {
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	2b09      	cmp	r3, #9
 8005914:	d03f      	beq.n	8005996 <buildAlignmentFromStandardAlignment+0x92>
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d03c      	beq.n	8005996 <buildAlignmentFromStandardAlignment+0x92>
        return;
    }

    uint8_t alignmentBits = ALIGNMENT_TO_BITMASK(alignment);
 800591c:	78fb      	ldrb	r3, [r7, #3]
 800591e:	3b01      	subs	r3, #1
 8005920:	b2db      	uxtb	r3, r3
 8005922:	b25b      	sxtb	r3, r3
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	b25a      	sxtb	r2, r3
 800592a:	78fb      	ldrb	r3, [r7, #3]
 800592c:	3b01      	subs	r3, #1
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	b25b      	sxtb	r3, r3
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	b25b      	sxtb	r3, r3
 8005938:	4313      	orrs	r3, r2
 800593a:	b25b      	sxtb	r3, r3
 800593c:	72fb      	strb	r3, [r7, #11]

    memset(sensorAlignment, 0x00, sizeof(sensorAlignment_t));
 800593e:	2206      	movs	r2, #6
 8005940:	2100      	movs	r1, #0
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f00c fee3 	bl	801270e <memset>

    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	e01f      	b.n	800598e <buildAlignmentFromStandardAlignment+0x8a>
        sensorAlignment->raw[axis] = DEGREES_TO_DECIDEGREES(90) * ALIGNMENT_AXIS_ROTATIONS(alignmentBits, axis);
 800594e:	7afa      	ldrb	r2, [r7, #11]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f1c3 0302 	rsb	r3, r3, #2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	2103      	movs	r1, #3
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	401a      	ands	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f1c3 0302 	rsb	r3, r3, #2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	fa42 f303 	asr.w	r3, r2, r3
 800596c:	b29b      	uxth	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	0112      	lsls	r2, r2, #4
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	461a      	mov	r2, r3
 8005976:	0112      	lsls	r2, r2, #4
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	b29b      	uxth	r3, r3
 800597e:	b219      	sxth	r1, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int axis = 0; axis < FLIGHT_DYNAMICS_INDEX_COUNT; axis++) {
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b02      	cmp	r3, #2
 8005992:	dddc      	ble.n	800594e <buildAlignmentFromStandardAlignment+0x4a>
 8005994:	e000      	b.n	8005998 <buildAlignmentFromStandardAlignment+0x94>
        return;
 8005996:	bf00      	nop
    }
}
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <alignSensorViaRotation>:

void alignSensorViaRotation(float *dest, uint8_t rotation)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	70fb      	strb	r3, [r7, #3]
    const float x = dest[X];
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	617b      	str	r3, [r7, #20]
    const float y = dest[Y];
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	613b      	str	r3, [r7, #16]
    const float z = dest[Z];
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	60fb      	str	r3, [r7, #12]

    switch (rotation) {
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	3b02      	subs	r3, #2
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d810      	bhi.n	80059e8 <alignSensorViaRotation+0x48>
 80059c6:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <alignSensorViaRotation+0x2c>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	08005a01 	.word	0x08005a01
 80059d0:	08005a21 	.word	0x08005a21
 80059d4:	08005a49 	.word	0x08005a49
 80059d8:	08005a69 	.word	0x08005a69
 80059dc:	08005a91 	.word	0x08005a91
 80059e0:	08005ab1 	.word	0x08005ab1
 80059e4:	08005ad9 	.word	0x08005ad9
    default:
    case CW0_DEG:
        dest[X] = x;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	601a      	str	r2, [r3, #0]
        dest[Y] = y;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3304      	adds	r3, #4
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3308      	adds	r3, #8
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	601a      	str	r2, [r3, #0]
        break;
 80059fe:	e083      	b.n	8005b08 <alignSensorViaRotation+0x168>
    case CW90_DEG:
        dest[X] = y;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	601a      	str	r2, [r3, #0]
        dest[Y] = -x;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a0e:	eef1 7a67 	vneg.f32	s15, s15
 8005a12:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]
        break;
 8005a1e:	e073      	b.n	8005b08 <alignSensorViaRotation+0x168>
    case CW180_DEG:
        dest[X] = -x;
 8005a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a24:	eef1 7a67 	vneg.f32	s15, s15
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -y;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a36:	eef1 7a67 	vneg.f32	s15, s15
 8005a3a:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = z;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3308      	adds	r3, #8
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	601a      	str	r2, [r3, #0]
        break;
 8005a46:	e05f      	b.n	8005b08 <alignSensorViaRotation+0x168>
    case CW270_DEG:
        dest[X] = -y;
 8005a48:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a4c:	eef1 7a67 	vneg.f32	s15, s15
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = x;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	601a      	str	r2, [r3, #0]
        dest[Z] = z;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3308      	adds	r3, #8
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	601a      	str	r2, [r3, #0]
        break;
 8005a66:	e04f      	b.n	8005b08 <alignSensorViaRotation+0x168>
    case CW0_DEG_FLIP:
        dest[X] = -x;
 8005a68:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a6c:	eef1 7a67 	vneg.f32	s15, s15
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = y;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	3308      	adds	r3, #8
 8005a82:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a86:	eef1 7a67 	vneg.f32	s15, s15
 8005a8a:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005a8e:	e03b      	b.n	8005b08 <alignSensorViaRotation+0x168>
    case CW90_DEG_FLIP:
        dest[X] = y;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	601a      	str	r2, [r3, #0]
        dest[Y] = x;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	601a      	str	r2, [r3, #0]
        dest[Z] = -z;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005aa6:	eef1 7a67 	vneg.f32	s15, s15
 8005aaa:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005aae:	e02b      	b.n	8005b08 <alignSensorViaRotation+0x168>
    case CW180_DEG_FLIP:
        dest[X] = x;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	601a      	str	r2, [r3, #0]
        dest[Y] = -y;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	edd7 7a04 	vldr	s15, [r7, #16]
 8005abe:	eef1 7a67 	vneg.f32	s15, s15
 8005ac2:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ace:	eef1 7a67 	vneg.f32	s15, s15
 8005ad2:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005ad6:	e017      	b.n	8005b08 <alignSensorViaRotation+0x168>
    case CW270_DEG_FLIP:
        dest[X] = -y;
 8005ad8:	edd7 7a04 	vldr	s15, [r7, #16]
 8005adc:	eef1 7a67 	vneg.f32	s15, s15
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	edc3 7a00 	vstr	s15, [r3]
        dest[Y] = -x;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	edd7 7a05 	vldr	s15, [r7, #20]
 8005aee:	eef1 7a67 	vneg.f32	s15, s15
 8005af2:	edc3 7a00 	vstr	s15, [r3]
        dest[Z] = -z;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3308      	adds	r3, #8
 8005afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005afe:	eef1 7a67 	vneg.f32	s15, s15
 8005b02:	edc3 7a00 	vstr	s15, [r3]
        break;
 8005b06:	bf00      	nop
    }
}
 8005b08:	bf00      	nop
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b1a:	4b11      	ldr	r3, [pc, #68]	; (8005b60 <HAL_MspInit+0x4c>)
 8005b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1e:	4a10      	ldr	r2, [pc, #64]	; (8005b60 <HAL_MspInit+0x4c>)
 8005b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b24:	6413      	str	r3, [r2, #64]	; 0x40
 8005b26:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <HAL_MspInit+0x4c>)
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <HAL_MspInit+0x4c>)
 8005b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b36:	4a0a      	ldr	r2, [pc, #40]	; (8005b60 <HAL_MspInit+0x4c>)
 8005b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b3e:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <HAL_MspInit+0x4c>)
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	210f      	movs	r1, #15
 8005b4e:	f06f 0001 	mvn.w	r0, #1
 8005b52:	f005 fe63 	bl	800b81c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	40023800 	.word	0x40023800

08005b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b0ae      	sub	sp, #184	; 0xb8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	605a      	str	r2, [r3, #4]
 8005b76:	609a      	str	r2, [r3, #8]
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	2290      	movs	r2, #144	; 0x90
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f00c fdc2 	bl	801270e <memset>
  if(huart->Instance==USART3)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <HAL_UART_MspInit+0xb4>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d13c      	bne.n	8005c0e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b98:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b9e:	f107 0314 	add.w	r3, r7, #20
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f007 fcea 	bl	800d57c <HAL_RCCEx_PeriphCLKConfig>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005bae:	f7fe fa53 	bl	8004058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005bb2:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <HAL_UART_MspInit+0xb8>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <HAL_UART_MspInit+0xb8>)
 8005bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005bbe:	4b17      	ldr	r3, [pc, #92]	; (8005c1c <HAL_UART_MspInit+0xb8>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bc6:	613b      	str	r3, [r7, #16]
 8005bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bca:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <HAL_UART_MspInit+0xb8>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	4a13      	ldr	r2, [pc, #76]	; (8005c1c <HAL_UART_MspInit+0xb8>)
 8005bd0:	f043 0308 	orr.w	r3, r3, #8
 8005bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd6:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <HAL_UART_MspInit+0xb8>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005be2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bea:	2302      	movs	r3, #2
 8005bec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005bfc:	2307      	movs	r3, #7
 8005bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005c06:	4619      	mov	r1, r3
 8005c08:	4805      	ldr	r0, [pc, #20]	; (8005c20 <HAL_UART_MspInit+0xbc>)
 8005c0a:	f005 fe31 	bl	800b870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005c0e:	bf00      	nop
 8005c10:	37b8      	adds	r7, #184	; 0xb8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40004800 	.word	0x40004800
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40020c00 	.word	0x40020c00

08005c24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08c      	sub	sp, #48	; 0x30
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005c34:	4b2f      	ldr	r3, [pc, #188]	; (8005cf4 <HAL_InitTick+0xd0>)
 8005c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c38:	4a2e      	ldr	r2, [pc, #184]	; (8005cf4 <HAL_InitTick+0xd0>)
 8005c3a:	f043 0301 	orr.w	r3, r3, #1
 8005c3e:	6453      	str	r3, [r2, #68]	; 0x44
 8005c40:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <HAL_InitTick+0xd0>)
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005c4c:	f107 020c 	add.w	r2, r7, #12
 8005c50:	f107 0310 	add.w	r3, r7, #16
 8005c54:	4611      	mov	r1, r2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f007 fc5e 	bl	800d518 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005c5c:	f007 fc48 	bl	800d4f0 <HAL_RCC_GetPCLK2Freq>
 8005c60:	4603      	mov	r3, r0
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	4a23      	ldr	r2, [pc, #140]	; (8005cf8 <HAL_InitTick+0xd4>)
 8005c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6e:	0c9b      	lsrs	r3, r3, #18
 8005c70:	3b01      	subs	r3, #1
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005c74:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <HAL_InitTick+0xd8>)
 8005c76:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <HAL_InitTick+0xdc>)
 8005c78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005c7a:	4b20      	ldr	r3, [pc, #128]	; (8005cfc <HAL_InitTick+0xd8>)
 8005c7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005c82:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <HAL_InitTick+0xd8>)
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005c88:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <HAL_InitTick+0xd8>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c8e:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <HAL_InitTick+0xd8>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <HAL_InitTick+0xd8>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005c9a:	4818      	ldr	r0, [pc, #96]	; (8005cfc <HAL_InitTick+0xd8>)
 8005c9c:	f008 f896 	bl	800ddcc <HAL_TIM_Base_Init>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11b      	bne.n	8005ce6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005cae:	4813      	ldr	r0, [pc, #76]	; (8005cfc <HAL_InitTick+0xd8>)
 8005cb0:	f008 f8ee 	bl	800de90 <HAL_TIM_Base_Start_IT>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d111      	bne.n	8005ce6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005cc2:	2019      	movs	r0, #25
 8005cc4:	f005 fdc6 	bl	800b854 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b0f      	cmp	r3, #15
 8005ccc:	d808      	bhi.n	8005ce0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	2019      	movs	r0, #25
 8005cd4:	f005 fda2 	bl	800b81c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005cd8:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <HAL_InitTick+0xe0>)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	e002      	b.n	8005ce6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3730      	adds	r7, #48	; 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	40023800 	.word	0x40023800
 8005cf8:	431bde83 	.word	0x431bde83
 8005cfc:	2000107c 	.word	0x2000107c
 8005d00:	40010000 	.word	0x40010000
 8005d04:	200001d8 	.word	0x200001d8

08005d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d0c:	e7fe      	b.n	8005d0c <NMI_Handler+0x4>

08005d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d12:	e7fe      	b.n	8005d12 <HardFault_Handler+0x4>

08005d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d18:	e7fe      	b.n	8005d18 <MemManage_Handler+0x4>

08005d1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d1e:	e7fe      	b.n	8005d1e <BusFault_Handler+0x4>

08005d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d24:	e7fe      	b.n	8005d24 <UsageFault_Handler+0x4>

08005d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d26:	b480      	push	{r7}
 8005d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d2a:	bf00      	nop
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005d38:	4802      	ldr	r0, [pc, #8]	; (8005d44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005d3a:	f008 f921 	bl	800df80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005d3e:	bf00      	nop
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	2000107c 	.word	0x2000107c

08005d48 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8005d52:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <BSP_I2C1_Init+0x70>)
 8005d54:	4a19      	ldr	r2, [pc, #100]	; (8005dbc <BSP_I2C1_Init+0x74>)
 8005d56:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8005d58:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <BSP_I2C1_Init+0x78>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	4918      	ldr	r1, [pc, #96]	; (8005dc0 <BSP_I2C1_Init+0x78>)
 8005d60:	600a      	str	r2, [r1, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d122      	bne.n	8005dac <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8005d66:	4814      	ldr	r0, [pc, #80]	; (8005db8 <BSP_I2C1_Init+0x70>)
 8005d68:	f006 fb56 	bl	800c418 <HAL_I2C_GetState>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11c      	bne.n	8005dac <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8005d72:	4811      	ldr	r0, [pc, #68]	; (8005db8 <BSP_I2C1_Init+0x70>)
 8005d74:	f000 f8fe 	bl	8005f74 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d116      	bne.n	8005dac <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8005d7e:	480e      	ldr	r0, [pc, #56]	; (8005db8 <BSP_I2C1_Init+0x70>)
 8005d80:	f000 f8b4 	bl	8005eec <MX_I2C1_Init>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005d8a:	f06f 0307 	mvn.w	r3, #7
 8005d8e:	607b      	str	r3, [r7, #4]
 8005d90:	e00c      	b.n	8005dac <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005d92:	2100      	movs	r1, #0
 8005d94:	4808      	ldr	r0, [pc, #32]	; (8005db8 <BSP_I2C1_Init+0x70>)
 8005d96:	f006 fdf3 	bl	800c980 <HAL_I2CEx_ConfigAnalogFilter>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005da0:	f06f 0307 	mvn.w	r3, #7
 8005da4:	607b      	str	r3, [r7, #4]
 8005da6:	e001      	b.n	8005dac <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8005dac:	687b      	ldr	r3, [r7, #4]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200010c8 	.word	0x200010c8
 8005dbc:	40005400 	.word	0x40005400
 8005dc0:	2000111c 	.word	0x2000111c

08005dc4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8005dce:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <BSP_I2C1_DeInit+0x48>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d014      	beq.n	8005e00 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	; (8005e0c <BSP_I2C1_DeInit+0x48>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	4a0b      	ldr	r2, [pc, #44]	; (8005e0c <BSP_I2C1_DeInit+0x48>)
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <BSP_I2C1_DeInit+0x48>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10b      	bne.n	8005e00 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8005de8:	4809      	ldr	r0, [pc, #36]	; (8005e10 <BSP_I2C1_DeInit+0x4c>)
 8005dea:	f000 f925 	bl	8006038 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8005dee:	4808      	ldr	r0, [pc, #32]	; (8005e10 <BSP_I2C1_DeInit+0x4c>)
 8005df0:	f006 f8a0 	bl	800bf34 <HAL_I2C_DeInit>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8005dfa:	f06f 0307 	mvn.w	r3, #7
 8005dfe:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8005e00:	687b      	ldr	r3, [r7, #4]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	2000111c 	.word	0x2000111c
 8005e10:	200010c8 	.word	0x200010c8

08005e14 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08a      	sub	sp, #40	; 0x28
 8005e18:	af04      	add	r7, sp, #16
 8005e1a:	60ba      	str	r2, [r7, #8]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	81fb      	strh	r3, [r7, #14]
 8005e22:	460b      	mov	r3, r1
 8005e24:	81bb      	strh	r3, [r7, #12]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8005e2e:	89ba      	ldrh	r2, [r7, #12]
 8005e30:	89f9      	ldrh	r1, [r7, #14]
 8005e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e36:	9302      	str	r3, [sp, #8]
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	2301      	movs	r3, #1
 8005e42:	480c      	ldr	r0, [pc, #48]	; (8005e74 <BSP_I2C1_WriteReg+0x60>)
 8005e44:	f006 f8ba 	bl	800bfbc <HAL_I2C_Mem_Write>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8005e4e:	4809      	ldr	r0, [pc, #36]	; (8005e74 <BSP_I2C1_WriteReg+0x60>)
 8005e50:	f006 faf0 	bl	800c434 <HAL_I2C_GetError>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d103      	bne.n	8005e62 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005e5a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e002      	b.n	8005e68 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005e62:	f06f 0303 	mvn.w	r3, #3
 8005e66:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8005e68:	697b      	ldr	r3, [r7, #20]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	200010c8 	.word	0x200010c8

08005e78 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af04      	add	r7, sp, #16
 8005e7e:	60ba      	str	r2, [r7, #8]
 8005e80:	461a      	mov	r2, r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	81fb      	strh	r3, [r7, #14]
 8005e86:	460b      	mov	r3, r1
 8005e88:	81bb      	strh	r3, [r7, #12]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8005e92:	89ba      	ldrh	r2, [r7, #12]
 8005e94:	89f9      	ldrh	r1, [r7, #14]
 8005e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e9a:	9302      	str	r3, [sp, #8]
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	480c      	ldr	r0, [pc, #48]	; (8005ed8 <BSP_I2C1_ReadReg+0x60>)
 8005ea8:	f006 f99c 	bl	800c1e4 <HAL_I2C_Mem_Read>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00c      	beq.n	8005ecc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8005eb2:	4809      	ldr	r0, [pc, #36]	; (8005ed8 <BSP_I2C1_ReadReg+0x60>)
 8005eb4:	f006 fabe 	bl	800c434 <HAL_I2C_GetError>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d103      	bne.n	8005ec6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005ebe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e002      	b.n	8005ecc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005ec6:	f06f 0303 	mvn.w	r3, #3
 8005eca:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8005ecc:	697b      	ldr	r3, [r7, #20]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	200010c8 	.word	0x200010c8

08005edc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ee0:	f005 fbd8 	bl	800b694 <HAL_GetTick>
 8005ee4:	4603      	mov	r3, r0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a1c      	ldr	r2, [pc, #112]	; (8005f6c <MX_I2C1_Init+0x80>)
 8005efc:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x6000030D;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1b      	ldr	r2, [pc, #108]	; (8005f70 <MX_I2C1_Init+0x84>)
 8005f02:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f005 ff70 	bl	800be14 <HAL_I2C_Init>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005f3e:	2100      	movs	r1, #0
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f006 fd1d 	bl	800c980 <HAL_I2CEx_ConfigAnalogFilter>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8005f50:	2100      	movs	r1, #0
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f006 fd5f 	bl	800ca16 <HAL_I2CEx_ConfigDigitalFilter>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40005400 	.word	0x40005400
 8005f70:	6000030d 	.word	0x6000030d

08005f74 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b0ae      	sub	sp, #184	; 0xb8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f7c:	f107 0314 	add.w	r3, r7, #20
 8005f80:	2290      	movs	r2, #144	; 0x90
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f00c fbc2 	bl	801270e <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005f8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f8e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005f90:	2300      	movs	r3, #0
 8005f92:	67bb      	str	r3, [r7, #120]	; 0x78
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8005f94:	f107 0314 	add.w	r3, r7, #20
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f007 faef 	bl	800d57c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f9e:	4b24      	ldr	r3, [pc, #144]	; (8006030 <I2C1_MspInit+0xbc>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	4a23      	ldr	r2, [pc, #140]	; (8006030 <I2C1_MspInit+0xbc>)
 8005fa4:	f043 0302 	orr.w	r3, r3, #2
 8005fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8005faa:	4b21      	ldr	r3, [pc, #132]	; (8006030 <I2C1_MspInit+0xbc>)
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8005fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fbe:	2312      	movs	r3, #18
 8005fc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005fd6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4815      	ldr	r0, [pc, #84]	; (8006034 <I2C1_MspInit+0xc0>)
 8005fde:	f005 fc47 	bl	800b870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8005fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fea:	2312      	movs	r3, #18
 8005fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8006002:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006006:	4619      	mov	r1, r3
 8006008:	480a      	ldr	r0, [pc, #40]	; (8006034 <I2C1_MspInit+0xc0>)
 800600a:	f005 fc31 	bl	800b870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800600e:	4b08      	ldr	r3, [pc, #32]	; (8006030 <I2C1_MspInit+0xbc>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	4a07      	ldr	r2, [pc, #28]	; (8006030 <I2C1_MspInit+0xbc>)
 8006014:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006018:	6413      	str	r3, [r2, #64]	; 0x40
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <I2C1_MspInit+0xbc>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8006026:	bf00      	nop
 8006028:	37b8      	adds	r7, #184	; 0xb8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40023800 	.word	0x40023800
 8006034:	40020400 	.word	0x40020400

08006038 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Disable Peripheral clock */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <I2C1_MspDeInit+0x30>)
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	4a08      	ldr	r2, [pc, #32]	; (8006068 <I2C1_MspDeInit+0x30>)
 8006046:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800604a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800604c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006050:	4806      	ldr	r0, [pc, #24]	; (800606c <I2C1_MspDeInit+0x34>)
 8006052:	f005 fdb9 	bl	800bbc8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8006056:	f44f 7100 	mov.w	r1, #512	; 0x200
 800605a:	4804      	ldr	r0, [pc, #16]	; (800606c <I2C1_MspDeInit+0x34>)
 800605c:	f005 fdb4 	bl	800bbc8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40023800 	.word	0x40023800
 800606c:	40020400 	.word	0x40020400

08006070 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
	return 1;
 8006074:	2301      	movs	r3, #1
}
 8006076:	4618      	mov	r0, r3
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <_kill>:

int _kill(int pid, int sig)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800608a:	f00c fa0f 	bl	80124ac <__errno>
 800608e:	4603      	mov	r3, r0
 8006090:	2216      	movs	r2, #22
 8006092:	601a      	str	r2, [r3, #0]
	return -1;
 8006094:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <_exit>:

void _exit (int status)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80060a8:	f04f 31ff 	mov.w	r1, #4294967295
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff ffe7 	bl	8006080 <_kill>
	while (1) {}		/* Make sure we hang here */
 80060b2:	e7fe      	b.n	80060b2 <_exit+0x12>

080060b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e00a      	b.n	80060dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80060c6:	f3af 8000 	nop.w
 80060ca:	4601      	mov	r1, r0
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	60ba      	str	r2, [r7, #8]
 80060d2:	b2ca      	uxtb	r2, r1
 80060d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	3301      	adds	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	dbf0      	blt.n	80060c6 <_read+0x12>
	}

return len;
 80060e4:	687b      	ldr	r3, [r7, #4]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
	return -1;
 80060f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006116:	605a      	str	r2, [r3, #4]
	return 0;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <_isatty>:

int _isatty(int file)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
	return 1;
 800612e:	2301      	movs	r3, #1
}
 8006130:	4618      	mov	r0, r3
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
	return 0;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
	...

08006158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006160:	4a14      	ldr	r2, [pc, #80]	; (80061b4 <_sbrk+0x5c>)
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <_sbrk+0x60>)
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800616c:	4b13      	ldr	r3, [pc, #76]	; (80061bc <_sbrk+0x64>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d102      	bne.n	800617a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006174:	4b11      	ldr	r3, [pc, #68]	; (80061bc <_sbrk+0x64>)
 8006176:	4a12      	ldr	r2, [pc, #72]	; (80061c0 <_sbrk+0x68>)
 8006178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <_sbrk+0x64>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4413      	add	r3, r2
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	429a      	cmp	r2, r3
 8006186:	d207      	bcs.n	8006198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006188:	f00c f990 	bl	80124ac <__errno>
 800618c:	4603      	mov	r3, r0
 800618e:	220c      	movs	r2, #12
 8006190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006192:	f04f 33ff 	mov.w	r3, #4294967295
 8006196:	e009      	b.n	80061ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006198:	4b08      	ldr	r3, [pc, #32]	; (80061bc <_sbrk+0x64>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800619e:	4b07      	ldr	r3, [pc, #28]	; (80061bc <_sbrk+0x64>)
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4413      	add	r3, r2
 80061a6:	4a05      	ldr	r2, [pc, #20]	; (80061bc <_sbrk+0x64>)
 80061a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80061aa:	68fb      	ldr	r3, [r7, #12]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20080000 	.word	0x20080000
 80061b8:	00000400 	.word	0x00000400
 80061bc:	20001120 	.word	0x20001120
 80061c0:	20005cc0 	.word	0x20005cc0

080061c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <SystemInit+0x20>)
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ce:	4a05      	ldr	r2, [pc, #20]	; (80061e4 <SystemInit+0x20>)
 80061d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80061d8:	bf00      	nop
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	e000ed00 	.word	0xe000ed00

080061e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80061e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006220 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80061ec:	480d      	ldr	r0, [pc, #52]	; (8006224 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80061ee:	490e      	ldr	r1, [pc, #56]	; (8006228 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80061f0:	4a0e      	ldr	r2, [pc, #56]	; (800622c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80061f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061f4:	e002      	b.n	80061fc <LoopCopyDataInit>

080061f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061fa:	3304      	adds	r3, #4

080061fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006200:	d3f9      	bcc.n	80061f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006202:	4a0b      	ldr	r2, [pc, #44]	; (8006230 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006204:	4c0b      	ldr	r4, [pc, #44]	; (8006234 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006208:	e001      	b.n	800620e <LoopFillZerobss>

0800620a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800620a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800620c:	3204      	adds	r2, #4

0800620e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800620e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006210:	d3fb      	bcc.n	800620a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006212:	f7ff ffd7 	bl	80061c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006216:	f00c fa45 	bl	80126a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800621a:	f7fd f9bf 	bl	800359c <main>
  bx  lr    
 800621e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006220:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8006224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006228:	200003b4 	.word	0x200003b4
  ldr r2, =_sidata
 800622c:	08015db0 	.word	0x08015db0
  ldr r2, =_sbss
 8006230:	200003b4 	.word	0x200003b4
  ldr r4, =_ebss
 8006234:	20005cc0 	.word	0x20005cc0

08006238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006238:	e7fe      	b.n	8006238 <ADC_IRQHandler>
	...

0800623c <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 800624c:	f04f 33ff 	mov.w	r3, #4294967295
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	e034      	b.n	80062be <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	7b1a      	ldrb	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	695a      	ldr	r2, [r3, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a0e      	ldr	r2, [pc, #56]	; (80062c8 <HTS221_RegisterBusIO+0x8c>)
 8006290:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a0d      	ldr	r2, [pc, #52]	; (80062cc <HTS221_RegisterBusIO+0x90>)
 8006296:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4798      	blx	r3
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	e002      	b.n	80062be <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 80062b8:	f04f 33ff 	mov.w	r3, #4294967295
 80062bc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80062be:	68fb      	ldr	r3, [r7, #12]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	080068fb 	.word	0x080068fb
 80062cc:	0800695d 	.word	0x0800695d

080062d0 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d108      	bne.n	80062f4 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 faa4 	bl	8006830 <HTS221_Initialize>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80062ee:	f04f 33ff 	mov.w	r3, #4294967295
 80062f2:	e004      	b.n	80062fe <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006314:	2b01      	cmp	r3, #1
 8006316:	d111      	bne.n	800633c <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f878 	bl	800640e <HTS221_HUM_Disable>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8006324:	f04f 33ff 	mov.w	r3, #4294967295
 8006328:	e00d      	b.n	8006346 <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f95f 	bl	80065ee <HTS221_TEMP_Disable>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8006336:	f04f 33ff 	mov.w	r3, #4294967295
 800633a:	e004      	b.n	8006346 <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3320      	adds	r3, #32
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fc28 	bl	8006bb4 <hts221_device_id_get>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 800636a:	f04f 33ff 	mov.w	r3, #4294967295
 800636e:	e000      	b.n	8006372 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2201      	movs	r2, #1
 800638a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2200      	movs	r2, #0
 8006390:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2200      	movs	r2, #0
 800639c:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	4a07      	ldr	r2, [pc, #28]	; (80063c0 <HTS221_GetCapabilities+0x44>)
 80063a2:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	4a06      	ldr	r2, [pc, #24]	; (80063c0 <HTS221_GetCapabilities+0x44>)
 80063a8:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	41480000 	.word	0x41480000

080063c4 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d101      	bne.n	80063da <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	e015      	b.n	8006406 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3320      	adds	r3, #32
 80063e8:	2101      	movs	r1, #1
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fbf3 	bl	8006bd6 <hts221_power_on_set>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80063f6:	f04f 33ff 	mov.w	r3, #4294967295
 80063fa:	e004      	b.n	8006406 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b082      	sub	sp, #8
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	e015      	b.n	8006450 <HTS221_HUM_Disable+0x42>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10b      	bne.n	8006446 <HTS221_HUM_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3320      	adds	r3, #32
 8006432:	2100      	movs	r1, #0
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fbce 	bl	8006bd6 <hts221_power_on_set>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <HTS221_HUM_Disable+0x38>
    {
      return HTS221_ERROR;
 8006440:	f04f 33ff 	mov.w	r3, #4294967295
 8006444:	e004      	b.n	8006450 <HTS221_HUM_Disable+0x42>
    }
  }

  pObj->hum_is_enabled = 0;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f96f 	bl	8006748 <HTS221_GetOutputDataRate>
 800646a:	4603      	mov	r3, r0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8006480:	ed97 0a00 	vldr	s0, [r7]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f9a3 	bl	80067d0 <HTS221_SetOutputDataRate>
 800648a:	4603      	mov	r3, r0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3320      	adds	r3, #32
 80064a2:	f107 020c 	add.w	r2, r7, #12
 80064a6:	4611      	mov	r1, r2
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fc58 	bl	8006d5e <hts221_hum_adc_point_0_get>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295
 80064b8:	e06b      	b.n	8006592 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f103 0220 	add.w	r2, r3, #32
 80064c0:	f107 030c 	add.w	r3, r7, #12
 80064c4:	3304      	adds	r3, #4
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f000 fbaa 	bl	8006c22 <hts221_hum_rh_point_0_get>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80064d4:	f04f 33ff 	mov.w	r3, #4294967295
 80064d8:	e05b      	b.n	8006592 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f103 0220 	add.w	r2, r3, #32
 80064e0:	f107 030c 	add.w	r3, r7, #12
 80064e4:	3308      	adds	r3, #8
 80064e6:	4619      	mov	r1, r3
 80064e8:	4610      	mov	r0, r2
 80064ea:	f000 fc5c 	bl	8006da6 <hts221_hum_adc_point_1_get>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80064f4:	f04f 33ff 	mov.w	r3, #4294967295
 80064f8:	e04b      	b.n	8006592 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f103 0220 	add.w	r2, r3, #32
 8006500:	f107 030c 	add.w	r3, r7, #12
 8006504:	330c      	adds	r3, #12
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 fba8 	bl	8006c5e <hts221_hum_rh_point_1_get>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8006514:	f04f 33ff 	mov.w	r3, #4294967295
 8006518:	e03b      	b.n	8006592 <HTS221_HUM_GetHumidity+0xfe>
 800651a:	2300      	movs	r3, #0
 800651c:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3320      	adds	r3, #32
 8006522:	f107 021c 	add.w	r2, r7, #28
 8006526:	4611      	mov	r1, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fafd 	bl	8006b28 <hts221_humidity_raw_get>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8006534:	f04f 33ff 	mov.w	r3, #4294967295
 8006538:	e02b      	b.n	8006592 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800653a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006546:	f107 030c 	add.w	r3, r7, #12
 800654a:	eeb0 0a67 	vmov.f32	s0, s15
 800654e:	4618      	mov	r0, r3
 8006550:	f000 f99a 	bl	8006888 <Linear_Interpolation>
 8006554:	eef0 7a40 	vmov.f32	s15, s0
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	edd3 7a00 	vldr	s15, [r3]
 8006564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656c:	d503      	bpl.n	8006576 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	f04f 0200 	mov.w	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	edd3 7a00 	vldr	s15, [r3]
 800657c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800659c <HTS221_HUM_GetHumidity+0x108>
 8006580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006588:	dd02      	ble.n	8006590 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	4a04      	ldr	r2, [pc, #16]	; (80065a0 <HTS221_HUM_GetHumidity+0x10c>)
 800658e:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	42c80000 	.word	0x42c80000
 80065a0:	42c80000 	.word	0x42c80000

080065a4 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e015      	b.n	80065e6 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10b      	bne.n	80065dc <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3320      	adds	r3, #32
 80065c8:	2101      	movs	r1, #1
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fb03 	bl	8006bd6 <hts221_power_on_set>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80065d6:	f04f 33ff 	mov.w	r3, #4294967295
 80065da:	e004      	b.n	80065e6 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e015      	b.n	8006630 <HTS221_TEMP_Disable+0x42>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10b      	bne.n	8006626 <HTS221_TEMP_Disable+0x38>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3320      	adds	r3, #32
 8006612:	2100      	movs	r1, #0
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fade 	bl	8006bd6 <hts221_power_on_set>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <HTS221_TEMP_Disable+0x38>
    {
      return HTS221_ERROR;
 8006620:	f04f 33ff 	mov.w	r3, #4294967295
 8006624:	e004      	b.n	8006630 <HTS221_TEMP_Disable+0x42>
    }
  }

  pObj->temp_is_enabled = 0;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f87f 	bl	8006748 <HTS221_GetOutputDataRate>
 800664a:	4603      	mov	r3, r0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	ed87 0a00 	vstr	s0, [r7]
  return HTS221_SetOutputDataRate(pObj, Odr);
 8006660:	ed97 0a00 	vldr	s0, [r7]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f8b3 	bl	80067d0 <HTS221_SetOutputDataRate>
 800666a:	4603      	mov	r3, r0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3320      	adds	r3, #32
 8006682:	f107 020c 	add.w	r2, r7, #12
 8006686:	4611      	mov	r1, r2
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fbb0 	bl	8006dee <hts221_temp_adc_point_0_get>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8006694:	f04f 33ff 	mov.w	r3, #4294967295
 8006698:	e052      	b.n	8006740 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f103 0220 	add.w	r2, r3, #32
 80066a0:	f107 030c 	add.w	r3, r7, #12
 80066a4:	3304      	adds	r3, #4
 80066a6:	4619      	mov	r1, r3
 80066a8:	4610      	mov	r0, r2
 80066aa:	f000 faf6 	bl	8006c9a <hts221_temp_deg_point_0_get>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295
 80066b8:	e042      	b.n	8006740 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f103 0220 	add.w	r2, r3, #32
 80066c0:	f107 030c 	add.w	r3, r7, #12
 80066c4:	3308      	adds	r3, #8
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f000 fbb4 	bl	8006e36 <hts221_temp_adc_point_1_get>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80066d4:	f04f 33ff 	mov.w	r3, #4294967295
 80066d8:	e032      	b.n	8006740 <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f103 0220 	add.w	r2, r3, #32
 80066e0:	f107 030c 	add.w	r3, r7, #12
 80066e4:	330c      	adds	r3, #12
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f000 fb07 	bl	8006cfc <hts221_temp_deg_point_1_get>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80066f4:	f04f 33ff 	mov.w	r3, #4294967295
 80066f8:	e022      	b.n	8006740 <HTS221_TEMP_GetTemperature+0xcc>
 80066fa:	2300      	movs	r3, #0
 80066fc:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3320      	adds	r3, #32
 8006702:	f107 021c 	add.w	r2, r7, #28
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fa30 	bl	8006b6e <hts221_temperature_raw_get>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8006714:	f04f 33ff 	mov.w	r3, #4294967295
 8006718:	e012      	b.n	8006740 <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800671a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006726:	f107 030c 	add.w	r3, r7, #12
 800672a:	eeb0 0a67 	vmov.f32	s0, s15
 800672e:	4618      	mov	r0, r3
 8006730:	f000 f8aa 	bl	8006888 <Linear_Interpolation>
 8006734:	eef0 7a40 	vmov.f32	s15, s0
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3720      	adds	r7, #32
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	3320      	adds	r3, #32
 800675a:	f107 020b 	add.w	r2, r7, #11
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f983 	bl	8006a6c <hts221_data_rate_get>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <HTS221_GetOutputDataRate+0x2a>
  {
    return HTS221_ERROR;
 800676c:	f04f 33ff 	mov.w	r3, #4294967295
 8006770:	e025      	b.n	80067be <HTS221_GetOutputDataRate+0x76>
  }

  switch (odr_low_level)
 8006772:	7afb      	ldrb	r3, [r7, #11]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d81d      	bhi.n	80067b4 <HTS221_GetOutputDataRate+0x6c>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <HTS221_GetOutputDataRate+0x38>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	08006791 	.word	0x08006791
 8006784:	0800679b 	.word	0x0800679b
 8006788:	080067a5 	.word	0x080067a5
 800678c:	080067ad 	.word	0x080067ad
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
      break;
 8006798:	e010      	b.n	80067bc <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80067a0:	601a      	str	r2, [r3, #0]
      break;
 80067a2:	e00b      	b.n	80067bc <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	4a08      	ldr	r2, [pc, #32]	; (80067c8 <HTS221_GetOutputDataRate+0x80>)
 80067a8:	601a      	str	r2, [r3, #0]
      break;
 80067aa:	e007      	b.n	80067bc <HTS221_GetOutputDataRate+0x74>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	4a07      	ldr	r2, [pc, #28]	; (80067cc <HTS221_GetOutputDataRate+0x84>)
 80067b0:	601a      	str	r2, [r3, #0]
      break;
 80067b2:	e003      	b.n	80067bc <HTS221_GetOutputDataRate+0x74>

    default:
      ret = HTS221_ERROR;
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295
 80067b8:	60fb      	str	r3, [r7, #12]
      break;
 80067ba:	bf00      	nop
  }

  return ret;
 80067bc:	68fb      	ldr	r3, [r7, #12]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40e00000 	.word	0x40e00000
 80067cc:	41480000 	.word	0x41480000

080067d0 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80067dc:	edd7 7a00 	vldr	s15, [r7]
 80067e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ec:	d801      	bhi.n	80067f2 <HTS221_SetOutputDataRate+0x22>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e00b      	b.n	800680a <HTS221_SetOutputDataRate+0x3a>
 80067f2:	edd7 7a00 	vldr	s15, [r7]
 80067f6:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80067fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006802:	d801      	bhi.n	8006808 <HTS221_SetOutputDataRate+0x38>
 8006804:	2302      	movs	r3, #2
 8006806:	e000      	b.n	800680a <HTS221_SetOutputDataRate+0x3a>
 8006808:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800680a:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3320      	adds	r3, #32
 8006810:	7bfa      	ldrb	r2, [r7, #15]
 8006812:	4611      	mov	r1, r2
 8006814:	4618      	mov	r0, r3
 8006816:	f000 f902 	bl	8006a1e <hts221_data_rate_set>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8006820:	f04f 33ff 	mov.w	r3, #4294967295
 8006824:	e000      	b.n	8006828 <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3320      	adds	r3, #32
 800683c:	2100      	movs	r1, #0
 800683e:	4618      	mov	r0, r3
 8006840:	f000 f9c9 	bl	8006bd6 <hts221_power_on_set>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	e017      	b.n	8006880 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3320      	adds	r3, #32
 8006854:	2101      	movs	r1, #1
 8006856:	4618      	mov	r0, r3
 8006858:	f000 f940 	bl	8006adc <hts221_block_data_update_set>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8006862:	f04f 33ff 	mov.w	r3, #4294967295
 8006866:	e00b      	b.n	8006880 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8006868:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff ffaf 	bl	80067d0 <HTS221_SetOutputDataRate>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8006878:	f04f 33ff 	mov.w	r3, #4294967295
 800687c:	e000      	b.n	8006880 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	ed93 7a03 	vldr	s14, [r3, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	edd3 7a01 	vldr	s15, [r3, #4]
 80068a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068a4:	edd7 7a00 	vldr	s15, [r7]
 80068a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80068b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	ed93 6a00 	vldr	s12, [r3]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80068c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80068cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	edd3 7a00 	vldr	s15, [r3]
 80068e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80068e8:	eef0 7a66 	vmov.f32	s15, s13
}
 80068ec:	eeb0 0a67 	vmov.f32	s0, s15
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80068fa:	b590      	push	{r4, r7, lr}
 80068fc:	b087      	sub	sp, #28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	461a      	mov	r2, r3
 8006906:	460b      	mov	r3, r1
 8006908:	72fb      	strb	r3, [r7, #11]
 800690a:	4613      	mov	r3, r2
 800690c:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10e      	bne.n	8006938 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	695c      	ldr	r4, [r3, #20]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	7b1b      	ldrb	r3, [r3, #12]
 8006922:	b298      	uxth	r0, r3
 8006924:	7afb      	ldrb	r3, [r7, #11]
 8006926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800692a:	b2db      	uxtb	r3, r3
 800692c:	b299      	uxth	r1, r3
 800692e:	893b      	ldrh	r3, [r7, #8]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	47a0      	blx	r4
 8006934:	4603      	mov	r3, r0
 8006936:	e00d      	b.n	8006954 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	695c      	ldr	r4, [r3, #20]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	7b1b      	ldrb	r3, [r3, #12]
 8006940:	b298      	uxth	r0, r3
 8006942:	7afb      	ldrb	r3, [r7, #11]
 8006944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006948:	b2db      	uxtb	r3, r3
 800694a:	b299      	uxth	r1, r3
 800694c:	893b      	ldrh	r3, [r7, #8]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	47a0      	blx	r4
 8006952:	4603      	mov	r3, r0
  }
}
 8006954:	4618      	mov	r0, r3
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	bd90      	pop	{r4, r7, pc}

0800695c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800695c:	b590      	push	{r4, r7, lr}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	607a      	str	r2, [r7, #4]
 8006966:	461a      	mov	r2, r3
 8006968:	460b      	mov	r3, r1
 800696a:	72fb      	strb	r3, [r7, #11]
 800696c:	4613      	mov	r3, r2
 800696e:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10e      	bne.n	800699a <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	691c      	ldr	r4, [r3, #16]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	7b1b      	ldrb	r3, [r3, #12]
 8006984:	b298      	uxth	r0, r3
 8006986:	7afb      	ldrb	r3, [r7, #11]
 8006988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800698c:	b2db      	uxtb	r3, r3
 800698e:	b299      	uxth	r1, r3
 8006990:	893b      	ldrh	r3, [r7, #8]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	47a0      	blx	r4
 8006996:	4603      	mov	r3, r0
 8006998:	e00d      	b.n	80069b6 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	691c      	ldr	r4, [r3, #16]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	7b1b      	ldrb	r3, [r3, #12]
 80069a2:	b298      	uxth	r0, r3
 80069a4:	7afb      	ldrb	r3, [r7, #11]
 80069a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	b299      	uxth	r1, r3
 80069ae:	893b      	ldrh	r3, [r7, #8]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	47a0      	blx	r4
 80069b4:	4603      	mov	r3, r0
  }
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd90      	pop	{r4, r7, pc}

080069be <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80069be:	b590      	push	{r4, r7, lr}
 80069c0:	b087      	sub	sp, #28
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	461a      	mov	r2, r3
 80069ca:	460b      	mov	r3, r1
 80069cc:	72fb      	strb	r3, [r7, #11]
 80069ce:	4613      	mov	r3, r2
 80069d0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	685c      	ldr	r4, [r3, #4]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	68d8      	ldr	r0, [r3, #12]
 80069da:	893b      	ldrh	r3, [r7, #8]
 80069dc:	7af9      	ldrb	r1, [r7, #11]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	47a0      	blx	r4
 80069e2:	6178      	str	r0, [r7, #20]

  return ret;
 80069e4:	697b      	ldr	r3, [r7, #20]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd90      	pop	{r4, r7, pc}

080069ee <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80069ee:	b590      	push	{r4, r7, lr}
 80069f0:	b087      	sub	sp, #28
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	607a      	str	r2, [r7, #4]
 80069f8:	461a      	mov	r2, r3
 80069fa:	460b      	mov	r3, r1
 80069fc:	72fb      	strb	r3, [r7, #11]
 80069fe:	4613      	mov	r3, r2
 8006a00:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681c      	ldr	r4, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68d8      	ldr	r0, [r3, #12]
 8006a0a:	893b      	ldrh	r3, [r7, #8]
 8006a0c:	7af9      	ldrb	r1, [r7, #11]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	47a0      	blx	r4
 8006a12:	6178      	str	r0, [r7, #20]

  return ret;
 8006a14:	697b      	ldr	r3, [r7, #20]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd90      	pop	{r4, r7, pc}

08006a1e <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006a2a:	f107 0208 	add.w	r2, r7, #8
 8006a2e:	2301      	movs	r3, #1
 8006a30:	2120      	movs	r1, #32
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff ffc3 	bl	80069be <hts221_read_reg>
 8006a38:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10f      	bne.n	8006a60 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	7a3b      	ldrb	r3, [r7, #8]
 8006a4a:	f362 0301 	bfi	r3, r2, #0, #2
 8006a4e:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006a50:	f107 0208 	add.w	r2, r7, #8
 8006a54:	2301      	movs	r3, #1
 8006a56:	2120      	movs	r1, #32
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff ffc8 	bl	80069ee <hts221_write_reg>
 8006a5e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a60:	68fb      	ldr	r3, [r7, #12]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006a76:	f107 0208 	add.w	r2, r7, #8
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	2120      	movs	r1, #32
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff ff9d 	bl	80069be <hts221_read_reg>
 8006a84:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8006a86:	7a3b      	ldrb	r3, [r7, #8]
 8006a88:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d81a      	bhi.n	8006ac8 <hts221_data_rate_get+0x5c>
 8006a92:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <hts221_data_rate_get+0x2c>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006aa9 	.word	0x08006aa9
 8006a9c:	08006ab1 	.word	0x08006ab1
 8006aa0:	08006ab9 	.word	0x08006ab9
 8006aa4:	08006ac1 	.word	0x08006ac1
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	701a      	strb	r2, [r3, #0]
      break;
 8006aae:	e00f      	b.n	8006ad0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	701a      	strb	r2, [r3, #0]
      break;
 8006ab6:	e00b      	b.n	8006ad0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2202      	movs	r2, #2
 8006abc:	701a      	strb	r2, [r3, #0]
      break;
 8006abe:	e007      	b.n	8006ad0 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2203      	movs	r2, #3
 8006ac4:	701a      	strb	r2, [r3, #0]
      break;
 8006ac6:	e003      	b.n	8006ad0 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2204      	movs	r2, #4
 8006acc:	701a      	strb	r2, [r3, #0]
      break;
 8006ace:	bf00      	nop
  }

  return ret;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop

08006adc <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006ae8:	f107 0208 	add.w	r2, r7, #8
 8006aec:	2301      	movs	r3, #1
 8006aee:	2120      	movs	r1, #32
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ff64 	bl	80069be <hts221_read_reg>
 8006af6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10f      	bne.n	8006b1e <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8006afe:	78fb      	ldrb	r3, [r7, #3]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	7a3b      	ldrb	r3, [r7, #8]
 8006b08:	f362 0382 	bfi	r3, r2, #2, #1
 8006b0c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006b0e:	f107 0208 	add.w	r2, r7, #8
 8006b12:	2301      	movs	r3, #1
 8006b14:	2120      	movs	r1, #32
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff ff69 	bl	80069ee <hts221_write_reg>
 8006b1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8006b32:	f107 0208 	add.w	r2, r7, #8
 8006b36:	2302      	movs	r3, #2
 8006b38:	2128      	movs	r1, #40	; 0x28
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff ff3f 	bl	80069be <hts221_read_reg>
 8006b40:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8006b42:	7a7b      	ldrb	r3, [r7, #9]
 8006b44:	b21a      	sxth	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	7a3b      	ldrb	r3, [r7, #8]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	b21a      	sxth	r2, r3
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	801a      	strh	r2, [r3, #0]

  return ret;
 8006b64:	68fb      	ldr	r3, [r7, #12]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8006b78:	f107 0208 	add.w	r2, r7, #8
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	212a      	movs	r1, #42	; 0x2a
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff ff1c 	bl	80069be <hts221_read_reg>
 8006b86:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8006b88:	7a7b      	ldrb	r3, [r7, #9]
 8006b8a:	b21a      	sxth	r2, r3
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	7a3b      	ldrb	r3, [r7, #8]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	b21a      	sxth	r2, r3
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	801a      	strh	r2, [r3, #0]

  return ret;
 8006baa:	68fb      	ldr	r3, [r7, #12]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	210f      	movs	r1, #15
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f7ff fefa 	bl	80069be <hts221_read_reg>
 8006bca:	60f8      	str	r0, [r7, #12]

  return ret;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006be2:	f107 0208 	add.w	r2, r7, #8
 8006be6:	2301      	movs	r3, #1
 8006be8:	2120      	movs	r1, #32
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff fee7 	bl	80069be <hts221_read_reg>
 8006bf0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10f      	bne.n	8006c18 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	7a3b      	ldrb	r3, [r7, #8]
 8006c02:	f362 13c7 	bfi	r3, r2, #7, #1
 8006c06:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8006c08:	f107 0208 	add.w	r2, r7, #8
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	2120      	movs	r1, #32
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7ff feec 	bl	80069ee <hts221_write_reg>
 8006c16:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c18:	68fb      	ldr	r3, [r7, #12]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8006c2c:	f107 020b 	add.w	r2, r7, #11
 8006c30:	2301      	movs	r3, #1
 8006c32:	2130      	movs	r1, #48	; 0x30
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fec2 	bl	80069be <hts221_read_reg>
 8006c3a:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8006c3c:	7afb      	ldrb	r3, [r7, #11]
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c46:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006c4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006c54:	68fb      	ldr	r3, [r7, #12]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8006c68:	f107 020b 	add.w	r2, r7, #11
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	2131      	movs	r1, #49	; 0x31
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fea4 	bl	80069be <hts221_read_reg>
 8006c76:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8006c78:	7afb      	ldrb	r3, [r7, #11]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c82:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006c86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006c90:	68fb      	ldr	r3, [r7, #12]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b086      	sub	sp, #24
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8006ca4:	f107 020f 	add.w	r2, r7, #15
 8006ca8:	2301      	movs	r3, #1
 8006caa:	2132      	movs	r1, #50	; 0x32
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff fe86 	bl	80069be <hts221_read_reg>
 8006cb2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d11b      	bne.n	8006cf2 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8006cba:	f107 0210 	add.w	r2, r7, #16
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	2135      	movs	r1, #53	; 0x35
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff fe7b 	bl	80069be <hts221_read_reg>
 8006cc8:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8006cca:	7c3b      	ldrb	r3, [r7, #16]
 8006ccc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8006cd4:	7cfb      	ldrb	r3, [r7, #19]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	7bfa      	ldrb	r2, [r7, #15]
 8006cda:	4413      	add	r3, r2
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ce4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8006cf2:	697b      	ldr	r3, [r7, #20]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8006d06:	f107 020f 	add.w	r2, r7, #15
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	2133      	movs	r1, #51	; 0x33
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fe55 	bl	80069be <hts221_read_reg>
 8006d14:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d11b      	bne.n	8006d54 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8006d1c:	f107 0210 	add.w	r2, r7, #16
 8006d20:	2301      	movs	r3, #1
 8006d22:	2135      	movs	r1, #53	; 0x35
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fe4a 	bl	80069be <hts221_read_reg>
 8006d2a:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8006d2c:	7c3b      	ldrb	r3, [r7, #16]
 8006d2e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8006d36:	7cfb      	ldrb	r3, [r7, #19]
 8006d38:	021b      	lsls	r3, r3, #8
 8006d3a:	7bfa      	ldrb	r2, [r7, #15]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d46:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8006d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8006d54:	697b      	ldr	r3, [r7, #20]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8006d68:	f107 0208 	add.w	r2, r7, #8
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	2136      	movs	r1, #54	; 0x36
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff fe24 	bl	80069be <hts221_read_reg>
 8006d76:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006d78:	7a7b      	ldrb	r3, [r7, #9]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	7a3b      	ldrb	r3, [r7, #8]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4413      	add	r3, r2
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006d8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8006db0:	f107 0208 	add.w	r2, r7, #8
 8006db4:	2302      	movs	r3, #2
 8006db6:	213a      	movs	r1, #58	; 0x3a
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fe00 	bl	80069be <hts221_read_reg>
 8006dbe:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006dc0:	7a7b      	ldrb	r3, [r7, #9]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	7a3b      	ldrb	r3, [r7, #8]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	4413      	add	r3, r2
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006dd2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006de4:	68fb      	ldr	r3, [r7, #12]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b084      	sub	sp, #16
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8006df8:	f107 0208 	add.w	r2, r7, #8
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	213c      	movs	r1, #60	; 0x3c
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7ff fddc 	bl	80069be <hts221_read_reg>
 8006e06:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006e08:	7a7b      	ldrb	r3, [r7, #9]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	7a3b      	ldrb	r3, [r7, #8]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	4413      	add	r3, r2
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006e1a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8006e40:	f107 0208 	add.w	r2, r7, #8
 8006e44:	2302      	movs	r3, #2
 8006e46:	213e      	movs	r1, #62	; 0x3e
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7ff fdb8 	bl	80069be <hts221_read_reg>
 8006e4e:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8006e50:	7a7b      	ldrb	r3, [r7, #9]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	021b      	lsls	r3, r3, #8
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	7a3b      	ldrb	r3, [r7, #8]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8006e62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8006e74:	68fb      	ldr	r3, [r7, #12]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d103      	bne.n	8006e9c <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8006e94:	f04f 33ff 	mov.w	r3, #4294967295
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	e051      	b.n	8006f40 <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	7b1a      	ldrb	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	695a      	ldr	r2, [r3, #20]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <LPS22HB_RegisterBusIO+0xcc>)
 8006ed8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <LPS22HB_RegisterBusIO+0xd0>)
 8006ede:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8006ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	e020      	b.n	8006f40 <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4798      	blx	r3
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 8006f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e016      	b.n	8006f40 <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d112      	bne.n	8006f40 <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10d      	bne.n	8006f40 <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8006f24:	2301      	movs	r3, #1
 8006f26:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	2110      	movs	r1, #16
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f9df 	bl	80072f2 <LPS22HB_Write_Reg>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 8006f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006f40:	68fb      	ldr	r3, [r7, #12]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	080075b3 	.word	0x080075b3
 8006f50:	08007639 	.word	0x08007639

08006f54 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d108      	bne.n	8006f78 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 faca 	bl	8007500 <LPS22HB_Initialize>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8006f72:	f04f 33ff 	mov.w	r3, #4294967295
 8006f76:	e004      	b.n	8006f82 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <LPS22HB_DeInit>:
  * @brief  Deinitialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d111      	bne.n	8006fc0 <LPS22HB_DeInit+0x36>
  {
    if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f877 	bl	8007090 <LPS22HB_PRESS_Disable>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <LPS22HB_DeInit+0x24>
    {
      return LPS22HB_ERROR;
 8006fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8006fac:	e00d      	b.n	8006fca <LPS22HB_DeInit+0x40>
    }

    if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f918 	bl	80071e4 <LPS22HB_TEMP_Disable>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <LPS22HB_DeInit+0x36>
    {
      return LPS22HB_ERROR;
 8006fba:	f04f 33ff 	mov.w	r3, #4294967295
 8006fbe:	e004      	b.n	8006fca <LPS22HB_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <LPS22HB_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
  if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3320      	adds	r3, #32
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fcd0 	bl	8007988 <lps22hb_device_id_get>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <LPS22HB_ReadID+0x22>
  {
    return LPS22HB_ERROR;
 8006fee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff2:	e000      	b.n	8006ff6 <LPS22HB_ReadID+0x24>
  }

  return LPS22HB_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <LPS22HB_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HB sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2200      	movs	r2, #0
 800700e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2201      	movs	r2, #1
 8007014:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2201      	movs	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2200      	movs	r2, #0
 8007020:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 75.0f;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	4a05      	ldr	r2, [pc, #20]	; (8007044 <LPS22HB_GetCapabilities+0x44>)
 800702e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 75.0f;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	4a04      	ldr	r2, [pc, #16]	; (8007044 <LPS22HB_GetCapabilities+0x44>)
 8007034:	60da      	str	r2, [r3, #12]
  return LPS22HB_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	42960000 	.word	0x42960000

08007048 <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	e014      	b.n	8007088 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f103 0220 	add.w	r2, r3, #32
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800706a:	4619      	mov	r1, r3
 800706c:	4610      	mov	r0, r2
 800706e:	f000 fbd5 	bl	800781c <lps22hb_data_rate_set>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8007078:	f04f 33ff 	mov.w	r3, #4294967295
 800707c:	e004      	b.n	8007088 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <LPS22HB_PRESS_Disable>:
  * @brief  Disable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <LPS22HB_PRESS_Disable+0x16>
  {
    return LPS22HB_OK;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e024      	b.n	80070f0 <LPS22HB_PRESS_Disable+0x60>
  }

  /* Check if the LPS22HB temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d11a      	bne.n	80070e6 <LPS22HB_PRESS_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f103 0220 	add.w	r2, r3, #32
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3333      	adds	r3, #51	; 0x33
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f000 fbd3 	bl	8007868 <lps22hb_data_rate_get>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <LPS22HB_PRESS_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 80070c8:	f04f 33ff 	mov.w	r3, #4294967295
 80070cc:	e010      	b.n	80070f0 <LPS22HB_PRESS_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	3320      	adds	r3, #32
 80070d2:	2100      	movs	r1, #0
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 fba1 	bl	800781c <lps22hb_data_rate_set>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <LPS22HB_PRESS_Disable+0x56>
    {
      return LPS22HB_ERROR;
 80070e0:	f04f 33ff 	mov.w	r3, #4294967295
 80070e4:	e004      	b.n	80070f0 <LPS22HB_PRESS_Disable+0x60>
    }
  }

  pObj->press_is_enabled = 0;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <LPS22HB_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f90f 	bl	8007328 <LPS22HB_GetOutputDataRate>
 800710a:	4603      	mov	r3, r0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <LPS22HB_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007126:	2b01      	cmp	r3, #1
 8007128:	d106      	bne.n	8007138 <LPS22HB_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800712a:	ed97 0a00 	vldr	s0, [r7]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f94e 	bl	80073d0 <LPS22HB_SetOutputDataRate_When_Enabled>
 8007134:	4603      	mov	r3, r0
 8007136:	e005      	b.n	8007144 <LPS22HB_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007138:	ed97 0a00 	vldr	s0, [r7]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f99f 	bl	8007480 <LPS22HB_SetOutputDataRate_When_Disabled>
 8007142:	4603      	mov	r3, r0
  }
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8007156:	f107 030c 	add.w	r3, r7, #12
 800715a:	2204      	movs	r2, #4
 800715c:	2100      	movs	r1, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f00b fad5 	bl	801270e <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3320      	adds	r3, #32
 8007168:	f107 020c 	add.w	r2, r7, #12
 800716c:	4611      	mov	r1, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fbbe 	bl	80078f0 <lps22hb_pressure_raw_get>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 800717a:	f04f 33ff 	mov.w	r3, #4294967295
 800717e:	e009      	b.n	8007194 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4618      	mov	r0, r3
 8007184:	f000 facc 	bl	8007720 <lps22hb_from_lsb_to_hpa>
 8007188:	eef0 7a40 	vmov.f32	s15, s0
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <LPS22HB_TEMP_Enable>:
  * @brief  Enable the LPS22HB temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <LPS22HB_TEMP_Enable+0x16>
  {
    return LPS22HB_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e014      	b.n	80071dc <LPS22HB_TEMP_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f103 0220 	add.w	r2, r3, #32
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80071be:	4619      	mov	r1, r3
 80071c0:	4610      	mov	r0, r2
 80071c2:	f000 fb2b 	bl	800781c <lps22hb_data_rate_set>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <LPS22HB_TEMP_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80071cc:	f04f 33ff 	mov.w	r3, #4294967295
 80071d0:	e004      	b.n	80071dc <LPS22HB_TEMP_Enable+0x40>
  }

  pObj->temp_is_enabled = 1;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HB_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <LPS22HB_TEMP_Disable>:
  * @brief  Disable the LPS22HB temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <LPS22HB_TEMP_Disable+0x16>
  {
    return LPS22HB_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e024      	b.n	8007244 <LPS22HB_TEMP_Disable+0x60>
  }

  /* Check if the LPS22HB pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007200:	2b00      	cmp	r3, #0
 8007202:	d11a      	bne.n	800723a <LPS22HB_TEMP_Disable+0x56>
  {
    /* Get current output data rate. */
    if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f103 0220 	add.w	r2, r3, #32
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	3333      	adds	r3, #51	; 0x33
 800720e:	4619      	mov	r1, r3
 8007210:	4610      	mov	r0, r2
 8007212:	f000 fb29 	bl	8007868 <lps22hb_data_rate_get>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <LPS22HB_TEMP_Disable+0x3e>
    {
      return LPS22HB_ERROR;
 800721c:	f04f 33ff 	mov.w	r3, #4294967295
 8007220:	e010      	b.n	8007244 <LPS22HB_TEMP_Disable+0x60>
    }

    /* Output data rate selection - power down. */
    if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3320      	adds	r3, #32
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f000 faf7 	bl	800781c <lps22hb_data_rate_set>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <LPS22HB_TEMP_Disable+0x56>
    {
      return LPS22HB_ERROR;
 8007234:	f04f 33ff 	mov.w	r3, #4294967295
 8007238:	e004      	b.n	8007244 <LPS22HB_TEMP_Disable+0x60>
    }
  }

  pObj->temp_is_enabled = 0;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LPS22HB_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <LPS22HB_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  return LPS22HB_GetOutputDataRate(pObj, Odr);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f865 	bl	8007328 <LPS22HB_GetOutputDataRate>
 800725e:	4603      	mov	r3, r0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <LPS22HB_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800727a:	2b01      	cmp	r3, #1
 800727c:	d106      	bne.n	800728c <LPS22HB_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
 800727e:	ed97 0a00 	vldr	s0, [r7]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f8a4 	bl	80073d0 <LPS22HB_SetOutputDataRate_When_Enabled>
 8007288:	4603      	mov	r3, r0
 800728a:	e005      	b.n	8007298 <LPS22HB_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
 800728c:	ed97 0a00 	vldr	s0, [r7]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f8f5 	bl	8007480 <LPS22HB_SetOutputDataRate_When_Disabled>
 8007296:	4603      	mov	r3, r0
  }
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <LPS22HB_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 80072aa:	f107 030c 	add.w	r3, r7, #12
 80072ae:	2202      	movs	r2, #2
 80072b0:	2100      	movs	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f00b fa2b 	bl	801270e <memset>
  if (lps22hb_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HB_OK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3320      	adds	r3, #32
 80072bc:	f107 020c 	add.w	r2, r7, #12
 80072c0:	4611      	mov	r1, r2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 fb3d 	bl	8007942 <lps22hb_temperature_raw_get>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <LPS22HB_TEMP_GetTemperature+0x34>
  {
    return LPS22HB_ERROR;
 80072ce:	f04f 33ff 	mov.w	r3, #4294967295
 80072d2:	e00a      	b.n	80072ea <LPS22HB_TEMP_GetTemperature+0x4a>
  }

  *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
 80072d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fa39 	bl	8007750 <lps22hb_from_lsb_to_degc>
 80072de:	eef0 7a40 	vmov.f32	s15, s0
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	460b      	mov	r3, r1
 80072fc:	70fb      	strb	r3, [r7, #3]
 80072fe:	4613      	mov	r3, r2
 8007300:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f103 0020 	add.w	r0, r3, #32
 8007308:	1cba      	adds	r2, r7, #2
 800730a:	78f9      	ldrb	r1, [r7, #3]
 800730c:	2301      	movs	r3, #1
 800730e:	f000 f9ee 	bl	80076ee <lps22hb_write_reg>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8007318:	f04f 33ff 	mov.w	r3, #4294967295
 800731c:	e000      	b.n	8007320 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <LPS22HB_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	60fb      	str	r3, [r7, #12]
  lps22hb_odr_t odr_low_level;

  if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3320      	adds	r3, #32
 800733a:	f107 020b 	add.w	r2, r7, #11
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fa91 	bl	8007868 <lps22hb_data_rate_get>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <LPS22HB_GetOutputDataRate+0x2a>
  {
    return LPS22HB_ERROR;
 800734c:	f04f 33ff 	mov.w	r3, #4294967295
 8007350:	e031      	b.n	80073b6 <LPS22HB_GetOutputDataRate+0x8e>
  }

  switch (odr_low_level)
 8007352:	7afb      	ldrb	r3, [r7, #11]
 8007354:	2b05      	cmp	r3, #5
 8007356:	d829      	bhi.n	80073ac <LPS22HB_GetOutputDataRate+0x84>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <LPS22HB_GetOutputDataRate+0x38>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007379 	.word	0x08007379
 8007364:	08007383 	.word	0x08007383
 8007368:	0800738d 	.word	0x0800738d
 800736c:	08007395 	.word	0x08007395
 8007370:	0800739d 	.word	0x0800739d
 8007374:	080073a5 	.word	0x080073a5
  {
    case LPS22HB_POWER_DOWN:
      *Odr = 0.0f;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	f04f 0200 	mov.w	r2, #0
 800737e:	601a      	str	r2, [r3, #0]
      break;
 8007380:	e018      	b.n	80073b4 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_1_Hz:
      *Odr = 1.0f;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007388:	601a      	str	r2, [r3, #0]
      break;
 800738a:	e013      	b.n	80073b4 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_10_Hz:
      *Odr = 10.0f;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	4a0c      	ldr	r2, [pc, #48]	; (80073c0 <LPS22HB_GetOutputDataRate+0x98>)
 8007390:	601a      	str	r2, [r3, #0]
      break;
 8007392:	e00f      	b.n	80073b4 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_25_Hz:
      *Odr = 25.0f;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	4a0b      	ldr	r2, [pc, #44]	; (80073c4 <LPS22HB_GetOutputDataRate+0x9c>)
 8007398:	601a      	str	r2, [r3, #0]
      break;
 800739a:	e00b      	b.n	80073b4 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_50_Hz:
      *Odr = 50.0f;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	4a0a      	ldr	r2, [pc, #40]	; (80073c8 <LPS22HB_GetOutputDataRate+0xa0>)
 80073a0:	601a      	str	r2, [r3, #0]
      break;
 80073a2:	e007      	b.n	80073b4 <LPS22HB_GetOutputDataRate+0x8c>

    case LPS22HB_ODR_75_Hz:
      *Odr = 75.0f;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	4a09      	ldr	r2, [pc, #36]	; (80073cc <LPS22HB_GetOutputDataRate+0xa4>)
 80073a8:	601a      	str	r2, [r3, #0]
      break;
 80073aa:	e003      	b.n	80073b4 <LPS22HB_GetOutputDataRate+0x8c>

    default:
      ret = LPS22HB_ERROR;
 80073ac:	f04f 33ff 	mov.w	r3, #4294967295
 80073b0:	60fb      	str	r3, [r7, #12]
      break;
 80073b2:	bf00      	nop
  }

  return ret;
 80073b4:	68fb      	ldr	r3, [r7, #12]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	41200000 	.word	0x41200000
 80073c4:	41c80000 	.word	0x41c80000
 80073c8:	42480000 	.word	0x42480000
 80073cc:	42960000 	.word	0x42960000

080073d0 <LPS22HB_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	ed87 0a00 	vstr	s0, [r7]
  lps22hb_odr_t new_odr;

  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
            : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 80073dc:	edd7 7a00 	vldr	s15, [r7]
 80073e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ec:	d801      	bhi.n	80073f2 <LPS22HB_SetOutputDataRate_When_Enabled+0x22>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e021      	b.n	8007436 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 80073f2:	edd7 7a00 	vldr	s15, [r7]
 80073f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80073fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007402:	d801      	bhi.n	8007408 <LPS22HB_SetOutputDataRate_When_Enabled+0x38>
 8007404:	2302      	movs	r3, #2
 8007406:	e016      	b.n	8007436 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007408:	edd7 7a00 	vldr	s15, [r7]
 800740c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8007410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007418:	d801      	bhi.n	800741e <LPS22HB_SetOutputDataRate_When_Enabled+0x4e>
 800741a:	2303      	movs	r3, #3
 800741c:	e00b      	b.n	8007436 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 800741e:	edd7 7a00 	vldr	s15, [r7]
 8007422:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800747c <LPS22HB_SetOutputDataRate_When_Enabled+0xac>
 8007426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800742a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800742e:	d801      	bhi.n	8007434 <LPS22HB_SetOutputDataRate_When_Enabled+0x64>
 8007430:	2304      	movs	r3, #4
 8007432:	e000      	b.n	8007436 <LPS22HB_SetOutputDataRate_When_Enabled+0x66>
 8007434:	2305      	movs	r3, #5
  new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 8007436:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
            : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
            :                  LPS22HB_ODR_75_Hz;

  if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3320      	adds	r3, #32
 800743c:	7bfa      	ldrb	r2, [r7, #15]
 800743e:	4611      	mov	r1, r2
 8007440:	4618      	mov	r0, r3
 8007442:	f000 f9eb 	bl	800781c <lps22hb_data_rate_set>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <LPS22HB_SetOutputDataRate_When_Enabled+0x82>
  {
    return LPS22HB_ERROR;
 800744c:	f04f 33ff 	mov.w	r3, #4294967295
 8007450:	e00f      	b.n	8007472 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f103 0220 	add.w	r2, r3, #32
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3333      	adds	r3, #51	; 0x33
 800745c:	4619      	mov	r1, r3
 800745e:	4610      	mov	r0, r2
 8007460:	f000 fa02 	bl	8007868 <lps22hb_data_rate_get>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d002      	beq.n	8007470 <LPS22HB_SetOutputDataRate_When_Enabled+0xa0>
  {
    return LPS22HB_ERROR;
 800746a:	f04f 33ff 	mov.w	r3, #4294967295
 800746e:	e000      	b.n	8007472 <LPS22HB_SetOutputDataRate_When_Enabled+0xa2>
  }

  return LPS22HB_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	42480000 	.word	0x42480000

08007480 <LPS22HB_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
                   : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
 800748c:	edd7 7a00 	vldr	s15, [r7]
 8007490:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800749c:	d801      	bhi.n	80074a2 <LPS22HB_SetOutputDataRate_When_Disabled+0x22>
 800749e:	2301      	movs	r3, #1
 80074a0:	e021      	b.n	80074e6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80074a2:	edd7 7a00 	vldr	s15, [r7]
 80074a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80074aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074b2:	d801      	bhi.n	80074b8 <LPS22HB_SetOutputDataRate_When_Disabled+0x38>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e016      	b.n	80074e6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80074b8:	edd7 7a00 	vldr	s15, [r7]
 80074bc:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80074c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c8:	d801      	bhi.n	80074ce <LPS22HB_SetOutputDataRate_When_Disabled+0x4e>
 80074ca:	2303      	movs	r3, #3
 80074cc:	e00b      	b.n	80074e6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80074ce:	edd7 7a00 	vldr	s15, [r7]
 80074d2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80074fc <LPS22HB_SetOutputDataRate_When_Disabled+0x7c>
 80074d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074de:	d801      	bhi.n	80074e4 <LPS22HB_SetOutputDataRate_When_Disabled+0x64>
 80074e0:	2304      	movs	r3, #4
 80074e2:	e000      	b.n	80074e6 <LPS22HB_SetOutputDataRate_When_Disabled+0x66>
 80074e4:	2305      	movs	r3, #5
  pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                   : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
                   : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
                   :                  LPS22HB_ODR_75_Hz;

  return LPS22HB_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	42480000 	.word	0x42480000

08007500 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3320      	adds	r3, #32
 800750c:	2101      	movs	r1, #1
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fa4b 	bl	80079aa <lps22hb_low_power_set>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 800751a:	f04f 33ff 	mov.w	r3, #4294967295
 800751e:	e044      	b.n	80075aa <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3320      	adds	r3, #32
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f000 f978 	bl	800781c <lps22hb_data_rate_set>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8007532:	f04f 33ff 	mov.w	r3, #4294967295
 8007536:	e038      	b.n	80075aa <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3320      	adds	r3, #32
 800753c:	2102      	movs	r1, #2
 800753e:	4618      	mov	r0, r3
 8007540:	f000 f946 	bl	80077d0 <lps22hb_low_pass_filter_mode_set>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800754a:	f04f 33ff 	mov.w	r3, #4294967295
 800754e:	e02c      	b.n	80075aa <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3320      	adds	r3, #32
 8007554:	2101      	movs	r1, #1
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f914 	bl	8007784 <lps22hb_block_data_update_set>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295
 8007566:	e020      	b.n	80075aa <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10b      	bne.n	8007588 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3320      	adds	r3, #32
 8007574:	2100      	movs	r1, #0
 8007576:	4618      	mov	r0, r3
 8007578:	f000 fa3d 	bl	80079f6 <lps22hb_auto_add_inc_set>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00e      	beq.n	80075a0 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8007582:	f04f 33ff 	mov.w	r3, #4294967295
 8007586:	e010      	b.n	80075aa <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3320      	adds	r3, #32
 800758c:	2101      	movs	r1, #1
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fa31 	bl	80079f6 <lps22hb_auto_add_inc_set>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800759a:	f04f 33ff 	mov.w	r3, #4294967295
 800759e:	e004      	b.n	80075aa <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2203      	movs	r2, #3
 80075a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80075b2:	b590      	push	{r4, r7, lr}
 80075b4:	b089      	sub	sp, #36	; 0x24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	461a      	mov	r2, r3
 80075be:	460b      	mov	r3, r1
 80075c0:	72fb      	strb	r3, [r7, #11]
 80075c2:	4613      	mov	r3, r2
 80075c4:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d121      	bne.n	800761a <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80075d6:	2300      	movs	r3, #0
 80075d8:	83fb      	strh	r3, [r7, #30]
 80075da:	e018      	b.n	800760e <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	695c      	ldr	r4, [r3, #20]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	7b1b      	ldrb	r3, [r3, #12]
 80075e4:	b298      	uxth	r0, r3
 80075e6:	7afb      	ldrb	r3, [r7, #11]
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	8bfb      	ldrh	r3, [r7, #30]
 80075ec:	4413      	add	r3, r2
 80075ee:	b299      	uxth	r1, r3
 80075f0:	8bfb      	ldrh	r3, [r7, #30]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	441a      	add	r2, r3
 80075f6:	2301      	movs	r3, #1
 80075f8:	47a0      	blx	r4
 80075fa:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8007602:	f04f 33ff 	mov.w	r3, #4294967295
 8007606:	e013      	b.n	8007630 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8007608:	8bfb      	ldrh	r3, [r7, #30]
 800760a:	3301      	adds	r3, #1
 800760c:	83fb      	strh	r3, [r7, #30]
 800760e:	8bfa      	ldrh	r2, [r7, #30]
 8007610:	893b      	ldrh	r3, [r7, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	d3e2      	bcc.n	80075dc <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	e00a      	b.n	8007630 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	695c      	ldr	r4, [r3, #20]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	7b1b      	ldrb	r3, [r3, #12]
 8007622:	b298      	uxth	r0, r3
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	b299      	uxth	r1, r3
 8007628:	893b      	ldrh	r3, [r7, #8]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	47a0      	blx	r4
 800762e:	4603      	mov	r3, r0
  }
}
 8007630:	4618      	mov	r0, r3
 8007632:	3724      	adds	r7, #36	; 0x24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd90      	pop	{r4, r7, pc}

08007638 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007638:	b590      	push	{r4, r7, lr}
 800763a:	b089      	sub	sp, #36	; 0x24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	607a      	str	r2, [r7, #4]
 8007642:	461a      	mov	r2, r3
 8007644:	460b      	mov	r3, r1
 8007646:	72fb      	strb	r3, [r7, #11]
 8007648:	4613      	mov	r3, r2
 800764a:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d121      	bne.n	80076a0 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800765c:	2300      	movs	r3, #0
 800765e:	83fb      	strh	r3, [r7, #30]
 8007660:	e018      	b.n	8007694 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	691c      	ldr	r4, [r3, #16]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	7b1b      	ldrb	r3, [r3, #12]
 800766a:	b298      	uxth	r0, r3
 800766c:	7afb      	ldrb	r3, [r7, #11]
 800766e:	b29a      	uxth	r2, r3
 8007670:	8bfb      	ldrh	r3, [r7, #30]
 8007672:	4413      	add	r3, r2
 8007674:	b299      	uxth	r1, r3
 8007676:	8bfb      	ldrh	r3, [r7, #30]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	441a      	add	r2, r3
 800767c:	2301      	movs	r3, #1
 800767e:	47a0      	blx	r4
 8007680:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8007688:	f04f 33ff 	mov.w	r3, #4294967295
 800768c:	e013      	b.n	80076b6 <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800768e:	8bfb      	ldrh	r3, [r7, #30]
 8007690:	3301      	adds	r3, #1
 8007692:	83fb      	strh	r3, [r7, #30]
 8007694:	8bfa      	ldrh	r2, [r7, #30]
 8007696:	893b      	ldrh	r3, [r7, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	d3e2      	bcc.n	8007662 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	e00a      	b.n	80076b6 <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	691c      	ldr	r4, [r3, #16]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	7b1b      	ldrb	r3, [r3, #12]
 80076a8:	b298      	uxth	r0, r3
 80076aa:	7afb      	ldrb	r3, [r7, #11]
 80076ac:	b299      	uxth	r1, r3
 80076ae:	893b      	ldrh	r3, [r7, #8]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	47a0      	blx	r4
 80076b4:	4603      	mov	r3, r0
  }
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3724      	adds	r7, #36	; 0x24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd90      	pop	{r4, r7, pc}

080076be <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80076be:	b590      	push	{r4, r7, lr}
 80076c0:	b087      	sub	sp, #28
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	461a      	mov	r2, r3
 80076ca:	460b      	mov	r3, r1
 80076cc:	72fb      	strb	r3, [r7, #11]
 80076ce:	4613      	mov	r3, r2
 80076d0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	685c      	ldr	r4, [r3, #4]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	68d8      	ldr	r0, [r3, #12]
 80076da:	893b      	ldrh	r3, [r7, #8]
 80076dc:	7af9      	ldrb	r1, [r7, #11]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	47a0      	blx	r4
 80076e2:	6178      	str	r0, [r7, #20]

  return ret;
 80076e4:	697b      	ldr	r3, [r7, #20]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd90      	pop	{r4, r7, pc}

080076ee <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80076ee:	b590      	push	{r4, r7, lr}
 80076f0:	b087      	sub	sp, #28
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	60f8      	str	r0, [r7, #12]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	461a      	mov	r2, r3
 80076fa:	460b      	mov	r3, r1
 80076fc:	72fb      	strb	r3, [r7, #11]
 80076fe:	4613      	mov	r3, r2
 8007700:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681c      	ldr	r4, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68d8      	ldr	r0, [r3, #12]
 800770a:	893b      	ldrh	r3, [r7, #8]
 800770c:	7af9      	ldrb	r1, [r7, #11]
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	47a0      	blx	r4
 8007712:	6178      	str	r0, [r7, #20]

  return ret;
 8007714:	697b      	ldr	r3, [r7, #20]
}
 8007716:	4618      	mov	r0, r3
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	bd90      	pop	{r4, r7, pc}
	...

08007720 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007732:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800774c <lps22hb_from_lsb_to_hpa+0x2c>
 8007736:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800773a:	eef0 7a66 	vmov.f32	s15, s13
}
 800773e:	eeb0 0a67 	vmov.f32	s0, s15
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr
 800774c:	49800000 	.word	0x49800000

08007750 <lps22hb_from_lsb_to_degc>:

float_t lps22hb_from_lsb_to_degc(int16_t lsb)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	4603      	mov	r3, r0
 8007758:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800775a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007766:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007780 <lps22hb_from_lsb_to_degc+0x30>
 800776a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800776e:	eef0 7a66 	vmov.f32	s15, s13
}
 8007772:	eeb0 0a67 	vmov.f32	s0, s15
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	42c80000 	.word	0x42c80000

08007784 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007790:	f107 0208 	add.w	r2, r7, #8
 8007794:	2301      	movs	r3, #1
 8007796:	2110      	movs	r1, #16
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff ff90 	bl	80076be <lps22hb_read_reg>
 800779e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10f      	bne.n	80077c6 <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	7a3b      	ldrb	r3, [r7, #8]
 80077b0:	f362 0341 	bfi	r3, r2, #1, #1
 80077b4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80077b6:	f107 0208 	add.w	r2, r7, #8
 80077ba:	2301      	movs	r3, #1
 80077bc:	2110      	movs	r1, #16
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff ff95 	bl	80076ee <lps22hb_write_reg>
 80077c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80077c6:	68fb      	ldr	r3, [r7, #12]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80077dc:	f107 0208 	add.w	r2, r7, #8
 80077e0:	2301      	movs	r3, #1
 80077e2:	2110      	movs	r1, #16
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f7ff ff6a 	bl	80076be <lps22hb_read_reg>
 80077ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10f      	bne.n	8007812 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	f003 0303 	and.w	r3, r3, #3
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	7a3b      	ldrb	r3, [r7, #8]
 80077fc:	f362 0383 	bfi	r3, r2, #2, #2
 8007800:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007802:	f107 0208 	add.w	r2, r7, #8
 8007806:	2301      	movs	r3, #1
 8007808:	2110      	movs	r1, #16
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7ff ff6f 	bl	80076ee <lps22hb_write_reg>
 8007810:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007812:	68fb      	ldr	r3, [r7, #12]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	460b      	mov	r3, r1
 8007826:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007828:	f107 0208 	add.w	r2, r7, #8
 800782c:	2301      	movs	r3, #1
 800782e:	2110      	movs	r1, #16
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff44 	bl	80076be <lps22hb_read_reg>
 8007836:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10f      	bne.n	800785e <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	b2da      	uxtb	r2, r3
 8007846:	7a3b      	ldrb	r3, [r7, #8]
 8007848:	f362 1306 	bfi	r3, r2, #4, #3
 800784c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800784e:	f107 0208 	add.w	r2, r7, #8
 8007852:	2301      	movs	r3, #1
 8007854:	2110      	movs	r1, #16
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff ff49 	bl	80076ee <lps22hb_write_reg>
 800785c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800785e:	68fb      	ldr	r3, [r7, #12]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <lps22hb_data_rate_get>:
  * @param  val    Get the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_get(stmdev_ctx_t *ctx, lps22hb_odr_t *val)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8007872:	f107 0208 	add.w	r2, r7, #8
 8007876:	2301      	movs	r3, #1
 8007878:	2110      	movs	r1, #16
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff ff1f 	bl	80076be <lps22hb_read_reg>
 8007880:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg1.odr)
 8007882:	7a3b      	ldrb	r3, [r7, #8]
 8007884:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b05      	cmp	r3, #5
 800788c:	d826      	bhi.n	80078dc <lps22hb_data_rate_get+0x74>
 800788e:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <lps22hb_data_rate_get+0x2c>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078ad 	.word	0x080078ad
 8007898:	080078b5 	.word	0x080078b5
 800789c:	080078bd 	.word	0x080078bd
 80078a0:	080078c5 	.word	0x080078c5
 80078a4:	080078cd 	.word	0x080078cd
 80078a8:	080078d5 	.word	0x080078d5
  {
    case LPS22HB_POWER_DOWN:
      *val = LPS22HB_POWER_DOWN;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2200      	movs	r2, #0
 80078b0:	701a      	strb	r2, [r3, #0]
      break;
 80078b2:	e017      	b.n	80078e4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_1_Hz:
      *val = LPS22HB_ODR_1_Hz;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2201      	movs	r2, #1
 80078b8:	701a      	strb	r2, [r3, #0]
      break;
 80078ba:	e013      	b.n	80078e4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_10_Hz:
      *val = LPS22HB_ODR_10_Hz;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2202      	movs	r2, #2
 80078c0:	701a      	strb	r2, [r3, #0]
      break;
 80078c2:	e00f      	b.n	80078e4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_25_Hz:
      *val = LPS22HB_ODR_25_Hz;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2203      	movs	r2, #3
 80078c8:	701a      	strb	r2, [r3, #0]
      break;
 80078ca:	e00b      	b.n	80078e4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_50_Hz:
      *val = LPS22HB_ODR_50_Hz;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2204      	movs	r2, #4
 80078d0:	701a      	strb	r2, [r3, #0]
      break;
 80078d2:	e007      	b.n	80078e4 <lps22hb_data_rate_get+0x7c>

    case LPS22HB_ODR_75_Hz:
      *val = LPS22HB_ODR_75_Hz;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2205      	movs	r2, #5
 80078d8:	701a      	strb	r2, [r3, #0]
      break;
 80078da:	e003      	b.n	80078e4 <lps22hb_data_rate_get+0x7c>

    default:
      *val = LPS22HB_ODR_1_Hz;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2201      	movs	r2, #1
 80078e0:	701a      	strb	r2, [r3, #0]
      break;
 80078e2:	bf00      	nop
  }

  return ret;
 80078e4:	68fb      	ldr	r3, [r7, #12]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop

080078f0 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 80078fa:	f107 0208 	add.w	r2, r7, #8
 80078fe:	2303      	movs	r3, #3
 8007900:	2128      	movs	r1, #40	; 0x28
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff fedb 	bl	80076be <lps22hb_read_reg>
 8007908:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800790a:	7abb      	ldrb	r3, [r7, #10]
 800790c:	461a      	mov	r2, r3
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	7a7a      	ldrb	r2, [r7, #9]
 800791a:	441a      	add	r2, r3
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	7a3a      	ldrb	r2, [r7, #8]
 8007928:	441a      	add	r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	021a      	lsls	r2, r3, #8
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	601a      	str	r2, [r3, #0]

  return ret;
 8007938:	68fb      	ldr	r3, [r7, #12]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <lps22hb_temperature_raw_get>:
  * @param  buff   Buffer that stores data read.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  uint8_t reg[2];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t *) reg, 2);
 800794c:	f107 0208 	add.w	r2, r7, #8
 8007950:	2302      	movs	r3, #2
 8007952:	212b      	movs	r1, #43	; 0x2b
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7ff feb2 	bl	80076be <lps22hb_read_reg>
 800795a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800795c:	7a7b      	ldrb	r3, [r7, #9]
 800795e:	b21a      	sxth	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800796a:	b29b      	uxth	r3, r3
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	b29a      	uxth	r2, r3
 8007970:	7a3b      	ldrb	r3, [r7, #8]
 8007972:	b29b      	uxth	r3, r3
 8007974:	4413      	add	r3, r2
 8007976:	b29b      	uxth	r3, r3
 8007978:	b21a      	sxth	r2, r3
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	801a      	strh	r2, [r3, #0]

  return ret;
 800797e:	68fb      	ldr	r3, [r7, #12]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <lps22hb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t *) buff, 1);
 8007992:	2301      	movs	r3, #1
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	210f      	movs	r1, #15
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f7ff fe90 	bl	80076be <lps22hb_read_reg>
 800799e:	60f8      	str	r0, [r7, #12]

  return ret;
 80079a0:	68fb      	ldr	r3, [r7, #12]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	460b      	mov	r3, r1
 80079b4:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 80079b6:	f107 0208 	add.w	r2, r7, #8
 80079ba:	2301      	movs	r3, #1
 80079bc:	211a      	movs	r1, #26
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff fe7d 	bl	80076be <lps22hb_read_reg>
 80079c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10f      	bne.n	80079ec <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	7a3b      	ldrb	r3, [r7, #8]
 80079d6:	f362 0300 	bfi	r3, r2, #0, #1
 80079da:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 80079dc:	f107 0208 	add.w	r2, r7, #8
 80079e0:	2301      	movs	r3, #1
 80079e2:	211a      	movs	r1, #26
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff fe82 	bl	80076ee <lps22hb_write_reg>
 80079ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80079ec:	68fb      	ldr	r3, [r7, #12]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b084      	sub	sp, #16
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8007a02:	f107 0208 	add.w	r2, r7, #8
 8007a06:	2301      	movs	r3, #1
 8007a08:	2111      	movs	r1, #17
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff fe57 	bl	80076be <lps22hb_read_reg>
 8007a10:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10f      	bne.n	8007a38 <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	7a3b      	ldrb	r3, [r7, #8]
 8007a22:	f362 1304 	bfi	r3, r2, #4, #1
 8007a26:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8007a28:	f107 0208 	add.w	r2, r7, #8
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	2111      	movs	r1, #17
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff fe5c 	bl	80076ee <lps22hb_write_reg>
 8007a36:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a38:	68fb      	ldr	r3, [r7, #12]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d103      	bne.n	8007a60 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8007a58:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	e051      	b.n	8007b04 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	7b1a      	ldrb	r2, [r3, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	691a      	ldr	r2, [r3, #16]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	695a      	ldr	r2, [r3, #20]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	699a      	ldr	r2, [r3, #24]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a1d      	ldr	r2, [pc, #116]	; (8007b10 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 8007a9c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a1c      	ldr	r2, [pc, #112]	; (8007b14 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 8007aa2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d103      	bne.n	8007ac2 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 8007aba:	f04f 33ff 	mov.w	r3, #4294967295
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	e020      	b.n	8007b04 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4798      	blx	r3
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e016      	b.n	8007b04 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d112      	bne.n	8007b04 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10d      	bne.n	8007b04 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	461a      	mov	r2, r3
 8007af0:	2123      	movs	r1, #35	; 0x23
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 fb55 	bl	80081a2 <LSM303AGR_ACC_Write_Reg>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 8007afe:	f04f 33ff 	mov.w	r3, #4294967295
 8007b02:	e000      	b.n	8007b06 <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 8007b04:	68fb      	ldr	r3, [r7, #12]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	080089b1 	.word	0x080089b1
 8007b14:	08008a13 	.word	0x08008a13

08007b18 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3320      	adds	r3, #32
 8007b24:	2101      	movs	r1, #1
 8007b26:	4618      	mov	r0, r3
 8007b28:	f001 f97e 	bl	8008e28 <lsm303agr_xl_block_data_update_set>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8007b32:	f04f 33ff 	mov.w	r3, #4294967295
 8007b36:	e02c      	b.n	8007b92 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3320      	adds	r3, #32
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f001 fb21 	bl	8009186 <lsm303agr_xl_fifo_mode_set>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8007b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4e:	e020      	b.n	8007b92 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2205      	movs	r2, #5
 8007b54:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3320      	adds	r3, #32
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 f882 	bl	8008c68 <lsm303agr_xl_data_rate_set>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8007b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6e:	e010      	b.n	8007b92 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3320      	adds	r3, #32
 8007b74:	2100      	movs	r1, #0
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 f8f8 	bl	8008d6c <lsm303agr_xl_full_scale_set>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8007b82:	f04f 33ff 	mov.w	r3, #4294967295
 8007b86:	e004      	b.n	8007b92 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <LSM303AGR_ACC_DeInit>:
  * @brief  Deinitialize the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f87c 	bl	8007ca0 <LSM303AGR_ACC_Disable>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb2:	e008      	b.n	8007bc6 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pObj->is_initialized = 0;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <LSM303AGR_ACC_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3320      	adds	r3, #32
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f001 fa89 	bl	80090f6 <lsm303agr_xl_device_id_get>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d002      	beq.n	8007bf0 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8007bea:	f04f 33ff 	mov.w	r3, #4294967295
 8007bee:	e000      	b.n	8007bf2 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <LSM303AGR_ACC_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2200      	movs	r2, #0
 8007c16:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2200      	movs	r2, #0
 8007c22:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2210      	movs	r2, #16
 8007c28:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	f04f 0200 	mov.w	r2, #0
 8007c36:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	4a06      	ldr	r2, [pc, #24]	; (8007c54 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8007c3c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	43c80000 	.word	0x43c80000

08007c58 <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d101      	bne.n	8007c6e <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e014      	b.n	8007c98 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f103 0220 	add.w	r2, r3, #32
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f000 fff3 	bl	8008c68 <lsm303agr_xl_data_rate_set>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8007c88:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8c:	e004      	b.n	8007c98 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <LSM303AGR_ACC_Disable>:
  * @brief  Disable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e01f      	b.n	8007cf6 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f103 0220 	add.w	r2, r3, #32
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3332      	adds	r3, #50	; 0x32
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	f000 fff6 	bl	8008cb4 <lsm303agr_xl_data_rate_get>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8007cce:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd2:	e010      	b.n	8007cf6 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3320      	adds	r3, #32
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 ffc4 	bl	8008c68 <lsm303agr_xl_data_rate_set>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8007ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cea:	e004      	b.n	8007cf6 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3320      	adds	r3, #32
 8007d10:	f107 020b 	add.w	r2, r7, #11
 8007d14:	4611      	mov	r1, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 ff72 	bl	8008c00 <lsm303agr_xl_operating_mode_get>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8007d22:	f04f 33ff 	mov.w	r3, #4294967295
 8007d26:	e031      	b.n	8007d8c <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8007d28:	7afb      	ldrb	r3, [r7, #11]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d01a      	beq.n	8007d64 <LSM303AGR_ACC_GetSensitivity+0x66>
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	dc22      	bgt.n	8007d78 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <LSM303AGR_ACC_GetSensitivity+0x3e>
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d00a      	beq.n	8007d50 <LSM303AGR_ACC_GetSensitivity+0x52>
 8007d3a:	e01d      	b.n	8007d78 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fca8 	bl	8008694 <LSM303AGR_ACC_GetSensitivityHR>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d01a      	beq.n	8007d80 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8007d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d4e:	e01d      	b.n	8007d8c <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fce4 	bl	8008720 <LSM303AGR_ACC_GetSensitivityNM>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d012      	beq.n	8007d84 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8007d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d62:	e013      	b.n	8007d8c <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fd20 	bl	80087ac <LSM303AGR_ACC_GetSensitivityLP>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8007d72:	f04f 33ff 	mov.w	r3, #4294967295
 8007d76:	e009      	b.n	8007d8c <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8007d78:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7c:	60fb      	str	r3, [r7, #12]
      break;
 8007d7e:	e004      	b.n	8007d8a <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8007d80:	bf00      	nop
 8007d82:	e002      	b.n	8007d8a <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8007d84:	bf00      	nop
 8007d86:	e000      	b.n	8007d8a <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8007d88:	bf00      	nop
  }

  return ret;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <LSM303AGR_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3320      	adds	r3, #32
 8007da6:	f107 020b 	add.w	r2, r7, #11
 8007daa:	4611      	mov	r1, r2
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 ff27 	bl	8008c00 <lsm303agr_xl_operating_mode_get>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d002      	beq.n	8007dbe <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8007db8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dbc:	e09d      	b.n	8007efa <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3320      	adds	r3, #32
 8007dc2:	f107 020a 	add.w	r2, r7, #10
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 ff73 	bl	8008cb4 <lsm303agr_xl_data_rate_get>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8007dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd8:	e08f      	b.n	8007efa <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8007dda:	7afb      	ldrb	r3, [r7, #11]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d147      	bne.n	8007e70 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8007de0:	7abb      	ldrb	r3, [r7, #10]
 8007de2:	2b09      	cmp	r3, #9
 8007de4:	d840      	bhi.n	8007e68 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8007de6:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8007de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dec:	08007e15 	.word	0x08007e15
 8007df0:	08007e1f 	.word	0x08007e1f
 8007df4:	08007e29 	.word	0x08007e29
 8007df8:	08007e31 	.word	0x08007e31
 8007dfc:	08007e39 	.word	0x08007e39
 8007e00:	08007e41 	.word	0x08007e41
 8007e04:	08007e49 	.word	0x08007e49
 8007e08:	08007e51 	.word	0x08007e51
 8007e0c:	08007e59 	.word	0x08007e59
 8007e10:	08007e61 	.word	0x08007e61
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	f04f 0200 	mov.w	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
        break;
 8007e1c:	e06c      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007e24:	601a      	str	r2, [r3, #0]
        break;
 8007e26:	e067      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	4a36      	ldr	r2, [pc, #216]	; (8007f04 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8007e2c:	601a      	str	r2, [r3, #0]
        break;
 8007e2e:	e063      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	4a35      	ldr	r2, [pc, #212]	; (8007f08 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8007e34:	601a      	str	r2, [r3, #0]
        break;
 8007e36:	e05f      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	4a34      	ldr	r2, [pc, #208]	; (8007f0c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8007e3c:	601a      	str	r2, [r3, #0]
        break;
 8007e3e:	e05b      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	4a33      	ldr	r2, [pc, #204]	; (8007f10 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8007e44:	601a      	str	r2, [r3, #0]
        break;
 8007e46:	e057      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	4a32      	ldr	r2, [pc, #200]	; (8007f14 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8007e4c:	601a      	str	r2, [r3, #0]
        break;
 8007e4e:	e053      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	4a31      	ldr	r2, [pc, #196]	; (8007f18 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8007e54:	601a      	str	r2, [r3, #0]
        break;
 8007e56:	e04f      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	4a30      	ldr	r2, [pc, #192]	; (8007f1c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8007e5c:	601a      	str	r2, [r3, #0]
        break;
 8007e5e:	e04b      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	4a2f      	ldr	r2, [pc, #188]	; (8007f20 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8007e64:	601a      	str	r2, [r3, #0]
        break;
 8007e66:	e047      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8007e68:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6c:	60fb      	str	r3, [r7, #12]
        break;
 8007e6e:	e043      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8007e70:	7abb      	ldrb	r3, [r7, #10]
 8007e72:	2b09      	cmp	r3, #9
 8007e74:	d83c      	bhi.n	8007ef0 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8007e76:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8007e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7c:	08007ea5 	.word	0x08007ea5
 8007e80:	08007eaf 	.word	0x08007eaf
 8007e84:	08007eb9 	.word	0x08007eb9
 8007e88:	08007ec1 	.word	0x08007ec1
 8007e8c:	08007ec9 	.word	0x08007ec9
 8007e90:	08007ed1 	.word	0x08007ed1
 8007e94:	08007ed9 	.word	0x08007ed9
 8007e98:	08007ee1 	.word	0x08007ee1
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007ee9 	.word	0x08007ee9
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	f04f 0200 	mov.w	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
        break;
 8007eac:	e024      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007eb4:	601a      	str	r2, [r3, #0]
        break;
 8007eb6:	e01f      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	4a12      	ldr	r2, [pc, #72]	; (8007f04 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8007ebc:	601a      	str	r2, [r3, #0]
        break;
 8007ebe:	e01b      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	4a11      	ldr	r2, [pc, #68]	; (8007f08 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8007ec4:	601a      	str	r2, [r3, #0]
        break;
 8007ec6:	e017      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	4a10      	ldr	r2, [pc, #64]	; (8007f0c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8007ecc:	601a      	str	r2, [r3, #0]
        break;
 8007ece:	e013      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	4a0f      	ldr	r2, [pc, #60]	; (8007f10 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8007ed4:	601a      	str	r2, [r3, #0]
        break;
 8007ed6:	e00f      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	4a0e      	ldr	r2, [pc, #56]	; (8007f14 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8007edc:	601a      	str	r2, [r3, #0]
        break;
 8007ede:	e00b      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	4a0d      	ldr	r2, [pc, #52]	; (8007f18 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8007ee4:	601a      	str	r2, [r3, #0]
        break;
 8007ee6:	e007      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	4a0e      	ldr	r2, [pc, #56]	; (8007f24 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8007eec:	601a      	str	r2, [r3, #0]
        break;
 8007eee:	e003      	b.n	8007ef8 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8007ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef4:	60fb      	str	r3, [r7, #12]
        break;
 8007ef6:	bf00      	nop
    }
  }

  return ret;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	41200000 	.word	0x41200000
 8007f08:	41c80000 	.word	0x41c80000
 8007f0c:	42480000 	.word	0x42480000
 8007f10:	42c80000 	.word	0x42c80000
 8007f14:	43480000 	.word	0x43480000
 8007f18:	43c80000 	.word	0x43c80000
 8007f1c:	44ca8000 	.word	0x44ca8000
 8007f20:	45a80000 	.word	0x45a80000
 8007f24:	44a80000 	.word	0x44a80000

08007f28 <LSM303AGR_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d106      	bne.n	8007f4c <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007f3e:	ed97 0a00 	vldr	s0, [r7]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fc78 	bl	8008838 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	e005      	b.n	8007f58 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007f4c:	ed97 0a00 	vldr	s0, [r7]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fcd3 	bl	80088fc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8007f56:	4603      	mov	r3, r0
  }
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <LSM303AGR_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3320      	adds	r3, #32
 8007f72:	f107 020b 	add.w	r2, r7, #11
 8007f76:	4611      	mov	r1, r2
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 ff1d 	bl	8008db8 <lsm303agr_xl_full_scale_get>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8007f84:	f04f 33ff 	mov.w	r3, #4294967295
 8007f88:	e023      	b.n	8007fd2 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8007f8a:	7afb      	ldrb	r3, [r7, #11]
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d81b      	bhi.n	8007fc8 <LSM303AGR_ACC_GetFullScale+0x68>
 8007f90:	a201      	add	r2, pc, #4	; (adr r2, 8007f98 <LSM303AGR_ACC_GetFullScale+0x38>)
 8007f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f96:	bf00      	nop
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007fb1 	.word	0x08007fb1
 8007fa0:	08007fb9 	.word	0x08007fb9
 8007fa4:	08007fc1 	.word	0x08007fc1
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2202      	movs	r2, #2
 8007fac:	601a      	str	r2, [r3, #0]
      break;
 8007fae:	e00f      	b.n	8007fd0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2204      	movs	r2, #4
 8007fb4:	601a      	str	r2, [r3, #0]
      break;
 8007fb6:	e00b      	b.n	8007fd0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2208      	movs	r2, #8
 8007fbc:	601a      	str	r2, [r3, #0]
      break;
 8007fbe:	e007      	b.n	8007fd0 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2210      	movs	r2, #16
 8007fc4:	601a      	str	r2, [r3, #0]
      break;
 8007fc6:	e003      	b.n	8007fd0 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fcc:	60fb      	str	r3, [r7, #12]
      break;
 8007fce:	bf00      	nop
  }

  return ret;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop

08007fdc <LSM303AGR_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	dd0b      	ble.n	8008004 <LSM303AGR_ACC_SetFullScale+0x28>
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	dd06      	ble.n	8008000 <LSM303AGR_ACC_SetFullScale+0x24>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	dc01      	bgt.n	8007ffc <LSM303AGR_ACC_SetFullScale+0x20>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e004      	b.n	8008006 <LSM303AGR_ACC_SetFullScale+0x2a>
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e002      	b.n	8008006 <LSM303AGR_ACC_SetFullScale+0x2a>
 8008000:	2301      	movs	r3, #1
 8008002:	e000      	b.n	8008006 <LSM303AGR_ACC_SetFullScale+0x2a>
 8008004:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8008006:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3320      	adds	r3, #32
 800800c:	7bfa      	ldrb	r2, [r7, #15]
 800800e:	4611      	mov	r1, r2
 8008010:	4618      	mov	r0, r3
 8008012:	f000 feab 	bl	8008d6c <lsm303agr_xl_full_scale_set>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 800801c:	f04f 33ff 	mov.w	r3, #4294967295
 8008020:	e000      	b.n	8008024 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8008036:	2301      	movs	r3, #1
 8008038:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3320      	adds	r3, #32
 8008042:	f107 020f 	add.w	r2, r7, #15
 8008046:	4611      	mov	r1, r2
 8008048:	4618      	mov	r0, r3
 800804a:	f000 fdd9 	bl	8008c00 <lsm303agr_xl_operating_mode_get>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8008054:	f04f 33ff 	mov.w	r3, #4294967295
 8008058:	e04a      	b.n	80080f0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	2b02      	cmp	r3, #2
 800805e:	d00c      	beq.n	800807a <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8008060:	2b02      	cmp	r3, #2
 8008062:	dc0e      	bgt.n	8008082 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <LSM303AGR_ACC_GetAxesRaw+0x42>
 8008068:	2b01      	cmp	r3, #1
 800806a:	d003      	beq.n	8008074 <LSM303AGR_ACC_GetAxesRaw+0x48>
 800806c:	e009      	b.n	8008082 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 800806e:	2310      	movs	r3, #16
 8008070:	83fb      	strh	r3, [r7, #30]
      break;
 8008072:	e00a      	b.n	800808a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8008074:	2340      	movs	r3, #64	; 0x40
 8008076:	83fb      	strh	r3, [r7, #30]
      break;
 8008078:	e007      	b.n	800808a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 800807a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800807e:	83fb      	strh	r3, [r7, #30]
      break;
 8008080:	e003      	b.n	800808a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8008082:	f04f 33ff 	mov.w	r3, #4294967295
 8008086:	61bb      	str	r3, [r7, #24]
      break;
 8008088:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d101      	bne.n	8008096 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	e02c      	b.n	80080f0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3320      	adds	r3, #32
 800809a:	f107 0210 	add.w	r2, r7, #16
 800809e:	4611      	mov	r1, r2
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fee7 	bl	8008e74 <lsm303agr_acceleration_raw_get>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80080ac:	f04f 33ff 	mov.w	r3, #4294967295
 80080b0:	e01e      	b.n	80080f0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80080b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80080b6:	461a      	mov	r2, r3
 80080b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80080bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80080c0:	b21a      	sxth	r2, r3
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80080c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080ca:	461a      	mov	r2, r3
 80080cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80080d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80080d4:	b21a      	sxth	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80080da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80080de:	461a      	mov	r2, r3
 80080e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80080e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80080e8:	b21a      	sxth	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	809a      	strh	r2, [r3, #4]

  return ret;
 80080ee:	69bb      	ldr	r3, [r7, #24]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3720      	adds	r7, #32
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8008102:	f04f 0300 	mov.w	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8008108:	f107 0310 	add.w	r3, r7, #16
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff ff8c 	bl	800802c <LSM303AGR_ACC_GetAxesRaw>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800811a:	f04f 33ff 	mov.w	r3, #4294967295
 800811e:	e03c      	b.n	800819a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8008120:	f107 030c 	add.w	r3, r7, #12
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fde9 	bl	8007cfe <LSM303AGR_ACC_GetSensitivity>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8008132:	f04f 33ff 	mov.w	r3, #4294967295
 8008136:	e030      	b.n	800819a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8008138:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800813c:	ee07 3a90 	vmov	s15, r3
 8008140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008144:	edd7 7a03 	vldr	s15, [r7, #12]
 8008148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008150:	ee17 2a90 	vmov	r2, s15
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8008158:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800815c:	ee07 3a90 	vmov	s15, r3
 8008160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008164:	edd7 7a03 	vldr	s15, [r7, #12]
 8008168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800816c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008170:	ee17 2a90 	vmov	r2, s15
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8008178:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800817c:	ee07 3a90 	vmov	s15, r3
 8008180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008184:	edd7 7a03 	vldr	s15, [r7, #12]
 8008188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800818c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008190:	ee17 2a90 	vmov	r2, s15
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	460b      	mov	r3, r1
 80081ac:	70fb      	strb	r3, [r7, #3]
 80081ae:	4613      	mov	r3, r2
 80081b0:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f103 0020 	add.w	r0, r3, #32
 80081b8:	1cba      	adds	r2, r7, #2
 80081ba:	78f9      	ldrb	r1, [r7, #3]
 80081bc:	2301      	movs	r3, #1
 80081be:	f000 fcd3 	bl	8008b68 <lsm303agr_write_reg>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80081c8:	f04f 33ff 	mov.w	r3, #4294967295
 80081cc:	e000      	b.n	80081d0 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d103      	bne.n	80081f4 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80081ec:	f04f 33ff 	mov.w	r3, #4294967295
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e04b      	b.n	800828c <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	7b1a      	ldrb	r2, [r3, #12]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	695a      	ldr	r2, [r3, #20]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	699a      	ldr	r2, [r3, #24]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a1a      	ldr	r2, [pc, #104]	; (8008298 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8008230:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a19      	ldr	r2, [pc, #100]	; (800829c <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8008236:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d103      	bne.n	800824e <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8008246:	f04f 33ff 	mov.w	r3, #4294967295
 800824a:	60fb      	str	r3, [r7, #12]
 800824c:	e01e      	b.n	800828c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4798      	blx	r3
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800825a:	f04f 33ff 	mov.w	r3, #4294967295
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	e014      	b.n	800828c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d010      	beq.n	800828c <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3320      	adds	r3, #32
 8008278:	2101      	movs	r1, #1
 800827a:	4618      	mov	r0, r3
 800827c:	f000 ffa9 	bl	80091d2 <lsm303agr_mag_i2c_interface_set>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d002      	beq.n	800828c <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8008286:	f04f 33ff 	mov.w	r3, #4294967295
 800828a:	e000      	b.n	800828e <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 800828c:	68fb      	ldr	r3, [r7, #12]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	08008a75 	.word	0x08008a75
 800829c:	08008ad7 	.word	0x08008ad7

080082a0 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	3320      	adds	r3, #32
 80082ac:	2101      	movs	r1, #1
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 feb0 	bl	8009014 <lsm303agr_mag_block_data_update_set>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80082ba:	f04f 33ff 	mov.w	r3, #4294967295
 80082be:	e028      	b.n	8008312 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3320      	adds	r3, #32
 80082c4:	2102      	movs	r1, #2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 fe1f 	bl	8008f0a <lsm303agr_mag_operating_mode_set>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80082d2:	f04f 33ff 	mov.w	r3, #4294967295
 80082d6:	e01c      	b.n	8008312 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3320      	adds	r3, #32
 80082dc:	2103      	movs	r1, #3
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fe39 	bl	8008f56 <lsm303agr_mag_data_rate_set>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80082ea:	f04f 33ff 	mov.w	r3, #4294967295
 80082ee:	e010      	b.n	8008312 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3320      	adds	r3, #32
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 ff1f 	bl	800913a <lsm303agr_mag_self_test_set>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8008302:	f04f 33ff 	mov.w	r3, #4294967295
 8008306:	e004      	b.n	8008312 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <LSM303AGR_MAG_DeInit>:
  * @brief  Deinitialize the LSM303AGR magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f874 	bl	8008410 <LSM303AGR_MAG_Disable>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800832e:	f04f 33ff 	mov.w	r3, #4294967295
 8008332:	e004      	b.n	800833e <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <LSM303AGR_MAG_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3320      	adds	r3, #32
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	4618      	mov	r0, r3
 8008358:	f000 fede 	bl	8009118 <lsm303agr_mag_device_id_get>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8008362:	f04f 33ff 	mov.w	r3, #4294967295
 8008366:	e000      	b.n	800836a <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3708      	adds	r7, #8
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <LSM303AGR_MAG_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2200      	movs	r2, #0
 8008382:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2200      	movs	r2, #0
 8008388:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2201      	movs	r2, #1
 800838e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2200      	movs	r2, #0
 8008394:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2200      	movs	r2, #0
 800839a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2200      	movs	r2, #0
 80083a0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2232      	movs	r2, #50	; 0x32
 80083a6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	f04f 0200 	mov.w	r2, #0
 80083ae:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	f04f 0200 	mov.w	r2, #0
 80083b6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	4a04      	ldr	r2, [pc, #16]	; (80083cc <LSM303AGR_MAG_GetCapabilities+0x58>)
 80083bc:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	42c80000 	.word	0x42c80000

080083d0 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	e010      	b.n	8008408 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	3320      	adds	r3, #32
 80083ea:	2100      	movs	r1, #0
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fd8c 	bl	8008f0a <lsm303agr_mag_operating_mode_set>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 80083f8:	f04f 33ff 	mov.w	r3, #4294967295
 80083fc:	e004      	b.n	8008408 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <LSM303AGR_MAG_Disable>:
  * @brief Disable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	e010      	b.n	8008448 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3320      	adds	r3, #32
 800842a:	2102      	movs	r1, #2
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fd6c 	bl	8008f0a <lsm303agr_mag_operating_mode_set>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8008438:	f04f 33ff 	mov.w	r3, #4294967295
 800843c:	e004      	b.n	8008448 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8008460:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <LSM303AGR_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3320      	adds	r3, #32
 8008482:	f107 020b 	add.w	r2, r7, #11
 8008486:	4611      	mov	r1, r2
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fd8b 	bl	8008fa4 <lsm303agr_mag_data_rate_get>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8008494:	f04f 33ff 	mov.w	r3, #4294967295
 8008498:	e023      	b.n	80084e2 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800849a:	7afb      	ldrb	r3, [r7, #11]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d81b      	bhi.n	80084d8 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80084a0:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084b9 	.word	0x080084b9
 80084ac:	080084c1 	.word	0x080084c1
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084d1 	.word	0x080084d1
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	4a0c      	ldr	r2, [pc, #48]	; (80084ec <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 80084bc:	601a      	str	r2, [r3, #0]
      break;
 80084be:	e00f      	b.n	80084e0 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	4a0b      	ldr	r2, [pc, #44]	; (80084f0 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 80084c4:	601a      	str	r2, [r3, #0]
      break;
 80084c6:	e00b      	b.n	80084e0 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	4a0a      	ldr	r2, [pc, #40]	; (80084f4 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 80084cc:	601a      	str	r2, [r3, #0]
      break;
 80084ce:	e007      	b.n	80084e0 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	4a09      	ldr	r2, [pc, #36]	; (80084f8 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 80084d4:	601a      	str	r2, [r3, #0]
      break;
 80084d6:	e003      	b.n	80084e0 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80084d8:	f04f 33ff 	mov.w	r3, #4294967295
 80084dc:	60fb      	str	r3, [r7, #12]
      break;
 80084de:	bf00      	nop
  }

  return ret;
 80084e0:	68fb      	ldr	r3, [r7, #12]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	41200000 	.word	0x41200000
 80084f0:	41a00000 	.word	0x41a00000
 80084f4:	42480000 	.word	0x42480000
 80084f8:	42c80000 	.word	0x42c80000

080084fc <LSM303AGR_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8008508:	edd7 7a00 	vldr	s15, [r7]
 800850c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008518:	d801      	bhi.n	800851e <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800851a:	2300      	movs	r3, #0
 800851c:	e016      	b.n	800854c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800851e:	edd7 7a00 	vldr	s15, [r7]
 8008522:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8008526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800852a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852e:	d801      	bhi.n	8008534 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8008530:	2301      	movs	r3, #1
 8008532:	e00b      	b.n	800854c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8008534:	edd7 7a00 	vldr	s15, [r7]
 8008538:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8008574 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 800853c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008544:	d801      	bhi.n	800854a <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8008546:	2302      	movs	r3, #2
 8008548:	e000      	b.n	800854c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800854a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 800854c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3320      	adds	r3, #32
 8008552:	7bfa      	ldrb	r2, [r7, #15]
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fcfd 	bl	8008f56 <lsm303agr_mag_data_rate_set>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8008562:	f04f 33ff 	mov.w	r3, #4294967295
 8008566:	e000      	b.n	800856a <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	42480000 	.word	0x42480000

08008578 <LSM303AGR_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2232      	movs	r2, #50	; 0x32
 8008586:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <LSM303AGR_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <LSM303AGR_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3320      	adds	r3, #32
 80085bc:	f107 0208 	add.w	r2, r7, #8
 80085c0:	4611      	mov	r1, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fd4c 	bl	8009060 <lsm303agr_magnetic_raw_get>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 80085ce:	f04f 33ff 	mov.w	r3, #4294967295
 80085d2:	e00c      	b.n	80085ee <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80085d4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80085dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80085e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b086      	sub	sp, #24
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	3320      	adds	r3, #32
 8008604:	f107 0210 	add.w	r2, r7, #16
 8008608:	4611      	mov	r1, r2
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fd28 	bl	8009060 <lsm303agr_magnetic_raw_get>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8008616:	f04f 33ff 	mov.w	r3, #4294967295
 800861a:	e036      	b.n	800868a <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 800861c:	f107 030c 	add.w	r3, r7, #12
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7ff ff14 	bl	8008450 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008628:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800862c:	ee07 3a90 	vmov	s15, r3
 8008630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008634:	edd7 7a03 	vldr	s15, [r7, #12]
 8008638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008640:	ee17 2a90 	vmov	r2, s15
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008648:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800864c:	ee07 3a90 	vmov	s15, r3
 8008650:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008654:	edd7 7a03 	vldr	s15, [r7, #12]
 8008658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008660:	ee17 2a90 	vmov	r2, s15
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008668:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800866c:	ee07 3a90 	vmov	s15, r3
 8008670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008674:	edd7 7a03 	vldr	s15, [r7, #12]
 8008678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008680:	ee17 2a90 	vmov	r2, s15
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	3320      	adds	r3, #32
 80086a6:	f107 020b 	add.w	r2, r7, #11
 80086aa:	4611      	mov	r1, r2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 fb83 	bl	8008db8 <lsm303agr_xl_full_scale_get>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80086b8:	f04f 33ff 	mov.w	r3, #4294967295
 80086bc:	e023      	b.n	8008706 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80086be:	7afb      	ldrb	r3, [r7, #11]
 80086c0:	2b03      	cmp	r3, #3
 80086c2:	d81b      	bhi.n	80086fc <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	080086dd 	.word	0x080086dd
 80086d0:	080086e5 	.word	0x080086e5
 80086d4:	080086ed 	.word	0x080086ed
 80086d8:	080086f5 	.word	0x080086f5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	4a0c      	ldr	r2, [pc, #48]	; (8008710 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80086e0:	601a      	str	r2, [r3, #0]
      break;
 80086e2:	e00f      	b.n	8008704 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	4a0b      	ldr	r2, [pc, #44]	; (8008714 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80086e8:	601a      	str	r2, [r3, #0]
      break;
 80086ea:	e00b      	b.n	8008704 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	4a0a      	ldr	r2, [pc, #40]	; (8008718 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80086f0:	601a      	str	r2, [r3, #0]
      break;
 80086f2:	e007      	b.n	8008704 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	4a09      	ldr	r2, [pc, #36]	; (800871c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80086f8:	601a      	str	r2, [r3, #0]
      break;
 80086fa:	e003      	b.n	8008704 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80086fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008700:	60fb      	str	r3, [r7, #12]
      break;
 8008702:	bf00      	nop
  }

  return ret;
 8008704:	68fb      	ldr	r3, [r7, #12]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	3f7ae148 	.word	0x3f7ae148
 8008714:	3ff9999a 	.word	0x3ff9999a
 8008718:	4079999a 	.word	0x4079999a
 800871c:	413b851f 	.word	0x413b851f

08008720 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3320      	adds	r3, #32
 8008732:	f107 020b 	add.w	r2, r7, #11
 8008736:	4611      	mov	r1, r2
 8008738:	4618      	mov	r0, r3
 800873a:	f000 fb3d 	bl	8008db8 <lsm303agr_xl_full_scale_get>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8008744:	f04f 33ff 	mov.w	r3, #4294967295
 8008748:	e023      	b.n	8008792 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800874a:	7afb      	ldrb	r3, [r7, #11]
 800874c:	2b03      	cmp	r3, #3
 800874e:	d81b      	bhi.n	8008788 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8008750:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	08008769 	.word	0x08008769
 800875c:	08008771 	.word	0x08008771
 8008760:	08008779 	.word	0x08008779
 8008764:	08008781 	.word	0x08008781
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	4a0c      	ldr	r2, [pc, #48]	; (800879c <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 800876c:	601a      	str	r2, [r3, #0]
      break;
 800876e:	e00f      	b.n	8008790 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	4a0b      	ldr	r2, [pc, #44]	; (80087a0 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8008774:	601a      	str	r2, [r3, #0]
      break;
 8008776:	e00b      	b.n	8008790 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 800877c:	601a      	str	r2, [r3, #0]
      break;
 800877e:	e007      	b.n	8008790 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	4a09      	ldr	r2, [pc, #36]	; (80087a8 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8008784:	601a      	str	r2, [r3, #0]
      break;
 8008786:	e003      	b.n	8008790 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8008788:	f04f 33ff 	mov.w	r3, #4294967295
 800878c:	60fb      	str	r3, [r7, #12]
      break;
 800878e:	bf00      	nop
  }

  return ret;
 8008790:	68fb      	ldr	r3, [r7, #12]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	4079999a 	.word	0x4079999a
 80087a0:	40fa3d71 	.word	0x40fa3d71
 80087a4:	417a147b 	.word	0x417a147b
 80087a8:	423b999a 	.word	0x423b999a

080087ac <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3320      	adds	r3, #32
 80087be:	f107 020b 	add.w	r2, r7, #11
 80087c2:	4611      	mov	r1, r2
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 faf7 	bl	8008db8 <lsm303agr_xl_full_scale_get>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 80087d0:	f04f 33ff 	mov.w	r3, #4294967295
 80087d4:	e023      	b.n	800881e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80087d6:	7afb      	ldrb	r3, [r7, #11]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d81b      	bhi.n	8008814 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80087dc:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80087de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e2:	bf00      	nop
 80087e4:	080087f5 	.word	0x080087f5
 80087e8:	080087fd 	.word	0x080087fd
 80087ec:	08008805 	.word	0x08008805
 80087f0:	0800880d 	.word	0x0800880d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 80087f8:	601a      	str	r2, [r3, #0]
      break;
 80087fa:	e00f      	b.n	800881c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	4a0b      	ldr	r2, [pc, #44]	; (800882c <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8008800:	601a      	str	r2, [r3, #0]
      break;
 8008802:	e00b      	b.n	800881c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	4a0a      	ldr	r2, [pc, #40]	; (8008830 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8008808:	601a      	str	r2, [r3, #0]
      break;
 800880a:	e007      	b.n	800881c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	4a09      	ldr	r2, [pc, #36]	; (8008834 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8008810:	601a      	str	r2, [r3, #0]
      break;
 8008812:	e003      	b.n	800881c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8008814:	f04f 33ff 	mov.w	r3, #4294967295
 8008818:	60fb      	str	r3, [r7, #12]
      break;
 800881a:	bf00      	nop
  }

  return ret;
 800881c:	68fb      	ldr	r3, [r7, #12]
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	417a147b 	.word	0x417a147b
 800882c:	41fa147b 	.word	0x41fa147b
 8008830:	427a147b 	.word	0x427a147b
 8008834:	433b947b 	.word	0x433b947b

08008838 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8008844:	edd7 7a00 	vldr	s15, [r7]
 8008848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800884c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008854:	d801      	bhi.n	800885a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008856:	2301      	movs	r3, #1
 8008858:	e037      	b.n	80088ca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800885a:	edd7 7a00 	vldr	s15, [r7]
 800885e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886a:	d801      	bhi.n	8008870 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 800886c:	2302      	movs	r3, #2
 800886e:	e02c      	b.n	80088ca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008870:	edd7 7a00 	vldr	s15, [r7]
 8008874:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008878:	eef4 7ac7 	vcmpe.f32	s15, s14
 800887c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008880:	d801      	bhi.n	8008886 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8008882:	2303      	movs	r3, #3
 8008884:	e021      	b.n	80088ca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8008886:	edd7 7a00 	vldr	s15, [r7]
 800888a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80088f0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 800888e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008896:	d801      	bhi.n	800889c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8008898:	2304      	movs	r3, #4
 800889a:	e016      	b.n	80088ca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800889c:	edd7 7a00 	vldr	s15, [r7]
 80088a0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80088f4 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80088a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ac:	d801      	bhi.n	80088b2 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80088ae:	2305      	movs	r3, #5
 80088b0:	e00b      	b.n	80088ca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80088b2:	edd7 7a00 	vldr	s15, [r7]
 80088b6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80088f8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80088ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c2:	d801      	bhi.n	80088c8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 80088c4:	2306      	movs	r3, #6
 80088c6:	e000      	b.n	80088ca <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80088c8:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80088ca:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3320      	adds	r3, #32
 80088d0:	7bfa      	ldrb	r2, [r7, #15]
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f9c7 	bl	8008c68 <lsm303agr_xl_data_rate_set>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 80088e0:	f04f 33ff 	mov.w	r3, #4294967295
 80088e4:	e000      	b.n	80088e8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	42480000 	.word	0x42480000
 80088f4:	42c80000 	.word	0x42c80000
 80088f8:	43480000 	.word	0x43480000

080088fc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8008908:	edd7 7a00 	vldr	s15, [r7]
 800890c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008918:	d801      	bhi.n	800891e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 800891a:	2301      	movs	r3, #1
 800891c:	e037      	b.n	800898e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800891e:	edd7 7a00 	vldr	s15, [r7]
 8008922:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008926:	eef4 7ac7 	vcmpe.f32	s15, s14
 800892a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800892e:	d801      	bhi.n	8008934 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8008930:	2302      	movs	r3, #2
 8008932:	e02c      	b.n	800898e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008934:	edd7 7a00 	vldr	s15, [r7]
 8008938:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800893c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008944:	d801      	bhi.n	800894a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8008946:	2303      	movs	r3, #3
 8008948:	e021      	b.n	800898e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800894a:	edd7 7a00 	vldr	s15, [r7]
 800894e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80089a4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8008952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895a:	d801      	bhi.n	8008960 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 800895c:	2304      	movs	r3, #4
 800895e:	e016      	b.n	800898e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008960:	edd7 7a00 	vldr	s15, [r7]
 8008964:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80089a8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8008968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800896c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008970:	d801      	bhi.n	8008976 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8008972:	2305      	movs	r3, #5
 8008974:	e00b      	b.n	800898e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8008976:	edd7 7a00 	vldr	s15, [r7]
 800897a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80089ac <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 800897e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008986:	d801      	bhi.n	800898c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008988:	2306      	movs	r3, #6
 800898a:	e000      	b.n	800898e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800898c:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	42480000 	.word	0x42480000
 80089a8:	42c80000 	.word	0x42c80000
 80089ac:	43480000 	.word	0x43480000

080089b0 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80089b0:	b590      	push	{r4, r7, lr}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	607a      	str	r2, [r7, #4]
 80089ba:	461a      	mov	r2, r3
 80089bc:	460b      	mov	r3, r1
 80089be:	72fb      	strb	r3, [r7, #11]
 80089c0:	4613      	mov	r3, r2
 80089c2:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10e      	bne.n	80089ee <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	695c      	ldr	r4, [r3, #20]
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	7b1b      	ldrb	r3, [r3, #12]
 80089d8:	b298      	uxth	r0, r3
 80089da:	7afb      	ldrb	r3, [r7, #11]
 80089dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	b299      	uxth	r1, r3
 80089e4:	893b      	ldrh	r3, [r7, #8]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	47a0      	blx	r4
 80089ea:	4603      	mov	r3, r0
 80089ec:	e00d      	b.n	8008a0a <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	695c      	ldr	r4, [r3, #20]
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	7b1b      	ldrb	r3, [r3, #12]
 80089f6:	b298      	uxth	r0, r3
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	b299      	uxth	r1, r3
 8008a02:	893b      	ldrh	r3, [r7, #8]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	47a0      	blx	r4
 8008a08:	4603      	mov	r3, r0
  }
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd90      	pop	{r4, r7, pc}

08008a12 <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008a12:	b590      	push	{r4, r7, lr}
 8008a14:	b087      	sub	sp, #28
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	460b      	mov	r3, r1
 8008a20:	72fb      	strb	r3, [r7, #11]
 8008a22:	4613      	mov	r3, r2
 8008a24:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10e      	bne.n	8008a50 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	691c      	ldr	r4, [r3, #16]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	7b1b      	ldrb	r3, [r3, #12]
 8008a3a:	b298      	uxth	r0, r3
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
 8008a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	b299      	uxth	r1, r3
 8008a46:	893b      	ldrh	r3, [r7, #8]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	47a0      	blx	r4
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	e00d      	b.n	8008a6c <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	691c      	ldr	r4, [r3, #16]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	7b1b      	ldrb	r3, [r3, #12]
 8008a58:	b298      	uxth	r0, r3
 8008a5a:	7afb      	ldrb	r3, [r7, #11]
 8008a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	b299      	uxth	r1, r3
 8008a64:	893b      	ldrh	r3, [r7, #8]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	47a0      	blx	r4
 8008a6a:	4603      	mov	r3, r0
  }
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	371c      	adds	r7, #28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd90      	pop	{r4, r7, pc}

08008a74 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008a74:	b590      	push	{r4, r7, lr}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	607a      	str	r2, [r7, #4]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	460b      	mov	r3, r1
 8008a82:	72fb      	strb	r3, [r7, #11]
 8008a84:	4613      	mov	r3, r2
 8008a86:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10e      	bne.n	8008ab2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	695c      	ldr	r4, [r3, #20]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	7b1b      	ldrb	r3, [r3, #12]
 8008a9c:	b298      	uxth	r0, r3
 8008a9e:	7afb      	ldrb	r3, [r7, #11]
 8008aa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	b299      	uxth	r1, r3
 8008aa8:	893b      	ldrh	r3, [r7, #8]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	47a0      	blx	r4
 8008aae:	4603      	mov	r3, r0
 8008ab0:	e00d      	b.n	8008ace <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	695c      	ldr	r4, [r3, #20]
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	7b1b      	ldrb	r3, [r3, #12]
 8008aba:	b298      	uxth	r0, r3
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	b299      	uxth	r1, r3
 8008ac6:	893b      	ldrh	r3, [r7, #8]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	47a0      	blx	r4
 8008acc:	4603      	mov	r3, r0
  }
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd90      	pop	{r4, r7, pc}

08008ad6 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008ad6:	b590      	push	{r4, r7, lr}
 8008ad8:	b087      	sub	sp, #28
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	607a      	str	r2, [r7, #4]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	72fb      	strb	r3, [r7, #11]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10e      	bne.n	8008b14 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	691c      	ldr	r4, [r3, #16]
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	7b1b      	ldrb	r3, [r3, #12]
 8008afe:	b298      	uxth	r0, r3
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	b299      	uxth	r1, r3
 8008b0a:	893b      	ldrh	r3, [r7, #8]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	47a0      	blx	r4
 8008b10:	4603      	mov	r3, r0
 8008b12:	e00d      	b.n	8008b30 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	691c      	ldr	r4, [r3, #16]
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	7b1b      	ldrb	r3, [r3, #12]
 8008b1c:	b298      	uxth	r0, r3
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
 8008b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	b299      	uxth	r1, r3
 8008b28:	893b      	ldrh	r3, [r7, #8]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	47a0      	blx	r4
 8008b2e:	4603      	mov	r3, r0
  }
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	371c      	adds	r7, #28
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd90      	pop	{r4, r7, pc}

08008b38 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8008b38:	b590      	push	{r4, r7, lr}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	607a      	str	r2, [r7, #4]
 8008b42:	461a      	mov	r2, r3
 8008b44:	460b      	mov	r3, r1
 8008b46:	72fb      	strb	r3, [r7, #11]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	685c      	ldr	r4, [r3, #4]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	68d8      	ldr	r0, [r3, #12]
 8008b54:	893b      	ldrh	r3, [r7, #8]
 8008b56:	7af9      	ldrb	r1, [r7, #11]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	47a0      	blx	r4
 8008b5c:	6178      	str	r0, [r7, #20]

  return ret;
 8008b5e:	697b      	ldr	r3, [r7, #20]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	371c      	adds	r7, #28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd90      	pop	{r4, r7, pc}

08008b68 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8008b68:	b590      	push	{r4, r7, lr}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	607a      	str	r2, [r7, #4]
 8008b72:	461a      	mov	r2, r3
 8008b74:	460b      	mov	r3, r1
 8008b76:	72fb      	strb	r3, [r7, #11]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681c      	ldr	r4, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	68d8      	ldr	r0, [r3, #12]
 8008b84:	893b      	ldrh	r3, [r7, #8]
 8008b86:	7af9      	ldrb	r1, [r7, #11]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	47a0      	blx	r4
 8008b8c:	6178      	str	r0, [r7, #20]

  return ret;
 8008b8e:	697b      	ldr	r3, [r7, #20]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	371c      	adds	r7, #28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd90      	pop	{r4, r7, pc}

08008b98 <lsm303agr_from_fs_2g_nm_to_mg>:
{
  return (((float_t)lsb / 64.0f) / 4.0f) + 25.0f;
}

float_t lsm303agr_from_fs_2g_nm_to_mg(int16_t lsb)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 64.0f) * 3.9f;
 8008ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bae:	eddf 6a07 	vldr	s13, [pc, #28]	; 8008bcc <lsm303agr_from_fs_2g_nm_to_mg+0x34>
 8008bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008bb6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8008bd0 <lsm303agr_from_fs_2g_nm_to_mg+0x38>
 8008bba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8008bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	42800000 	.word	0x42800000
 8008bd0:	4079999a 	.word	0x4079999a

08008bd4 <lsm303agr_from_lsb_to_mgauss>:
{
  return (((float_t)lsb / 256.0f) * 1.0f) + 25.0f;
}

float_t lsm303agr_from_lsb_to_mgauss(int16_t lsb)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 1.5f;
 8008bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bea:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8008bee:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8008bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8008c0a:	f107 020c 	add.w	r2, r7, #12
 8008c0e:	2301      	movs	r3, #1
 8008c10:	2120      	movs	r1, #32
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff ff90 	bl	8008b38 <lsm303agr_read_reg>
 8008c18:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d107      	bne.n	8008c30 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008c20:	f107 0210 	add.w	r2, r7, #16
 8008c24:	2301      	movs	r3, #1
 8008c26:	2123      	movs	r1, #35	; 0x23
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff ff85 	bl	8008b38 <lsm303agr_read_reg>
 8008c2e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8008c30:	7b3b      	ldrb	r3, [r7, #12]
 8008c32:	f003 0308 	and.w	r3, r3, #8
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	e00c      	b.n	8008c5e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8008c44:	7c3b      	ldrb	r3, [r7, #16]
 8008c46:	f003 0308 	and.w	r3, r3, #8
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d003      	beq.n	8008c58 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2200      	movs	r2, #0
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	e002      	b.n	8008c5e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008c5e:	697b      	ldr	r3, [r7, #20]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8008c74:	f107 0208 	add.w	r2, r7, #8
 8008c78:	2301      	movs	r3, #1
 8008c7a:	2120      	movs	r1, #32
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7ff ff5b 	bl	8008b38 <lsm303agr_read_reg>
 8008c82:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10f      	bne.n	8008caa <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8008c8a:	78fb      	ldrb	r3, [r7, #3]
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	7a3b      	ldrb	r3, [r7, #8]
 8008c94:	f362 1307 	bfi	r3, r2, #4, #4
 8008c98:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8008c9a:	f107 0208 	add.w	r2, r7, #8
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	2120      	movs	r1, #32
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff ff60 	bl	8008b68 <lsm303agr_write_reg>
 8008ca8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8008caa:	68fb      	ldr	r3, [r7, #12]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8008cbe:	f107 0208 	add.w	r2, r7, #8
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	2120      	movs	r1, #32
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff ff36 	bl	8008b38 <lsm303agr_read_reg>
 8008ccc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr)
 8008cce:	7a3b      	ldrb	r3, [r7, #8]
 8008cd0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b09      	cmp	r3, #9
 8008cd8:	d83e      	bhi.n	8008d58 <lsm303agr_xl_data_rate_get+0xa4>
 8008cda:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <lsm303agr_xl_data_rate_get+0x2c>)
 8008cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce0:	08008d09 	.word	0x08008d09
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	08008d19 	.word	0x08008d19
 8008cec:	08008d21 	.word	0x08008d21
 8008cf0:	08008d29 	.word	0x08008d29
 8008cf4:	08008d31 	.word	0x08008d31
 8008cf8:	08008d39 	.word	0x08008d39
 8008cfc:	08008d41 	.word	0x08008d41
 8008d00:	08008d49 	.word	0x08008d49
 8008d04:	08008d51 	.word	0x08008d51
  {
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	701a      	strb	r2, [r3, #0]
      break;
 8008d0e:	e027      	b.n	8008d60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2201      	movs	r2, #1
 8008d14:	701a      	strb	r2, [r3, #0]
      break;
 8008d16:	e023      	b.n	8008d60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	701a      	strb	r2, [r3, #0]
      break;
 8008d1e:	e01f      	b.n	8008d60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	2203      	movs	r2, #3
 8008d24:	701a      	strb	r2, [r3, #0]
      break;
 8008d26:	e01b      	b.n	8008d60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2204      	movs	r2, #4
 8008d2c:	701a      	strb	r2, [r3, #0]
      break;
 8008d2e:	e017      	b.n	8008d60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2205      	movs	r2, #5
 8008d34:	701a      	strb	r2, [r3, #0]
      break;
 8008d36:	e013      	b.n	8008d60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2206      	movs	r2, #6
 8008d3c:	701a      	strb	r2, [r3, #0]
      break;
 8008d3e:	e00f      	b.n	8008d60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	2207      	movs	r2, #7
 8008d44:	701a      	strb	r2, [r3, #0]
      break;
 8008d46:	e00b      	b.n	8008d60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2208      	movs	r2, #8
 8008d4c:	701a      	strb	r2, [r3, #0]
      break;
 8008d4e:	e007      	b.n	8008d60 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2209      	movs	r2, #9
 8008d54:	701a      	strb	r2, [r3, #0]
      break;
 8008d56:	e003      	b.n	8008d60 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	701a      	strb	r2, [r3, #0]
      break;
 8008d5e:	bf00      	nop
  }

  return ret;
 8008d60:	68fb      	ldr	r3, [r7, #12]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop

08008d6c <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008d78:	f107 0208 	add.w	r2, r7, #8
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	2123      	movs	r1, #35	; 0x23
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff fed9 	bl	8008b38 <lsm303agr_read_reg>
 8008d86:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10f      	bne.n	8008dae <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	f003 0303 	and.w	r3, r3, #3
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	7a3b      	ldrb	r3, [r7, #8]
 8008d98:	f362 1305 	bfi	r3, r2, #4, #2
 8008d9c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008d9e:	f107 0208 	add.w	r2, r7, #8
 8008da2:	2301      	movs	r3, #1
 8008da4:	2123      	movs	r1, #35	; 0x23
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff fede 	bl	8008b68 <lsm303agr_write_reg>
 8008dac:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8008dae:	68fb      	ldr	r3, [r7, #12]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008dc2:	f107 0208 	add.w	r2, r7, #8
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	2123      	movs	r1, #35	; 0x23
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7ff feb4 	bl	8008b38 <lsm303agr_read_reg>
 8008dd0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 8008dd2:	7a3b      	ldrb	r3, [r7, #8]
 8008dd4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d81a      	bhi.n	8008e14 <lsm303agr_xl_full_scale_get+0x5c>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <lsm303agr_xl_full_scale_get+0x2c>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008dfd 	.word	0x08008dfd
 8008dec:	08008e05 	.word	0x08008e05
 8008df0:	08008e0d 	.word	0x08008e0d
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	2200      	movs	r2, #0
 8008df8:	701a      	strb	r2, [r3, #0]
      break;
 8008dfa:	e00f      	b.n	8008e1c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	701a      	strb	r2, [r3, #0]
      break;
 8008e02:	e00b      	b.n	8008e1c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2202      	movs	r2, #2
 8008e08:	701a      	strb	r2, [r3, #0]
      break;
 8008e0a:	e007      	b.n	8008e1c <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2203      	movs	r2, #3
 8008e10:	701a      	strb	r2, [r3, #0]
      break;
 8008e12:	e003      	b.n	8008e1c <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2200      	movs	r2, #0
 8008e18:	701a      	strb	r2, [r3, #0]
      break;
 8008e1a:	bf00      	nop
  }

  return ret;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3710      	adds	r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop

08008e28 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008e34:	f107 0208 	add.w	r2, r7, #8
 8008e38:	2301      	movs	r3, #1
 8008e3a:	2123      	movs	r1, #35	; 0x23
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff fe7b 	bl	8008b38 <lsm303agr_read_reg>
 8008e42:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10f      	bne.n	8008e6a <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8008e4a:	78fb      	ldrb	r3, [r7, #3]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	7a3b      	ldrb	r3, [r7, #8]
 8008e54:	f362 13c7 	bfi	r3, r2, #7, #1
 8008e58:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8008e5a:	f107 0208 	add.w	r2, r7, #8
 8008e5e:	2301      	movs	r3, #1
 8008e60:	2123      	movs	r1, #35	; 0x23
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff fe80 	bl	8008b68 <lsm303agr_write_reg>
 8008e68:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8008e7e:	f107 020c 	add.w	r2, r7, #12
 8008e82:	2306      	movs	r3, #6
 8008e84:	2128      	movs	r1, #40	; 0x28
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff fe56 	bl	8008b38 <lsm303agr_read_reg>
 8008e8c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8008e8e:	7b7b      	ldrb	r3, [r7, #13]
 8008e90:	b21a      	sxth	r2, r3
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	021b      	lsls	r3, r3, #8
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	7b3b      	ldrb	r3, [r7, #12]
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	4413      	add	r3, r2
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	b21a      	sxth	r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008eb0:	7bfa      	ldrb	r2, [r7, #15]
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	3302      	adds	r3, #2
 8008eb6:	b212      	sxth	r2, r2
 8008eb8:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	3302      	adds	r3, #2
 8008ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	021b      	lsls	r3, r3, #8
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	4413      	add	r3, r2
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	3302      	adds	r3, #2
 8008ed4:	b212      	sxth	r2, r2
 8008ed6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008ed8:	7c7a      	ldrb	r2, [r7, #17]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	3304      	adds	r3, #4
 8008ede:	b212      	sxth	r2, r2
 8008ee0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	7c3b      	ldrb	r3, [r7, #16]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	3304      	adds	r3, #4
 8008efc:	b212      	sxth	r2, r2
 8008efe:	801a      	strh	r2, [r3, #0]

  return ret;
 8008f00:	697b      	ldr	r3, [r7, #20]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	460b      	mov	r3, r1
 8008f14:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008f16:	f107 0208 	add.w	r2, r7, #8
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	2160      	movs	r1, #96	; 0x60
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff fe0a 	bl	8008b38 <lsm303agr_read_reg>
 8008f24:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10f      	bne.n	8008f4c <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8008f2c:	78fb      	ldrb	r3, [r7, #3]
 8008f2e:	f003 0303 	and.w	r3, r3, #3
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	7a3b      	ldrb	r3, [r7, #8]
 8008f36:	f362 0301 	bfi	r3, r2, #0, #2
 8008f3a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008f3c:	f107 0208 	add.w	r2, r7, #8
 8008f40:	2301      	movs	r3, #1
 8008f42:	2160      	movs	r1, #96	; 0x60
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fe0f 	bl	8008b68 <lsm303agr_write_reg>
 8008f4a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008f62:	f107 0208 	add.w	r2, r7, #8
 8008f66:	2301      	movs	r3, #1
 8008f68:	2160      	movs	r1, #96	; 0x60
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff fde4 	bl	8008b38 <lsm303agr_read_reg>
 8008f70:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10f      	bne.n	8008f98 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	7a3b      	ldrb	r3, [r7, #8]
 8008f82:	f362 0383 	bfi	r3, r2, #2, #2
 8008f86:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008f88:	f107 0208 	add.w	r2, r7, #8
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	2160      	movs	r1, #96	; 0x60
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7ff fde9 	bl	8008b68 <lsm303agr_write_reg>
 8008f96:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8008f98:	68fb      	ldr	r3, [r7, #12]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8008fae:	f107 0208 	add.w	r2, r7, #8
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	2160      	movs	r1, #96	; 0x60
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff fdbe 	bl	8008b38 <lsm303agr_read_reg>
 8008fbc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr)
 8008fbe:	7a3b      	ldrb	r3, [r7, #8]
 8008fc0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d81a      	bhi.n	8009000 <lsm303agr_mag_data_rate_get+0x5c>
 8008fca:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <lsm303agr_mag_data_rate_get+0x2c>)
 8008fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd0:	08008fe1 	.word	0x08008fe1
 8008fd4:	08008fe9 	.word	0x08008fe9
 8008fd8:	08008ff1 	.word	0x08008ff1
 8008fdc:	08008ff9 	.word	0x08008ff9
  {
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	701a      	strb	r2, [r3, #0]
      break;
 8008fe6:	e00f      	b.n	8009008 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2201      	movs	r2, #1
 8008fec:	701a      	strb	r2, [r3, #0]
      break;
 8008fee:	e00b      	b.n	8009008 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	701a      	strb	r2, [r3, #0]
      break;
 8008ff6:	e007      	b.n	8009008 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2203      	movs	r2, #3
 8008ffc:	701a      	strb	r2, [r3, #0]
      break;
 8008ffe:	e003      	b.n	8009008 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2200      	movs	r2, #0
 8009004:	701a      	strb	r2, [r3, #0]
      break;
 8009006:	bf00      	nop
  }

  return ret;
 8009008:	68fb      	ldr	r3, [r7, #12]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop

08009014 <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8009020:	f107 0208 	add.w	r2, r7, #8
 8009024:	2301      	movs	r3, #1
 8009026:	2162      	movs	r1, #98	; 0x62
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f7ff fd85 	bl	8008b38 <lsm303agr_read_reg>
 800902e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10f      	bne.n	8009056 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8009036:	78fb      	ldrb	r3, [r7, #3]
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	b2da      	uxtb	r2, r3
 800903e:	7a3b      	ldrb	r3, [r7, #8]
 8009040:	f362 1304 	bfi	r3, r2, #4, #1
 8009044:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8009046:	f107 0208 	add.w	r2, r7, #8
 800904a:	2301      	movs	r3, #1
 800904c:	2162      	movs	r1, #98	; 0x62
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff fd8a 	bl	8008b68 <lsm303agr_write_reg>
 8009054:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8009056:	68fb      	ldr	r3, [r7, #12]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 800906a:	f107 020c 	add.w	r2, r7, #12
 800906e:	2306      	movs	r3, #6
 8009070:	2168      	movs	r1, #104	; 0x68
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff fd60 	bl	8008b38 <lsm303agr_read_reg>
 8009078:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800907a:	7b7b      	ldrb	r3, [r7, #13]
 800907c:	b21a      	sxth	r2, r3
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009088:	b29b      	uxth	r3, r3
 800908a:	021b      	lsls	r3, r3, #8
 800908c:	b29a      	uxth	r2, r3
 800908e:	7b3b      	ldrb	r3, [r7, #12]
 8009090:	b29b      	uxth	r3, r3
 8009092:	4413      	add	r3, r2
 8009094:	b29b      	uxth	r3, r3
 8009096:	b21a      	sxth	r2, r3
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800909c:	7bfa      	ldrb	r2, [r7, #15]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	3302      	adds	r3, #2
 80090a2:	b212      	sxth	r2, r2
 80090a4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	3302      	adds	r3, #2
 80090aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	021b      	lsls	r3, r3, #8
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	4413      	add	r3, r2
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	3302      	adds	r3, #2
 80090c0:	b212      	sxth	r2, r2
 80090c2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80090c4:	7c7a      	ldrb	r2, [r7, #17]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	3304      	adds	r3, #4
 80090ca:	b212      	sxth	r2, r2
 80090cc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	3304      	adds	r3, #4
 80090d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	b29a      	uxth	r2, r3
 80090dc:	7c3b      	ldrb	r3, [r7, #16]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	4413      	add	r3, r2
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	3304      	adds	r3, #4
 80090e8:	b212      	sxth	r2, r2
 80090ea:	801a      	strh	r2, [r3, #0]

  return ret;
 80090ec:	697b      	ldr	r3, [r7, #20]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8009100:	2301      	movs	r3, #1
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	210f      	movs	r1, #15
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff fd16 	bl	8008b38 <lsm303agr_read_reg>
 800910c:	60f8      	str	r0, [r7, #12]

  return ret;
 800910e:	68fb      	ldr	r3, [r7, #12]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8009122:	2301      	movs	r3, #1
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	214f      	movs	r1, #79	; 0x4f
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff fd05 	bl	8008b38 <lsm303agr_read_reg>
 800912e:	60f8      	str	r0, [r7, #12]

  return ret;
 8009130:	68fb      	ldr	r3, [r7, #12]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8009146:	f107 0208 	add.w	r2, r7, #8
 800914a:	2301      	movs	r3, #1
 800914c:	2162      	movs	r1, #98	; 0x62
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff fcf2 	bl	8008b38 <lsm303agr_read_reg>
 8009154:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10f      	bne.n	800917c <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	b2da      	uxtb	r2, r3
 8009164:	7a3b      	ldrb	r3, [r7, #8]
 8009166:	f362 0341 	bfi	r3, r2, #1, #1
 800916a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800916c:	f107 0208 	add.w	r2, r7, #8
 8009170:	2301      	movs	r3, #1
 8009172:	2162      	movs	r1, #98	; 0x62
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff fcf7 	bl	8008b68 <lsm303agr_write_reg>
 800917a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800917c:	68fb      	ldr	r3, [r7, #12]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8009192:	f107 0208 	add.w	r2, r7, #8
 8009196:	2301      	movs	r3, #1
 8009198:	212e      	movs	r1, #46	; 0x2e
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff fccc 	bl	8008b38 <lsm303agr_read_reg>
 80091a0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10f      	bne.n	80091c8 <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	7a3b      	ldrb	r3, [r7, #8]
 80091b2:	f362 1387 	bfi	r3, r2, #6, #2
 80091b6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80091b8:	f107 0208 	add.w	r2, r7, #8
 80091bc:	2301      	movs	r3, #1
 80091be:	212e      	movs	r1, #46	; 0x2e
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff fcd1 	bl	8008b68 <lsm303agr_write_reg>
 80091c6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80091c8:	68fb      	ldr	r3, [r7, #12]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	460b      	mov	r3, r1
 80091dc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80091de:	f107 0208 	add.w	r2, r7, #8
 80091e2:	2301      	movs	r3, #1
 80091e4:	2162      	movs	r1, #98	; 0x62
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f7ff fca6 	bl	8008b38 <lsm303agr_read_reg>
 80091ec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10f      	bne.n	8009214 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	b2da      	uxtb	r2, r3
 80091fc:	7a3b      	ldrb	r3, [r7, #8]
 80091fe:	f362 1345 	bfi	r3, r2, #5, #1
 8009202:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8009204:	f107 0208 	add.w	r2, r7, #8
 8009208:	2301      	movs	r3, #1
 800920a:	2162      	movs	r1, #98	; 0x62
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff fcab 	bl	8008b68 <lsm303agr_write_reg>
 8009212:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8009214:	68fb      	ldr	r3, [r7, #12]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d103      	bne.n	800923c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8009234:	f04f 33ff 	mov.w	r3, #4294967295
 8009238:	60fb      	str	r3, [r7, #12]
 800923a:	e051      	b.n	80092e0 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	7b1a      	ldrb	r2, [r3, #12]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	691a      	ldr	r2, [r3, #16]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	695a      	ldr	r2, [r3, #20]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	699a      	ldr	r2, [r3, #24]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a1d      	ldr	r2, [pc, #116]	; (80092ec <LSM6DSL_RegisterBusIO+0xcc>)
 8009278:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a1c      	ldr	r2, [pc, #112]	; (80092f0 <LSM6DSL_RegisterBusIO+0xd0>)
 800927e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	69da      	ldr	r2, [r3, #28]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d103      	bne.n	800929e <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8009296:	f04f 33ff 	mov.w	r3, #4294967295
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	e020      	b.n	80092e0 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4798      	blx	r3
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 80092aa:	f04f 33ff 	mov.w	r3, #4294967295
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	e016      	b.n	80092e0 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d112      	bne.n	80092e0 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d10d      	bne.n	80092e0 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80092c4:	230c      	movs	r3, #12
 80092c6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80092c8:	7afb      	ldrb	r3, [r7, #11]
 80092ca:	461a      	mov	r2, r3
 80092cc:	2112      	movs	r1, #18
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fd2d 	bl	8009d2e <LSM6DSL_Write_Reg>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 80092da:	f04f 33ff 	mov.w	r3, #4294967295
 80092de:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80092e0:	68fb      	ldr	r3, [r7, #12]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	0800a19d 	.word	0x0800a19d
 80092f0:	0800a1d3 	.word	0x0800a1d3

080092f4 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3320      	adds	r3, #32
 8009300:	2101      	movs	r1, #1
 8009302:	4618      	mov	r0, r3
 8009304:	f001 fa89 	bl	800a81a <lsm6dsl_auto_increment_set>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800930e:	f04f 33ff 	mov.w	r3, #4294967295
 8009312:	e054      	b.n	80093be <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	3320      	adds	r3, #32
 8009318:	2101      	movs	r1, #1
 800931a:	4618      	mov	r0, r3
 800931c:	f001 f9b0 	bl	800a680 <lsm6dsl_block_data_update_set>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8009326:	f04f 33ff 	mov.w	r3, #4294967295
 800932a:	e048      	b.n	80093be <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3320      	adds	r3, #32
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f001 fa97 	bl	800a866 <lsm6dsl_fifo_mode_set>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800933e:	f04f 33ff 	mov.w	r3, #4294967295
 8009342:	e03c      	b.n	80093be <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2204      	movs	r2, #4
 8009348:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3320      	adds	r3, #32
 8009350:	2100      	movs	r1, #0
 8009352:	4618      	mov	r0, r3
 8009354:	f001 f816 	bl	800a384 <lsm6dsl_xl_data_rate_set>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800935e:	f04f 33ff 	mov.w	r3, #4294967295
 8009362:	e02c      	b.n	80093be <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	3320      	adds	r3, #32
 8009368:	2100      	movs	r1, #0
 800936a:	4618      	mov	r0, r3
 800936c:	f000 ffac 	bl	800a2c8 <lsm6dsl_xl_full_scale_set>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8009376:	f04f 33ff 	mov.w	r3, #4294967295
 800937a:	e020      	b.n	80093be <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2204      	movs	r2, #4
 8009380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3320      	adds	r3, #32
 8009388:	2100      	movs	r1, #0
 800938a:	4618      	mov	r0, r3
 800938c:	f001 f8f0 	bl	800a570 <lsm6dsl_gy_data_rate_set>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8009396:	f04f 33ff 	mov.w	r3, #4294967295
 800939a:	e010      	b.n	80093be <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	3320      	adds	r3, #32
 80093a0:	2106      	movs	r1, #6
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 f87c 	bl	800a4a0 <lsm6dsl_gy_full_scale_set>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80093ae:	f04f 33ff 	mov.w	r3, #4294967295
 80093b2:	e004      	b.n	80093be <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <LSM6DSL_DeInit>:
  * @brief  Deinitialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b082      	sub	sp, #8
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f888 	bl	80094e4 <LSM6DSL_ACC_Disable>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80093da:	f04f 33ff 	mov.w	r3, #4294967295
 80093de:	e015      	b.n	800940c <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fa9a 	bl	800991a <LSM6DSL_GYRO_Disable>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80093ec:	f04f 33ff 	mov.w	r3, #4294967295
 80093f0:	e00c      	b.n	800940c <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  pObj->is_initialized = 0;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3320      	adds	r3, #32
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	4618      	mov	r0, r3
 8009426:	f001 f9e7 	bl	800a7f8 <lsm6dsl_device_id_get>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8009430:	f04f 33ff 	mov.w	r3, #4294967295
 8009434:	e000      	b.n	8009438 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <LSM6DSL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSL sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2201      	movs	r2, #1
 800944e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2201      	movs	r2, #1
 8009454:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2200      	movs	r2, #0
 800945a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2200      	movs	r2, #0
 8009460:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009468:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2210      	movs	r2, #16
 800946e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2200      	movs	r2, #0
 8009474:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	4a07      	ldr	r2, [pc, #28]	; (8009498 <LSM6DSL_GetCapabilities+0x58>)
 800947a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	4a06      	ldr	r2, [pc, #24]	; (8009498 <LSM6DSL_GetCapabilities+0x58>)
 8009480:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	f04f 0200 	mov.w	r2, #0
 8009488:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	45d02000 	.word	0x45d02000

0800949c <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	e014      	b.n	80094dc <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f103 0220 	add.w	r2, r3, #32
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80094be:	4619      	mov	r1, r3
 80094c0:	4610      	mov	r0, r2
 80094c2:	f000 ff5f 	bl	800a384 <lsm6dsl_xl_data_rate_set>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80094cc:	f04f 33ff 	mov.w	r3, #4294967295
 80094d0:	e004      	b.n	80094dc <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <LSM6DSL_ACC_Disable>:
  * @brief  Disable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	e01f      	b.n	800953a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f103 0220 	add.w	r2, r3, #32
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3333      	adds	r3, #51	; 0x33
 8009504:	4619      	mov	r1, r3
 8009506:	4610      	mov	r0, r2
 8009508:	f000 ff62 	bl	800a3d0 <lsm6dsl_xl_data_rate_get>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8009512:	f04f 33ff 	mov.w	r3, #4294967295
 8009516:	e010      	b.n	800953a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3320      	adds	r3, #32
 800951c:	2100      	movs	r1, #0
 800951e:	4618      	mov	r0, r3
 8009520:	f000 ff30 	bl	800a384 <lsm6dsl_xl_data_rate_set>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800952a:	f04f 33ff 	mov.w	r3, #4294967295
 800952e:	e004      	b.n	800953a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3708      	adds	r7, #8
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3320      	adds	r3, #32
 8009556:	f107 020b 	add.w	r2, r7, #11
 800955a:	4611      	mov	r1, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fed9 	bl	800a314 <lsm6dsl_xl_full_scale_get>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8009568:	f04f 33ff 	mov.w	r3, #4294967295
 800956c:	e023      	b.n	80095b6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800956e:	7afb      	ldrb	r3, [r7, #11]
 8009570:	2b03      	cmp	r3, #3
 8009572:	d81b      	bhi.n	80095ac <LSM6DSL_ACC_GetSensitivity+0x68>
 8009574:	a201      	add	r2, pc, #4	; (adr r2, 800957c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8009576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957a:	bf00      	nop
 800957c:	0800958d 	.word	0x0800958d
 8009580:	080095a5 	.word	0x080095a5
 8009584:	08009595 	.word	0x08009595
 8009588:	0800959d 	.word	0x0800959d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	4a0c      	ldr	r2, [pc, #48]	; (80095c0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8009590:	601a      	str	r2, [r3, #0]
      break;
 8009592:	e00f      	b.n	80095b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	4a0b      	ldr	r2, [pc, #44]	; (80095c4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8009598:	601a      	str	r2, [r3, #0]
      break;
 800959a:	e00b      	b.n	80095b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	4a0a      	ldr	r2, [pc, #40]	; (80095c8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 80095a0:	601a      	str	r2, [r3, #0]
      break;
 80095a2:	e007      	b.n	80095b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	4a09      	ldr	r2, [pc, #36]	; (80095cc <LSM6DSL_ACC_GetSensitivity+0x88>)
 80095a8:	601a      	str	r2, [r3, #0]
      break;
 80095aa:	e003      	b.n	80095b4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80095ac:	f04f 33ff 	mov.w	r3, #4294967295
 80095b0:	60fb      	str	r3, [r7, #12]
      break;
 80095b2:	bf00      	nop
  }

  return ret;
 80095b4:	68fb      	ldr	r3, [r7, #12]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	3d79db23 	.word	0x3d79db23
 80095c4:	3df9db23 	.word	0x3df9db23
 80095c8:	3e79db23 	.word	0x3e79db23
 80095cc:	3ef9db23 	.word	0x3ef9db23

080095d0 <LSM6DSL_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3320      	adds	r3, #32
 80095e2:	f107 020b 	add.w	r2, r7, #11
 80095e6:	4611      	mov	r1, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fef1 	bl	800a3d0 <lsm6dsl_xl_data_rate_get>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80095f4:	f04f 33ff 	mov.w	r3, #4294967295
 80095f8:	e054      	b.n	80096a4 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80095fa:	7afb      	ldrb	r3, [r7, #11]
 80095fc:	2b0b      	cmp	r3, #11
 80095fe:	d84c      	bhi.n	800969a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8009600:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8009602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009606:	bf00      	nop
 8009608:	08009639 	.word	0x08009639
 800960c:	0800964b 	.word	0x0800964b
 8009610:	08009653 	.word	0x08009653
 8009614:	0800965b 	.word	0x0800965b
 8009618:	08009663 	.word	0x08009663
 800961c:	0800966b 	.word	0x0800966b
 8009620:	08009673 	.word	0x08009673
 8009624:	0800967b 	.word	0x0800967b
 8009628:	08009683 	.word	0x08009683
 800962c:	0800968b 	.word	0x0800968b
 8009630:	08009693 	.word	0x08009693
 8009634:	08009643 	.word	0x08009643
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	f04f 0200 	mov.w	r2, #0
 800963e:	601a      	str	r2, [r3, #0]
      break;
 8009640:	e02f      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	4a19      	ldr	r2, [pc, #100]	; (80096ac <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8009646:	601a      	str	r2, [r3, #0]
      break;
 8009648:	e02b      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	4a18      	ldr	r2, [pc, #96]	; (80096b0 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 800964e:	601a      	str	r2, [r3, #0]
      break;
 8009650:	e027      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	4a17      	ldr	r2, [pc, #92]	; (80096b4 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8009656:	601a      	str	r2, [r3, #0]
      break;
 8009658:	e023      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	4a16      	ldr	r2, [pc, #88]	; (80096b8 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800965e:	601a      	str	r2, [r3, #0]
      break;
 8009660:	e01f      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	4a15      	ldr	r2, [pc, #84]	; (80096bc <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8009666:	601a      	str	r2, [r3, #0]
      break;
 8009668:	e01b      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	4a14      	ldr	r2, [pc, #80]	; (80096c0 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800966e:	601a      	str	r2, [r3, #0]
      break;
 8009670:	e017      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	4a13      	ldr	r2, [pc, #76]	; (80096c4 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8009676:	601a      	str	r2, [r3, #0]
      break;
 8009678:	e013      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	4a12      	ldr	r2, [pc, #72]	; (80096c8 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800967e:	601a      	str	r2, [r3, #0]
      break;
 8009680:	e00f      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	4a11      	ldr	r2, [pc, #68]	; (80096cc <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8009686:	601a      	str	r2, [r3, #0]
      break;
 8009688:	e00b      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	4a10      	ldr	r2, [pc, #64]	; (80096d0 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800968e:	601a      	str	r2, [r3, #0]
      break;
 8009690:	e007      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	4a0f      	ldr	r2, [pc, #60]	; (80096d4 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8009696:	601a      	str	r2, [r3, #0]
      break;
 8009698:	e003      	b.n	80096a2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800969a:	f04f 33ff 	mov.w	r3, #4294967295
 800969e:	60fb      	str	r3, [r7, #12]
      break;
 80096a0:	bf00      	nop
  }

  return ret;
 80096a2:	68fb      	ldr	r3, [r7, #12]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	3fcccccd 	.word	0x3fcccccd
 80096b0:	41480000 	.word	0x41480000
 80096b4:	41d00000 	.word	0x41d00000
 80096b8:	42500000 	.word	0x42500000
 80096bc:	42d00000 	.word	0x42d00000
 80096c0:	43500000 	.word	0x43500000
 80096c4:	43d00000 	.word	0x43d00000
 80096c8:	44504000 	.word	0x44504000
 80096cc:	44cf8000 	.word	0x44cf8000
 80096d0:	45502000 	.word	0x45502000
 80096d4:	45d02000 	.word	0x45d02000

080096d8 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d106      	bne.n	80096fc <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80096ee:	ed97 0a00 	vldr	s0, [r7]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fb36 	bl	8009d64 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80096f8:	4603      	mov	r3, r0
 80096fa:	e005      	b.n	8009708 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80096fc:	ed97 0a00 	vldr	s0, [r7]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fbbb 	bl	8009e7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8009706:	4603      	mov	r3, r0
  }
}
 8009708:	4618      	mov	r0, r3
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <LSM6DSL_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	3320      	adds	r3, #32
 8009722:	f107 020b 	add.w	r2, r7, #11
 8009726:	4611      	mov	r1, r2
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fdf3 	bl	800a314 <lsm6dsl_xl_full_scale_get>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d002      	beq.n	800973a <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8009734:	f04f 33ff 	mov.w	r3, #4294967295
 8009738:	e023      	b.n	8009782 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800973a:	7afb      	ldrb	r3, [r7, #11]
 800973c:	2b03      	cmp	r3, #3
 800973e:	d81b      	bhi.n	8009778 <LSM6DSL_ACC_GetFullScale+0x68>
 8009740:	a201      	add	r2, pc, #4	; (adr r2, 8009748 <LSM6DSL_ACC_GetFullScale+0x38>)
 8009742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009746:	bf00      	nop
 8009748:	08009759 	.word	0x08009759
 800974c:	08009771 	.word	0x08009771
 8009750:	08009761 	.word	0x08009761
 8009754:	08009769 	.word	0x08009769
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2202      	movs	r2, #2
 800975c:	601a      	str	r2, [r3, #0]
      break;
 800975e:	e00f      	b.n	8009780 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2204      	movs	r2, #4
 8009764:	601a      	str	r2, [r3, #0]
      break;
 8009766:	e00b      	b.n	8009780 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2208      	movs	r2, #8
 800976c:	601a      	str	r2, [r3, #0]
      break;
 800976e:	e007      	b.n	8009780 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2210      	movs	r2, #16
 8009774:	601a      	str	r2, [r3, #0]
      break;
 8009776:	e003      	b.n	8009780 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8009778:	f04f 33ff 	mov.w	r3, #4294967295
 800977c:	60fb      	str	r3, [r7, #12]
      break;
 800977e:	bf00      	nop
  }

  return ret;
 8009780:	68fb      	ldr	r3, [r7, #12]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop

0800978c <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b02      	cmp	r3, #2
 800979a:	dd0b      	ble.n	80097b4 <LSM6DSL_ACC_SetFullScale+0x28>
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2b04      	cmp	r3, #4
 80097a0:	dd06      	ble.n	80097b0 <LSM6DSL_ACC_SetFullScale+0x24>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b08      	cmp	r3, #8
 80097a6:	dc01      	bgt.n	80097ac <LSM6DSL_ACC_SetFullScale+0x20>
 80097a8:	2303      	movs	r3, #3
 80097aa:	e004      	b.n	80097b6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80097ac:	2301      	movs	r3, #1
 80097ae:	e002      	b.n	80097b6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80097b0:	2302      	movs	r3, #2
 80097b2:	e000      	b.n	80097b6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80097b4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80097b6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3320      	adds	r3, #32
 80097bc:	7bfa      	ldrb	r2, [r7, #15]
 80097be:	4611      	mov	r1, r2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fd81 	bl	800a2c8 <lsm6dsl_xl_full_scale_set>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80097cc:	f04f 33ff 	mov.w	r3, #4294967295
 80097d0:	e000      	b.n	80097d4 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3320      	adds	r3, #32
 80097ea:	f107 0208 	add.w	r2, r7, #8
 80097ee:	4611      	mov	r1, r2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 ffb6 	bl	800a762 <lsm6dsl_acceleration_raw_get>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80097fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009800:	e00c      	b.n	800981c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8009802:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800980a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8009812:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800982e:	f04f 0300 	mov.w	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3320      	adds	r3, #32
 8009838:	f107 0210 	add.w	r2, r7, #16
 800983c:	4611      	mov	r1, r2
 800983e:	4618      	mov	r0, r3
 8009840:	f000 ff8f 	bl	800a762 <lsm6dsl_acceleration_raw_get>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d002      	beq.n	8009850 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800984a:	f04f 33ff 	mov.w	r3, #4294967295
 800984e:	e03c      	b.n	80098ca <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8009850:	f107 030c 	add.w	r3, r7, #12
 8009854:	4619      	mov	r1, r3
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff fe74 	bl	8009544 <LSM6DSL_ACC_GetSensitivity>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d002      	beq.n	8009868 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8009862:	f04f 33ff 	mov.w	r3, #4294967295
 8009866:	e030      	b.n	80098ca <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8009868:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800986c:	ee07 3a90 	vmov	s15, r3
 8009870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009874:	edd7 7a03 	vldr	s15, [r7, #12]
 8009878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800987c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009880:	ee17 2a90 	vmov	r2, s15
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8009888:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009894:	edd7 7a03 	vldr	s15, [r7, #12]
 8009898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800989c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098a0:	ee17 2a90 	vmov	r2, s15
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80098a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80098ac:	ee07 3a90 	vmov	s15, r3
 80098b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80098b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098c0:	ee17 2a90 	vmov	r2, s15
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b082      	sub	sp, #8
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d101      	bne.n	80098e8 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e014      	b.n	8009912 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f103 0220 	add.w	r2, r3, #32
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f000 fe3a 	bl	800a570 <lsm6dsl_gy_data_rate_set>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8009902:	f04f 33ff 	mov.w	r3, #4294967295
 8009906:	e004      	b.n	8009912 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <LSM6DSL_GYRO_Disable>:
  * @brief  Disable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	e01f      	b.n	8009970 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f103 0220 	add.w	r2, r3, #32
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3334      	adds	r3, #52	; 0x34
 800993a:	4619      	mov	r1, r3
 800993c:	4610      	mov	r0, r2
 800993e:	f000 fe3d 	bl	800a5bc <lsm6dsl_gy_data_rate_get>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8009948:	f04f 33ff 	mov.w	r3, #4294967295
 800994c:	e010      	b.n	8009970 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3320      	adds	r3, #32
 8009952:	2100      	movs	r1, #0
 8009954:	4618      	mov	r0, r3
 8009956:	f000 fe0b 	bl	800a570 <lsm6dsl_gy_data_rate_set>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8009960:	f04f 33ff 	mov.w	r3, #4294967295
 8009964:	e004      	b.n	8009970 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3320      	adds	r3, #32
 800998a:	f107 020b 	add.w	r2, r7, #11
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fdab 	bl	800a4ec <lsm6dsl_gy_full_scale_get>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d002      	beq.n	80099a2 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800999c:	f04f 33ff 	mov.w	r3, #4294967295
 80099a0:	e02d      	b.n	80099fe <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80099a2:	7afb      	ldrb	r3, [r7, #11]
 80099a4:	2b06      	cmp	r3, #6
 80099a6:	d825      	bhi.n	80099f4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80099a8:	a201      	add	r2, pc, #4	; (adr r2, 80099b0 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80099aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ae:	bf00      	nop
 80099b0:	080099d5 	.word	0x080099d5
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	080099dd 	.word	0x080099dd
 80099bc:	080099f5 	.word	0x080099f5
 80099c0:	080099e5 	.word	0x080099e5
 80099c4:	080099f5 	.word	0x080099f5
 80099c8:	080099ed 	.word	0x080099ed
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	4a0e      	ldr	r2, [pc, #56]	; (8009a08 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80099d0:	601a      	str	r2, [r3, #0]
      break;
 80099d2:	e013      	b.n	80099fc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	4a0d      	ldr	r2, [pc, #52]	; (8009a0c <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80099d8:	601a      	str	r2, [r3, #0]
      break;
 80099da:	e00f      	b.n	80099fc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	4a0c      	ldr	r2, [pc, #48]	; (8009a10 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80099e0:	601a      	str	r2, [r3, #0]
      break;
 80099e2:	e00b      	b.n	80099fc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	4a0b      	ldr	r2, [pc, #44]	; (8009a14 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80099e8:	601a      	str	r2, [r3, #0]
      break;
 80099ea:	e007      	b.n	80099fc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	4a0a      	ldr	r2, [pc, #40]	; (8009a18 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80099f0:	601a      	str	r2, [r3, #0]
      break;
 80099f2:	e003      	b.n	80099fc <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80099f4:	f04f 33ff 	mov.w	r3, #4294967295
 80099f8:	60fb      	str	r3, [r7, #12]
      break;
 80099fa:	bf00      	nop
  }

  return ret;
 80099fc:	68fb      	ldr	r3, [r7, #12]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	408c0000 	.word	0x408c0000
 8009a0c:	410c0000 	.word	0x410c0000
 8009a10:	418c0000 	.word	0x418c0000
 8009a14:	420c0000 	.word	0x420c0000
 8009a18:	428c0000 	.word	0x428c0000

08009a1c <LSM6DSL_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3320      	adds	r3, #32
 8009a2e:	f107 020b 	add.w	r2, r7, #11
 8009a32:	4611      	mov	r1, r2
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 fdc1 	bl	800a5bc <lsm6dsl_gy_data_rate_get>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8009a40:	f04f 33ff 	mov.w	r3, #4294967295
 8009a44:	e04e      	b.n	8009ae4 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8009a46:	7afb      	ldrb	r3, [r7, #11]
 8009a48:	2b0a      	cmp	r3, #10
 8009a4a:	d846      	bhi.n	8009ada <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 8009a4c:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 8009a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a52:	bf00      	nop
 8009a54:	08009a81 	.word	0x08009a81
 8009a58:	08009a8b 	.word	0x08009a8b
 8009a5c:	08009a93 	.word	0x08009a93
 8009a60:	08009a9b 	.word	0x08009a9b
 8009a64:	08009aa3 	.word	0x08009aa3
 8009a68:	08009aab 	.word	0x08009aab
 8009a6c:	08009ab3 	.word	0x08009ab3
 8009a70:	08009abb 	.word	0x08009abb
 8009a74:	08009ac3 	.word	0x08009ac3
 8009a78:	08009acb 	.word	0x08009acb
 8009a7c:	08009ad3 	.word	0x08009ad3
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	f04f 0200 	mov.w	r2, #0
 8009a86:	601a      	str	r2, [r3, #0]
      break;
 8009a88:	e02b      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	4a17      	ldr	r2, [pc, #92]	; (8009aec <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 8009a8e:	601a      	str	r2, [r3, #0]
      break;
 8009a90:	e027      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	4a16      	ldr	r2, [pc, #88]	; (8009af0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8009a96:	601a      	str	r2, [r3, #0]
      break;
 8009a98:	e023      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	4a15      	ldr	r2, [pc, #84]	; (8009af4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 8009a9e:	601a      	str	r2, [r3, #0]
      break;
 8009aa0:	e01f      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	4a14      	ldr	r2, [pc, #80]	; (8009af8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8009aa6:	601a      	str	r2, [r3, #0]
      break;
 8009aa8:	e01b      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	4a13      	ldr	r2, [pc, #76]	; (8009afc <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 8009aae:	601a      	str	r2, [r3, #0]
      break;
 8009ab0:	e017      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	4a12      	ldr	r2, [pc, #72]	; (8009b00 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8009ab6:	601a      	str	r2, [r3, #0]
      break;
 8009ab8:	e013      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	4a11      	ldr	r2, [pc, #68]	; (8009b04 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 8009abe:	601a      	str	r2, [r3, #0]
      break;
 8009ac0:	e00f      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	4a10      	ldr	r2, [pc, #64]	; (8009b08 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 8009ac6:	601a      	str	r2, [r3, #0]
      break;
 8009ac8:	e00b      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	4a0f      	ldr	r2, [pc, #60]	; (8009b0c <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 8009ace:	601a      	str	r2, [r3, #0]
      break;
 8009ad0:	e007      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	4a0e      	ldr	r2, [pc, #56]	; (8009b10 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8009ad6:	601a      	str	r2, [r3, #0]
      break;
 8009ad8:	e003      	b.n	8009ae2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 8009ada:	f04f 33ff 	mov.w	r3, #4294967295
 8009ade:	60fb      	str	r3, [r7, #12]
      break;
 8009ae0:	bf00      	nop
  }

  return ret;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}
 8009aec:	41480000 	.word	0x41480000
 8009af0:	41d00000 	.word	0x41d00000
 8009af4:	42500000 	.word	0x42500000
 8009af8:	42d00000 	.word	0x42d00000
 8009afc:	43500000 	.word	0x43500000
 8009b00:	43d00000 	.word	0x43d00000
 8009b04:	44504000 	.word	0x44504000
 8009b08:	44cf8000 	.word	0x44cf8000
 8009b0c:	45502000 	.word	0x45502000
 8009b10:	45d02000 	.word	0x45d02000

08009b14 <LSM6DSL_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d106      	bne.n	8009b38 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8009b2a:	ed97 0a00 	vldr	s0, [r7]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa26 	bl	8009f80 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8009b34:	4603      	mov	r3, r0
 8009b36:	e005      	b.n	8009b44 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8009b38:	ed97 0a00 	vldr	s0, [r7]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 faab 	bl	800a098 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8009b42:	4603      	mov	r3, r0
  }
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <LSM6DSL_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	3320      	adds	r3, #32
 8009b5e:	f107 020b 	add.w	r2, r7, #11
 8009b62:	4611      	mov	r1, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 fcc1 	bl	800a4ec <lsm6dsl_gy_full_scale_get>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8009b70:	f04f 33ff 	mov.w	r3, #4294967295
 8009b74:	e030      	b.n	8009bd8 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8009b76:	7afb      	ldrb	r3, [r7, #11]
 8009b78:	2b06      	cmp	r3, #6
 8009b7a:	d828      	bhi.n	8009bce <LSM6DSL_GYRO_GetFullScale+0x82>
 8009b7c:	a201      	add	r2, pc, #4	; (adr r2, 8009b84 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8009b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b82:	bf00      	nop
 8009b84:	08009ba9 	.word	0x08009ba9
 8009b88:	08009ba1 	.word	0x08009ba1
 8009b8c:	08009bb1 	.word	0x08009bb1
 8009b90:	08009bcf 	.word	0x08009bcf
 8009b94:	08009bbb 	.word	0x08009bbb
 8009b98:	08009bcf 	.word	0x08009bcf
 8009b9c:	08009bc5 	.word	0x08009bc5
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	227d      	movs	r2, #125	; 0x7d
 8009ba4:	601a      	str	r2, [r3, #0]
      break;
 8009ba6:	e016      	b.n	8009bd6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	22fa      	movs	r2, #250	; 0xfa
 8009bac:	601a      	str	r2, [r3, #0]
      break;
 8009bae:	e012      	b.n	8009bd6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009bb6:	601a      	str	r2, [r3, #0]
      break;
 8009bb8:	e00d      	b.n	8009bd6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009bc0:	601a      	str	r2, [r3, #0]
      break;
 8009bc2:	e008      	b.n	8009bd6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009bca:	601a      	str	r2, [r3, #0]
      break;
 8009bcc:	e003      	b.n	8009bd6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8009bce:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd2:	60fb      	str	r3, [r7, #12]
      break;
 8009bd4:	bf00      	nop
  }

  return ret;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <LSM6DSL_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b7d      	cmp	r3, #125	; 0x7d
 8009bee:	dd12      	ble.n	8009c16 <LSM6DSL_GYRO_SetFullScale+0x36>
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2bfa      	cmp	r3, #250	; 0xfa
 8009bf4:	dd0d      	ble.n	8009c12 <LSM6DSL_GYRO_SetFullScale+0x32>
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009bfc:	dd07      	ble.n	8009c0e <LSM6DSL_GYRO_SetFullScale+0x2e>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c04:	dc01      	bgt.n	8009c0a <LSM6DSL_GYRO_SetFullScale+0x2a>
 8009c06:	2304      	movs	r3, #4
 8009c08:	e006      	b.n	8009c18 <LSM6DSL_GYRO_SetFullScale+0x38>
 8009c0a:	2306      	movs	r3, #6
 8009c0c:	e004      	b.n	8009c18 <LSM6DSL_GYRO_SetFullScale+0x38>
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e002      	b.n	8009c18 <LSM6DSL_GYRO_SetFullScale+0x38>
 8009c12:	2300      	movs	r3, #0
 8009c14:	e000      	b.n	8009c18 <LSM6DSL_GYRO_SetFullScale+0x38>
 8009c16:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8009c18:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3320      	adds	r3, #32
 8009c1e:	7bfa      	ldrb	r2, [r7, #15]
 8009c20:	4611      	mov	r1, r2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 fc3c 	bl	800a4a0 <lsm6dsl_gy_full_scale_set>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8009c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c32:	e000      	b.n	8009c36 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <LSM6DSL_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3320      	adds	r3, #32
 8009c4c:	f107 0208 	add.w	r2, r7, #8
 8009c50:	4611      	mov	r1, r2
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fd3a 	bl	800a6cc <lsm6dsl_angular_rate_raw_get>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8009c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c62:	e00c      	b.n	8009c7e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8009c64:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8009c6c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8009c74:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b086      	sub	sp, #24
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3320      	adds	r3, #32
 8009c94:	f107 0210 	add.w	r2, r7, #16
 8009c98:	4611      	mov	r1, r2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fd16 	bl	800a6cc <lsm6dsl_angular_rate_raw_get>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8009caa:	e03c      	b.n	8009d26 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8009cac:	f107 030c 	add.w	r3, r7, #12
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f7ff fe60 	bl	8009978 <LSM6DSL_GYRO_GetSensitivity>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8009cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc2:	e030      	b.n	8009d26 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8009cc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009cc8:	ee07 3a90 	vmov	s15, r3
 8009ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8009cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cdc:	ee17 2a90 	vmov	r2, s15
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8009ce4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ce8:	ee07 3a90 	vmov	s15, r3
 8009cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009cf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8009cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cfc:	ee17 2a90 	vmov	r2, s15
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8009d04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009d08:	ee07 3a90 	vmov	s15, r3
 8009d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d10:	edd7 7a03 	vldr	s15, [r7, #12]
 8009d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d1c:	ee17 2a90 	vmov	r2, s15
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3718      	adds	r7, #24
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	460b      	mov	r3, r1
 8009d38:	70fb      	strb	r3, [r7, #3]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f103 0020 	add.w	r0, r3, #32
 8009d44:	1cba      	adds	r2, r7, #2
 8009d46:	78f9      	ldrb	r1, [r7, #3]
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f000 fa75 	bl	800a238 <lsm6dsl_write_reg>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8009d54:	f04f 33ff 	mov.w	r3, #4294967295
 8009d58:	e000      	b.n	8009d5c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8009d70:	edd7 7a00 	vldr	s15, [r7]
 8009d74:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d80:	d801      	bhi.n	8009d86 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8009d82:	2301      	movs	r3, #1
 8009d84:	e058      	b.n	8009e38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009d86:	edd7 7a00 	vldr	s15, [r7]
 8009d8a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d96:	d801      	bhi.n	8009d9c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e04d      	b.n	8009e38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009d9c:	edd7 7a00 	vldr	s15, [r7]
 8009da0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009e60 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8009da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dac:	d801      	bhi.n	8009db2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8009dae:	2303      	movs	r3, #3
 8009db0:	e042      	b.n	8009e38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009db2:	edd7 7a00 	vldr	s15, [r7]
 8009db6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009e64 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc2:	d801      	bhi.n	8009dc8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8009dc4:	2304      	movs	r3, #4
 8009dc6:	e037      	b.n	8009e38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009dc8:	edd7 7a00 	vldr	s15, [r7]
 8009dcc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009e68 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8009dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd8:	d801      	bhi.n	8009dde <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8009dda:	2305      	movs	r3, #5
 8009ddc:	e02c      	b.n	8009e38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009dde:	edd7 7a00 	vldr	s15, [r7]
 8009de2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009e6c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8009de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dee:	d801      	bhi.n	8009df4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8009df0:	2306      	movs	r3, #6
 8009df2:	e021      	b.n	8009e38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009df4:	edd7 7a00 	vldr	s15, [r7]
 8009df8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009e70 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8009dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e04:	d801      	bhi.n	8009e0a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8009e06:	2307      	movs	r3, #7
 8009e08:	e016      	b.n	8009e38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009e0a:	edd7 7a00 	vldr	s15, [r7]
 8009e0e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8009e74 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8009e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e1a:	d801      	bhi.n	8009e20 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8009e1c:	2308      	movs	r3, #8
 8009e1e:	e00b      	b.n	8009e38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009e20:	edd7 7a00 	vldr	s15, [r7]
 8009e24:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009e78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8009e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e30:	d801      	bhi.n	8009e36 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8009e32:	2309      	movs	r3, #9
 8009e34:	e000      	b.n	8009e38 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8009e36:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8009e38:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	3320      	adds	r3, #32
 8009e3e:	7bfa      	ldrb	r2, [r7, #15]
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 fa9e 	bl	800a384 <lsm6dsl_xl_data_rate_set>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d002      	beq.n	8009e54 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8009e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e52:	e000      	b.n	8009e56 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	42500000 	.word	0x42500000
 8009e64:	42d00000 	.word	0x42d00000
 8009e68:	43500000 	.word	0x43500000
 8009e6c:	43d00000 	.word	0x43d00000
 8009e70:	44504000 	.word	0x44504000
 8009e74:	44cf8000 	.word	0x44cf8000
 8009e78:	45502000 	.word	0x45502000

08009e7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8009e88:	edd7 7a00 	vldr	s15, [r7]
 8009e8c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e98:	d801      	bhi.n	8009e9e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e058      	b.n	8009f50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009e9e:	edd7 7a00 	vldr	s15, [r7]
 8009ea2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eae:	d801      	bhi.n	8009eb4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	e04d      	b.n	8009f50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009eb4:	edd7 7a00 	vldr	s15, [r7]
 8009eb8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8009f64 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec4:	d801      	bhi.n	8009eca <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	e042      	b.n	8009f50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009eca:	edd7 7a00 	vldr	s15, [r7]
 8009ece:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009f68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8009ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eda:	d801      	bhi.n	8009ee0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8009edc:	2304      	movs	r3, #4
 8009ede:	e037      	b.n	8009f50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009ee0:	edd7 7a00 	vldr	s15, [r7]
 8009ee4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8009f6c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8009ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef0:	d801      	bhi.n	8009ef6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8009ef2:	2305      	movs	r3, #5
 8009ef4:	e02c      	b.n	8009f50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009ef6:	edd7 7a00 	vldr	s15, [r7]
 8009efa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009f70 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8009efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f06:	d801      	bhi.n	8009f0c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8009f08:	2306      	movs	r3, #6
 8009f0a:	e021      	b.n	8009f50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009f0c:	edd7 7a00 	vldr	s15, [r7]
 8009f10:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009f74 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8009f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f1c:	d801      	bhi.n	8009f22 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8009f1e:	2307      	movs	r3, #7
 8009f20:	e016      	b.n	8009f50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009f22:	edd7 7a00 	vldr	s15, [r7]
 8009f26:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009f78 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8009f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f32:	d801      	bhi.n	8009f38 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8009f34:	2308      	movs	r3, #8
 8009f36:	e00b      	b.n	8009f50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009f38:	edd7 7a00 	vldr	s15, [r7]
 8009f3c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009f7c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f48:	d801      	bhi.n	8009f4e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8009f4a:	2309      	movs	r3, #9
 8009f4c:	e000      	b.n	8009f50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8009f4e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	42500000 	.word	0x42500000
 8009f68:	42d00000 	.word	0x42d00000
 8009f6c:	43500000 	.word	0x43500000
 8009f70:	43d00000 	.word	0x43d00000
 8009f74:	44504000 	.word	0x44504000
 8009f78:	44cf8000 	.word	0x44cf8000
 8009f7c:	45502000 	.word	0x45502000

08009f80 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8009f8c:	edd7 7a00 	vldr	s15, [r7]
 8009f90:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8009f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9c:	d801      	bhi.n	8009fa2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e058      	b.n	800a054 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009fa2:	edd7 7a00 	vldr	s15, [r7]
 8009fa6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8009faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb2:	d801      	bhi.n	8009fb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e04d      	b.n	800a054 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009fb8:	edd7 7a00 	vldr	s15, [r7]
 8009fbc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a07c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8009fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc8:	d801      	bhi.n	8009fce <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e042      	b.n	800a054 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009fce:	edd7 7a00 	vldr	s15, [r7]
 8009fd2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800a080 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8009fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fde:	d801      	bhi.n	8009fe4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	e037      	b.n	800a054 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009fe4:	edd7 7a00 	vldr	s15, [r7]
 8009fe8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a084 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8009fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff4:	d801      	bhi.n	8009ffa <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8009ff6:	2305      	movs	r3, #5
 8009ff8:	e02c      	b.n	800a054 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8009ffa:	edd7 7a00 	vldr	s15, [r7]
 8009ffe:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800a088 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 800a002:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00a:	d801      	bhi.n	800a010 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800a00c:	2306      	movs	r3, #6
 800a00e:	e021      	b.n	800a054 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a010:	edd7 7a00 	vldr	s15, [r7]
 800a014:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a08c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800a018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a020:	d801      	bhi.n	800a026 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 800a022:	2307      	movs	r3, #7
 800a024:	e016      	b.n	800a054 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a026:	edd7 7a00 	vldr	s15, [r7]
 800a02a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800a090 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800a02e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a036:	d801      	bhi.n	800a03c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800a038:	2308      	movs	r3, #8
 800a03a:	e00b      	b.n	800a054 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a03c:	edd7 7a00 	vldr	s15, [r7]
 800a040:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a094 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800a044:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a04c:	d801      	bhi.n	800a052 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800a04e:	2309      	movs	r3, #9
 800a050:	e000      	b.n	800a054 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800a052:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800a054:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
            :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	3320      	adds	r3, #32
 800a05a:	7bfa      	ldrb	r2, [r7, #15]
 800a05c:	4611      	mov	r1, r2
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 fa86 	bl	800a570 <lsm6dsl_gy_data_rate_set>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800a06a:	f04f 33ff 	mov.w	r3, #4294967295
 800a06e:	e000      	b.n	800a072 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	42500000 	.word	0x42500000
 800a080:	42d00000 	.word	0x42d00000
 800a084:	43500000 	.word	0x43500000
 800a088:	43d00000 	.word	0x43d00000
 800a08c:	44504000 	.word	0x44504000
 800a090:	44cf8000 	.word	0x44cf8000
 800a094:	45502000 	.word	0x45502000

0800a098 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 800a0a4:	edd7 7a00 	vldr	s15, [r7]
 800a0a8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800a0ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b4:	d801      	bhi.n	800a0ba <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e058      	b.n	800a16c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a0ba:	edd7 7a00 	vldr	s15, [r7]
 800a0be:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800a0c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ca:	d801      	bhi.n	800a0d0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e04d      	b.n	800a16c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a0d0:	edd7 7a00 	vldr	s15, [r7]
 800a0d4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a180 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 800a0d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e0:	d801      	bhi.n	800a0e6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e042      	b.n	800a16c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a0e6:	edd7 7a00 	vldr	s15, [r7]
 800a0ea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a184 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800a0ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f6:	d801      	bhi.n	800a0fc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800a0f8:	2304      	movs	r3, #4
 800a0fa:	e037      	b.n	800a16c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a0fc:	edd7 7a00 	vldr	s15, [r7]
 800a100:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800a188 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800a104:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a10c:	d801      	bhi.n	800a112 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800a10e:	2305      	movs	r3, #5
 800a110:	e02c      	b.n	800a16c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a112:	edd7 7a00 	vldr	s15, [r7]
 800a116:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a18c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800a11a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a122:	d801      	bhi.n	800a128 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800a124:	2306      	movs	r3, #6
 800a126:	e021      	b.n	800a16c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a128:	edd7 7a00 	vldr	s15, [r7]
 800a12c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800a190 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800a130:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a138:	d801      	bhi.n	800a13e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800a13a:	2307      	movs	r3, #7
 800a13c:	e016      	b.n	800a16c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a13e:	edd7 7a00 	vldr	s15, [r7]
 800a142:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800a194 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800a146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14e:	d801      	bhi.n	800a154 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800a150:	2308      	movs	r3, #8
 800a152:	e00b      	b.n	800a16c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a154:	edd7 7a00 	vldr	s15, [r7]
 800a158:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800a198 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800a15c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a164:	d801      	bhi.n	800a16a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800a166:	2309      	movs	r3, #9
 800a168:	e000      	b.n	800a16c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800a16a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                   : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                   : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                   :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 800a172:	2300      	movs	r3, #0
}
 800a174:	4618      	mov	r0, r3
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	42500000 	.word	0x42500000
 800a184:	42d00000 	.word	0x42d00000
 800a188:	43500000 	.word	0x43500000
 800a18c:	43d00000 	.word	0x43d00000
 800a190:	44504000 	.word	0x44504000
 800a194:	44cf8000 	.word	0x44cf8000
 800a198:	45502000 	.word	0x45502000

0800a19c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a19c:	b590      	push	{r4, r7, lr}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	607a      	str	r2, [r7, #4]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	72fb      	strb	r3, [r7, #11]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	695c      	ldr	r4, [r3, #20]
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	7b1b      	ldrb	r3, [r3, #12]
 800a1bc:	b298      	uxth	r0, r3
 800a1be:	7afb      	ldrb	r3, [r7, #11]
 800a1c0:	b299      	uxth	r1, r3
 800a1c2:	893b      	ldrh	r3, [r7, #8]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	47a0      	blx	r4
 800a1c8:	4603      	mov	r3, r0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	371c      	adds	r7, #28
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd90      	pop	{r4, r7, pc}

0800a1d2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a1d2:	b590      	push	{r4, r7, lr}
 800a1d4:	b087      	sub	sp, #28
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	460b      	mov	r3, r1
 800a1e0:	72fb      	strb	r3, [r7, #11]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	691c      	ldr	r4, [r3, #16]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	7b1b      	ldrb	r3, [r3, #12]
 800a1f2:	b298      	uxth	r0, r3
 800a1f4:	7afb      	ldrb	r3, [r7, #11]
 800a1f6:	b299      	uxth	r1, r3
 800a1f8:	893b      	ldrh	r3, [r7, #8]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	47a0      	blx	r4
 800a1fe:	4603      	mov	r3, r0
}
 800a200:	4618      	mov	r0, r3
 800a202:	371c      	adds	r7, #28
 800a204:	46bd      	mov	sp, r7
 800a206:	bd90      	pop	{r4, r7, pc}

0800a208 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800a208:	b590      	push	{r4, r7, lr}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	607a      	str	r2, [r7, #4]
 800a212:	461a      	mov	r2, r3
 800a214:	460b      	mov	r3, r1
 800a216:	72fb      	strb	r3, [r7, #11]
 800a218:	4613      	mov	r3, r2
 800a21a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	685c      	ldr	r4, [r3, #4]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	68d8      	ldr	r0, [r3, #12]
 800a224:	893b      	ldrh	r3, [r7, #8]
 800a226:	7af9      	ldrb	r1, [r7, #11]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	47a0      	blx	r4
 800a22c:	6178      	str	r0, [r7, #20]

  return ret;
 800a22e:	697b      	ldr	r3, [r7, #20]
}
 800a230:	4618      	mov	r0, r3
 800a232:	371c      	adds	r7, #28
 800a234:	46bd      	mov	sp, r7
 800a236:	bd90      	pop	{r4, r7, pc}

0800a238 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	607a      	str	r2, [r7, #4]
 800a242:	461a      	mov	r2, r3
 800a244:	460b      	mov	r3, r1
 800a246:	72fb      	strb	r3, [r7, #11]
 800a248:	4613      	mov	r3, r2
 800a24a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681c      	ldr	r4, [r3, #0]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	68d8      	ldr	r0, [r3, #12]
 800a254:	893b      	ldrh	r3, [r7, #8]
 800a256:	7af9      	ldrb	r1, [r7, #11]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	47a0      	blx	r4
 800a25c:	6178      	str	r0, [r7, #20]

  return ret;
 800a25e:	697b      	ldr	r3, [r7, #20]
}
 800a260:	4618      	mov	r0, r3
 800a262:	371c      	adds	r7, #28
 800a264:	46bd      	mov	sp, r7
 800a266:	bd90      	pop	{r4, r7, pc}

0800a268 <lsm6dsl_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 800a272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a276:	ee07 3a90 	vmov	s15, r3
 800a27a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a27e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a294 <lsm6dsl_from_fs2g_to_mg+0x2c>
 800a282:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a286:	eeb0 0a67 	vmov.f32	s0, s15
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	3d79db23 	.word	0x3d79db23

0800a298 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	4603      	mov	r3, r0
 800a2a0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800a2a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2a6:	ee07 3a90 	vmov	s15, r3
 800a2aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2ae:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800a2c4 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 800a2b2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a2b6:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	428c0000 	.word	0x428c0000

0800a2c8 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a2d4:	f107 0208 	add.w	r2, r7, #8
 800a2d8:	2301      	movs	r3, #1
 800a2da:	2110      	movs	r1, #16
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7ff ff93 	bl	800a208 <lsm6dsl_read_reg>
 800a2e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10f      	bne.n	800a30a <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	f003 0303 	and.w	r3, r3, #3
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	7a3b      	ldrb	r3, [r7, #8]
 800a2f4:	f362 0383 	bfi	r3, r2, #2, #2
 800a2f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a2fa:	f107 0208 	add.w	r2, r7, #8
 800a2fe:	2301      	movs	r3, #1
 800a300:	2110      	movs	r1, #16
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7ff ff98 	bl	800a238 <lsm6dsl_write_reg>
 800a308:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a30a:	68fb      	ldr	r3, [r7, #12]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a31e:	f107 0208 	add.w	r2, r7, #8
 800a322:	2301      	movs	r3, #1
 800a324:	2110      	movs	r1, #16
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff ff6e 	bl	800a208 <lsm6dsl_read_reg>
 800a32c:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 800a32e:	7a3b      	ldrb	r3, [r7, #8]
 800a330:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a334:	b2db      	uxtb	r3, r3
 800a336:	2b03      	cmp	r3, #3
 800a338:	d81a      	bhi.n	800a370 <lsm6dsl_xl_full_scale_get+0x5c>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <lsm6dsl_xl_full_scale_get+0x2c>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a351 	.word	0x0800a351
 800a344:	0800a359 	.word	0x0800a359
 800a348:	0800a361 	.word	0x0800a361
 800a34c:	0800a369 	.word	0x0800a369
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2200      	movs	r2, #0
 800a354:	701a      	strb	r2, [r3, #0]
      break;
 800a356:	e00f      	b.n	800a378 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2201      	movs	r2, #1
 800a35c:	701a      	strb	r2, [r3, #0]
      break;
 800a35e:	e00b      	b.n	800a378 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2202      	movs	r2, #2
 800a364:	701a      	strb	r2, [r3, #0]
      break;
 800a366:	e007      	b.n	800a378 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	2203      	movs	r2, #3
 800a36c:	701a      	strb	r2, [r3, #0]
      break;
 800a36e:	e003      	b.n	800a378 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2204      	movs	r2, #4
 800a374:	701a      	strb	r2, [r3, #0]
      break;
 800a376:	bf00      	nop
  }

  return ret;
 800a378:	68fb      	ldr	r3, [r7, #12]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop

0800a384 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	460b      	mov	r3, r1
 800a38e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a390:	f107 0208 	add.w	r2, r7, #8
 800a394:	2301      	movs	r3, #1
 800a396:	2110      	movs	r1, #16
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff ff35 	bl	800a208 <lsm6dsl_read_reg>
 800a39e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10f      	bne.n	800a3c6 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800a3a6:	78fb      	ldrb	r3, [r7, #3]
 800a3a8:	f003 030f 	and.w	r3, r3, #15
 800a3ac:	b2da      	uxtb	r2, r3
 800a3ae:	7a3b      	ldrb	r3, [r7, #8]
 800a3b0:	f362 1307 	bfi	r3, r2, #4, #4
 800a3b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a3b6:	f107 0208 	add.w	r2, r7, #8
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	2110      	movs	r1, #16
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7ff ff3a 	bl	800a238 <lsm6dsl_write_reg>
 800a3c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800a3da:	f107 0208 	add.w	r2, r7, #8
 800a3de:	2301      	movs	r3, #1
 800a3e0:	2110      	movs	r1, #16
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7ff ff10 	bl	800a208 <lsm6dsl_read_reg>
 800a3e8:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.odr_xl)
 800a3ea:	7a3b      	ldrb	r3, [r7, #8]
 800a3ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b0b      	cmp	r3, #11
 800a3f4:	d84a      	bhi.n	800a48c <lsm6dsl_xl_data_rate_get+0xbc>
 800a3f6:	a201      	add	r2, pc, #4	; (adr r2, 800a3fc <lsm6dsl_xl_data_rate_get+0x2c>)
 800a3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fc:	0800a42d 	.word	0x0800a42d
 800a400:	0800a435 	.word	0x0800a435
 800a404:	0800a43d 	.word	0x0800a43d
 800a408:	0800a445 	.word	0x0800a445
 800a40c:	0800a44d 	.word	0x0800a44d
 800a410:	0800a455 	.word	0x0800a455
 800a414:	0800a45d 	.word	0x0800a45d
 800a418:	0800a465 	.word	0x0800a465
 800a41c:	0800a46d 	.word	0x0800a46d
 800a420:	0800a475 	.word	0x0800a475
 800a424:	0800a47d 	.word	0x0800a47d
 800a428:	0800a485 	.word	0x0800a485
  {
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2200      	movs	r2, #0
 800a430:	701a      	strb	r2, [r3, #0]
      break;
 800a432:	e02f      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	2201      	movs	r2, #1
 800a438:	701a      	strb	r2, [r3, #0]
      break;
 800a43a:	e02b      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	2202      	movs	r2, #2
 800a440:	701a      	strb	r2, [r3, #0]
      break;
 800a442:	e027      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2203      	movs	r2, #3
 800a448:	701a      	strb	r2, [r3, #0]
      break;
 800a44a:	e023      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2204      	movs	r2, #4
 800a450:	701a      	strb	r2, [r3, #0]
      break;
 800a452:	e01f      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2205      	movs	r2, #5
 800a458:	701a      	strb	r2, [r3, #0]
      break;
 800a45a:	e01b      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	2206      	movs	r2, #6
 800a460:	701a      	strb	r2, [r3, #0]
      break;
 800a462:	e017      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2207      	movs	r2, #7
 800a468:	701a      	strb	r2, [r3, #0]
      break;
 800a46a:	e013      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	2208      	movs	r2, #8
 800a470:	701a      	strb	r2, [r3, #0]
      break;
 800a472:	e00f      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	2209      	movs	r2, #9
 800a478:	701a      	strb	r2, [r3, #0]
      break;
 800a47a:	e00b      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	220a      	movs	r2, #10
 800a480:	701a      	strb	r2, [r3, #0]
      break;
 800a482:	e007      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	220b      	movs	r2, #11
 800a488:	701a      	strb	r2, [r3, #0]
      break;
 800a48a:	e003      	b.n	800a494 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	220c      	movs	r2, #12
 800a490:	701a      	strb	r2, [r3, #0]
      break;
 800a492:	bf00      	nop
  }

  return ret;
 800a494:	68fb      	ldr	r3, [r7, #12]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop

0800a4a0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a4ac:	f107 0208 	add.w	r2, r7, #8
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	2111      	movs	r1, #17
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff fea7 	bl	800a208 <lsm6dsl_read_reg>
 800a4ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10f      	bne.n	800a4e2 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800a4c2:	78fb      	ldrb	r3, [r7, #3]
 800a4c4:	f003 0307 	and.w	r3, r3, #7
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	7a3b      	ldrb	r3, [r7, #8]
 800a4cc:	f362 0343 	bfi	r3, r2, #1, #3
 800a4d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a4d2:	f107 0208 	add.w	r2, r7, #8
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	2111      	movs	r1, #17
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f7ff feac 	bl	800a238 <lsm6dsl_write_reg>
 800a4e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a4f6:	f107 0208 	add.w	r2, r7, #8
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	2111      	movs	r1, #17
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f7ff fe82 	bl	800a208 <lsm6dsl_read_reg>
 800a504:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 800a506:	7a3b      	ldrb	r3, [r7, #8]
 800a508:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b06      	cmp	r3, #6
 800a510:	d824      	bhi.n	800a55c <lsm6dsl_gy_full_scale_get+0x70>
 800a512:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <lsm6dsl_gy_full_scale_get+0x2c>)
 800a514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a518:	0800a535 	.word	0x0800a535
 800a51c:	0800a53d 	.word	0x0800a53d
 800a520:	0800a545 	.word	0x0800a545
 800a524:	0800a55d 	.word	0x0800a55d
 800a528:	0800a54d 	.word	0x0800a54d
 800a52c:	0800a55d 	.word	0x0800a55d
 800a530:	0800a555 	.word	0x0800a555
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2200      	movs	r2, #0
 800a538:	701a      	strb	r2, [r3, #0]
      break;
 800a53a:	e013      	b.n	800a564 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2201      	movs	r2, #1
 800a540:	701a      	strb	r2, [r3, #0]
      break;
 800a542:	e00f      	b.n	800a564 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2202      	movs	r2, #2
 800a548:	701a      	strb	r2, [r3, #0]
      break;
 800a54a:	e00b      	b.n	800a564 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	2204      	movs	r2, #4
 800a550:	701a      	strb	r2, [r3, #0]
      break;
 800a552:	e007      	b.n	800a564 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	2206      	movs	r2, #6
 800a558:	701a      	strb	r2, [r3, #0]
      break;
 800a55a:	e003      	b.n	800a564 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	2207      	movs	r2, #7
 800a560:	701a      	strb	r2, [r3, #0]
      break;
 800a562:	bf00      	nop
  }

  return ret;
 800a564:	68fb      	ldr	r3, [r7, #12]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop

0800a570 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	460b      	mov	r3, r1
 800a57a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a57c:	f107 0208 	add.w	r2, r7, #8
 800a580:	2301      	movs	r3, #1
 800a582:	2111      	movs	r1, #17
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f7ff fe3f 	bl	800a208 <lsm6dsl_read_reg>
 800a58a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10f      	bne.n	800a5b2 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800a592:	78fb      	ldrb	r3, [r7, #3]
 800a594:	f003 030f 	and.w	r3, r3, #15
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	7a3b      	ldrb	r3, [r7, #8]
 800a59c:	f362 1307 	bfi	r3, r2, #4, #4
 800a5a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a5a2:	f107 0208 	add.w	r2, r7, #8
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	2111      	movs	r1, #17
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff fe44 	bl	800a238 <lsm6dsl_write_reg>
 800a5b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800a5c6:	f107 0208 	add.w	r2, r7, #8
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	2111      	movs	r1, #17
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff fe1a 	bl	800a208 <lsm6dsl_read_reg>
 800a5d4:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g)
 800a5d6:	7a3b      	ldrb	r3, [r7, #8]
 800a5d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b0a      	cmp	r3, #10
 800a5e0:	d844      	bhi.n	800a66c <lsm6dsl_gy_data_rate_get+0xb0>
 800a5e2:	a201      	add	r2, pc, #4	; (adr r2, 800a5e8 <lsm6dsl_gy_data_rate_get+0x2c>)
 800a5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e8:	0800a615 	.word	0x0800a615
 800a5ec:	0800a61d 	.word	0x0800a61d
 800a5f0:	0800a625 	.word	0x0800a625
 800a5f4:	0800a62d 	.word	0x0800a62d
 800a5f8:	0800a635 	.word	0x0800a635
 800a5fc:	0800a63d 	.word	0x0800a63d
 800a600:	0800a645 	.word	0x0800a645
 800a604:	0800a64d 	.word	0x0800a64d
 800a608:	0800a655 	.word	0x0800a655
 800a60c:	0800a65d 	.word	0x0800a65d
 800a610:	0800a665 	.word	0x0800a665
  {
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2200      	movs	r2, #0
 800a618:	701a      	strb	r2, [r3, #0]
      break;
 800a61a:	e02b      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2201      	movs	r2, #1
 800a620:	701a      	strb	r2, [r3, #0]
      break;
 800a622:	e027      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	2202      	movs	r2, #2
 800a628:	701a      	strb	r2, [r3, #0]
      break;
 800a62a:	e023      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2203      	movs	r2, #3
 800a630:	701a      	strb	r2, [r3, #0]
      break;
 800a632:	e01f      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	2204      	movs	r2, #4
 800a638:	701a      	strb	r2, [r3, #0]
      break;
 800a63a:	e01b      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2205      	movs	r2, #5
 800a640:	701a      	strb	r2, [r3, #0]
      break;
 800a642:	e017      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2206      	movs	r2, #6
 800a648:	701a      	strb	r2, [r3, #0]
      break;
 800a64a:	e013      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2207      	movs	r2, #7
 800a650:	701a      	strb	r2, [r3, #0]
      break;
 800a652:	e00f      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2208      	movs	r2, #8
 800a658:	701a      	strb	r2, [r3, #0]
      break;
 800a65a:	e00b      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	2209      	movs	r2, #9
 800a660:	701a      	strb	r2, [r3, #0]
      break;
 800a662:	e007      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	220a      	movs	r2, #10
 800a668:	701a      	strb	r2, [r3, #0]
      break;
 800a66a:	e003      	b.n	800a674 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	220b      	movs	r2, #11
 800a670:	701a      	strb	r2, [r3, #0]
      break;
 800a672:	bf00      	nop
  }

  return ret;
 800a674:	68fb      	ldr	r3, [r7, #12]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop

0800a680 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a68c:	f107 0208 	add.w	r2, r7, #8
 800a690:	2301      	movs	r3, #1
 800a692:	2112      	movs	r1, #18
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7ff fdb7 	bl	800a208 <lsm6dsl_read_reg>
 800a69a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10f      	bne.n	800a6c2 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800a6a2:	78fb      	ldrb	r3, [r7, #3]
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	b2da      	uxtb	r2, r3
 800a6aa:	7a3b      	ldrb	r3, [r7, #8]
 800a6ac:	f362 1386 	bfi	r3, r2, #6, #1
 800a6b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a6b2:	f107 0208 	add.w	r2, r7, #8
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	2112      	movs	r1, #18
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f7ff fdbc 	bl	800a238 <lsm6dsl_write_reg>
 800a6c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 800a6d6:	f107 020c 	add.w	r2, r7, #12
 800a6da:	2306      	movs	r3, #6
 800a6dc:	2122      	movs	r1, #34	; 0x22
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f7ff fd92 	bl	800a208 <lsm6dsl_read_reg>
 800a6e4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a6e6:	7b7b      	ldrb	r3, [r7, #13]
 800a6e8:	b21a      	sxth	r2, r3
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	021b      	lsls	r3, r3, #8
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	7b3b      	ldrb	r3, [r7, #12]
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	4413      	add	r3, r2
 800a700:	b29b      	uxth	r3, r3
 800a702:	b21a      	sxth	r2, r3
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a708:	7bfa      	ldrb	r2, [r7, #15]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	3302      	adds	r3, #2
 800a70e:	b212      	sxth	r2, r2
 800a710:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	3302      	adds	r3, #2
 800a716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	b29a      	uxth	r2, r3
 800a720:	7bbb      	ldrb	r3, [r7, #14]
 800a722:	b29b      	uxth	r3, r3
 800a724:	4413      	add	r3, r2
 800a726:	b29a      	uxth	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	3302      	adds	r3, #2
 800a72c:	b212      	sxth	r2, r2
 800a72e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a730:	7c7a      	ldrb	r2, [r7, #17]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	3304      	adds	r3, #4
 800a736:	b212      	sxth	r2, r2
 800a738:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	3304      	adds	r3, #4
 800a73e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a742:	b29b      	uxth	r3, r3
 800a744:	021b      	lsls	r3, r3, #8
 800a746:	b29a      	uxth	r2, r3
 800a748:	7c3b      	ldrb	r3, [r7, #16]
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	4413      	add	r3, r2
 800a74e:	b29a      	uxth	r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	3304      	adds	r3, #4
 800a754:	b212      	sxth	r2, r2
 800a756:	801a      	strh	r2, [r3, #0]

  return ret;
 800a758:	697b      	ldr	r3, [r7, #20]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3718      	adds	r7, #24
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b086      	sub	sp, #24
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800a76c:	f107 020c 	add.w	r2, r7, #12
 800a770:	2306      	movs	r3, #6
 800a772:	2128      	movs	r1, #40	; 0x28
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7ff fd47 	bl	800a208 <lsm6dsl_read_reg>
 800a77a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800a77c:	7b7b      	ldrb	r3, [r7, #13]
 800a77e:	b21a      	sxth	r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	021b      	lsls	r3, r3, #8
 800a78e:	b29a      	uxth	r2, r3
 800a790:	7b3b      	ldrb	r3, [r7, #12]
 800a792:	b29b      	uxth	r3, r3
 800a794:	4413      	add	r3, r2
 800a796:	b29b      	uxth	r3, r3
 800a798:	b21a      	sxth	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a79e:	7bfa      	ldrb	r2, [r7, #15]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	3302      	adds	r3, #2
 800a7a4:	b212      	sxth	r2, r2
 800a7a6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	3302      	adds	r3, #2
 800a7ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	021b      	lsls	r3, r3, #8
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	7bbb      	ldrb	r3, [r7, #14]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	4413      	add	r3, r2
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	3302      	adds	r3, #2
 800a7c2:	b212      	sxth	r2, r2
 800a7c4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a7c6:	7c7a      	ldrb	r2, [r7, #17]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	b212      	sxth	r2, r2
 800a7ce:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	021b      	lsls	r3, r3, #8
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	7c3b      	ldrb	r3, [r7, #16]
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	4413      	add	r3, r2
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	b212      	sxth	r2, r2
 800a7ec:	801a      	strh	r2, [r3, #0]

  return ret;
 800a7ee:	697b      	ldr	r3, [r7, #20]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3718      	adds	r7, #24
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800a802:	2301      	movs	r3, #1
 800a804:	683a      	ldr	r2, [r7, #0]
 800a806:	210f      	movs	r1, #15
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7ff fcfd 	bl	800a208 <lsm6dsl_read_reg>
 800a80e:	60f8      	str	r0, [r7, #12]

  return ret;
 800a810:	68fb      	ldr	r3, [r7, #12]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b084      	sub	sp, #16
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a826:	f107 0208 	add.w	r2, r7, #8
 800a82a:	2301      	movs	r3, #1
 800a82c:	2112      	movs	r1, #18
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7ff fcea 	bl	800a208 <lsm6dsl_read_reg>
 800a834:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10f      	bne.n	800a85c <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	b2da      	uxtb	r2, r3
 800a844:	7a3b      	ldrb	r3, [r7, #8]
 800a846:	f362 0382 	bfi	r3, r2, #2, #1
 800a84a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800a84c:	f107 0208 	add.w	r2, r7, #8
 800a850:	2301      	movs	r3, #1
 800a852:	2112      	movs	r1, #18
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f7ff fcef 	bl	800a238 <lsm6dsl_write_reg>
 800a85a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a85c:	68fb      	ldr	r3, [r7, #12]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b084      	sub	sp, #16
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
 800a86e:	460b      	mov	r3, r1
 800a870:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800a872:	f107 0208 	add.w	r2, r7, #8
 800a876:	2301      	movs	r3, #1
 800a878:	210a      	movs	r1, #10
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff fcc4 	bl	800a208 <lsm6dsl_read_reg>
 800a880:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10f      	bne.n	800a8a8 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 800a888:	78fb      	ldrb	r3, [r7, #3]
 800a88a:	f003 0307 	and.w	r3, r3, #7
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	7a3b      	ldrb	r3, [r7, #8]
 800a892:	f362 0302 	bfi	r3, r2, #0, #3
 800a896:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800a898:	f107 0208 	add.w	r2, r7, #8
 800a89c:	2301      	movs	r3, #1
 800a89e:	210a      	movs	r1, #10
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f7ff fcc9 	bl	800a238 <lsm6dsl_write_reg>
 800a8a6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <IKS01A2_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08a      	sub	sp, #40	; 0x28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	61bb      	str	r3, [r7, #24]
  IKS01A2_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d003      	beq.n	800a8d8 <IKS01A2_ENV_SENSOR_Init+0x24>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d032      	beq.n	800a93c <IKS01A2_ENV_SENSOR_Init+0x88>
 800a8d6:	e063      	b.n	800a9a0 <IKS01A2_ENV_SENSOR_Init+0xec>
  {
#if (USE_IKS01A2_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A2_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 800a8d8:	6838      	ldr	r0, [r7, #0]
 800a8da:	f000 f977 	bl	800abcc <HTS221_0_Probe>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <IKS01A2_ENV_SENSOR_Init+0x36>
      {
        return BSP_ERROR_NO_INIT;
 800a8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e8:	e098      	b.n	800aa1c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a8ea:	4a4e      	ldr	r2, [pc, #312]	; (800aa24 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	494c      	ldr	r1, [pc, #304]	; (800aa28 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a8fc:	f107 0108 	add.w	r1, r7, #8
 800a900:	4610      	mov	r0, r2
 800a902:	4798      	blx	r3
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d002      	beq.n	800a910 <IKS01A2_ENV_SENSOR_Init+0x5c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a90a:	f06f 0306 	mvn.w	r3, #6
 800a90e:	e085      	b.n	800aa1c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800a910:	7a3b      	ldrb	r3, [r7, #8]
 800a912:	2b01      	cmp	r3, #1
 800a914:	d103      	bne.n	800a91e <IKS01A2_ENV_SENSOR_Init+0x6a>
      {
        component_functions |= ENV_TEMPERATURE;
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	f043 0301 	orr.w	r3, r3, #1
 800a91c:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800a91e:	7abb      	ldrb	r3, [r7, #10]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d103      	bne.n	800a92c <IKS01A2_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_HUMIDITY;
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	f043 0304 	orr.w	r3, r3, #4
 800a92a:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800a92c:	7a7b      	ldrb	r3, [r7, #9]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d13a      	bne.n	800a9a8 <IKS01A2_ENV_SENSOR_Init+0xf4>
      {
        component_functions |= ENV_PRESSURE;
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	f043 0302 	orr.w	r3, r3, #2
 800a938:	61bb      	str	r3, [r7, #24]
      }
      break;
 800a93a:	e035      	b.n	800a9a8 <IKS01A2_ENV_SENSOR_Init+0xf4>
#endif

#if (USE_IKS01A2_ENV_SENSOR_LPS22HB_0 == 1)
    case IKS01A2_LPS22HB_0:
      if (LPS22HB_0_Probe(Functions) != BSP_ERROR_NONE)
 800a93c:	6838      	ldr	r0, [r7, #0]
 800a93e:	f000 f9ff 	bl	800ad40 <LPS22HB_0_Probe>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <IKS01A2_ENV_SENSOR_Init+0x9a>
      {
        return BSP_ERROR_NO_INIT;
 800a948:	f04f 33ff 	mov.w	r3, #4294967295
 800a94c:	e066      	b.n	800aa1c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a94e:	4a35      	ldr	r2, [pc, #212]	; (800aa24 <IKS01A2_ENV_SENSOR_Init+0x170>)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	4933      	ldr	r1, [pc, #204]	; (800aa28 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a960:	f107 0108 	add.w	r1, r7, #8
 800a964:	4610      	mov	r0, r2
 800a966:	4798      	blx	r3
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <IKS01A2_ENV_SENSOR_Init+0xc0>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a96e:	f06f 0306 	mvn.w	r3, #6
 800a972:	e053      	b.n	800aa1c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
      if (cap.Temperature == 1U)
 800a974:	7a3b      	ldrb	r3, [r7, #8]
 800a976:	2b01      	cmp	r3, #1
 800a978:	d103      	bne.n	800a982 <IKS01A2_ENV_SENSOR_Init+0xce>
      {
        component_functions |= ENV_TEMPERATURE;
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	f043 0301 	orr.w	r3, r3, #1
 800a980:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 800a982:	7abb      	ldrb	r3, [r7, #10]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d103      	bne.n	800a990 <IKS01A2_ENV_SENSOR_Init+0xdc>
      {
        component_functions |= ENV_HUMIDITY;
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	f043 0304 	orr.w	r3, r3, #4
 800a98e:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800a990:	7a7b      	ldrb	r3, [r7, #9]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d10a      	bne.n	800a9ac <IKS01A2_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_PRESSURE;
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	f043 0302 	orr.w	r3, r3, #2
 800a99c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800a99e:	e005      	b.n	800a9ac <IKS01A2_ENV_SENSOR_Init+0xf8>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a9a0:	f06f 0301 	mvn.w	r3, #1
 800a9a4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a9a6:	e002      	b.n	800a9ae <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800a9a8:	bf00      	nop
 800a9aa:	e000      	b.n	800a9ae <IKS01A2_ENV_SENSOR_Init+0xfa>
      break;
 800a9ac:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <IKS01A2_ENV_SENSOR_Init+0x104>
  {
    return ret;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	e031      	b.n	800aa1c <IKS01A2_ENV_SENSOR_Init+0x168>
  }

  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	61fb      	str	r3, [r7, #28]
 800a9bc:	e02a      	b.n	800aa14 <IKS01A2_ENV_SENSOR_Init+0x160>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	6a3b      	ldr	r3, [r7, #32]
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	6a3a      	ldr	r2, [r7, #32]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d11e      	bne.n	800aa08 <IKS01A2_ENV_SENSOR_Init+0x154>
 800a9ca:	69ba      	ldr	r2, [r7, #24]
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	6a3a      	ldr	r2, [r7, #32]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d118      	bne.n	800aa08 <IKS01A2_ENV_SENSOR_Init+0x154>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800a9d6:	4a15      	ldr	r2, [pc, #84]	; (800aa2c <IKS01A2_ENV_SENSOR_Init+0x178>)
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a9de:	4814      	ldr	r0, [pc, #80]	; (800aa30 <IKS01A2_ENV_SENSOR_Init+0x17c>)
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	4413      	add	r3, r2
 800a9e8:	440b      	add	r3, r1
 800a9ea:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	490d      	ldr	r1, [pc, #52]	; (800aa28 <IKS01A2_ENV_SENSOR_Init+0x174>)
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	4798      	blx	r3
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d002      	beq.n	800aa08 <IKS01A2_ENV_SENSOR_Init+0x154>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800aa02:	f06f 0304 	mvn.w	r3, #4
 800aa06:	e009      	b.n	800aa1c <IKS01A2_ENV_SENSOR_Init+0x168>
      }
    }
    function = function << 1;
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	005b      	lsls	r3, r3, #1
 800aa0c:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A2_ENV_FUNCTIONS_NBR; i++)
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	3301      	adds	r3, #1
 800aa12:	61fb      	str	r3, [r7, #28]
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d9d1      	bls.n	800a9be <IKS01A2_ENV_SENSOR_Init+0x10a>
  }

  return ret;
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3728      	adds	r7, #40	; 0x28
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	20001144 	.word	0x20001144
 800aa28:	20001124 	.word	0x20001124
 800aa2c:	200001b0 	.word	0x200001b0
 800aa30:	2000112c 	.word	0x2000112c

0800aa34 <IKS01A2_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d903      	bls.n	800aa4c <IKS01A2_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aa44:	f06f 0301 	mvn.w	r3, #1
 800aa48:	60fb      	str	r3, [r7, #12]
 800aa4a:	e028      	b.n	800aa9e <IKS01A2_ENV_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800aa4c:	4a16      	ldr	r2, [pc, #88]	; (800aaa8 <IKS01A2_ENV_SENSOR_Enable+0x74>)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	4013      	ands	r3, r2
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d11c      	bne.n	800aa98 <IKS01A2_ENV_SENSOR_Enable+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800aa5e:	4a13      	ldr	r2, [pc, #76]	; (800aaac <IKS01A2_ENV_SENSOR_Enable+0x78>)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aa66:	4812      	ldr	r0, [pc, #72]	; (800aab0 <IKS01A2_ENV_SENSOR_Enable+0x7c>)
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	4413      	add	r3, r2
 800aa70:	440b      	add	r3, r1
 800aa72:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	490e      	ldr	r1, [pc, #56]	; (800aab4 <IKS01A2_ENV_SENSOR_Enable+0x80>)
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aa80:	4610      	mov	r0, r2
 800aa82:	4798      	blx	r3
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <IKS01A2_ENV_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa8a:	f06f 0304 	mvn.w	r3, #4
 800aa8e:	60fb      	str	r3, [r7, #12]
 800aa90:	e005      	b.n	800aa9e <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aa92:	2300      	movs	r3, #0
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	e002      	b.n	800aa9e <IKS01A2_ENV_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800aa98:	f06f 0301 	mvn.w	r3, #1
 800aa9c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	2000114c 	.word	0x2000114c
 800aaac:	200001b0 	.word	0x200001b0
 800aab0:	2000112c 	.word	0x2000112c
 800aab4:	20001124 	.word	0x20001124

0800aab8 <IKS01A2_ENV_SENSOR_SetOutputDataRate>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d903      	bls.n	800aad4 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aacc:	f06f 0301 	mvn.w	r3, #1
 800aad0:	617b      	str	r3, [r7, #20]
 800aad2:	e02a      	b.n	800ab2a <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800aad4:	4a17      	ldr	r2, [pc, #92]	; (800ab34 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x7c>)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	4013      	ands	r3, r2
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d11e      	bne.n	800ab24 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x6c>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800aae6:	4a14      	ldr	r2, [pc, #80]	; (800ab38 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x80>)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800aaee:	4813      	ldr	r0, [pc, #76]	; (800ab3c <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x84>)
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	4413      	add	r3, r2
 800aaf8:	440b      	add	r3, r1
 800aafa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	490f      	ldr	r1, [pc, #60]	; (800ab40 <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x88>)
 800ab02:	68fa      	ldr	r2, [r7, #12]
 800ab04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab08:	ed97 0a01 	vldr	s0, [r7, #4]
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	4798      	blx	r3
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab16:	f06f 0304 	mvn.w	r3, #4
 800ab1a:	617b      	str	r3, [r7, #20]
 800ab1c:	e005      	b.n	800ab2a <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	617b      	str	r3, [r7, #20]
 800ab22:	e002      	b.n	800ab2a <IKS01A2_ENV_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ab24:	f06f 0301 	mvn.w	r3, #1
 800ab28:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ab2a:	697b      	ldr	r3, [r7, #20]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3718      	adds	r7, #24
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}
 800ab34:	2000114c 	.word	0x2000114c
 800ab38:	200001b0 	.word	0x200001b0
 800ab3c:	2000112c 	.word	0x2000112c
 800ab40:	20001124 	.word	0x20001124

0800ab44 <IKS01A2_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A2_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_ENV_INSTANCES_NBR)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d903      	bls.n	800ab5e <IKS01A2_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ab56:	f06f 0301 	mvn.w	r3, #1
 800ab5a:	617b      	str	r3, [r7, #20]
 800ab5c:	e029      	b.n	800abb2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800ab5e:	4a17      	ldr	r2, [pc, #92]	; (800abbc <IKS01A2_ENV_SENSOR_GetValue+0x78>)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	4013      	ands	r3, r2
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d11d      	bne.n	800abac <IKS01A2_ENV_SENSOR_GetValue+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800ab70:	4a13      	ldr	r2, [pc, #76]	; (800abc0 <IKS01A2_ENV_SENSOR_GetValue+0x7c>)
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ab78:	4812      	ldr	r0, [pc, #72]	; (800abc4 <IKS01A2_ENV_SENSOR_GetValue+0x80>)
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	4413      	add	r3, r2
 800ab82:	440b      	add	r3, r1
 800ab84:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	490f      	ldr	r1, [pc, #60]	; (800abc8 <IKS01A2_ENV_SENSOR_GetValue+0x84>)
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ab92:	6879      	ldr	r1, [r7, #4]
 800ab94:	4610      	mov	r0, r2
 800ab96:	4798      	blx	r3
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <IKS01A2_ENV_SENSOR_GetValue+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab9e:	f06f 0304 	mvn.w	r3, #4
 800aba2:	617b      	str	r3, [r7, #20]
 800aba4:	e005      	b.n	800abb2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	617b      	str	r3, [r7, #20]
 800abaa:	e002      	b.n	800abb2 <IKS01A2_ENV_SENSOR_GetValue+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800abac:	f06f 0301 	mvn.w	r3, #1
 800abb0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800abb2:	697b      	ldr	r3, [r7, #20]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	2000114c 	.word	0x2000114c
 800abc0:	200001b0 	.word	0x200001b0
 800abc4:	2000112c 	.word	0x2000112c
 800abc8:	20001124 	.word	0x20001124

0800abcc <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b090      	sub	sp, #64	; 0x40
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t                id;
  int32_t                ret = BSP_ERROR_NONE;
 800abd4:	2300      	movs	r3, #0
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 800abd8:	2300      	movs	r3, #0
 800abda:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 800abdc:	23bf      	movs	r3, #191	; 0xbf
 800abde:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A2_I2C_Init;
 800abe2:	4b49      	ldr	r3, [pc, #292]	; (800ad08 <HTS221_0_Probe+0x13c>)
 800abe4:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800abe6:	4b49      	ldr	r3, [pc, #292]	; (800ad0c <HTS221_0_Probe+0x140>)
 800abe8:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800abea:	4b49      	ldr	r3, [pc, #292]	; (800ad10 <HTS221_0_Probe+0x144>)
 800abec:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800abee:	4b49      	ldr	r3, [pc, #292]	; (800ad14 <HTS221_0_Probe+0x148>)
 800abf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800abf2:	4b49      	ldr	r3, [pc, #292]	; (800ad18 <HTS221_0_Probe+0x14c>)
 800abf4:	637b      	str	r3, [r7, #52]	; 0x34

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 800abf6:	f107 031c 	add.w	r3, r7, #28
 800abfa:	4619      	mov	r1, r3
 800abfc:	4847      	ldr	r0, [pc, #284]	; (800ad1c <HTS221_0_Probe+0x150>)
 800abfe:	f7fb fb1d 	bl	800623c <HTS221_RegisterBusIO>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d003      	beq.n	800ac10 <HTS221_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac08:	f06f 0306 	mvn.w	r3, #6
 800ac0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac0e:	e076      	b.n	800acfe <HTS221_0_Probe+0x132>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 800ac10:	f107 031b 	add.w	r3, r7, #27
 800ac14:	4619      	mov	r1, r3
 800ac16:	4841      	ldr	r0, [pc, #260]	; (800ad1c <HTS221_0_Probe+0x150>)
 800ac18:	f7fb fb99 	bl	800634e <HTS221_ReadID>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <HTS221_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac22:	f06f 0306 	mvn.w	r3, #6
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac28:	e069      	b.n	800acfe <HTS221_0_Probe+0x132>
  }
  else if (id != HTS221_ID)
 800ac2a:	7efb      	ldrb	r3, [r7, #27]
 800ac2c:	2bbc      	cmp	r3, #188	; 0xbc
 800ac2e:	d003      	beq.n	800ac38 <HTS221_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac30:	f06f 0306 	mvn.w	r3, #6
 800ac34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac36:	e062      	b.n	800acfe <HTS221_0_Probe+0x132>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 800ac38:	f107 0308 	add.w	r3, r7, #8
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	4837      	ldr	r0, [pc, #220]	; (800ad1c <HTS221_0_Probe+0x150>)
 800ac40:	f7fb fb9c 	bl	800637c <HTS221_GetCapabilities>
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800ac44:	7a3b      	ldrb	r3, [r7, #8]
 800ac46:	461a      	mov	r2, r3
 800ac48:	7a7b      	ldrb	r3, [r7, #9]
 800ac4a:	005b      	lsls	r3, r3, #1
 800ac4c:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 800ac4e:	7abb      	ldrb	r3, [r7, #10]
 800ac50:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800ac52:	4313      	orrs	r3, r2
 800ac54:	4a32      	ldr	r2, [pc, #200]	; (800ad20 <HTS221_0_Probe+0x154>)
 800ac56:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS01A2_HTS221_0] = &hts221_obj_0;
 800ac58:	4b32      	ldr	r3, [pc, #200]	; (800ad24 <HTS221_0_Probe+0x158>)
 800ac5a:	4a30      	ldr	r2, [pc, #192]	; (800ad1c <HTS221_0_Probe+0x150>)
 800ac5c:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 800ac5e:	4b32      	ldr	r3, [pc, #200]	; (800ad28 <HTS221_0_Probe+0x15c>)
 800ac60:	4a32      	ldr	r2, [pc, #200]	; (800ad2c <HTS221_0_Probe+0x160>)
 800ac62:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800ac64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d11d      	bne.n	800aca6 <HTS221_0_Probe+0xda>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f003 0301 	and.w	r3, r3, #1
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d018      	beq.n	800aca6 <HTS221_0_Probe+0xda>
 800ac74:	7a3b      	ldrb	r3, [r7, #8]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d115      	bne.n	800aca6 <HTS221_0_Probe+0xda>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 800ac7a:	4b2d      	ldr	r3, [pc, #180]	; (800ad30 <HTS221_0_Probe+0x164>)
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	4a2d      	ldr	r2, [pc, #180]	; (800ad34 <HTS221_0_Probe+0x168>)
 800ac80:	492d      	ldr	r1, [pc, #180]	; (800ad38 <HTS221_0_Probe+0x16c>)
 800ac82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800ac86:	4b28      	ldr	r3, [pc, #160]	; (800ad28 <HTS221_0_Probe+0x15c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a25      	ldr	r2, [pc, #148]	; (800ad24 <HTS221_0_Probe+0x158>)
 800ac8e:	6812      	ldr	r2, [r2, #0]
 800ac90:	4610      	mov	r0, r2
 800ac92:	4798      	blx	r3
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <HTS221_0_Probe+0xd6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ac9a:	f06f 0304 	mvn.w	r3, #4
 800ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aca0:	e001      	b.n	800aca6 <HTS221_0_Probe+0xda>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aca2:	2300      	movs	r3, #0
 800aca4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800aca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d11d      	bne.n	800ace8 <HTS221_0_Probe+0x11c>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f003 0304 	and.w	r3, r3, #4
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d018      	beq.n	800ace8 <HTS221_0_Probe+0x11c>
 800acb6:	7abb      	ldrb	r3, [r7, #10]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d115      	bne.n	800ace8 <HTS221_0_Probe+0x11c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 800acbc:	4b1c      	ldr	r3, [pc, #112]	; (800ad30 <HTS221_0_Probe+0x164>)
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	4a1c      	ldr	r2, [pc, #112]	; (800ad34 <HTS221_0_Probe+0x168>)
 800acc2:	491e      	ldr	r1, [pc, #120]	; (800ad3c <HTS221_0_Probe+0x170>)
 800acc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_HTS221_0]->Init(EnvCompObj[IKS01A2_HTS221_0]) != HTS221_OK)
 800acc8:	4b17      	ldr	r3, [pc, #92]	; (800ad28 <HTS221_0_Probe+0x15c>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a15      	ldr	r2, [pc, #84]	; (800ad24 <HTS221_0_Probe+0x158>)
 800acd0:	6812      	ldr	r2, [r2, #0]
 800acd2:	4610      	mov	r0, r2
 800acd4:	4798      	blx	r3
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d003      	beq.n	800ace4 <HTS221_0_Probe+0x118>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800acdc:	f06f 0304 	mvn.w	r3, #4
 800ace0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace2:	e001      	b.n	800ace8 <HTS221_0_Probe+0x11c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ace4:	2300      	movs	r3, #0
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800ace8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acea:	2b00      	cmp	r3, #0
 800acec:	d107      	bne.n	800acfe <HTS221_0_Probe+0x132>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f003 0302 	and.w	r3, r3, #2
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <HTS221_0_Probe+0x132>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800acf8:	f06f 0304 	mvn.w	r3, #4
 800acfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800acfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3740      	adds	r7, #64	; 0x40
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	08005d49 	.word	0x08005d49
 800ad0c:	08005dc5 	.word	0x08005dc5
 800ad10:	08005e79 	.word	0x08005e79
 800ad14:	08005e15 	.word	0x08005e15
 800ad18:	08005edd 	.word	0x08005edd
 800ad1c:	20001154 	.word	0x20001154
 800ad20:	2000114c 	.word	0x2000114c
 800ad24:	20001124 	.word	0x20001124
 800ad28:	20001144 	.word	0x20001144
 800ad2c:	20000080 	.word	0x20000080
 800ad30:	200001b0 	.word	0x200001b0
 800ad34:	2000112c 	.word	0x2000112c
 800ad38:	200000a4 	.word	0x200000a4
 800ad3c:	20000090 	.word	0x20000090

0800ad40 <LPS22HB_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HB_0_Probe(uint32_t Functions)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b090      	sub	sp, #64	; 0x40
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  LPS22HB_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HB_Object_t lps22hb_obj_0;
  LPS22HB_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HB_I2C_BUS; /* I2C */
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.Address     = LPS22HB_I2C_ADD_H;
 800ad50:	23bb      	movs	r3, #187	; 0xbb
 800ad52:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  io_ctx.Init        = IKS01A2_I2C_Init;
 800ad56:	4b4a      	ldr	r3, [pc, #296]	; (800ae80 <LPS22HB_0_Probe+0x140>)
 800ad58:	61fb      	str	r3, [r7, #28]
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800ad5a:	4b4a      	ldr	r3, [pc, #296]	; (800ae84 <LPS22HB_0_Probe+0x144>)
 800ad5c:	623b      	str	r3, [r7, #32]
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800ad5e:	4b4a      	ldr	r3, [pc, #296]	; (800ae88 <LPS22HB_0_Probe+0x148>)
 800ad60:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800ad62:	4b4a      	ldr	r3, [pc, #296]	; (800ae8c <LPS22HB_0_Probe+0x14c>)
 800ad64:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800ad66:	4b4a      	ldr	r3, [pc, #296]	; (800ae90 <LPS22HB_0_Probe+0x150>)
 800ad68:	637b      	str	r3, [r7, #52]	; 0x34

  if (LPS22HB_RegisterBusIO(&lps22hb_obj_0, &io_ctx) != LPS22HB_OK)
 800ad6a:	f107 031c 	add.w	r3, r7, #28
 800ad6e:	4619      	mov	r1, r3
 800ad70:	4848      	ldr	r0, [pc, #288]	; (800ae94 <LPS22HB_0_Probe+0x154>)
 800ad72:	f7fc f885 	bl	8006e80 <LPS22HB_RegisterBusIO>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <LPS22HB_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ad7c:	f06f 0306 	mvn.w	r3, #6
 800ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad82:	e078      	b.n	800ae76 <LPS22HB_0_Probe+0x136>
  }
  else if (LPS22HB_ReadID(&lps22hb_obj_0, &id) != LPS22HB_OK)
 800ad84:	f107 031b 	add.w	r3, r7, #27
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4842      	ldr	r0, [pc, #264]	; (800ae94 <LPS22HB_0_Probe+0x154>)
 800ad8c:	f7fc f921 	bl	8006fd2 <LPS22HB_ReadID>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <LPS22HB_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ad96:	f06f 0306 	mvn.w	r3, #6
 800ad9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad9c:	e06b      	b.n	800ae76 <LPS22HB_0_Probe+0x136>
  }
  else if (id != LPS22HB_ID)
 800ad9e:	7efb      	ldrb	r3, [r7, #27]
 800ada0:	2bb1      	cmp	r3, #177	; 0xb1
 800ada2:	d003      	beq.n	800adac <LPS22HB_0_Probe+0x6c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ada4:	f06f 0306 	mvn.w	r3, #6
 800ada8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adaa:	e064      	b.n	800ae76 <LPS22HB_0_Probe+0x136>
  }
  else
  {
    (void)LPS22HB_GetCapabilities(&lps22hb_obj_0, &cap);
 800adac:	f107 0308 	add.w	r3, r7, #8
 800adb0:	4619      	mov	r1, r3
 800adb2:	4838      	ldr	r0, [pc, #224]	; (800ae94 <LPS22HB_0_Probe+0x154>)
 800adb4:	f7fc f924 	bl	8007000 <LPS22HB_GetCapabilities>

    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800adb8:	7a3b      	ldrb	r3, [r7, #8]
 800adba:	461a      	mov	r2, r3
 800adbc:	7a7b      	ldrb	r3, [r7, #9]
 800adbe:	005b      	lsls	r3, r3, #1
 800adc0:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 800adc2:	7abb      	ldrb	r3, [r7, #10]
 800adc4:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A2_LPS22HB_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 800adc6:	4313      	orrs	r3, r2
 800adc8:	4a33      	ldr	r2, [pc, #204]	; (800ae98 <LPS22HB_0_Probe+0x158>)
 800adca:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS01A2_LPS22HB_0] = &lps22hb_obj_0;
 800adcc:	4b33      	ldr	r3, [pc, #204]	; (800ae9c <LPS22HB_0_Probe+0x15c>)
 800adce:	4a31      	ldr	r2, [pc, #196]	; (800ae94 <LPS22HB_0_Probe+0x154>)
 800add0:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A2_LPS22HB_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HB_COMMON_Driver;
 800add2:	4b33      	ldr	r3, [pc, #204]	; (800aea0 <LPS22HB_0_Probe+0x160>)
 800add4:	4a33      	ldr	r2, [pc, #204]	; (800aea4 <LPS22HB_0_Probe+0x164>)
 800add6:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800add8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adda:	2b00      	cmp	r3, #0
 800addc:	d11e      	bne.n	800ae1c <LPS22HB_0_Probe+0xdc>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d019      	beq.n	800ae1c <LPS22HB_0_Probe+0xdc>
 800ade8:	7a3b      	ldrb	r3, [r7, #8]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d116      	bne.n	800ae1c <LPS22HB_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_TEMP_Driver;
 800adee:	4b2e      	ldr	r3, [pc, #184]	; (800aea8 <LPS22HB_0_Probe+0x168>)
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	4a2e      	ldr	r2, [pc, #184]	; (800aeac <LPS22HB_0_Probe+0x16c>)
 800adf4:	3303      	adds	r3, #3
 800adf6:	492e      	ldr	r1, [pc, #184]	; (800aeb0 <LPS22HB_0_Probe+0x170>)
 800adf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800adfc:	4b28      	ldr	r3, [pc, #160]	; (800aea0 <LPS22HB_0_Probe+0x160>)
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a26      	ldr	r2, [pc, #152]	; (800ae9c <LPS22HB_0_Probe+0x15c>)
 800ae04:	6852      	ldr	r2, [r2, #4]
 800ae06:	4610      	mov	r0, r2
 800ae08:	4798      	blx	r3
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d003      	beq.n	800ae18 <LPS22HB_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae10:	f06f 0304 	mvn.w	r3, #4
 800ae14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae16:	e001      	b.n	800ae1c <LPS22HB_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800ae1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d11e      	bne.n	800ae60 <LPS22HB_0_Probe+0x120>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f003 0302 	and.w	r3, r3, #2
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d019      	beq.n	800ae60 <LPS22HB_0_Probe+0x120>
 800ae2c:	7a7b      	ldrb	r3, [r7, #9]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d116      	bne.n	800ae60 <LPS22HB_0_Probe+0x120>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A2_LPS22HB_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HB_PRESS_Driver;
 800ae32:	4b1d      	ldr	r3, [pc, #116]	; (800aea8 <LPS22HB_0_Probe+0x168>)
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	4a1d      	ldr	r2, [pc, #116]	; (800aeac <LPS22HB_0_Probe+0x16c>)
 800ae38:	3303      	adds	r3, #3
 800ae3a:	491e      	ldr	r1, [pc, #120]	; (800aeb4 <LPS22HB_0_Probe+0x174>)
 800ae3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS01A2_LPS22HB_0]->Init(EnvCompObj[IKS01A2_LPS22HB_0]) != LPS22HB_OK)
 800ae40:	4b17      	ldr	r3, [pc, #92]	; (800aea0 <LPS22HB_0_Probe+0x160>)
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a15      	ldr	r2, [pc, #84]	; (800ae9c <LPS22HB_0_Probe+0x15c>)
 800ae48:	6852      	ldr	r2, [r2, #4]
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	4798      	blx	r3
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d003      	beq.n	800ae5c <LPS22HB_0_Probe+0x11c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae54:	f06f 0304 	mvn.w	r3, #4
 800ae58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae5a:	e001      	b.n	800ae60 <LPS22HB_0_Probe+0x120>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800ae60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d107      	bne.n	800ae76 <LPS22HB_0_Probe+0x136>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <LPS22HB_0_Probe+0x136>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae70:	f06f 0304 	mvn.w	r3, #4
 800ae74:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 800ae76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3740      	adds	r7, #64	; 0x40
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	08005d49 	.word	0x08005d49
 800ae84:	08005dc5 	.word	0x08005dc5
 800ae88:	08005e79 	.word	0x08005e79
 800ae8c:	08005e15 	.word	0x08005e15
 800ae90:	08005edd 	.word	0x08005edd
 800ae94:	20001188 	.word	0x20001188
 800ae98:	2000114c 	.word	0x2000114c
 800ae9c:	20001124 	.word	0x20001124
 800aea0:	20001144 	.word	0x20001144
 800aea4:	200000b8 	.word	0x200000b8
 800aea8:	200001b0 	.word	0x200001b0
 800aeac:	2000112c 	.word	0x2000112c
 800aeb0:	200000dc 	.word	0x200000dc
 800aeb4:	200000c8 	.word	0x200000c8

0800aeb8 <IKS01A2_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08e      	sub	sp, #56	; 0x38
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800aec2:	2300      	movs	r3, #0
 800aec4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 800aec6:	2301      	movs	r3, #1
 800aec8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800aeca:	2300      	movs	r3, #0
 800aecc:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d06e      	beq.n	800afb2 <IKS01A2_MOTION_SENSOR_Init+0xfa>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	f200 809d 	bhi.w	800b016 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d003      	beq.n	800aeea <IKS01A2_MOTION_SENSOR_Init+0x32>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d032      	beq.n	800af4e <IKS01A2_MOTION_SENSOR_Init+0x96>
 800aee8:	e095      	b.n	800b016 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 800aeea:	6838      	ldr	r0, [r7, #0]
 800aeec:	f000 f9ac 	bl	800b248 <LSM6DSL_0_Probe>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d002      	beq.n	800aefc <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800aef6:	f04f 33ff 	mov.w	r3, #4294967295
 800aefa:	e0cc      	b.n	800b096 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800aefc:	4a68      	ldr	r2, [pc, #416]	; (800b0a0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	4967      	ldr	r1, [pc, #412]	; (800b0a4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af0e:	f107 010c 	add.w	r1, r7, #12
 800af12:	4610      	mov	r0, r2
 800af14:	4798      	blx	r3
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d002      	beq.n	800af22 <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800af1c:	f06f 0306 	mvn.w	r3, #6
 800af20:	e0b9      	b.n	800b096 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800af22:	7b3b      	ldrb	r3, [r7, #12]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d103      	bne.n	800af30 <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	f043 0302 	orr.w	r3, r3, #2
 800af2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800af30:	7b7b      	ldrb	r3, [r7, #13]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d103      	bne.n	800af3e <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 800af36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af38:	f043 0301 	orr.w	r3, r3, #1
 800af3c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800af3e:	7bbb      	ldrb	r3, [r7, #14]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d16c      	bne.n	800b01e <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	f043 0304 	orr.w	r3, r3, #4
 800af4a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800af4c:	e067      	b.n	800b01e <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800af4e:	6838      	ldr	r0, [r7, #0]
 800af50:	f000 fa36 	bl	800b3c0 <LSM303AGR_ACC_0_Probe>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 800af5a:	f04f 33ff 	mov.w	r3, #4294967295
 800af5e:	e09a      	b.n	800b096 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800af60:	4a4f      	ldr	r2, [pc, #316]	; (800b0a0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	494e      	ldr	r1, [pc, #312]	; (800b0a4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af72:	f107 010c 	add.w	r1, r7, #12
 800af76:	4610      	mov	r0, r2
 800af78:	4798      	blx	r3
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800af80:	f06f 0306 	mvn.w	r3, #6
 800af84:	e087      	b.n	800b096 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800af86:	7b3b      	ldrb	r3, [r7, #12]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d103      	bne.n	800af94 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	f043 0302 	orr.w	r3, r3, #2
 800af92:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800af94:	7b7b      	ldrb	r3, [r7, #13]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d103      	bne.n	800afa2 <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 800af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9c:	f043 0301 	orr.w	r3, r3, #1
 800afa0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800afa2:	7bbb      	ldrb	r3, [r7, #14]
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d13c      	bne.n	800b022 <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	f043 0304 	orr.w	r3, r3, #4
 800afae:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800afb0:	e037      	b.n	800b022 <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800afb2:	6838      	ldr	r0, [r7, #0]
 800afb4:	f000 faa8 	bl	800b508 <LSM303AGR_MAG_0_Probe>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d002      	beq.n	800afc4 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800afbe:	f04f 33ff 	mov.w	r3, #4294967295
 800afc2:	e068      	b.n	800b096 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800afc4:	4a36      	ldr	r2, [pc, #216]	; (800b0a0 <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	4935      	ldr	r1, [pc, #212]	; (800b0a4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800afd6:	f107 010c 	add.w	r1, r7, #12
 800afda:	4610      	mov	r0, r2
 800afdc:	4798      	blx	r3
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800afe4:	f06f 0306 	mvn.w	r3, #6
 800afe8:	e055      	b.n	800b096 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800afea:	7b3b      	ldrb	r3, [r7, #12]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d103      	bne.n	800aff8 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800aff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff2:	f043 0302 	orr.w	r3, r3, #2
 800aff6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 800aff8:	7b7b      	ldrb	r3, [r7, #13]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d103      	bne.n	800b006 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800affe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b000:	f043 0301 	orr.w	r3, r3, #1
 800b004:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800b006:	7bbb      	ldrb	r3, [r7, #14]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d10c      	bne.n	800b026 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	f043 0304 	orr.w	r3, r3, #4
 800b012:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800b014:	e007      	b.n	800b026 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b016:	f06f 0301 	mvn.w	r3, #1
 800b01a:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 800b01c:	e004      	b.n	800b028 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800b01e:	bf00      	nop
 800b020:	e002      	b.n	800b028 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800b022:	bf00      	nop
 800b024:	e000      	b.n	800b028 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800b026:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d001      	beq.n	800b032 <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 800b02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b030:	e031      	b.n	800b096 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800b032:	2300      	movs	r3, #0
 800b034:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b036:	e02a      	b.n	800b08e <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	4013      	ands	r3, r2
 800b03e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b040:	429a      	cmp	r2, r3
 800b042:	d11e      	bne.n	800b082 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 800b044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	4013      	ands	r3, r2
 800b04a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d118      	bne.n	800b082 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b050:	4a15      	ldr	r2, [pc, #84]	; (800b0a8 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b058:	4814      	ldr	r0, [pc, #80]	; (800b0ac <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	4613      	mov	r3, r2
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	4413      	add	r3, r2
 800b062:	440b      	add	r3, r1
 800b064:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	490e      	ldr	r1, [pc, #56]	; (800b0a4 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b072:	4610      	mov	r0, r2
 800b074:	4798      	blx	r3
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b07c:	f06f 0304 	mvn.w	r3, #4
 800b080:	e009      	b.n	800b096 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 800b088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08a:	3301      	adds	r3, #1
 800b08c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	2b02      	cmp	r3, #2
 800b092:	d9d1      	bls.n	800b038 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800b094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b096:	4618      	mov	r0, r3
 800b098:	3738      	adds	r7, #56	; 0x38
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	200011ec 	.word	0x200011ec
 800b0a4:	200011bc 	.word	0x200011bc
 800b0a8:	200001c4 	.word	0x200001c4
 800b0ac:	200011c8 	.word	0x200011c8

0800b0b0 <IKS01A2_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b084      	sub	sp, #16
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d903      	bls.n	800b0c8 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b0c0:	f06f 0301 	mvn.w	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]
 800b0c6:	e028      	b.n	800b11a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b0c8:	4a16      	ldr	r2, [pc, #88]	; (800b124 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d11c      	bne.n	800b114 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b0da:	4a13      	ldr	r2, [pc, #76]	; (800b128 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b0e2:	4812      	ldr	r0, [pc, #72]	; (800b12c <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	4413      	add	r3, r2
 800b0ec:	440b      	add	r3, r1
 800b0ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	490e      	ldr	r1, [pc, #56]	; (800b130 <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	4798      	blx	r3
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b106:	f06f 0304 	mvn.w	r3, #4
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	e005      	b.n	800b11a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b10e:	2300      	movs	r3, #0
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	e002      	b.n	800b11a <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b114:	f06f 0301 	mvn.w	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b11a:	68fb      	ldr	r3, [r7, #12]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	200011f8 	.word	0x200011f8
 800b128:	200001c4 	.word	0x200001c4
 800b12c:	200011c8 	.word	0x200011c8
 800b130:	200011bc 	.word	0x200011bc

0800b134 <IKS01A2_MOTION_SENSOR_GetAxesRaw>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes raw data structure
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_GetAxesRaw(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_AxesRaw_t *Axes)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b02      	cmp	r3, #2
 800b144:	d903      	bls.n	800b14e <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b146:	f06f 0301 	mvn.w	r3, #1
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	e029      	b.n	800b1a2 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b14e:	4a17      	ldr	r2, [pc, #92]	; (800b1ac <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x78>)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	4013      	ands	r3, r2
 800b15a:	68ba      	ldr	r2, [r7, #8]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d11d      	bne.n	800b19c <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxesRaw(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b160:	4a13      	ldr	r2, [pc, #76]	; (800b1b0 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x7c>)
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b168:	4812      	ldr	r0, [pc, #72]	; (800b1b4 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x80>)
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	4613      	mov	r3, r2
 800b16e:	005b      	lsls	r3, r3, #1
 800b170:	4413      	add	r3, r2
 800b172:	440b      	add	r3, r1
 800b174:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	490f      	ldr	r1, [pc, #60]	; (800b1b8 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x84>)
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b182:	6879      	ldr	r1, [r7, #4]
 800b184:	4610      	mov	r0, r2
 800b186:	4798      	blx	r3
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b18e:	f06f 0304 	mvn.w	r3, #4
 800b192:	617b      	str	r3, [r7, #20]
 800b194:	e005      	b.n	800b1a2 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b196:	2300      	movs	r3, #0
 800b198:	617b      	str	r3, [r7, #20]
 800b19a:	e002      	b.n	800b1a2 <IKS01A2_MOTION_SENSOR_GetAxesRaw+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b19c:	f06f 0301 	mvn.w	r3, #1
 800b1a0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b1a2:	697b      	ldr	r3, [r7, #20]
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3718      	adds	r7, #24
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	200011f8 	.word	0x200011f8
 800b1b0:	200001c4 	.word	0x200001c4
 800b1b4:	200011c8 	.word	0x200011c8
 800b1b8:	200011bc 	.word	0x200011bc

0800b1bc <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	d903      	bls.n	800b1d8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b1d0:	f06f 0301 	mvn.w	r3, #1
 800b1d4:	617b      	str	r3, [r7, #20]
 800b1d6:	e02a      	b.n	800b22e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b1d8:	4a17      	ldr	r2, [pc, #92]	; (800b238 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d11e      	bne.n	800b228 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b1ea:	4a14      	ldr	r2, [pc, #80]	; (800b23c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b1f2:	4813      	ldr	r0, [pc, #76]	; (800b240 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	005b      	lsls	r3, r3, #1
 800b1fa:	4413      	add	r3, r2
 800b1fc:	440b      	add	r3, r1
 800b1fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	490f      	ldr	r1, [pc, #60]	; (800b244 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b20c:	ed97 0a01 	vldr	s0, [r7, #4]
 800b210:	4610      	mov	r0, r2
 800b212:	4798      	blx	r3
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d003      	beq.n	800b222 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b21a:	f06f 0304 	mvn.w	r3, #4
 800b21e:	617b      	str	r3, [r7, #20]
 800b220:	e005      	b.n	800b22e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b222:	2300      	movs	r3, #0
 800b224:	617b      	str	r3, [r7, #20]
 800b226:	e002      	b.n	800b22e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b228:	f06f 0301 	mvn.w	r3, #1
 800b22c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b22e:	697b      	ldr	r3, [r7, #20]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3718      	adds	r7, #24
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	200011f8 	.word	0x200011f8
 800b23c:	200001c4 	.word	0x200001c4
 800b240:	200011c8 	.word	0x200011c8
 800b244:	200011bc 	.word	0x200011bc

0800b248 <LSM6DSL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b094      	sub	sp, #80	; 0x50
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800b250:	2300      	movs	r3, #0
 800b252:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 800b254:	2300      	movs	r3, #0
 800b256:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 800b258:	23d7      	movs	r3, #215	; 0xd7
 800b25a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b25e:	4b4a      	ldr	r3, [pc, #296]	; (800b388 <LSM6DSL_0_Probe+0x140>)
 800b260:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b262:	4b4a      	ldr	r3, [pc, #296]	; (800b38c <LSM6DSL_0_Probe+0x144>)
 800b264:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b266:	4b4a      	ldr	r3, [pc, #296]	; (800b390 <LSM6DSL_0_Probe+0x148>)
 800b268:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b26a:	4b4a      	ldr	r3, [pc, #296]	; (800b394 <LSM6DSL_0_Probe+0x14c>)
 800b26c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b26e:	4b4a      	ldr	r3, [pc, #296]	; (800b398 <LSM6DSL_0_Probe+0x150>)
 800b270:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 800b272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b276:	4619      	mov	r1, r3
 800b278:	4848      	ldr	r0, [pc, #288]	; (800b39c <LSM6DSL_0_Probe+0x154>)
 800b27a:	f7fd ffd1 	bl	8009220 <LSM6DSL_RegisterBusIO>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b284:	f06f 0306 	mvn.w	r3, #6
 800b288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b28a:	e077      	b.n	800b37c <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 800b28c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b290:	4619      	mov	r1, r3
 800b292:	4842      	ldr	r0, [pc, #264]	; (800b39c <LSM6DSL_0_Probe+0x154>)
 800b294:	f7fe f8be 	bl	8009414 <LSM6DSL_ReadID>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b29e:	f06f 0306 	mvn.w	r3, #6
 800b2a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2a4:	e06a      	b.n	800b37c <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 800b2a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2aa:	2b6a      	cmp	r3, #106	; 0x6a
 800b2ac:	d003      	beq.n	800b2b6 <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2ae:	f06f 0306 	mvn.w	r3, #6
 800b2b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2b4:	e062      	b.n	800b37c <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800b2b6:	f107 030c 	add.w	r3, r7, #12
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	4837      	ldr	r0, [pc, #220]	; (800b39c <LSM6DSL_0_Probe+0x154>)
 800b2be:	f7fe f8bf 	bl	8009440 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b2c2:	7b7b      	ldrb	r3, [r7, #13]
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	7b3b      	ldrb	r3, [r7, #12]
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	431a      	orrs	r2, r3
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	4a33      	ldr	r2, [pc, #204]	; (800b3a0 <LSM6DSL_0_Probe+0x158>)
 800b2d4:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 800b2d6:	4b33      	ldr	r3, [pc, #204]	; (800b3a4 <LSM6DSL_0_Probe+0x15c>)
 800b2d8:	4a30      	ldr	r2, [pc, #192]	; (800b39c <LSM6DSL_0_Probe+0x154>)
 800b2da:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 800b2dc:	4b32      	ldr	r3, [pc, #200]	; (800b3a8 <LSM6DSL_0_Probe+0x160>)
 800b2de:	4a33      	ldr	r2, [pc, #204]	; (800b3ac <LSM6DSL_0_Probe+0x164>)
 800b2e0:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800b2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d11d      	bne.n	800b324 <LSM6DSL_0_Probe+0xdc>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d018      	beq.n	800b324 <LSM6DSL_0_Probe+0xdc>
 800b2f2:	7b7b      	ldrb	r3, [r7, #13]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d115      	bne.n	800b324 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 800b2f8:	4b2d      	ldr	r3, [pc, #180]	; (800b3b0 <LSM6DSL_0_Probe+0x168>)
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	4a2d      	ldr	r2, [pc, #180]	; (800b3b4 <LSM6DSL_0_Probe+0x16c>)
 800b2fe:	492e      	ldr	r1, [pc, #184]	; (800b3b8 <LSM6DSL_0_Probe+0x170>)
 800b300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800b304:	4b28      	ldr	r3, [pc, #160]	; (800b3a8 <LSM6DSL_0_Probe+0x160>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a26      	ldr	r2, [pc, #152]	; (800b3a4 <LSM6DSL_0_Probe+0x15c>)
 800b30c:	6812      	ldr	r2, [r2, #0]
 800b30e:	4610      	mov	r0, r2
 800b310:	4798      	blx	r3
 800b312:	4603      	mov	r3, r0
 800b314:	2b00      	cmp	r3, #0
 800b316:	d003      	beq.n	800b320 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b318:	f06f 0304 	mvn.w	r3, #4
 800b31c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b31e:	e001      	b.n	800b324 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b320:	2300      	movs	r3, #0
 800b322:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b326:	2b00      	cmp	r3, #0
 800b328:	d11d      	bne.n	800b366 <LSM6DSL_0_Probe+0x11e>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f003 0302 	and.w	r3, r3, #2
 800b330:	2b00      	cmp	r3, #0
 800b332:	d018      	beq.n	800b366 <LSM6DSL_0_Probe+0x11e>
 800b334:	7b3b      	ldrb	r3, [r7, #12]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d115      	bne.n	800b366 <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b33a:	4b1d      	ldr	r3, [pc, #116]	; (800b3b0 <LSM6DSL_0_Probe+0x168>)
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	4a1d      	ldr	r2, [pc, #116]	; (800b3b4 <LSM6DSL_0_Probe+0x16c>)
 800b340:	491e      	ldr	r1, [pc, #120]	; (800b3bc <LSM6DSL_0_Probe+0x174>)
 800b342:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800b346:	4b18      	ldr	r3, [pc, #96]	; (800b3a8 <LSM6DSL_0_Probe+0x160>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a15      	ldr	r2, [pc, #84]	; (800b3a4 <LSM6DSL_0_Probe+0x15c>)
 800b34e:	6812      	ldr	r2, [r2, #0]
 800b350:	4610      	mov	r0, r2
 800b352:	4798      	blx	r3
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d003      	beq.n	800b362 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b35a:	f06f 0304 	mvn.w	r3, #4
 800b35e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b360:	e001      	b.n	800b366 <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b362:	2300      	movs	r3, #0
 800b364:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d107      	bne.n	800b37c <LSM6DSL_0_Probe+0x134>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f003 0304 	and.w	r3, r3, #4
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b376:	f06f 0304 	mvn.w	r3, #4
 800b37a:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }
  return ret;
 800b37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3750      	adds	r7, #80	; 0x50
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	08005d49 	.word	0x08005d49
 800b38c:	08005dc5 	.word	0x08005dc5
 800b390:	08005e79 	.word	0x08005e79
 800b394:	08005e15 	.word	0x08005e15
 800b398:	08005edd 	.word	0x08005edd
 800b39c:	20001204 	.word	0x20001204
 800b3a0:	200011f8 	.word	0x200011f8
 800b3a4:	200011bc 	.word	0x200011bc
 800b3a8:	200011ec 	.word	0x200011ec
 800b3ac:	20000158 	.word	0x20000158
 800b3b0:	200001c4 	.word	0x200001c4
 800b3b4:	200011c8 	.word	0x200011c8
 800b3b8:	2000018c 	.word	0x2000018c
 800b3bc:	20000168 	.word	0x20000168

0800b3c0 <LSM303AGR_ACC_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b094      	sub	sp, #80	; 0x50
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 800b3d0:	2333      	movs	r3, #51	; 0x33
 800b3d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b3d6:	4b3f      	ldr	r3, [pc, #252]	; (800b4d4 <LSM303AGR_ACC_0_Probe+0x114>)
 800b3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b3da:	4b3f      	ldr	r3, [pc, #252]	; (800b4d8 <LSM303AGR_ACC_0_Probe+0x118>)
 800b3dc:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b3de:	4b3f      	ldr	r3, [pc, #252]	; (800b4dc <LSM303AGR_ACC_0_Probe+0x11c>)
 800b3e0:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b3e2:	4b3f      	ldr	r3, [pc, #252]	; (800b4e0 <LSM303AGR_ACC_0_Probe+0x120>)
 800b3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b3e6:	4b3f      	ldr	r3, [pc, #252]	; (800b4e4 <LSM303AGR_ACC_0_Probe+0x124>)
 800b3e8:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800b3ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	483d      	ldr	r0, [pc, #244]	; (800b4e8 <LSM303AGR_ACC_0_Probe+0x128>)
 800b3f2:	f7fc fb27 	bl	8007a44 <LSM303AGR_ACC_RegisterBusIO>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d003      	beq.n	800b404 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b3fc:	f06f 0306 	mvn.w	r3, #6
 800b400:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b402:	e062      	b.n	800b4ca <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 800b404:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b408:	4619      	mov	r1, r3
 800b40a:	4837      	ldr	r0, [pc, #220]	; (800b4e8 <LSM303AGR_ACC_0_Probe+0x128>)
 800b40c:	f7fc fbdf 	bl	8007bce <LSM303AGR_ACC_ReadID>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d003      	beq.n	800b41e <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b416:	f06f 0306 	mvn.w	r3, #6
 800b41a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b41c:	e055      	b.n	800b4ca <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 800b41e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b422:	2b33      	cmp	r3, #51	; 0x33
 800b424:	d003      	beq.n	800b42e <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b426:	f06f 0306 	mvn.w	r3, #6
 800b42a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b42c:	e04d      	b.n	800b4ca <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 800b42e:	f107 030c 	add.w	r3, r7, #12
 800b432:	4619      	mov	r1, r3
 800b434:	482c      	ldr	r0, [pc, #176]	; (800b4e8 <LSM303AGR_ACC_0_Probe+0x128>)
 800b436:	f7fc fbe1 	bl	8007bfc <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b43a:	7b7b      	ldrb	r3, [r7, #13]
 800b43c:	461a      	mov	r2, r3
 800b43e:	7b3b      	ldrb	r3, [r7, #12]
 800b440:	005b      	lsls	r3, r3, #1
 800b442:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800b444:	7bbb      	ldrb	r3, [r7, #14]
 800b446:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b448:	4313      	orrs	r3, r2
 800b44a:	4a28      	ldr	r2, [pc, #160]	; (800b4ec <LSM303AGR_ACC_0_Probe+0x12c>)
 800b44c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 800b44e:	4b28      	ldr	r3, [pc, #160]	; (800b4f0 <LSM303AGR_ACC_0_Probe+0x130>)
 800b450:	4a25      	ldr	r2, [pc, #148]	; (800b4e8 <LSM303AGR_ACC_0_Probe+0x128>)
 800b452:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 800b454:	4b27      	ldr	r3, [pc, #156]	; (800b4f4 <LSM303AGR_ACC_0_Probe+0x134>)
 800b456:	4a28      	ldr	r2, [pc, #160]	; (800b4f8 <LSM303AGR_ACC_0_Probe+0x138>)
 800b458:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800b45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d11e      	bne.n	800b49e <LSM303AGR_ACC_0_Probe+0xde>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f003 0302 	and.w	r3, r3, #2
 800b466:	2b00      	cmp	r3, #0
 800b468:	d019      	beq.n	800b49e <LSM303AGR_ACC_0_Probe+0xde>
 800b46a:	7b3b      	ldrb	r3, [r7, #12]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d116      	bne.n	800b49e <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b470:	4b22      	ldr	r3, [pc, #136]	; (800b4fc <LSM303AGR_ACC_0_Probe+0x13c>)
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	4a22      	ldr	r2, [pc, #136]	; (800b500 <LSM303AGR_ACC_0_Probe+0x140>)
 800b476:	3303      	adds	r3, #3
 800b478:	4922      	ldr	r1, [pc, #136]	; (800b504 <LSM303AGR_ACC_0_Probe+0x144>)
 800b47a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                 void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 800b47e:	4b1d      	ldr	r3, [pc, #116]	; (800b4f4 <LSM303AGR_ACC_0_Probe+0x134>)
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a1a      	ldr	r2, [pc, #104]	; (800b4f0 <LSM303AGR_ACC_0_Probe+0x130>)
 800b486:	6852      	ldr	r2, [r2, #4]
 800b488:	4610      	mov	r0, r2
 800b48a:	4798      	blx	r3
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b492:	f06f 0304 	mvn.w	r3, #4
 800b496:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b498:	e001      	b.n	800b49e <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b49a:	2300      	movs	r3, #0
 800b49c:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d107      	bne.n	800b4b4 <LSM303AGR_ACC_0_Probe+0xf4>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f003 0301 	and.w	r3, r3, #1
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d002      	beq.n	800b4b4 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4ae:	f06f 0304 	mvn.w	r3, #4
 800b4b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800b4b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d107      	bne.n	800b4ca <LSM303AGR_ACC_0_Probe+0x10a>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4c4:	f06f 0304 	mvn.w	r3, #4
 800b4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800b4ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3750      	adds	r7, #80	; 0x50
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	08005d49 	.word	0x08005d49
 800b4d8:	08005dc5 	.word	0x08005dc5
 800b4dc:	08005e79 	.word	0x08005e79
 800b4e0:	08005e15 	.word	0x08005e15
 800b4e4:	08005edd 	.word	0x08005edd
 800b4e8:	2000123c 	.word	0x2000123c
 800b4ec:	200011f8 	.word	0x200011f8
 800b4f0:	200011bc 	.word	0x200011bc
 800b4f4:	200011ec 	.word	0x200011ec
 800b4f8:	200000f0 	.word	0x200000f0
 800b4fc:	200001c4 	.word	0x200001c4
 800b500:	200011c8 	.word	0x200011c8
 800b504:	20000100 	.word	0x20000100

0800b508 <LSM303AGR_MAG_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 2 if component ID is OK
  * @retval error status
  */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b094      	sub	sp, #80	; 0x50
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800b510:	2300      	movs	r3, #0
 800b512:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 800b514:	2300      	movs	r3, #0
 800b516:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 800b518:	233d      	movs	r3, #61	; 0x3d
 800b51a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  io_ctx.Init        = IKS01A2_I2C_Init;
 800b51e:	4b3f      	ldr	r3, [pc, #252]	; (800b61c <LSM303AGR_MAG_0_Probe+0x114>)
 800b520:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800b522:	4b3f      	ldr	r3, [pc, #252]	; (800b620 <LSM303AGR_MAG_0_Probe+0x118>)
 800b524:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 800b526:	4b3f      	ldr	r3, [pc, #252]	; (800b624 <LSM303AGR_MAG_0_Probe+0x11c>)
 800b528:	643b      	str	r3, [r7, #64]	; 0x40
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 800b52a:	4b3f      	ldr	r3, [pc, #252]	; (800b628 <LSM303AGR_MAG_0_Probe+0x120>)
 800b52c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.GetTick     = IKS01A2_GetTick;
 800b52e:	4b3f      	ldr	r3, [pc, #252]	; (800b62c <LSM303AGR_MAG_0_Probe+0x124>)
 800b530:	647b      	str	r3, [r7, #68]	; 0x44

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 800b532:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b536:	4619      	mov	r1, r3
 800b538:	483d      	ldr	r0, [pc, #244]	; (800b630 <LSM303AGR_MAG_0_Probe+0x128>)
 800b53a:	f7fc fe4d 	bl	80081d8 <LSM303AGR_MAG_RegisterBusIO>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d003      	beq.n	800b54c <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b544:	f06f 0306 	mvn.w	r3, #6
 800b548:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b54a:	e062      	b.n	800b612 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 800b54c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b550:	4619      	mov	r1, r3
 800b552:	4837      	ldr	r0, [pc, #220]	; (800b630 <LSM303AGR_MAG_0_Probe+0x128>)
 800b554:	f7fc fef7 	bl	8008346 <LSM303AGR_MAG_ReadID>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b55e:	f06f 0306 	mvn.w	r3, #6
 800b562:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b564:	e055      	b.n	800b612 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 800b566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b56a:	2b40      	cmp	r3, #64	; 0x40
 800b56c:	d003      	beq.n	800b576 <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b56e:	f06f 0306 	mvn.w	r3, #6
 800b572:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b574:	e04d      	b.n	800b612 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 800b576:	f107 030c 	add.w	r3, r7, #12
 800b57a:	4619      	mov	r1, r3
 800b57c:	482c      	ldr	r0, [pc, #176]	; (800b630 <LSM303AGR_MAG_0_Probe+0x128>)
 800b57e:	f7fc fef9 	bl	8008374 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b582:	7b7b      	ldrb	r3, [r7, #13]
 800b584:	461a      	mov	r2, r3
 800b586:	7b3b      	ldrb	r3, [r7, #12]
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 800b58c:	7bbb      	ldrb	r3, [r7, #14]
 800b58e:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800b590:	4313      	orrs	r3, r2
 800b592:	4a28      	ldr	r2, [pc, #160]	; (800b634 <LSM303AGR_MAG_0_Probe+0x12c>)
 800b594:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 800b596:	4b28      	ldr	r3, [pc, #160]	; (800b638 <LSM303AGR_MAG_0_Probe+0x130>)
 800b598:	4a25      	ldr	r2, [pc, #148]	; (800b630 <LSM303AGR_MAG_0_Probe+0x128>)
 800b59a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 800b59c:	4b27      	ldr	r3, [pc, #156]	; (800b63c <LSM303AGR_MAG_0_Probe+0x134>)
 800b59e:	4a28      	ldr	r2, [pc, #160]	; (800b640 <LSM303AGR_MAG_0_Probe+0x138>)
 800b5a0:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800b5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d11e      	bne.n	800b5e6 <LSM303AGR_MAG_0_Probe+0xde>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f003 0304 	and.w	r3, r3, #4
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d019      	beq.n	800b5e6 <LSM303AGR_MAG_0_Probe+0xde>
 800b5b2:	7bbb      	ldrb	r3, [r7, #14]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d116      	bne.n	800b5e6 <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b5b8:	4b22      	ldr	r3, [pc, #136]	; (800b644 <LSM303AGR_MAG_0_Probe+0x13c>)
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	4a22      	ldr	r2, [pc, #136]	; (800b648 <LSM303AGR_MAG_0_Probe+0x140>)
 800b5be:	3306      	adds	r3, #6
 800b5c0:	4922      	ldr	r1, [pc, #136]	; (800b64c <LSM303AGR_MAG_0_Probe+0x144>)
 800b5c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                                void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 800b5c6:	4b1d      	ldr	r3, [pc, #116]	; (800b63c <LSM303AGR_MAG_0_Probe+0x134>)
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a1a      	ldr	r2, [pc, #104]	; (800b638 <LSM303AGR_MAG_0_Probe+0x130>)
 800b5ce:	6892      	ldr	r2, [r2, #8]
 800b5d0:	4610      	mov	r0, r2
 800b5d2:	4798      	blx	r3
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5da:	f06f 0304 	mvn.w	r3, #4
 800b5de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5e0:	e001      	b.n	800b5e6 <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800b5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d107      	bne.n	800b5fc <LSM303AGR_MAG_0_Probe+0xf4>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f003 0302 	and.w	r3, r3, #2
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5f6:	f06f 0304 	mvn.w	r3, #4
 800b5fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d107      	bne.n	800b612 <LSM303AGR_MAG_0_Probe+0x10a>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d002      	beq.n	800b612 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b60c:	f06f 0304 	mvn.w	r3, #4
 800b610:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 800b612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800b614:	4618      	mov	r0, r3
 800b616:	3750      	adds	r7, #80	; 0x50
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	08005d49 	.word	0x08005d49
 800b620:	08005dc5 	.word	0x08005dc5
 800b624:	08005e79 	.word	0x08005e79
 800b628:	08005e15 	.word	0x08005e15
 800b62c:	08005edd 	.word	0x08005edd
 800b630:	20001270 	.word	0x20001270
 800b634:	200011f8 	.word	0x200011f8
 800b638:	200011bc 	.word	0x200011bc
 800b63c:	200011ec 	.word	0x200011ec
 800b640:	20000124 	.word	0x20000124
 800b644:	200001c4 	.word	0x200001c4
 800b648:	200011c8 	.word	0x200011c8
 800b64c:	20000134 	.word	0x20000134

0800b650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b654:	2003      	movs	r0, #3
 800b656:	f000 f8d6 	bl	800b806 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b65a:	200f      	movs	r0, #15
 800b65c:	f7fa fae2 	bl	8005c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b660:	f7fa fa58 	bl	8005b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	bd80      	pop	{r7, pc}
	...

0800b66c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b66c:	b480      	push	{r7}
 800b66e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b670:	4b06      	ldr	r3, [pc, #24]	; (800b68c <HAL_IncTick+0x20>)
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	461a      	mov	r2, r3
 800b676:	4b06      	ldr	r3, [pc, #24]	; (800b690 <HAL_IncTick+0x24>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4413      	add	r3, r2
 800b67c:	4a04      	ldr	r2, [pc, #16]	; (800b690 <HAL_IncTick+0x24>)
 800b67e:	6013      	str	r3, [r2, #0]
}
 800b680:	bf00      	nop
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	200001dc 	.word	0x200001dc
 800b690:	200012a4 	.word	0x200012a4

0800b694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b694:	b480      	push	{r7}
 800b696:	af00      	add	r7, sp, #0
  return uwTick;
 800b698:	4b03      	ldr	r3, [pc, #12]	; (800b6a8 <HAL_GetTick+0x14>)
 800b69a:	681b      	ldr	r3, [r3, #0]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	200012a4 	.word	0x200012a4

0800b6ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f003 0307 	and.w	r3, r3, #7
 800b6ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b6bc:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <__NVIC_SetPriorityGrouping+0x40>)
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b6d4:	4b06      	ldr	r3, [pc, #24]	; (800b6f0 <__NVIC_SetPriorityGrouping+0x44>)
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b6da:	4a04      	ldr	r2, [pc, #16]	; (800b6ec <__NVIC_SetPriorityGrouping+0x40>)
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	60d3      	str	r3, [r2, #12]
}
 800b6e0:	bf00      	nop
 800b6e2:	3714      	adds	r7, #20
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	e000ed00 	.word	0xe000ed00
 800b6f0:	05fa0000 	.word	0x05fa0000

0800b6f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b6f8:	4b04      	ldr	r3, [pc, #16]	; (800b70c <__NVIC_GetPriorityGrouping+0x18>)
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	0a1b      	lsrs	r3, r3, #8
 800b6fe:	f003 0307 	and.w	r3, r3, #7
}
 800b702:	4618      	mov	r0, r3
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	e000ed00 	.word	0xe000ed00

0800b710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b71a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	db0b      	blt.n	800b73a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b722:	79fb      	ldrb	r3, [r7, #7]
 800b724:	f003 021f 	and.w	r2, r3, #31
 800b728:	4907      	ldr	r1, [pc, #28]	; (800b748 <__NVIC_EnableIRQ+0x38>)
 800b72a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b72e:	095b      	lsrs	r3, r3, #5
 800b730:	2001      	movs	r0, #1
 800b732:	fa00 f202 	lsl.w	r2, r0, r2
 800b736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b73a:	bf00      	nop
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	e000e100 	.word	0xe000e100

0800b74c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	6039      	str	r1, [r7, #0]
 800b756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	db0a      	blt.n	800b776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	b2da      	uxtb	r2, r3
 800b764:	490c      	ldr	r1, [pc, #48]	; (800b798 <__NVIC_SetPriority+0x4c>)
 800b766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b76a:	0112      	lsls	r2, r2, #4
 800b76c:	b2d2      	uxtb	r2, r2
 800b76e:	440b      	add	r3, r1
 800b770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b774:	e00a      	b.n	800b78c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	4908      	ldr	r1, [pc, #32]	; (800b79c <__NVIC_SetPriority+0x50>)
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	f003 030f 	and.w	r3, r3, #15
 800b782:	3b04      	subs	r3, #4
 800b784:	0112      	lsls	r2, r2, #4
 800b786:	b2d2      	uxtb	r2, r2
 800b788:	440b      	add	r3, r1
 800b78a:	761a      	strb	r2, [r3, #24]
}
 800b78c:	bf00      	nop
 800b78e:	370c      	adds	r7, #12
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	e000e100 	.word	0xe000e100
 800b79c:	e000ed00 	.word	0xe000ed00

0800b7a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b089      	sub	sp, #36	; 0x24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	f1c3 0307 	rsb	r3, r3, #7
 800b7ba:	2b04      	cmp	r3, #4
 800b7bc:	bf28      	it	cs
 800b7be:	2304      	movcs	r3, #4
 800b7c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	3304      	adds	r3, #4
 800b7c6:	2b06      	cmp	r3, #6
 800b7c8:	d902      	bls.n	800b7d0 <NVIC_EncodePriority+0x30>
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	3b03      	subs	r3, #3
 800b7ce:	e000      	b.n	800b7d2 <NVIC_EncodePriority+0x32>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	fa02 f303 	lsl.w	r3, r2, r3
 800b7de:	43da      	mvns	r2, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	401a      	ands	r2, r3
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b7e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b7f2:	43d9      	mvns	r1, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b7f8:	4313      	orrs	r3, r2
         );
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3724      	adds	r7, #36	; 0x24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b806:	b580      	push	{r7, lr}
 800b808:	b082      	sub	sp, #8
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff ff4c 	bl	800b6ac <__NVIC_SetPriorityGrouping>
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
 800b822:	4603      	mov	r3, r0
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b82a:	2300      	movs	r3, #0
 800b82c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b82e:	f7ff ff61 	bl	800b6f4 <__NVIC_GetPriorityGrouping>
 800b832:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	68b9      	ldr	r1, [r7, #8]
 800b838:	6978      	ldr	r0, [r7, #20]
 800b83a:	f7ff ffb1 	bl	800b7a0 <NVIC_EncodePriority>
 800b83e:	4602      	mov	r2, r0
 800b840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b844:	4611      	mov	r1, r2
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff ff80 	bl	800b74c <__NVIC_SetPriority>
}
 800b84c:	bf00      	nop
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	4603      	mov	r3, r0
 800b85c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b85e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b862:	4618      	mov	r0, r3
 800b864:	f7ff ff54 	bl	800b710 <__NVIC_EnableIRQ>
}
 800b868:	bf00      	nop
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b870:	b480      	push	{r7}
 800b872:	b089      	sub	sp, #36	; 0x24
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800b87a:	2300      	movs	r3, #0
 800b87c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800b87e:	2300      	movs	r3, #0
 800b880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800b882:	2300      	movs	r3, #0
 800b884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800b886:	2300      	movs	r3, #0
 800b888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800b88a:	2300      	movs	r3, #0
 800b88c:	61fb      	str	r3, [r7, #28]
 800b88e:	e175      	b.n	800bb7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800b890:	2201      	movs	r2, #1
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	fa02 f303 	lsl.w	r3, r2, r3
 800b898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	f040 8164 	bne.w	800bb76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f003 0303 	and.w	r3, r3, #3
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d005      	beq.n	800b8c6 <HAL_GPIO_Init+0x56>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	f003 0303 	and.w	r3, r3, #3
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d130      	bne.n	800b928 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	2203      	movs	r2, #3
 800b8d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d6:	43db      	mvns	r3, r3
 800b8d8:	69ba      	ldr	r2, [r7, #24]
 800b8da:	4013      	ands	r3, r2
 800b8dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	68da      	ldr	r2, [r3, #12]
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ea:	69ba      	ldr	r2, [r7, #24]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	69ba      	ldr	r2, [r7, #24]
 800b8f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b8fc:	2201      	movs	r2, #1
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	fa02 f303 	lsl.w	r3, r2, r3
 800b904:	43db      	mvns	r3, r3
 800b906:	69ba      	ldr	r2, [r7, #24]
 800b908:	4013      	ands	r3, r2
 800b90a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	091b      	lsrs	r3, r3, #4
 800b912:	f003 0201 	and.w	r2, r3, #1
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	fa02 f303 	lsl.w	r3, r2, r3
 800b91c:	69ba      	ldr	r2, [r7, #24]
 800b91e:	4313      	orrs	r3, r2
 800b920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	69ba      	ldr	r2, [r7, #24]
 800b926:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	f003 0303 	and.w	r3, r3, #3
 800b930:	2b03      	cmp	r3, #3
 800b932:	d017      	beq.n	800b964 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	2203      	movs	r2, #3
 800b940:	fa02 f303 	lsl.w	r3, r2, r3
 800b944:	43db      	mvns	r3, r3
 800b946:	69ba      	ldr	r2, [r7, #24]
 800b948:	4013      	ands	r3, r2
 800b94a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	fa02 f303 	lsl.w	r3, r2, r3
 800b958:	69ba      	ldr	r2, [r7, #24]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	69ba      	ldr	r2, [r7, #24]
 800b962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f003 0303 	and.w	r3, r3, #3
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d123      	bne.n	800b9b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	08da      	lsrs	r2, r3, #3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	3208      	adds	r2, #8
 800b978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	f003 0307 	and.w	r3, r3, #7
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	220f      	movs	r2, #15
 800b988:	fa02 f303 	lsl.w	r3, r2, r3
 800b98c:	43db      	mvns	r3, r3
 800b98e:	69ba      	ldr	r2, [r7, #24]
 800b990:	4013      	ands	r3, r2
 800b992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	691a      	ldr	r2, [r3, #16]
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	f003 0307 	and.w	r3, r3, #7
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a4:	69ba      	ldr	r2, [r7, #24]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	08da      	lsrs	r2, r3, #3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	3208      	adds	r2, #8
 800b9b2:	69b9      	ldr	r1, [r7, #24]
 800b9b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	005b      	lsls	r3, r3, #1
 800b9c2:	2203      	movs	r2, #3
 800b9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c8:	43db      	mvns	r3, r3
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	f003 0203 	and.w	r2, r3, #3
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e0:	69ba      	ldr	r2, [r7, #24]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	69ba      	ldr	r2, [r7, #24]
 800b9ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 80be 	beq.w	800bb76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b9fa:	4b66      	ldr	r3, [pc, #408]	; (800bb94 <HAL_GPIO_Init+0x324>)
 800b9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fe:	4a65      	ldr	r2, [pc, #404]	; (800bb94 <HAL_GPIO_Init+0x324>)
 800ba00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba04:	6453      	str	r3, [r2, #68]	; 0x44
 800ba06:	4b63      	ldr	r3, [pc, #396]	; (800bb94 <HAL_GPIO_Init+0x324>)
 800ba08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800ba12:	4a61      	ldr	r2, [pc, #388]	; (800bb98 <HAL_GPIO_Init+0x328>)
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	089b      	lsrs	r3, r3, #2
 800ba18:	3302      	adds	r3, #2
 800ba1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	f003 0303 	and.w	r3, r3, #3
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	220f      	movs	r2, #15
 800ba2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba2e:	43db      	mvns	r3, r3
 800ba30:	69ba      	ldr	r2, [r7, #24]
 800ba32:	4013      	ands	r3, r2
 800ba34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a58      	ldr	r2, [pc, #352]	; (800bb9c <HAL_GPIO_Init+0x32c>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d037      	beq.n	800baae <HAL_GPIO_Init+0x23e>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a57      	ldr	r2, [pc, #348]	; (800bba0 <HAL_GPIO_Init+0x330>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d031      	beq.n	800baaa <HAL_GPIO_Init+0x23a>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a56      	ldr	r2, [pc, #344]	; (800bba4 <HAL_GPIO_Init+0x334>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d02b      	beq.n	800baa6 <HAL_GPIO_Init+0x236>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a55      	ldr	r2, [pc, #340]	; (800bba8 <HAL_GPIO_Init+0x338>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d025      	beq.n	800baa2 <HAL_GPIO_Init+0x232>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a54      	ldr	r2, [pc, #336]	; (800bbac <HAL_GPIO_Init+0x33c>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d01f      	beq.n	800ba9e <HAL_GPIO_Init+0x22e>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a53      	ldr	r2, [pc, #332]	; (800bbb0 <HAL_GPIO_Init+0x340>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d019      	beq.n	800ba9a <HAL_GPIO_Init+0x22a>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a52      	ldr	r2, [pc, #328]	; (800bbb4 <HAL_GPIO_Init+0x344>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d013      	beq.n	800ba96 <HAL_GPIO_Init+0x226>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a51      	ldr	r2, [pc, #324]	; (800bbb8 <HAL_GPIO_Init+0x348>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d00d      	beq.n	800ba92 <HAL_GPIO_Init+0x222>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a50      	ldr	r2, [pc, #320]	; (800bbbc <HAL_GPIO_Init+0x34c>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d007      	beq.n	800ba8e <HAL_GPIO_Init+0x21e>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a4f      	ldr	r2, [pc, #316]	; (800bbc0 <HAL_GPIO_Init+0x350>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d101      	bne.n	800ba8a <HAL_GPIO_Init+0x21a>
 800ba86:	2309      	movs	r3, #9
 800ba88:	e012      	b.n	800bab0 <HAL_GPIO_Init+0x240>
 800ba8a:	230a      	movs	r3, #10
 800ba8c:	e010      	b.n	800bab0 <HAL_GPIO_Init+0x240>
 800ba8e:	2308      	movs	r3, #8
 800ba90:	e00e      	b.n	800bab0 <HAL_GPIO_Init+0x240>
 800ba92:	2307      	movs	r3, #7
 800ba94:	e00c      	b.n	800bab0 <HAL_GPIO_Init+0x240>
 800ba96:	2306      	movs	r3, #6
 800ba98:	e00a      	b.n	800bab0 <HAL_GPIO_Init+0x240>
 800ba9a:	2305      	movs	r3, #5
 800ba9c:	e008      	b.n	800bab0 <HAL_GPIO_Init+0x240>
 800ba9e:	2304      	movs	r3, #4
 800baa0:	e006      	b.n	800bab0 <HAL_GPIO_Init+0x240>
 800baa2:	2303      	movs	r3, #3
 800baa4:	e004      	b.n	800bab0 <HAL_GPIO_Init+0x240>
 800baa6:	2302      	movs	r3, #2
 800baa8:	e002      	b.n	800bab0 <HAL_GPIO_Init+0x240>
 800baaa:	2301      	movs	r3, #1
 800baac:	e000      	b.n	800bab0 <HAL_GPIO_Init+0x240>
 800baae:	2300      	movs	r3, #0
 800bab0:	69fa      	ldr	r2, [r7, #28]
 800bab2:	f002 0203 	and.w	r2, r2, #3
 800bab6:	0092      	lsls	r2, r2, #2
 800bab8:	4093      	lsls	r3, r2
 800baba:	69ba      	ldr	r2, [r7, #24]
 800babc:	4313      	orrs	r3, r2
 800babe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800bac0:	4935      	ldr	r1, [pc, #212]	; (800bb98 <HAL_GPIO_Init+0x328>)
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	089b      	lsrs	r3, r3, #2
 800bac6:	3302      	adds	r3, #2
 800bac8:	69ba      	ldr	r2, [r7, #24]
 800baca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bace:	4b3d      	ldr	r3, [pc, #244]	; (800bbc4 <HAL_GPIO_Init+0x354>)
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	43db      	mvns	r3, r3
 800bad8:	69ba      	ldr	r2, [r7, #24]
 800bada:	4013      	ands	r3, r2
 800badc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800baea:	69ba      	ldr	r2, [r7, #24]
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	4313      	orrs	r3, r2
 800baf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800baf2:	4a34      	ldr	r2, [pc, #208]	; (800bbc4 <HAL_GPIO_Init+0x354>)
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800baf8:	4b32      	ldr	r3, [pc, #200]	; (800bbc4 <HAL_GPIO_Init+0x354>)
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	43db      	mvns	r3, r3
 800bb02:	69ba      	ldr	r2, [r7, #24]
 800bb04:	4013      	ands	r3, r2
 800bb06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d003      	beq.n	800bb1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800bb14:	69ba      	ldr	r2, [r7, #24]
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bb1c:	4a29      	ldr	r2, [pc, #164]	; (800bbc4 <HAL_GPIO_Init+0x354>)
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800bb22:	4b28      	ldr	r3, [pc, #160]	; (800bbc4 <HAL_GPIO_Init+0x354>)
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	43db      	mvns	r3, r3
 800bb2c:	69ba      	ldr	r2, [r7, #24]
 800bb2e:	4013      	ands	r3, r2
 800bb30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d003      	beq.n	800bb46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800bb3e:	69ba      	ldr	r2, [r7, #24]
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bb46:	4a1f      	ldr	r2, [pc, #124]	; (800bbc4 <HAL_GPIO_Init+0x354>)
 800bb48:	69bb      	ldr	r3, [r7, #24]
 800bb4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bb4c:	4b1d      	ldr	r3, [pc, #116]	; (800bbc4 <HAL_GPIO_Init+0x354>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	43db      	mvns	r3, r3
 800bb56:	69ba      	ldr	r2, [r7, #24]
 800bb58:	4013      	ands	r3, r2
 800bb5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d003      	beq.n	800bb70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800bb68:	69ba      	ldr	r2, [r7, #24]
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bb70:	4a14      	ldr	r2, [pc, #80]	; (800bbc4 <HAL_GPIO_Init+0x354>)
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	61fb      	str	r3, [r7, #28]
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	2b0f      	cmp	r3, #15
 800bb80:	f67f ae86 	bls.w	800b890 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800bb84:	bf00      	nop
 800bb86:	bf00      	nop
 800bb88:	3724      	adds	r7, #36	; 0x24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	40023800 	.word	0x40023800
 800bb98:	40013800 	.word	0x40013800
 800bb9c:	40020000 	.word	0x40020000
 800bba0:	40020400 	.word	0x40020400
 800bba4:	40020800 	.word	0x40020800
 800bba8:	40020c00 	.word	0x40020c00
 800bbac:	40021000 	.word	0x40021000
 800bbb0:	40021400 	.word	0x40021400
 800bbb4:	40021800 	.word	0x40021800
 800bbb8:	40021c00 	.word	0x40021c00
 800bbbc:	40022000 	.word	0x40022000
 800bbc0:	40022400 	.word	0x40022400
 800bbc4:	40013c00 	.word	0x40013c00

0800bbc8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b087      	sub	sp, #28
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800bbde:	2300      	movs	r3, #0
 800bbe0:	617b      	str	r3, [r7, #20]
 800bbe2:	e0d9      	b.n	800bd98 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800bbee:	683a      	ldr	r2, [r7, #0]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	f040 80c9 	bne.w	800bd92 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800bc00:	4a6b      	ldr	r2, [pc, #428]	; (800bdb0 <HAL_GPIO_DeInit+0x1e8>)
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	089b      	lsrs	r3, r3, #2
 800bc06:	3302      	adds	r3, #2
 800bc08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc0c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f003 0303 	and.w	r3, r3, #3
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	220f      	movs	r2, #15
 800bc18:	fa02 f303 	lsl.w	r3, r2, r3
 800bc1c:	68ba      	ldr	r2, [r7, #8]
 800bc1e:	4013      	ands	r3, r2
 800bc20:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4a63      	ldr	r2, [pc, #396]	; (800bdb4 <HAL_GPIO_DeInit+0x1ec>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d037      	beq.n	800bc9a <HAL_GPIO_DeInit+0xd2>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4a62      	ldr	r2, [pc, #392]	; (800bdb8 <HAL_GPIO_DeInit+0x1f0>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d031      	beq.n	800bc96 <HAL_GPIO_DeInit+0xce>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4a61      	ldr	r2, [pc, #388]	; (800bdbc <HAL_GPIO_DeInit+0x1f4>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d02b      	beq.n	800bc92 <HAL_GPIO_DeInit+0xca>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a60      	ldr	r2, [pc, #384]	; (800bdc0 <HAL_GPIO_DeInit+0x1f8>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d025      	beq.n	800bc8e <HAL_GPIO_DeInit+0xc6>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4a5f      	ldr	r2, [pc, #380]	; (800bdc4 <HAL_GPIO_DeInit+0x1fc>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d01f      	beq.n	800bc8a <HAL_GPIO_DeInit+0xc2>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4a5e      	ldr	r2, [pc, #376]	; (800bdc8 <HAL_GPIO_DeInit+0x200>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d019      	beq.n	800bc86 <HAL_GPIO_DeInit+0xbe>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a5d      	ldr	r2, [pc, #372]	; (800bdcc <HAL_GPIO_DeInit+0x204>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d013      	beq.n	800bc82 <HAL_GPIO_DeInit+0xba>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a5c      	ldr	r2, [pc, #368]	; (800bdd0 <HAL_GPIO_DeInit+0x208>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d00d      	beq.n	800bc7e <HAL_GPIO_DeInit+0xb6>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a5b      	ldr	r2, [pc, #364]	; (800bdd4 <HAL_GPIO_DeInit+0x20c>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d007      	beq.n	800bc7a <HAL_GPIO_DeInit+0xb2>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a5a      	ldr	r2, [pc, #360]	; (800bdd8 <HAL_GPIO_DeInit+0x210>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d101      	bne.n	800bc76 <HAL_GPIO_DeInit+0xae>
 800bc72:	2309      	movs	r3, #9
 800bc74:	e012      	b.n	800bc9c <HAL_GPIO_DeInit+0xd4>
 800bc76:	230a      	movs	r3, #10
 800bc78:	e010      	b.n	800bc9c <HAL_GPIO_DeInit+0xd4>
 800bc7a:	2308      	movs	r3, #8
 800bc7c:	e00e      	b.n	800bc9c <HAL_GPIO_DeInit+0xd4>
 800bc7e:	2307      	movs	r3, #7
 800bc80:	e00c      	b.n	800bc9c <HAL_GPIO_DeInit+0xd4>
 800bc82:	2306      	movs	r3, #6
 800bc84:	e00a      	b.n	800bc9c <HAL_GPIO_DeInit+0xd4>
 800bc86:	2305      	movs	r3, #5
 800bc88:	e008      	b.n	800bc9c <HAL_GPIO_DeInit+0xd4>
 800bc8a:	2304      	movs	r3, #4
 800bc8c:	e006      	b.n	800bc9c <HAL_GPIO_DeInit+0xd4>
 800bc8e:	2303      	movs	r3, #3
 800bc90:	e004      	b.n	800bc9c <HAL_GPIO_DeInit+0xd4>
 800bc92:	2302      	movs	r3, #2
 800bc94:	e002      	b.n	800bc9c <HAL_GPIO_DeInit+0xd4>
 800bc96:	2301      	movs	r3, #1
 800bc98:	e000      	b.n	800bc9c <HAL_GPIO_DeInit+0xd4>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	697a      	ldr	r2, [r7, #20]
 800bc9e:	f002 0203 	and.w	r2, r2, #3
 800bca2:	0092      	lsls	r2, r2, #2
 800bca4:	4093      	lsls	r3, r2
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d132      	bne.n	800bd12 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800bcac:	4b4b      	ldr	r3, [pc, #300]	; (800bddc <HAL_GPIO_DeInit+0x214>)
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	43db      	mvns	r3, r3
 800bcb4:	4949      	ldr	r1, [pc, #292]	; (800bddc <HAL_GPIO_DeInit+0x214>)
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800bcba:	4b48      	ldr	r3, [pc, #288]	; (800bddc <HAL_GPIO_DeInit+0x214>)
 800bcbc:	685a      	ldr	r2, [r3, #4]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	43db      	mvns	r3, r3
 800bcc2:	4946      	ldr	r1, [pc, #280]	; (800bddc <HAL_GPIO_DeInit+0x214>)
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800bcc8:	4b44      	ldr	r3, [pc, #272]	; (800bddc <HAL_GPIO_DeInit+0x214>)
 800bcca:	68da      	ldr	r2, [r3, #12]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	43db      	mvns	r3, r3
 800bcd0:	4942      	ldr	r1, [pc, #264]	; (800bddc <HAL_GPIO_DeInit+0x214>)
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800bcd6:	4b41      	ldr	r3, [pc, #260]	; (800bddc <HAL_GPIO_DeInit+0x214>)
 800bcd8:	689a      	ldr	r2, [r3, #8]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	43db      	mvns	r3, r3
 800bcde:	493f      	ldr	r1, [pc, #252]	; (800bddc <HAL_GPIO_DeInit+0x214>)
 800bce0:	4013      	ands	r3, r2
 800bce2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	f003 0303 	and.w	r3, r3, #3
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	220f      	movs	r2, #15
 800bcee:	fa02 f303 	lsl.w	r3, r2, r3
 800bcf2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800bcf4:	4a2e      	ldr	r2, [pc, #184]	; (800bdb0 <HAL_GPIO_DeInit+0x1e8>)
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	089b      	lsrs	r3, r3, #2
 800bcfa:	3302      	adds	r3, #2
 800bcfc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	43da      	mvns	r2, r3
 800bd04:	482a      	ldr	r0, [pc, #168]	; (800bdb0 <HAL_GPIO_DeInit+0x1e8>)
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	089b      	lsrs	r3, r3, #2
 800bd0a:	400a      	ands	r2, r1
 800bd0c:	3302      	adds	r3, #2
 800bd0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	005b      	lsls	r3, r3, #1
 800bd1a:	2103      	movs	r1, #3
 800bd1c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd20:	43db      	mvns	r3, r3
 800bd22:	401a      	ands	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	08da      	lsrs	r2, r3, #3
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3208      	adds	r2, #8
 800bd30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f003 0307 	and.w	r3, r3, #7
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	220f      	movs	r2, #15
 800bd3e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd42:	43db      	mvns	r3, r3
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	08d2      	lsrs	r2, r2, #3
 800bd48:	4019      	ands	r1, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	3208      	adds	r2, #8
 800bd4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	2103      	movs	r1, #3
 800bd5c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd60:	43db      	mvns	r3, r3
 800bd62:	401a      	ands	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	fa01 f303 	lsl.w	r3, r1, r3
 800bd74:	43db      	mvns	r3, r3
 800bd76:	401a      	ands	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	689a      	ldr	r2, [r3, #8]
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	005b      	lsls	r3, r3, #1
 800bd84:	2103      	movs	r1, #3
 800bd86:	fa01 f303 	lsl.w	r3, r1, r3
 800bd8a:	43db      	mvns	r3, r3
 800bd8c:	401a      	ands	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	3301      	adds	r3, #1
 800bd96:	617b      	str	r3, [r7, #20]
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	2b0f      	cmp	r3, #15
 800bd9c:	f67f af22 	bls.w	800bbe4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800bda0:	bf00      	nop
 800bda2:	bf00      	nop
 800bda4:	371c      	adds	r7, #28
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	40013800 	.word	0x40013800
 800bdb4:	40020000 	.word	0x40020000
 800bdb8:	40020400 	.word	0x40020400
 800bdbc:	40020800 	.word	0x40020800
 800bdc0:	40020c00 	.word	0x40020c00
 800bdc4:	40021000 	.word	0x40021000
 800bdc8:	40021400 	.word	0x40021400
 800bdcc:	40021800 	.word	0x40021800
 800bdd0:	40021c00 	.word	0x40021c00
 800bdd4:	40022000 	.word	0x40022000
 800bdd8:	40022400 	.word	0x40022400
 800bddc:	40013c00 	.word	0x40013c00

0800bde0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	460b      	mov	r3, r1
 800bdea:	807b      	strh	r3, [r7, #2]
 800bdec:	4613      	mov	r3, r2
 800bdee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bdf0:	787b      	ldrb	r3, [r7, #1]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d003      	beq.n	800bdfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bdf6:	887a      	ldrh	r2, [r7, #2]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800bdfc:	e003      	b.n	800be06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800bdfe:	887b      	ldrh	r3, [r7, #2]
 800be00:	041a      	lsls	r2, r3, #16
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	619a      	str	r2, [r3, #24]
}
 800be06:	bf00      	nop
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
	...

0800be14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d101      	bne.n	800be26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	e07f      	b.n	800bf26 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f8a9 	bl	800bf92 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2224      	movs	r2, #36	; 0x24
 800be44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f022 0201 	bic.w	r2, r2, #1
 800be56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	685a      	ldr	r2, [r3, #4]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800be64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	689a      	ldr	r2, [r3, #8]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d107      	bne.n	800be8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	689a      	ldr	r2, [r3, #8]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be8a:	609a      	str	r2, [r3, #8]
 800be8c:	e006      	b.n	800be9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	689a      	ldr	r2, [r3, #8]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800be9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d104      	bne.n	800beae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800beac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	6859      	ldr	r1, [r3, #4]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	4b1d      	ldr	r3, [pc, #116]	; (800bf30 <HAL_I2C_Init+0x11c>)
 800beba:	430b      	orrs	r3, r1
 800bebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	68da      	ldr	r2, [r3, #12]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800becc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	691a      	ldr	r2, [r3, #16]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	695b      	ldr	r3, [r3, #20]
 800bed6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	430a      	orrs	r2, r1
 800bee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	69d9      	ldr	r1, [r3, #28]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6a1a      	ldr	r2, [r3, #32]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	430a      	orrs	r2, r1
 800bef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f042 0201 	orr.w	r2, r2, #1
 800bf06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2220      	movs	r2, #32
 800bf12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	02008000 	.word	0x02008000

0800bf34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e021      	b.n	800bf8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2224      	movs	r2, #36	; 0x24
 800bf4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681a      	ldr	r2, [r3, #0]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f022 0201 	bic.w	r2, r2, #1
 800bf5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f821 	bl	800bfa6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800bf9a:	bf00      	nop
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	b083      	sub	sp, #12
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800bfae:	bf00      	nop
 800bfb0:	370c      	adds	r7, #12
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
	...

0800bfbc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b088      	sub	sp, #32
 800bfc0:	af02      	add	r7, sp, #8
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	4608      	mov	r0, r1
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	461a      	mov	r2, r3
 800bfca:	4603      	mov	r3, r0
 800bfcc:	817b      	strh	r3, [r7, #10]
 800bfce:	460b      	mov	r3, r1
 800bfd0:	813b      	strh	r3, [r7, #8]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b20      	cmp	r3, #32
 800bfe0:	f040 80f9 	bne.w	800c1d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfe4:	6a3b      	ldr	r3, [r7, #32]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d002      	beq.n	800bff0 <HAL_I2C_Mem_Write+0x34>
 800bfea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d105      	bne.n	800bffc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bff6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e0ed      	b.n	800c1d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c002:	2b01      	cmp	r3, #1
 800c004:	d101      	bne.n	800c00a <HAL_I2C_Mem_Write+0x4e>
 800c006:	2302      	movs	r3, #2
 800c008:	e0e6      	b.n	800c1d8 <HAL_I2C_Mem_Write+0x21c>
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c012:	f7ff fb3f 	bl	800b694 <HAL_GetTick>
 800c016:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	2319      	movs	r3, #25
 800c01e:	2201      	movs	r2, #1
 800c020:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 fadd 	bl	800c5e4 <I2C_WaitOnFlagUntilTimeout>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d001      	beq.n	800c034 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e0d1      	b.n	800c1d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2221      	movs	r2, #33	; 0x21
 800c038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2240      	movs	r2, #64	; 0x40
 800c040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6a3a      	ldr	r2, [r7, #32]
 800c04e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c054:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2200      	movs	r2, #0
 800c05a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c05c:	88f8      	ldrh	r0, [r7, #6]
 800c05e:	893a      	ldrh	r2, [r7, #8]
 800c060:	8979      	ldrh	r1, [r7, #10]
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	9301      	str	r3, [sp, #4]
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	4603      	mov	r3, r0
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f000 f9ed 	bl	800c44c <I2C_RequestMemoryWrite>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2200      	movs	r2, #0
 800c07c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	e0a9      	b.n	800c1d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c088:	b29b      	uxth	r3, r3
 800c08a:	2bff      	cmp	r3, #255	; 0xff
 800c08c:	d90e      	bls.n	800c0ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	22ff      	movs	r2, #255	; 0xff
 800c092:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	8979      	ldrh	r1, [r7, #10]
 800c09c:	2300      	movs	r3, #0
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c0a4:	68f8      	ldr	r0, [r7, #12]
 800c0a6:	f000 fc39 	bl	800c91c <I2C_TransferConfig>
 800c0aa:	e00f      	b.n	800c0cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	8979      	ldrh	r1, [r7, #10]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f000 fc28 	bl	800c91c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c0cc:	697a      	ldr	r2, [r7, #20]
 800c0ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	f000 fac7 	bl	800c664 <I2C_WaitOnTXISFlagUntilTimeout>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e07b      	b.n	800c1d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e4:	781a      	ldrb	r2, [r3, #0]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0fa:	b29b      	uxth	r3, r3
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	b29a      	uxth	r2, r3
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c108:	3b01      	subs	r3, #1
 800c10a:	b29a      	uxth	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c114:	b29b      	uxth	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d034      	beq.n	800c184 <HAL_I2C_Mem_Write+0x1c8>
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d130      	bne.n	800c184 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c128:	2200      	movs	r2, #0
 800c12a:	2180      	movs	r1, #128	; 0x80
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f000 fa59 	bl	800c5e4 <I2C_WaitOnFlagUntilTimeout>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d001      	beq.n	800c13c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	e04d      	b.n	800c1d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c140:	b29b      	uxth	r3, r3
 800c142:	2bff      	cmp	r3, #255	; 0xff
 800c144:	d90e      	bls.n	800c164 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	22ff      	movs	r2, #255	; 0xff
 800c14a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c150:	b2da      	uxtb	r2, r3
 800c152:	8979      	ldrh	r1, [r7, #10]
 800c154:	2300      	movs	r3, #0
 800c156:	9300      	str	r3, [sp, #0]
 800c158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f000 fbdd 	bl	800c91c <I2C_TransferConfig>
 800c162:	e00f      	b.n	800c184 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c168:	b29a      	uxth	r2, r3
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c172:	b2da      	uxtb	r2, r3
 800c174:	8979      	ldrh	r1, [r7, #10]
 800c176:	2300      	movs	r3, #0
 800c178:	9300      	str	r3, [sp, #0]
 800c17a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 fbcc 	bl	800c91c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c188:	b29b      	uxth	r3, r3
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d19e      	bne.n	800c0cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c192:	68f8      	ldr	r0, [r7, #12]
 800c194:	f000 faa6 	bl	800c6e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d001      	beq.n	800c1a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e01a      	b.n	800c1d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6859      	ldr	r1, [r3, #4]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	4b0a      	ldr	r3, [pc, #40]	; (800c1e0 <HAL_I2C_Mem_Write+0x224>)
 800c1b6:	400b      	ands	r3, r1
 800c1b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2220      	movs	r2, #32
 800c1be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	e000      	b.n	800c1d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c1d6:	2302      	movs	r3, #2
  }
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3718      	adds	r7, #24
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	fe00e800 	.word	0xfe00e800

0800c1e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af02      	add	r7, sp, #8
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	4608      	mov	r0, r1
 800c1ee:	4611      	mov	r1, r2
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	817b      	strh	r3, [r7, #10]
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	813b      	strh	r3, [r7, #8]
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b20      	cmp	r3, #32
 800c208:	f040 80fd 	bne.w	800c406 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c20c:	6a3b      	ldr	r3, [r7, #32]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d002      	beq.n	800c218 <HAL_I2C_Mem_Read+0x34>
 800c212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c214:	2b00      	cmp	r3, #0
 800c216:	d105      	bne.n	800c224 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c21e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	e0f1      	b.n	800c408 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d101      	bne.n	800c232 <HAL_I2C_Mem_Read+0x4e>
 800c22e:	2302      	movs	r3, #2
 800c230:	e0ea      	b.n	800c408 <HAL_I2C_Mem_Read+0x224>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2201      	movs	r2, #1
 800c236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c23a:	f7ff fa2b 	bl	800b694 <HAL_GetTick>
 800c23e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	2319      	movs	r3, #25
 800c246:	2201      	movs	r2, #1
 800c248:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f000 f9c9 	bl	800c5e4 <I2C_WaitOnFlagUntilTimeout>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d001      	beq.n	800c25c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	e0d5      	b.n	800c408 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2222      	movs	r2, #34	; 0x22
 800c260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2240      	movs	r2, #64	; 0x40
 800c268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2200      	movs	r2, #0
 800c270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6a3a      	ldr	r2, [r7, #32]
 800c276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c27c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c284:	88f8      	ldrh	r0, [r7, #6]
 800c286:	893a      	ldrh	r2, [r7, #8]
 800c288:	8979      	ldrh	r1, [r7, #10]
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	9301      	str	r3, [sp, #4]
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	9300      	str	r3, [sp, #0]
 800c292:	4603      	mov	r3, r0
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f000 f92d 	bl	800c4f4 <I2C_RequestMemoryRead>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d005      	beq.n	800c2ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e0ad      	b.n	800c408 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	2bff      	cmp	r3, #255	; 0xff
 800c2b4:	d90e      	bls.n	800c2d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	22ff      	movs	r2, #255	; 0xff
 800c2ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	8979      	ldrh	r1, [r7, #10]
 800c2c4:	4b52      	ldr	r3, [pc, #328]	; (800c410 <HAL_I2C_Mem_Read+0x22c>)
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f000 fb25 	bl	800c91c <I2C_TransferConfig>
 800c2d2:	e00f      	b.n	800c2f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2e2:	b2da      	uxtb	r2, r3
 800c2e4:	8979      	ldrh	r1, [r7, #10]
 800c2e6:	4b4a      	ldr	r3, [pc, #296]	; (800c410 <HAL_I2C_Mem_Read+0x22c>)
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f000 fb14 	bl	800c91c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	2104      	movs	r1, #4
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f000 f970 	bl	800c5e4 <I2C_WaitOnFlagUntilTimeout>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c30a:	2301      	movs	r3, #1
 800c30c:	e07c      	b.n	800c408 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c318:	b2d2      	uxtb	r2, r2
 800c31a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c320:	1c5a      	adds	r2, r3, #1
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c32a:	3b01      	subs	r3, #1
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c336:	b29b      	uxth	r3, r3
 800c338:	3b01      	subs	r3, #1
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c344:	b29b      	uxth	r3, r3
 800c346:	2b00      	cmp	r3, #0
 800c348:	d034      	beq.n	800c3b4 <HAL_I2C_Mem_Read+0x1d0>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d130      	bne.n	800c3b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c358:	2200      	movs	r2, #0
 800c35a:	2180      	movs	r1, #128	; 0x80
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f000 f941 	bl	800c5e4 <I2C_WaitOnFlagUntilTimeout>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	e04d      	b.n	800c408 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c370:	b29b      	uxth	r3, r3
 800c372:	2bff      	cmp	r3, #255	; 0xff
 800c374:	d90e      	bls.n	800c394 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	22ff      	movs	r2, #255	; 0xff
 800c37a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c380:	b2da      	uxtb	r2, r3
 800c382:	8979      	ldrh	r1, [r7, #10]
 800c384:	2300      	movs	r3, #0
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 fac5 	bl	800c91c <I2C_TransferConfig>
 800c392:	e00f      	b.n	800c3b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c398:	b29a      	uxth	r2, r3
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3a2:	b2da      	uxtb	r2, r3
 800c3a4:	8979      	ldrh	r1, [r7, #10]
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f000 fab4 	bl	800c91c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d19a      	bne.n	800c2f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f000 f98e 	bl	800c6e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d001      	beq.n	800c3d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e01a      	b.n	800c408 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2220      	movs	r2, #32
 800c3d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	6859      	ldr	r1, [r3, #4]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	; (800c414 <HAL_I2C_Mem_Read+0x230>)
 800c3e6:	400b      	ands	r3, r1
 800c3e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2220      	movs	r2, #32
 800c3ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c402:	2300      	movs	r3, #0
 800c404:	e000      	b.n	800c408 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c406:	2302      	movs	r3, #2
  }
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3718      	adds	r7, #24
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	80002400 	.word	0x80002400
 800c414:	fe00e800 	.word	0xfe00e800

0800c418 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c426:	b2db      	uxtb	r3, r3
}
 800c428:	4618      	mov	r0, r3
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800c440:	4618      	mov	r0, r3
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b086      	sub	sp, #24
 800c450:	af02      	add	r7, sp, #8
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	4608      	mov	r0, r1
 800c456:	4611      	mov	r1, r2
 800c458:	461a      	mov	r2, r3
 800c45a:	4603      	mov	r3, r0
 800c45c:	817b      	strh	r3, [r7, #10]
 800c45e:	460b      	mov	r3, r1
 800c460:	813b      	strh	r3, [r7, #8]
 800c462:	4613      	mov	r3, r2
 800c464:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c466:	88fb      	ldrh	r3, [r7, #6]
 800c468:	b2da      	uxtb	r2, r3
 800c46a:	8979      	ldrh	r1, [r7, #10]
 800c46c:	4b20      	ldr	r3, [pc, #128]	; (800c4f0 <I2C_RequestMemoryWrite+0xa4>)
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f000 fa51 	bl	800c91c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c47a:	69fa      	ldr	r2, [r7, #28]
 800c47c:	69b9      	ldr	r1, [r7, #24]
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 f8f0 	bl	800c664 <I2C_WaitOnTXISFlagUntilTimeout>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e02c      	b.n	800c4e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c48e:	88fb      	ldrh	r3, [r7, #6]
 800c490:	2b01      	cmp	r3, #1
 800c492:	d105      	bne.n	800c4a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c494:	893b      	ldrh	r3, [r7, #8]
 800c496:	b2da      	uxtb	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	629a      	str	r2, [r3, #40]	; 0x28
 800c49e:	e015      	b.n	800c4cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c4a0:	893b      	ldrh	r3, [r7, #8]
 800c4a2:	0a1b      	lsrs	r3, r3, #8
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4ae:	69fa      	ldr	r2, [r7, #28]
 800c4b0:	69b9      	ldr	r1, [r7, #24]
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f000 f8d6 	bl	800c664 <I2C_WaitOnTXISFlagUntilTimeout>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d001      	beq.n	800c4c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e012      	b.n	800c4e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c4c2:	893b      	ldrh	r3, [r7, #8]
 800c4c4:	b2da      	uxtb	r2, r3
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	2180      	movs	r1, #128	; 0x80
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f000 f884 	bl	800c5e4 <I2C_WaitOnFlagUntilTimeout>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e000      	b.n	800c4e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	80002000 	.word	0x80002000

0800c4f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b086      	sub	sp, #24
 800c4f8:	af02      	add	r7, sp, #8
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	4608      	mov	r0, r1
 800c4fe:	4611      	mov	r1, r2
 800c500:	461a      	mov	r2, r3
 800c502:	4603      	mov	r3, r0
 800c504:	817b      	strh	r3, [r7, #10]
 800c506:	460b      	mov	r3, r1
 800c508:	813b      	strh	r3, [r7, #8]
 800c50a:	4613      	mov	r3, r2
 800c50c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c50e:	88fb      	ldrh	r3, [r7, #6]
 800c510:	b2da      	uxtb	r2, r3
 800c512:	8979      	ldrh	r1, [r7, #10]
 800c514:	4b20      	ldr	r3, [pc, #128]	; (800c598 <I2C_RequestMemoryRead+0xa4>)
 800c516:	9300      	str	r3, [sp, #0]
 800c518:	2300      	movs	r3, #0
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f000 f9fe 	bl	800c91c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c520:	69fa      	ldr	r2, [r7, #28]
 800c522:	69b9      	ldr	r1, [r7, #24]
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f000 f89d 	bl	800c664 <I2C_WaitOnTXISFlagUntilTimeout>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d001      	beq.n	800c534 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	e02c      	b.n	800c58e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c534:	88fb      	ldrh	r3, [r7, #6]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d105      	bne.n	800c546 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c53a:	893b      	ldrh	r3, [r7, #8]
 800c53c:	b2da      	uxtb	r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	629a      	str	r2, [r3, #40]	; 0x28
 800c544:	e015      	b.n	800c572 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c546:	893b      	ldrh	r3, [r7, #8]
 800c548:	0a1b      	lsrs	r3, r3, #8
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	b2da      	uxtb	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c554:	69fa      	ldr	r2, [r7, #28]
 800c556:	69b9      	ldr	r1, [r7, #24]
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f000 f883 	bl	800c664 <I2C_WaitOnTXISFlagUntilTimeout>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d001      	beq.n	800c568 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	e012      	b.n	800c58e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c568:	893b      	ldrh	r3, [r7, #8]
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	69bb      	ldr	r3, [r7, #24]
 800c578:	2200      	movs	r2, #0
 800c57a:	2140      	movs	r1, #64	; 0x40
 800c57c:	68f8      	ldr	r0, [r7, #12]
 800c57e:	f000 f831 	bl	800c5e4 <I2C_WaitOnFlagUntilTimeout>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d001      	beq.n	800c58c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	e000      	b.n	800c58e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	80002000 	.word	0x80002000

0800c59c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	f003 0302 	and.w	r3, r3, #2
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	d103      	bne.n	800c5ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	f003 0301 	and.w	r3, r3, #1
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d007      	beq.n	800c5d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	699a      	ldr	r2, [r3, #24]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f042 0201 	orr.w	r2, r2, #1
 800c5d6:	619a      	str	r2, [r3, #24]
  }
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	603b      	str	r3, [r7, #0]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c5f4:	e022      	b.n	800c63c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5fc:	d01e      	beq.n	800c63c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5fe:	f7ff f849 	bl	800b694 <HAL_GetTick>
 800c602:	4602      	mov	r2, r0
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	683a      	ldr	r2, [r7, #0]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d302      	bcc.n	800c614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d113      	bne.n	800c63c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c618:	f043 0220 	orr.w	r2, r3, #32
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2220      	movs	r2, #32
 800c624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c638:	2301      	movs	r3, #1
 800c63a:	e00f      	b.n	800c65c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	699a      	ldr	r2, [r3, #24]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	4013      	ands	r3, r2
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	429a      	cmp	r2, r3
 800c64a:	bf0c      	ite	eq
 800c64c:	2301      	moveq	r3, #1
 800c64e:	2300      	movne	r3, #0
 800c650:	b2db      	uxtb	r3, r3
 800c652:	461a      	mov	r2, r3
 800c654:	79fb      	ldrb	r3, [r7, #7]
 800c656:	429a      	cmp	r2, r3
 800c658:	d0cd      	beq.n	800c5f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c670:	e02c      	b.n	800c6cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	68b9      	ldr	r1, [r7, #8]
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f000 f870 	bl	800c75c <I2C_IsErrorOccurred>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e02a      	b.n	800c6dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68c:	d01e      	beq.n	800c6cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c68e:	f7ff f801 	bl	800b694 <HAL_GetTick>
 800c692:	4602      	mov	r2, r0
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d302      	bcc.n	800c6a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d113      	bne.n	800c6cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6a8:	f043 0220 	orr.w	r2, r3, #32
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2220      	movs	r2, #32
 800c6b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e007      	b.n	800c6dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	699b      	ldr	r3, [r3, #24]
 800c6d2:	f003 0302 	and.w	r3, r3, #2
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d1cb      	bne.n	800c672 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c6f0:	e028      	b.n	800c744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	68b9      	ldr	r1, [r7, #8]
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f000 f830 	bl	800c75c <I2C_IsErrorOccurred>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e026      	b.n	800c754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c706:	f7fe ffc5 	bl	800b694 <HAL_GetTick>
 800c70a:	4602      	mov	r2, r0
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	429a      	cmp	r2, r3
 800c714:	d302      	bcc.n	800c71c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d113      	bne.n	800c744 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c720:	f043 0220 	orr.w	r2, r3, #32
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2220      	movs	r2, #32
 800c72c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2200      	movs	r2, #0
 800c734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	e007      	b.n	800c754 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	f003 0320 	and.w	r3, r3, #32
 800c74e:	2b20      	cmp	r3, #32
 800c750:	d1cf      	bne.n	800c6f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b08a      	sub	sp, #40	; 0x28
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	f003 0310 	and.w	r3, r3, #16
 800c784:	2b00      	cmp	r3, #0
 800c786:	d068      	beq.n	800c85a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2210      	movs	r2, #16
 800c78e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c790:	e049      	b.n	800c826 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c798:	d045      	beq.n	800c826 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c79a:	f7fe ff7b 	bl	800b694 <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d302      	bcc.n	800c7b0 <I2C_IsErrorOccurred+0x54>
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d13a      	bne.n	800c826 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c7c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7d2:	d121      	bne.n	800c818 <I2C_IsErrorOccurred+0xbc>
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7da:	d01d      	beq.n	800c818 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c7dc:	7cfb      	ldrb	r3, [r7, #19]
 800c7de:	2b20      	cmp	r3, #32
 800c7e0:	d01a      	beq.n	800c818 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	685a      	ldr	r2, [r3, #4]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c7f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c7f2:	f7fe ff4f 	bl	800b694 <HAL_GetTick>
 800c7f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c7f8:	e00e      	b.n	800c818 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c7fa:	f7fe ff4b 	bl	800b694 <HAL_GetTick>
 800c7fe:	4602      	mov	r2, r0
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	1ad3      	subs	r3, r2, r3
 800c804:	2b19      	cmp	r3, #25
 800c806:	d907      	bls.n	800c818 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800c808:	6a3b      	ldr	r3, [r7, #32]
 800c80a:	f043 0320 	orr.w	r3, r3, #32
 800c80e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c816:	e006      	b.n	800c826 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	f003 0320 	and.w	r3, r3, #32
 800c822:	2b20      	cmp	r3, #32
 800c824:	d1e9      	bne.n	800c7fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	699b      	ldr	r3, [r3, #24]
 800c82c:	f003 0320 	and.w	r3, r3, #32
 800c830:	2b20      	cmp	r3, #32
 800c832:	d003      	beq.n	800c83c <I2C_IsErrorOccurred+0xe0>
 800c834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d0aa      	beq.n	800c792 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c83c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c840:	2b00      	cmp	r3, #0
 800c842:	d103      	bne.n	800c84c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2220      	movs	r2, #32
 800c84a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	f043 0304 	orr.w	r3, r3, #4
 800c852:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	699b      	ldr	r3, [r3, #24]
 800c860:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00b      	beq.n	800c884 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c87c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c87e:	2301      	movs	r3, #1
 800c880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c884:	69bb      	ldr	r3, [r7, #24]
 800c886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00b      	beq.n	800c8a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c88e:	6a3b      	ldr	r3, [r7, #32]
 800c890:	f043 0308 	orr.w	r3, r3, #8
 800c894:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c89e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00b      	beq.n	800c8c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	f043 0302 	orr.w	r3, r3, #2
 800c8b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c8c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d01c      	beq.n	800c90a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f7ff fe63 	bl	800c59c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6859      	ldr	r1, [r3, #4]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	4b0d      	ldr	r3, [pc, #52]	; (800c918 <I2C_IsErrorOccurred+0x1bc>)
 800c8e2:	400b      	ands	r3, r1
 800c8e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8ea:	6a3b      	ldr	r3, [r7, #32]
 800c8ec:	431a      	orrs	r2, r3
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2220      	movs	r2, #32
 800c8f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3728      	adds	r7, #40	; 0x28
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	fe00e800 	.word	0xfe00e800

0800c91c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b087      	sub	sp, #28
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	607b      	str	r3, [r7, #4]
 800c926:	460b      	mov	r3, r1
 800c928:	817b      	strh	r3, [r7, #10]
 800c92a:	4613      	mov	r3, r2
 800c92c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c92e:	897b      	ldrh	r3, [r7, #10]
 800c930:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c934:	7a7b      	ldrb	r3, [r7, #9]
 800c936:	041b      	lsls	r3, r3, #16
 800c938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c93c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c942:	6a3b      	ldr	r3, [r7, #32]
 800c944:	4313      	orrs	r3, r2
 800c946:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c94a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	685a      	ldr	r2, [r3, #4]
 800c952:	6a3b      	ldr	r3, [r7, #32]
 800c954:	0d5b      	lsrs	r3, r3, #21
 800c956:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c95a:	4b08      	ldr	r3, [pc, #32]	; (800c97c <I2C_TransferConfig+0x60>)
 800c95c:	430b      	orrs	r3, r1
 800c95e:	43db      	mvns	r3, r3
 800c960:	ea02 0103 	and.w	r1, r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	697a      	ldr	r2, [r7, #20]
 800c96a:	430a      	orrs	r2, r1
 800c96c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c96e:	bf00      	nop
 800c970:	371c      	adds	r7, #28
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	03ff63ff 	.word	0x03ff63ff

0800c980 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c990:	b2db      	uxtb	r3, r3
 800c992:	2b20      	cmp	r3, #32
 800c994:	d138      	bne.n	800ca08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d101      	bne.n	800c9a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e032      	b.n	800ca0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2224      	movs	r2, #36	; 0x24
 800c9b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f022 0201 	bic.w	r2, r2, #1
 800c9c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c9d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	6819      	ldr	r1, [r3, #0]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	683a      	ldr	r2, [r7, #0]
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f042 0201 	orr.w	r2, r2, #1
 800c9f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2220      	movs	r2, #32
 800c9f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	e000      	b.n	800ca0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ca08:	2302      	movs	r3, #2
  }
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	370c      	adds	r7, #12
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr

0800ca16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ca16:	b480      	push	{r7}
 800ca18:	b085      	sub	sp, #20
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	2b20      	cmp	r3, #32
 800ca2a:	d139      	bne.n	800caa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d101      	bne.n	800ca3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ca36:	2302      	movs	r3, #2
 800ca38:	e033      	b.n	800caa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2224      	movs	r2, #36	; 0x24
 800ca46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f022 0201 	bic.w	r2, r2, #1
 800ca58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ca68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	021b      	lsls	r3, r3, #8
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	4313      	orrs	r3, r2
 800ca72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f042 0201 	orr.w	r2, r2, #1
 800ca8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2220      	movs	r2, #32
 800ca90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e000      	b.n	800caa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800caa0:	2302      	movs	r3, #2
  }
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3714      	adds	r7, #20
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
	...

0800cab0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800cab0:	b480      	push	{r7}
 800cab2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cab4:	4b05      	ldr	r3, [pc, #20]	; (800cacc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a04      	ldr	r2, [pc, #16]	; (800cacc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800caba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cabe:	6013      	str	r3, [r2, #0]
}
 800cac0:	bf00      	nop
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	40007000 	.word	0x40007000

0800cad0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800cada:	4b23      	ldr	r3, [pc, #140]	; (800cb68 <HAL_PWREx_EnableOverDrive+0x98>)
 800cadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cade:	4a22      	ldr	r2, [pc, #136]	; (800cb68 <HAL_PWREx_EnableOverDrive+0x98>)
 800cae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cae4:	6413      	str	r3, [r2, #64]	; 0x40
 800cae6:	4b20      	ldr	r3, [pc, #128]	; (800cb68 <HAL_PWREx_EnableOverDrive+0x98>)
 800cae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800caf2:	4b1e      	ldr	r3, [pc, #120]	; (800cb6c <HAL_PWREx_EnableOverDrive+0x9c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a1d      	ldr	r2, [pc, #116]	; (800cb6c <HAL_PWREx_EnableOverDrive+0x9c>)
 800caf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cafc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cafe:	f7fe fdc9 	bl	800b694 <HAL_GetTick>
 800cb02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cb04:	e009      	b.n	800cb1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cb06:	f7fe fdc5 	bl	800b694 <HAL_GetTick>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	1ad3      	subs	r3, r2, r3
 800cb10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb14:	d901      	bls.n	800cb1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800cb16:	2303      	movs	r3, #3
 800cb18:	e022      	b.n	800cb60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cb1a:	4b14      	ldr	r3, [pc, #80]	; (800cb6c <HAL_PWREx_EnableOverDrive+0x9c>)
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb26:	d1ee      	bne.n	800cb06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800cb28:	4b10      	ldr	r3, [pc, #64]	; (800cb6c <HAL_PWREx_EnableOverDrive+0x9c>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a0f      	ldr	r2, [pc, #60]	; (800cb6c <HAL_PWREx_EnableOverDrive+0x9c>)
 800cb2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cb34:	f7fe fdae 	bl	800b694 <HAL_GetTick>
 800cb38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cb3a:	e009      	b.n	800cb50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cb3c:	f7fe fdaa 	bl	800b694 <HAL_GetTick>
 800cb40:	4602      	mov	r2, r0
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb4a:	d901      	bls.n	800cb50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	e007      	b.n	800cb60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cb50:	4b06      	ldr	r3, [pc, #24]	; (800cb6c <HAL_PWREx_EnableOverDrive+0x9c>)
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb5c:	d1ee      	bne.n	800cb3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800cb5e:	2300      	movs	r3, #0
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}
 800cb68:	40023800 	.word	0x40023800
 800cb6c:	40007000 	.word	0x40007000

0800cb70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d101      	bne.n	800cb86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800cb82:	2301      	movs	r3, #1
 800cb84:	e29b      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f003 0301 	and.w	r3, r3, #1
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f000 8087 	beq.w	800cca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cb94:	4b96      	ldr	r3, [pc, #600]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	f003 030c 	and.w	r3, r3, #12
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	d00c      	beq.n	800cbba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cba0:	4b93      	ldr	r3, [pc, #588]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	f003 030c 	and.w	r3, r3, #12
 800cba8:	2b08      	cmp	r3, #8
 800cbaa:	d112      	bne.n	800cbd2 <HAL_RCC_OscConfig+0x62>
 800cbac:	4b90      	ldr	r3, [pc, #576]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbb8:	d10b      	bne.n	800cbd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbba:	4b8d      	ldr	r3, [pc, #564]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d06c      	beq.n	800cca0 <HAL_RCC_OscConfig+0x130>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d168      	bne.n	800cca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e275      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbda:	d106      	bne.n	800cbea <HAL_RCC_OscConfig+0x7a>
 800cbdc:	4b84      	ldr	r3, [pc, #528]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a83      	ldr	r2, [pc, #524]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cbe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbe6:	6013      	str	r3, [r2, #0]
 800cbe8:	e02e      	b.n	800cc48 <HAL_RCC_OscConfig+0xd8>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10c      	bne.n	800cc0c <HAL_RCC_OscConfig+0x9c>
 800cbf2:	4b7f      	ldr	r3, [pc, #508]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a7e      	ldr	r2, [pc, #504]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cbf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbfc:	6013      	str	r3, [r2, #0]
 800cbfe:	4b7c      	ldr	r3, [pc, #496]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a7b      	ldr	r2, [pc, #492]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	e01d      	b.n	800cc48 <HAL_RCC_OscConfig+0xd8>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc14:	d10c      	bne.n	800cc30 <HAL_RCC_OscConfig+0xc0>
 800cc16:	4b76      	ldr	r3, [pc, #472]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a75      	ldr	r2, [pc, #468]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc20:	6013      	str	r3, [r2, #0]
 800cc22:	4b73      	ldr	r3, [pc, #460]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a72      	ldr	r2, [pc, #456]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc2c:	6013      	str	r3, [r2, #0]
 800cc2e:	e00b      	b.n	800cc48 <HAL_RCC_OscConfig+0xd8>
 800cc30:	4b6f      	ldr	r3, [pc, #444]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a6e      	ldr	r2, [pc, #440]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc3a:	6013      	str	r3, [r2, #0]
 800cc3c:	4b6c      	ldr	r3, [pc, #432]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a6b      	ldr	r2, [pc, #428]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d013      	beq.n	800cc78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc50:	f7fe fd20 	bl	800b694 <HAL_GetTick>
 800cc54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc56:	e008      	b.n	800cc6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc58:	f7fe fd1c 	bl	800b694 <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	2b64      	cmp	r3, #100	; 0x64
 800cc64:	d901      	bls.n	800cc6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc66:	2303      	movs	r3, #3
 800cc68:	e229      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc6a:	4b61      	ldr	r3, [pc, #388]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d0f0      	beq.n	800cc58 <HAL_RCC_OscConfig+0xe8>
 800cc76:	e014      	b.n	800cca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc78:	f7fe fd0c 	bl	800b694 <HAL_GetTick>
 800cc7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc7e:	e008      	b.n	800cc92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc80:	f7fe fd08 	bl	800b694 <HAL_GetTick>
 800cc84:	4602      	mov	r2, r0
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	2b64      	cmp	r3, #100	; 0x64
 800cc8c:	d901      	bls.n	800cc92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cc8e:	2303      	movs	r3, #3
 800cc90:	e215      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc92:	4b57      	ldr	r3, [pc, #348]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1f0      	bne.n	800cc80 <HAL_RCC_OscConfig+0x110>
 800cc9e:	e000      	b.n	800cca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f003 0302 	and.w	r3, r3, #2
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d069      	beq.n	800cd82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ccae:	4b50      	ldr	r3, [pc, #320]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	f003 030c 	and.w	r3, r3, #12
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00b      	beq.n	800ccd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ccba:	4b4d      	ldr	r3, [pc, #308]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	f003 030c 	and.w	r3, r3, #12
 800ccc2:	2b08      	cmp	r3, #8
 800ccc4:	d11c      	bne.n	800cd00 <HAL_RCC_OscConfig+0x190>
 800ccc6:	4b4a      	ldr	r3, [pc, #296]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d116      	bne.n	800cd00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ccd2:	4b47      	ldr	r3, [pc, #284]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f003 0302 	and.w	r3, r3, #2
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d005      	beq.n	800ccea <HAL_RCC_OscConfig+0x17a>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d001      	beq.n	800ccea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800cce6:	2301      	movs	r3, #1
 800cce8:	e1e9      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccea:	4b41      	ldr	r3, [pc, #260]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	493d      	ldr	r1, [pc, #244]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800ccfa:	4313      	orrs	r3, r2
 800ccfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ccfe:	e040      	b.n	800cd82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d023      	beq.n	800cd50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cd08:	4b39      	ldr	r3, [pc, #228]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a38      	ldr	r2, [pc, #224]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cd0e:	f043 0301 	orr.w	r3, r3, #1
 800cd12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd14:	f7fe fcbe 	bl	800b694 <HAL_GetTick>
 800cd18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd1a:	e008      	b.n	800cd2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd1c:	f7fe fcba 	bl	800b694 <HAL_GetTick>
 800cd20:	4602      	mov	r2, r0
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	2b02      	cmp	r3, #2
 800cd28:	d901      	bls.n	800cd2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800cd2a:	2303      	movs	r3, #3
 800cd2c:	e1c7      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd2e:	4b30      	ldr	r3, [pc, #192]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d0f0      	beq.n	800cd1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd3a:	4b2d      	ldr	r3, [pc, #180]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	00db      	lsls	r3, r3, #3
 800cd48:	4929      	ldr	r1, [pc, #164]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	600b      	str	r3, [r1, #0]
 800cd4e:	e018      	b.n	800cd82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd50:	4b27      	ldr	r3, [pc, #156]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a26      	ldr	r2, [pc, #152]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cd56:	f023 0301 	bic.w	r3, r3, #1
 800cd5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd5c:	f7fe fc9a 	bl	800b694 <HAL_GetTick>
 800cd60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd62:	e008      	b.n	800cd76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd64:	f7fe fc96 	bl	800b694 <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d901      	bls.n	800cd76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800cd72:	2303      	movs	r3, #3
 800cd74:	e1a3      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd76:	4b1e      	ldr	r3, [pc, #120]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f003 0302 	and.w	r3, r3, #2
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1f0      	bne.n	800cd64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f003 0308 	and.w	r3, r3, #8
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d038      	beq.n	800ce00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	695b      	ldr	r3, [r3, #20]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d019      	beq.n	800cdca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd96:	4b16      	ldr	r3, [pc, #88]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd9a:	4a15      	ldr	r2, [pc, #84]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cd9c:	f043 0301 	orr.w	r3, r3, #1
 800cda0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cda2:	f7fe fc77 	bl	800b694 <HAL_GetTick>
 800cda6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cda8:	e008      	b.n	800cdbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cdaa:	f7fe fc73 	bl	800b694 <HAL_GetTick>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	2b02      	cmp	r3, #2
 800cdb6:	d901      	bls.n	800cdbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cdb8:	2303      	movs	r3, #3
 800cdba:	e180      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cdbc:	4b0c      	ldr	r3, [pc, #48]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cdbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdc0:	f003 0302 	and.w	r3, r3, #2
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d0f0      	beq.n	800cdaa <HAL_RCC_OscConfig+0x23a>
 800cdc8:	e01a      	b.n	800ce00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cdca:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cdcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdce:	4a08      	ldr	r2, [pc, #32]	; (800cdf0 <HAL_RCC_OscConfig+0x280>)
 800cdd0:	f023 0301 	bic.w	r3, r3, #1
 800cdd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdd6:	f7fe fc5d 	bl	800b694 <HAL_GetTick>
 800cdda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cddc:	e00a      	b.n	800cdf4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cdde:	f7fe fc59 	bl	800b694 <HAL_GetTick>
 800cde2:	4602      	mov	r2, r0
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d903      	bls.n	800cdf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cdec:	2303      	movs	r3, #3
 800cdee:	e166      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
 800cdf0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cdf4:	4b92      	ldr	r3, [pc, #584]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cdf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdf8:	f003 0302 	and.w	r3, r3, #2
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1ee      	bne.n	800cdde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f003 0304 	and.w	r3, r3, #4
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 80a4 	beq.w	800cf56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ce0e:	4b8c      	ldr	r3, [pc, #560]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ce10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d10d      	bne.n	800ce36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce1a:	4b89      	ldr	r3, [pc, #548]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ce1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1e:	4a88      	ldr	r2, [pc, #544]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ce20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce24:	6413      	str	r3, [r2, #64]	; 0x40
 800ce26:	4b86      	ldr	r3, [pc, #536]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ce28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce2e:	60bb      	str	r3, [r7, #8]
 800ce30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ce32:	2301      	movs	r3, #1
 800ce34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce36:	4b83      	ldr	r3, [pc, #524]	; (800d044 <HAL_RCC_OscConfig+0x4d4>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d118      	bne.n	800ce74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800ce42:	4b80      	ldr	r3, [pc, #512]	; (800d044 <HAL_RCC_OscConfig+0x4d4>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a7f      	ldr	r2, [pc, #508]	; (800d044 <HAL_RCC_OscConfig+0x4d4>)
 800ce48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce4e:	f7fe fc21 	bl	800b694 <HAL_GetTick>
 800ce52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce54:	e008      	b.n	800ce68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce56:	f7fe fc1d 	bl	800b694 <HAL_GetTick>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	2b64      	cmp	r3, #100	; 0x64
 800ce62:	d901      	bls.n	800ce68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800ce64:	2303      	movs	r3, #3
 800ce66:	e12a      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce68:	4b76      	ldr	r3, [pc, #472]	; (800d044 <HAL_RCC_OscConfig+0x4d4>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d0f0      	beq.n	800ce56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d106      	bne.n	800ce8a <HAL_RCC_OscConfig+0x31a>
 800ce7c:	4b70      	ldr	r3, [pc, #448]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ce7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce80:	4a6f      	ldr	r2, [pc, #444]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ce82:	f043 0301 	orr.w	r3, r3, #1
 800ce86:	6713      	str	r3, [r2, #112]	; 0x70
 800ce88:	e02d      	b.n	800cee6 <HAL_RCC_OscConfig+0x376>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d10c      	bne.n	800ceac <HAL_RCC_OscConfig+0x33c>
 800ce92:	4b6b      	ldr	r3, [pc, #428]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ce94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce96:	4a6a      	ldr	r2, [pc, #424]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ce98:	f023 0301 	bic.w	r3, r3, #1
 800ce9c:	6713      	str	r3, [r2, #112]	; 0x70
 800ce9e:	4b68      	ldr	r3, [pc, #416]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea2:	4a67      	ldr	r2, [pc, #412]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cea4:	f023 0304 	bic.w	r3, r3, #4
 800cea8:	6713      	str	r3, [r2, #112]	; 0x70
 800ceaa:	e01c      	b.n	800cee6 <HAL_RCC_OscConfig+0x376>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	2b05      	cmp	r3, #5
 800ceb2:	d10c      	bne.n	800cece <HAL_RCC_OscConfig+0x35e>
 800ceb4:	4b62      	ldr	r3, [pc, #392]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ceb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb8:	4a61      	ldr	r2, [pc, #388]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ceba:	f043 0304 	orr.w	r3, r3, #4
 800cebe:	6713      	str	r3, [r2, #112]	; 0x70
 800cec0:	4b5f      	ldr	r3, [pc, #380]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cec4:	4a5e      	ldr	r2, [pc, #376]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cec6:	f043 0301 	orr.w	r3, r3, #1
 800ceca:	6713      	str	r3, [r2, #112]	; 0x70
 800cecc:	e00b      	b.n	800cee6 <HAL_RCC_OscConfig+0x376>
 800cece:	4b5c      	ldr	r3, [pc, #368]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ced0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ced2:	4a5b      	ldr	r2, [pc, #364]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800ced4:	f023 0301 	bic.w	r3, r3, #1
 800ced8:	6713      	str	r3, [r2, #112]	; 0x70
 800ceda:	4b59      	ldr	r3, [pc, #356]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cede:	4a58      	ldr	r2, [pc, #352]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cee0:	f023 0304 	bic.w	r3, r3, #4
 800cee4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d015      	beq.n	800cf1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceee:	f7fe fbd1 	bl	800b694 <HAL_GetTick>
 800cef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cef4:	e00a      	b.n	800cf0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cef6:	f7fe fbcd 	bl	800b694 <HAL_GetTick>
 800cefa:	4602      	mov	r2, r0
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d901      	bls.n	800cf0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800cf08:	2303      	movs	r3, #3
 800cf0a:	e0d8      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf0c:	4b4c      	ldr	r3, [pc, #304]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cf0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf10:	f003 0302 	and.w	r3, r3, #2
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d0ee      	beq.n	800cef6 <HAL_RCC_OscConfig+0x386>
 800cf18:	e014      	b.n	800cf44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf1a:	f7fe fbbb 	bl	800b694 <HAL_GetTick>
 800cf1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf20:	e00a      	b.n	800cf38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf22:	f7fe fbb7 	bl	800b694 <HAL_GetTick>
 800cf26:	4602      	mov	r2, r0
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d901      	bls.n	800cf38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800cf34:	2303      	movs	r3, #3
 800cf36:	e0c2      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf38:	4b41      	ldr	r3, [pc, #260]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cf3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf3c:	f003 0302 	and.w	r3, r3, #2
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1ee      	bne.n	800cf22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cf44:	7dfb      	ldrb	r3, [r7, #23]
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d105      	bne.n	800cf56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf4a:	4b3d      	ldr	r3, [pc, #244]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4e:	4a3c      	ldr	r2, [pc, #240]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cf50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 80ae 	beq.w	800d0bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cf60:	4b37      	ldr	r3, [pc, #220]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	f003 030c 	and.w	r3, r3, #12
 800cf68:	2b08      	cmp	r3, #8
 800cf6a:	d06d      	beq.n	800d048 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	699b      	ldr	r3, [r3, #24]
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	d14b      	bne.n	800d00c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf74:	4b32      	ldr	r3, [pc, #200]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a31      	ldr	r2, [pc, #196]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cf7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf80:	f7fe fb88 	bl	800b694 <HAL_GetTick>
 800cf84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf86:	e008      	b.n	800cf9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf88:	f7fe fb84 	bl	800b694 <HAL_GetTick>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	d901      	bls.n	800cf9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800cf96:	2303      	movs	r3, #3
 800cf98:	e091      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf9a:	4b29      	ldr	r3, [pc, #164]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d1f0      	bne.n	800cf88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	69da      	ldr	r2, [r3, #28]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6a1b      	ldr	r3, [r3, #32]
 800cfae:	431a      	orrs	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb4:	019b      	lsls	r3, r3, #6
 800cfb6:	431a      	orrs	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfbc:	085b      	lsrs	r3, r3, #1
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	041b      	lsls	r3, r3, #16
 800cfc2:	431a      	orrs	r2, r3
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc8:	061b      	lsls	r3, r3, #24
 800cfca:	431a      	orrs	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd0:	071b      	lsls	r3, r3, #28
 800cfd2:	491b      	ldr	r1, [pc, #108]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cfd8:	4b19      	ldr	r3, [pc, #100]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a18      	ldr	r2, [pc, #96]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800cfde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfe4:	f7fe fb56 	bl	800b694 <HAL_GetTick>
 800cfe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfea:	e008      	b.n	800cffe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cfec:	f7fe fb52 	bl	800b694 <HAL_GetTick>
 800cff0:	4602      	mov	r2, r0
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	d901      	bls.n	800cffe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800cffa:	2303      	movs	r3, #3
 800cffc:	e05f      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cffe:	4b10      	ldr	r3, [pc, #64]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d006:	2b00      	cmp	r3, #0
 800d008:	d0f0      	beq.n	800cfec <HAL_RCC_OscConfig+0x47c>
 800d00a:	e057      	b.n	800d0bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d00c:	4b0c      	ldr	r3, [pc, #48]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a0b      	ldr	r2, [pc, #44]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800d012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d018:	f7fe fb3c 	bl	800b694 <HAL_GetTick>
 800d01c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d01e:	e008      	b.n	800d032 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d020:	f7fe fb38 	bl	800b694 <HAL_GetTick>
 800d024:	4602      	mov	r2, r0
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	d901      	bls.n	800d032 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800d02e:	2303      	movs	r3, #3
 800d030:	e045      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d032:	4b03      	ldr	r3, [pc, #12]	; (800d040 <HAL_RCC_OscConfig+0x4d0>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1f0      	bne.n	800d020 <HAL_RCC_OscConfig+0x4b0>
 800d03e:	e03d      	b.n	800d0bc <HAL_RCC_OscConfig+0x54c>
 800d040:	40023800 	.word	0x40023800
 800d044:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800d048:	4b1f      	ldr	r3, [pc, #124]	; (800d0c8 <HAL_RCC_OscConfig+0x558>)
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	699b      	ldr	r3, [r3, #24]
 800d052:	2b01      	cmp	r3, #1
 800d054:	d030      	beq.n	800d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d060:	429a      	cmp	r2, r3
 800d062:	d129      	bne.n	800d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d06e:	429a      	cmp	r2, r3
 800d070:	d122      	bne.n	800d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d078:	4013      	ands	r3, r2
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d07e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d080:	4293      	cmp	r3, r2
 800d082:	d119      	bne.n	800d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08e:	085b      	lsrs	r3, r3, #1
 800d090:	3b01      	subs	r3, #1
 800d092:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d094:	429a      	cmp	r2, r3
 800d096:	d10f      	bne.n	800d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d107      	bne.n	800d0b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d001      	beq.n	800d0bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e000      	b.n	800d0be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3718      	adds	r7, #24
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}
 800d0c6:	bf00      	nop
 800d0c8:	40023800 	.word	0x40023800

0800d0cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e0d0      	b.n	800d286 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d0e4:	4b6a      	ldr	r3, [pc, #424]	; (800d290 <HAL_RCC_ClockConfig+0x1c4>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f003 030f 	and.w	r3, r3, #15
 800d0ec:	683a      	ldr	r2, [r7, #0]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d910      	bls.n	800d114 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0f2:	4b67      	ldr	r3, [pc, #412]	; (800d290 <HAL_RCC_ClockConfig+0x1c4>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f023 020f 	bic.w	r2, r3, #15
 800d0fa:	4965      	ldr	r1, [pc, #404]	; (800d290 <HAL_RCC_ClockConfig+0x1c4>)
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d102:	4b63      	ldr	r3, [pc, #396]	; (800d290 <HAL_RCC_ClockConfig+0x1c4>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f003 030f 	and.w	r3, r3, #15
 800d10a:	683a      	ldr	r2, [r7, #0]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d001      	beq.n	800d114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	e0b8      	b.n	800d286 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f003 0302 	and.w	r3, r3, #2
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d020      	beq.n	800d162 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f003 0304 	and.w	r3, r3, #4
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d005      	beq.n	800d138 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d12c:	4b59      	ldr	r3, [pc, #356]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	4a58      	ldr	r2, [pc, #352]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d136:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 0308 	and.w	r3, r3, #8
 800d140:	2b00      	cmp	r3, #0
 800d142:	d005      	beq.n	800d150 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d144:	4b53      	ldr	r3, [pc, #332]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	4a52      	ldr	r2, [pc, #328]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d14a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d14e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d150:	4b50      	ldr	r3, [pc, #320]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d152:	689b      	ldr	r3, [r3, #8]
 800d154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	494d      	ldr	r1, [pc, #308]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d15e:	4313      	orrs	r3, r2
 800d160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f003 0301 	and.w	r3, r3, #1
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d040      	beq.n	800d1f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d107      	bne.n	800d186 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d176:	4b47      	ldr	r3, [pc, #284]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d115      	bne.n	800d1ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	e07f      	b.n	800d286 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d107      	bne.n	800d19e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d18e:	4b41      	ldr	r3, [pc, #260]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d196:	2b00      	cmp	r3, #0
 800d198:	d109      	bne.n	800d1ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e073      	b.n	800d286 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d19e:	4b3d      	ldr	r3, [pc, #244]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f003 0302 	and.w	r3, r3, #2
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e06b      	b.n	800d286 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d1ae:	4b39      	ldr	r3, [pc, #228]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d1b0:	689b      	ldr	r3, [r3, #8]
 800d1b2:	f023 0203 	bic.w	r2, r3, #3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	4936      	ldr	r1, [pc, #216]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1c0:	f7fe fa68 	bl	800b694 <HAL_GetTick>
 800d1c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1c6:	e00a      	b.n	800d1de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d1c8:	f7fe fa64 	bl	800b694 <HAL_GetTick>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d901      	bls.n	800d1de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	e053      	b.n	800d286 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1de:	4b2d      	ldr	r3, [pc, #180]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	f003 020c 	and.w	r2, r3, #12
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d1eb      	bne.n	800d1c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d1f0:	4b27      	ldr	r3, [pc, #156]	; (800d290 <HAL_RCC_ClockConfig+0x1c4>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f003 030f 	and.w	r3, r3, #15
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d210      	bcs.n	800d220 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1fe:	4b24      	ldr	r3, [pc, #144]	; (800d290 <HAL_RCC_ClockConfig+0x1c4>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f023 020f 	bic.w	r2, r3, #15
 800d206:	4922      	ldr	r1, [pc, #136]	; (800d290 <HAL_RCC_ClockConfig+0x1c4>)
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	4313      	orrs	r3, r2
 800d20c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d20e:	4b20      	ldr	r3, [pc, #128]	; (800d290 <HAL_RCC_ClockConfig+0x1c4>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f003 030f 	and.w	r3, r3, #15
 800d216:	683a      	ldr	r2, [r7, #0]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d001      	beq.n	800d220 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800d21c:	2301      	movs	r3, #1
 800d21e:	e032      	b.n	800d286 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f003 0304 	and.w	r3, r3, #4
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d008      	beq.n	800d23e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d22c:	4b19      	ldr	r3, [pc, #100]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	4916      	ldr	r1, [pc, #88]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d23a:	4313      	orrs	r3, r2
 800d23c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f003 0308 	and.w	r3, r3, #8
 800d246:	2b00      	cmp	r3, #0
 800d248:	d009      	beq.n	800d25e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d24a:	4b12      	ldr	r3, [pc, #72]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	691b      	ldr	r3, [r3, #16]
 800d256:	00db      	lsls	r3, r3, #3
 800d258:	490e      	ldr	r1, [pc, #56]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d25a:	4313      	orrs	r3, r2
 800d25c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d25e:	f000 f821 	bl	800d2a4 <HAL_RCC_GetSysClockFreq>
 800d262:	4602      	mov	r2, r0
 800d264:	4b0b      	ldr	r3, [pc, #44]	; (800d294 <HAL_RCC_ClockConfig+0x1c8>)
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	091b      	lsrs	r3, r3, #4
 800d26a:	f003 030f 	and.w	r3, r3, #15
 800d26e:	490a      	ldr	r1, [pc, #40]	; (800d298 <HAL_RCC_ClockConfig+0x1cc>)
 800d270:	5ccb      	ldrb	r3, [r1, r3]
 800d272:	fa22 f303 	lsr.w	r3, r2, r3
 800d276:	4a09      	ldr	r2, [pc, #36]	; (800d29c <HAL_RCC_ClockConfig+0x1d0>)
 800d278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800d27a:	4b09      	ldr	r3, [pc, #36]	; (800d2a0 <HAL_RCC_ClockConfig+0x1d4>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4618      	mov	r0, r3
 800d280:	f7f8 fcd0 	bl	8005c24 <HAL_InitTick>

  return HAL_OK;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	40023c00 	.word	0x40023c00
 800d294:	40023800 	.word	0x40023800
 800d298:	08015734 	.word	0x08015734
 800d29c:	2000007c 	.word	0x2000007c
 800d2a0:	200001d8 	.word	0x200001d8

0800d2a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2a8:	b094      	sub	sp, #80	; 0x50
 800d2aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	647b      	str	r3, [r7, #68]	; 0x44
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d2bc:	4b79      	ldr	r3, [pc, #484]	; (800d4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	f003 030c 	and.w	r3, r3, #12
 800d2c4:	2b08      	cmp	r3, #8
 800d2c6:	d00d      	beq.n	800d2e4 <HAL_RCC_GetSysClockFreq+0x40>
 800d2c8:	2b08      	cmp	r3, #8
 800d2ca:	f200 80e1 	bhi.w	800d490 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d002      	beq.n	800d2d8 <HAL_RCC_GetSysClockFreq+0x34>
 800d2d2:	2b04      	cmp	r3, #4
 800d2d4:	d003      	beq.n	800d2de <HAL_RCC_GetSysClockFreq+0x3a>
 800d2d6:	e0db      	b.n	800d490 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d2d8:	4b73      	ldr	r3, [pc, #460]	; (800d4a8 <HAL_RCC_GetSysClockFreq+0x204>)
 800d2da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d2dc:	e0db      	b.n	800d496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d2de:	4b73      	ldr	r3, [pc, #460]	; (800d4ac <HAL_RCC_GetSysClockFreq+0x208>)
 800d2e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d2e2:	e0d8      	b.n	800d496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d2e4:	4b6f      	ldr	r3, [pc, #444]	; (800d4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d2ee:	4b6d      	ldr	r3, [pc, #436]	; (800d4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d063      	beq.n	800d3c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d2fa:	4b6a      	ldr	r3, [pc, #424]	; (800d4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	099b      	lsrs	r3, r3, #6
 800d300:	2200      	movs	r2, #0
 800d302:	63bb      	str	r3, [r7, #56]	; 0x38
 800d304:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d30c:	633b      	str	r3, [r7, #48]	; 0x30
 800d30e:	2300      	movs	r3, #0
 800d310:	637b      	str	r3, [r7, #52]	; 0x34
 800d312:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d316:	4622      	mov	r2, r4
 800d318:	462b      	mov	r3, r5
 800d31a:	f04f 0000 	mov.w	r0, #0
 800d31e:	f04f 0100 	mov.w	r1, #0
 800d322:	0159      	lsls	r1, r3, #5
 800d324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d328:	0150      	lsls	r0, r2, #5
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	4621      	mov	r1, r4
 800d330:	1a51      	subs	r1, r2, r1
 800d332:	6139      	str	r1, [r7, #16]
 800d334:	4629      	mov	r1, r5
 800d336:	eb63 0301 	sbc.w	r3, r3, r1
 800d33a:	617b      	str	r3, [r7, #20]
 800d33c:	f04f 0200 	mov.w	r2, #0
 800d340:	f04f 0300 	mov.w	r3, #0
 800d344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d348:	4659      	mov	r1, fp
 800d34a:	018b      	lsls	r3, r1, #6
 800d34c:	4651      	mov	r1, sl
 800d34e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d352:	4651      	mov	r1, sl
 800d354:	018a      	lsls	r2, r1, #6
 800d356:	4651      	mov	r1, sl
 800d358:	ebb2 0801 	subs.w	r8, r2, r1
 800d35c:	4659      	mov	r1, fp
 800d35e:	eb63 0901 	sbc.w	r9, r3, r1
 800d362:	f04f 0200 	mov.w	r2, #0
 800d366:	f04f 0300 	mov.w	r3, #0
 800d36a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d36e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d376:	4690      	mov	r8, r2
 800d378:	4699      	mov	r9, r3
 800d37a:	4623      	mov	r3, r4
 800d37c:	eb18 0303 	adds.w	r3, r8, r3
 800d380:	60bb      	str	r3, [r7, #8]
 800d382:	462b      	mov	r3, r5
 800d384:	eb49 0303 	adc.w	r3, r9, r3
 800d388:	60fb      	str	r3, [r7, #12]
 800d38a:	f04f 0200 	mov.w	r2, #0
 800d38e:	f04f 0300 	mov.w	r3, #0
 800d392:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d396:	4629      	mov	r1, r5
 800d398:	024b      	lsls	r3, r1, #9
 800d39a:	4621      	mov	r1, r4
 800d39c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	024a      	lsls	r2, r1, #9
 800d3a4:	4610      	mov	r0, r2
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d3b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d3b4:	f7f2 ff9c 	bl	80002f0 <__aeabi_uldivmod>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	460b      	mov	r3, r1
 800d3bc:	4613      	mov	r3, r2
 800d3be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3c0:	e058      	b.n	800d474 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d3c2:	4b38      	ldr	r3, [pc, #224]	; (800d4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	099b      	lsrs	r3, r3, #6
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	4611      	mov	r1, r2
 800d3ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d3d2:	623b      	str	r3, [r7, #32]
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d3d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d3dc:	4642      	mov	r2, r8
 800d3de:	464b      	mov	r3, r9
 800d3e0:	f04f 0000 	mov.w	r0, #0
 800d3e4:	f04f 0100 	mov.w	r1, #0
 800d3e8:	0159      	lsls	r1, r3, #5
 800d3ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d3ee:	0150      	lsls	r0, r2, #5
 800d3f0:	4602      	mov	r2, r0
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	4641      	mov	r1, r8
 800d3f6:	ebb2 0a01 	subs.w	sl, r2, r1
 800d3fa:	4649      	mov	r1, r9
 800d3fc:	eb63 0b01 	sbc.w	fp, r3, r1
 800d400:	f04f 0200 	mov.w	r2, #0
 800d404:	f04f 0300 	mov.w	r3, #0
 800d408:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d40c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d410:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d414:	ebb2 040a 	subs.w	r4, r2, sl
 800d418:	eb63 050b 	sbc.w	r5, r3, fp
 800d41c:	f04f 0200 	mov.w	r2, #0
 800d420:	f04f 0300 	mov.w	r3, #0
 800d424:	00eb      	lsls	r3, r5, #3
 800d426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d42a:	00e2      	lsls	r2, r4, #3
 800d42c:	4614      	mov	r4, r2
 800d42e:	461d      	mov	r5, r3
 800d430:	4643      	mov	r3, r8
 800d432:	18e3      	adds	r3, r4, r3
 800d434:	603b      	str	r3, [r7, #0]
 800d436:	464b      	mov	r3, r9
 800d438:	eb45 0303 	adc.w	r3, r5, r3
 800d43c:	607b      	str	r3, [r7, #4]
 800d43e:	f04f 0200 	mov.w	r2, #0
 800d442:	f04f 0300 	mov.w	r3, #0
 800d446:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d44a:	4629      	mov	r1, r5
 800d44c:	028b      	lsls	r3, r1, #10
 800d44e:	4621      	mov	r1, r4
 800d450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d454:	4621      	mov	r1, r4
 800d456:	028a      	lsls	r2, r1, #10
 800d458:	4610      	mov	r0, r2
 800d45a:	4619      	mov	r1, r3
 800d45c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d45e:	2200      	movs	r2, #0
 800d460:	61bb      	str	r3, [r7, #24]
 800d462:	61fa      	str	r2, [r7, #28]
 800d464:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d468:	f7f2 ff42 	bl	80002f0 <__aeabi_uldivmod>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	4613      	mov	r3, r2
 800d472:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d474:	4b0b      	ldr	r3, [pc, #44]	; (800d4a4 <HAL_RCC_GetSysClockFreq+0x200>)
 800d476:	685b      	ldr	r3, [r3, #4]
 800d478:	0c1b      	lsrs	r3, r3, #16
 800d47a:	f003 0303 	and.w	r3, r3, #3
 800d47e:	3301      	adds	r3, #1
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800d484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d488:	fbb2 f3f3 	udiv	r3, r2, r3
 800d48c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d48e:	e002      	b.n	800d496 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d490:	4b05      	ldr	r3, [pc, #20]	; (800d4a8 <HAL_RCC_GetSysClockFreq+0x204>)
 800d492:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800d494:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3750      	adds	r7, #80	; 0x50
 800d49c:	46bd      	mov	sp, r7
 800d49e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d4a2:	bf00      	nop
 800d4a4:	40023800 	.word	0x40023800
 800d4a8:	00f42400 	.word	0x00f42400
 800d4ac:	007a1200 	.word	0x007a1200

0800d4b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d4b4:	4b03      	ldr	r3, [pc, #12]	; (800d4c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	2000007c 	.word	0x2000007c

0800d4c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d4cc:	f7ff fff0 	bl	800d4b0 <HAL_RCC_GetHCLKFreq>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	4b05      	ldr	r3, [pc, #20]	; (800d4e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	0a9b      	lsrs	r3, r3, #10
 800d4d8:	f003 0307 	and.w	r3, r3, #7
 800d4dc:	4903      	ldr	r1, [pc, #12]	; (800d4ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800d4de:	5ccb      	ldrb	r3, [r1, r3]
 800d4e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	40023800 	.word	0x40023800
 800d4ec:	08015744 	.word	0x08015744

0800d4f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d4f4:	f7ff ffdc 	bl	800d4b0 <HAL_RCC_GetHCLKFreq>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	4b05      	ldr	r3, [pc, #20]	; (800d510 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d4fc:	689b      	ldr	r3, [r3, #8]
 800d4fe:	0b5b      	lsrs	r3, r3, #13
 800d500:	f003 0307 	and.w	r3, r3, #7
 800d504:	4903      	ldr	r1, [pc, #12]	; (800d514 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d506:	5ccb      	ldrb	r3, [r1, r3]
 800d508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	40023800 	.word	0x40023800
 800d514:	08015744 	.word	0x08015744

0800d518 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	220f      	movs	r2, #15
 800d526:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d528:	4b12      	ldr	r3, [pc, #72]	; (800d574 <HAL_RCC_GetClockConfig+0x5c>)
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	f003 0203 	and.w	r2, r3, #3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d534:	4b0f      	ldr	r3, [pc, #60]	; (800d574 <HAL_RCC_GetClockConfig+0x5c>)
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d540:	4b0c      	ldr	r3, [pc, #48]	; (800d574 <HAL_RCC_GetClockConfig+0x5c>)
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d54c:	4b09      	ldr	r3, [pc, #36]	; (800d574 <HAL_RCC_GetClockConfig+0x5c>)
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	08db      	lsrs	r3, r3, #3
 800d552:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d55a:	4b07      	ldr	r3, [pc, #28]	; (800d578 <HAL_RCC_GetClockConfig+0x60>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f003 020f 	and.w	r2, r3, #15
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	601a      	str	r2, [r3, #0]
}
 800d566:	bf00      	nop
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	40023800 	.word	0x40023800
 800d578:	40023c00 	.word	0x40023c00

0800d57c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b088      	sub	sp, #32
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800d584:	2300      	movs	r3, #0
 800d586:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800d588:	2300      	movs	r3, #0
 800d58a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800d590:	2300      	movs	r3, #0
 800d592:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f003 0301 	and.w	r3, r3, #1
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d012      	beq.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d5a4:	4b69      	ldr	r3, [pc, #420]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	4a68      	ldr	r2, [pc, #416]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d5aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d5ae:	6093      	str	r3, [r2, #8]
 800d5b0:	4b66      	ldr	r3, [pc, #408]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d5b2:	689a      	ldr	r2, [r3, #8]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b8:	4964      	ldr	r1, [pc, #400]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d101      	bne.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d017      	beq.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d5d6:	4b5d      	ldr	r3, [pc, #372]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d5d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e4:	4959      	ldr	r1, [pc, #356]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d5f4:	d101      	bne.n	800d5fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d101      	bne.n	800d606 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800d602:	2301      	movs	r3, #1
 800d604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d017      	beq.n	800d642 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d612:	4b4e      	ldr	r3, [pc, #312]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d618:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d620:	494a      	ldr	r1, [pc, #296]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d622:	4313      	orrs	r3, r2
 800d624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d630:	d101      	bne.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800d632:	2301      	movs	r3, #1
 800d634:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800d63e:	2301      	movs	r3, #1
 800d640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800d64e:	2301      	movs	r3, #1
 800d650:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f003 0320 	and.w	r3, r3, #32
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f000 808b 	beq.w	800d776 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d660:	4b3a      	ldr	r3, [pc, #232]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d664:	4a39      	ldr	r2, [pc, #228]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d66a:	6413      	str	r3, [r2, #64]	; 0x40
 800d66c:	4b37      	ldr	r3, [pc, #220]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d674:	60bb      	str	r3, [r7, #8]
 800d676:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d678:	4b35      	ldr	r3, [pc, #212]	; (800d750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a34      	ldr	r2, [pc, #208]	; (800d750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d67e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d684:	f7fe f806 	bl	800b694 <HAL_GetTick>
 800d688:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d68a:	e008      	b.n	800d69e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d68c:	f7fe f802 	bl	800b694 <HAL_GetTick>
 800d690:	4602      	mov	r2, r0
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	1ad3      	subs	r3, r2, r3
 800d696:	2b64      	cmp	r3, #100	; 0x64
 800d698:	d901      	bls.n	800d69e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800d69a:	2303      	movs	r3, #3
 800d69c:	e38f      	b.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d69e:	4b2c      	ldr	r3, [pc, #176]	; (800d750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d0f0      	beq.n	800d68c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d6aa:	4b28      	ldr	r3, [pc, #160]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d035      	beq.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6c2:	693a      	ldr	r2, [r7, #16]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d02e      	beq.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d6c8:	4b20      	ldr	r3, [pc, #128]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d6d2:	4b1e      	ldr	r3, [pc, #120]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d6:	4a1d      	ldr	r2, [pc, #116]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d6d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d6de:	4b1b      	ldr	r3, [pc, #108]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e2:	4a1a      	ldr	r2, [pc, #104]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d6e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800d6ea:	4a18      	ldr	r2, [pc, #96]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d6f0:	4b16      	ldr	r3, [pc, #88]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6f4:	f003 0301 	and.w	r3, r3, #1
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d114      	bne.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6fc:	f7fd ffca 	bl	800b694 <HAL_GetTick>
 800d700:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d702:	e00a      	b.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d704:	f7fd ffc6 	bl	800b694 <HAL_GetTick>
 800d708:	4602      	mov	r2, r0
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d712:	4293      	cmp	r3, r2
 800d714:	d901      	bls.n	800d71a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800d716:	2303      	movs	r3, #3
 800d718:	e351      	b.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d71a:	4b0c      	ldr	r3, [pc, #48]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d71c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d71e:	f003 0302 	and.w	r3, r3, #2
 800d722:	2b00      	cmp	r3, #0
 800d724:	d0ee      	beq.n	800d704 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d72e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d732:	d111      	bne.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800d734:	4b05      	ldr	r3, [pc, #20]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d740:	4b04      	ldr	r3, [pc, #16]	; (800d754 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800d742:	400b      	ands	r3, r1
 800d744:	4901      	ldr	r1, [pc, #4]	; (800d74c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800d746:	4313      	orrs	r3, r2
 800d748:	608b      	str	r3, [r1, #8]
 800d74a:	e00b      	b.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800d74c:	40023800 	.word	0x40023800
 800d750:	40007000 	.word	0x40007000
 800d754:	0ffffcff 	.word	0x0ffffcff
 800d758:	4bac      	ldr	r3, [pc, #688]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	4aab      	ldr	r2, [pc, #684]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d75e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d762:	6093      	str	r3, [r2, #8]
 800d764:	4ba9      	ldr	r3, [pc, #676]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d766:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d770:	49a6      	ldr	r1, [pc, #664]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d772:	4313      	orrs	r3, r2
 800d774:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f003 0310 	and.w	r3, r3, #16
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d010      	beq.n	800d7a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d782:	4ba2      	ldr	r3, [pc, #648]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d788:	4aa0      	ldr	r2, [pc, #640]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d78a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d78e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800d792:	4b9e      	ldr	r3, [pc, #632]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d794:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d79c:	499b      	ldr	r1, [pc, #620]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d00a      	beq.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d7b0:	4b96      	ldr	r3, [pc, #600]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d7b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7be:	4993      	ldr	r1, [pc, #588]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00a      	beq.n	800d7e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d7d2:	4b8e      	ldr	r3, [pc, #568]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e0:	498a      	ldr	r1, [pc, #552]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d00a      	beq.n	800d80a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d7f4:	4b85      	ldr	r3, [pc, #532]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d802:	4982      	ldr	r1, [pc, #520]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d804:	4313      	orrs	r3, r2
 800d806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00a      	beq.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d816:	4b7d      	ldr	r3, [pc, #500]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d81c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d824:	4979      	ldr	r1, [pc, #484]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d826:	4313      	orrs	r3, r2
 800d828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00a      	beq.n	800d84e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d838:	4b74      	ldr	r3, [pc, #464]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d83e:	f023 0203 	bic.w	r2, r3, #3
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d846:	4971      	ldr	r1, [pc, #452]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d848:	4313      	orrs	r3, r2
 800d84a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00a      	beq.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d85a:	4b6c      	ldr	r3, [pc, #432]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d860:	f023 020c 	bic.w	r2, r3, #12
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d868:	4968      	ldr	r1, [pc, #416]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d86a:	4313      	orrs	r3, r2
 800d86c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00a      	beq.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d87c:	4b63      	ldr	r3, [pc, #396]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d87e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d882:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d88a:	4960      	ldr	r1, [pc, #384]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d88c:	4313      	orrs	r3, r2
 800d88e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00a      	beq.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d89e:	4b5b      	ldr	r3, [pc, #364]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d8a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ac:	4957      	ldr	r1, [pc, #348]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00a      	beq.n	800d8d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d8c0:	4b52      	ldr	r3, [pc, #328]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ce:	494f      	ldr	r1, [pc, #316]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00a      	beq.n	800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800d8e2:	4b4a      	ldr	r3, [pc, #296]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d8e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8f0:	4946      	ldr	r1, [pc, #280]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00a      	beq.n	800d91a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800d904:	4b41      	ldr	r3, [pc, #260]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d90a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d912:	493e      	ldr	r1, [pc, #248]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d914:	4313      	orrs	r3, r2
 800d916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00a      	beq.n	800d93c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800d926:	4b39      	ldr	r3, [pc, #228]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d92c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d934:	4935      	ldr	r1, [pc, #212]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d936:	4313      	orrs	r3, r2
 800d938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00a      	beq.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d948:	4b30      	ldr	r3, [pc, #192]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d94a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d94e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d956:	492d      	ldr	r1, [pc, #180]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d958:	4313      	orrs	r3, r2
 800d95a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d966:	2b00      	cmp	r3, #0
 800d968:	d011      	beq.n	800d98e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800d96a:	4b28      	ldr	r3, [pc, #160]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d970:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d978:	4924      	ldr	r1, [pc, #144]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d97a:	4313      	orrs	r3, r2
 800d97c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d988:	d101      	bne.n	800d98e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800d98a:	2301      	movs	r3, #1
 800d98c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f003 0308 	and.w	r3, r3, #8
 800d996:	2b00      	cmp	r3, #0
 800d998:	d001      	beq.n	800d99e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800d99a:	2301      	movs	r3, #1
 800d99c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00a      	beq.n	800d9c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d9aa:	4b18      	ldr	r3, [pc, #96]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9b8:	4914      	ldr	r1, [pc, #80]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00b      	beq.n	800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800d9cc:	4b0f      	ldr	r3, [pc, #60]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d9dc:	490b      	ldr	r1, [pc, #44]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00f      	beq.n	800da10 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800d9f0:	4b06      	ldr	r3, [pc, #24]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800d9f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da00:	4902      	ldr	r1, [pc, #8]	; (800da0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800da02:	4313      	orrs	r3, r2
 800da04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800da08:	e002      	b.n	800da10 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800da0a:	bf00      	nop
 800da0c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00b      	beq.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800da1c:	4b8a      	ldr	r3, [pc, #552]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800da1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da2c:	4986      	ldr	r1, [pc, #536]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800da2e:	4313      	orrs	r3, r2
 800da30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00b      	beq.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800da40:	4b81      	ldr	r3, [pc, #516]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800da42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da50:	497d      	ldr	r1, [pc, #500]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800da52:	4313      	orrs	r3, r2
 800da54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d006      	beq.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 80d6 	beq.w	800dc18 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800da6c:	4b76      	ldr	r3, [pc, #472]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a75      	ldr	r2, [pc, #468]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800da72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800da76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da78:	f7fd fe0c 	bl	800b694 <HAL_GetTick>
 800da7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800da7e:	e008      	b.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800da80:	f7fd fe08 	bl	800b694 <HAL_GetTick>
 800da84:	4602      	mov	r2, r0
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	2b64      	cmp	r3, #100	; 0x64
 800da8c:	d901      	bls.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800da8e:	2303      	movs	r3, #3
 800da90:	e195      	b.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800da92:	4b6d      	ldr	r3, [pc, #436]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1f0      	bne.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f003 0301 	and.w	r3, r3, #1
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d021      	beq.n	800daee <HAL_RCCEx_PeriphCLKConfig+0x572>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d11d      	bne.n	800daee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dab2:	4b65      	ldr	r3, [pc, #404]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dab8:	0c1b      	lsrs	r3, r3, #16
 800daba:	f003 0303 	and.w	r3, r3, #3
 800dabe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dac0:	4b61      	ldr	r3, [pc, #388]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dac6:	0e1b      	lsrs	r3, r3, #24
 800dac8:	f003 030f 	and.w	r3, r3, #15
 800dacc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	019a      	lsls	r2, r3, #6
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	041b      	lsls	r3, r3, #16
 800dad8:	431a      	orrs	r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	061b      	lsls	r3, r3, #24
 800dade:	431a      	orrs	r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	071b      	lsls	r3, r3, #28
 800dae6:	4958      	ldr	r1, [pc, #352]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dae8:	4313      	orrs	r3, r2
 800daea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d004      	beq.n	800db04 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dafe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db02:	d00a      	beq.n	800db1a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d02e      	beq.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db18:	d129      	bne.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800db1a:	4b4b      	ldr	r3, [pc, #300]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800db1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db20:	0c1b      	lsrs	r3, r3, #16
 800db22:	f003 0303 	and.w	r3, r3, #3
 800db26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800db28:	4b47      	ldr	r3, [pc, #284]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800db2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db2e:	0f1b      	lsrs	r3, r3, #28
 800db30:	f003 0307 	and.w	r3, r3, #7
 800db34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	019a      	lsls	r2, r3, #6
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	041b      	lsls	r3, r3, #16
 800db40:	431a      	orrs	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	061b      	lsls	r3, r3, #24
 800db48:	431a      	orrs	r2, r3
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	071b      	lsls	r3, r3, #28
 800db4e:	493e      	ldr	r1, [pc, #248]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800db50:	4313      	orrs	r3, r2
 800db52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800db56:	4b3c      	ldr	r3, [pc, #240]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800db58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db5c:	f023 021f 	bic.w	r2, r3, #31
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db64:	3b01      	subs	r3, #1
 800db66:	4938      	ldr	r1, [pc, #224]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800db68:	4313      	orrs	r3, r2
 800db6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800db76:	2b00      	cmp	r3, #0
 800db78:	d01d      	beq.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800db7a:	4b33      	ldr	r3, [pc, #204]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800db7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db80:	0e1b      	lsrs	r3, r3, #24
 800db82:	f003 030f 	and.w	r3, r3, #15
 800db86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800db88:	4b2f      	ldr	r3, [pc, #188]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800db8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db8e:	0f1b      	lsrs	r3, r3, #28
 800db90:	f003 0307 	and.w	r3, r3, #7
 800db94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	019a      	lsls	r2, r3, #6
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	691b      	ldr	r3, [r3, #16]
 800dba0:	041b      	lsls	r3, r3, #16
 800dba2:	431a      	orrs	r2, r3
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	061b      	lsls	r3, r3, #24
 800dba8:	431a      	orrs	r2, r3
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	071b      	lsls	r3, r3, #28
 800dbae:	4926      	ldr	r1, [pc, #152]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d011      	beq.n	800dbe6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	019a      	lsls	r2, r3, #6
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	691b      	ldr	r3, [r3, #16]
 800dbcc:	041b      	lsls	r3, r3, #16
 800dbce:	431a      	orrs	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	061b      	lsls	r3, r3, #24
 800dbd6:	431a      	orrs	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	689b      	ldr	r3, [r3, #8]
 800dbdc:	071b      	lsls	r3, r3, #28
 800dbde:	491a      	ldr	r1, [pc, #104]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800dbe6:	4b18      	ldr	r3, [pc, #96]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4a17      	ldr	r2, [pc, #92]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dbec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dbf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbf2:	f7fd fd4f 	bl	800b694 <HAL_GetTick>
 800dbf6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dbf8:	e008      	b.n	800dc0c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dbfa:	f7fd fd4b 	bl	800b694 <HAL_GetTick>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	1ad3      	subs	r3, r2, r3
 800dc04:	2b64      	cmp	r3, #100	; 0x64
 800dc06:	d901      	bls.n	800dc0c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dc08:	2303      	movs	r3, #3
 800dc0a:	e0d8      	b.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800dc0c:	4b0e      	ldr	r3, [pc, #56]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d0f0      	beq.n	800dbfa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	f040 80ce 	bne.w	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800dc20:	4b09      	ldr	r3, [pc, #36]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a08      	ldr	r2, [pc, #32]	; (800dc48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800dc26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dc2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc2c:	f7fd fd32 	bl	800b694 <HAL_GetTick>
 800dc30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800dc32:	e00b      	b.n	800dc4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800dc34:	f7fd fd2e 	bl	800b694 <HAL_GetTick>
 800dc38:	4602      	mov	r2, r0
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	1ad3      	subs	r3, r2, r3
 800dc3e:	2b64      	cmp	r3, #100	; 0x64
 800dc40:	d904      	bls.n	800dc4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800dc42:	2303      	movs	r3, #3
 800dc44:	e0bb      	b.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x842>
 800dc46:	bf00      	nop
 800dc48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800dc4c:	4b5e      	ldr	r3, [pc, #376]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc58:	d0ec      	beq.n	800dc34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d003      	beq.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d009      	beq.n	800dc82 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d02e      	beq.n	800dcd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d12a      	bne.n	800dcd8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800dc82:	4b51      	ldr	r3, [pc, #324]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dc84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc88:	0c1b      	lsrs	r3, r3, #16
 800dc8a:	f003 0303 	and.w	r3, r3, #3
 800dc8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800dc90:	4b4d      	ldr	r3, [pc, #308]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dc92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc96:	0f1b      	lsrs	r3, r3, #28
 800dc98:	f003 0307 	and.w	r3, r3, #7
 800dc9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	019a      	lsls	r2, r3, #6
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	041b      	lsls	r3, r3, #16
 800dca8:	431a      	orrs	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	061b      	lsls	r3, r3, #24
 800dcb0:	431a      	orrs	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	071b      	lsls	r3, r3, #28
 800dcb6:	4944      	ldr	r1, [pc, #272]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800dcbe:	4b42      	ldr	r3, [pc, #264]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dcc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dcc4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dccc:	3b01      	subs	r3, #1
 800dcce:	021b      	lsls	r3, r3, #8
 800dcd0:	493d      	ldr	r1, [pc, #244]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d022      	beq.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dcec:	d11d      	bne.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800dcee:	4b36      	ldr	r3, [pc, #216]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dcf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcf4:	0e1b      	lsrs	r3, r3, #24
 800dcf6:	f003 030f 	and.w	r3, r3, #15
 800dcfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800dcfc:	4b32      	ldr	r3, [pc, #200]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dcfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd02:	0f1b      	lsrs	r3, r3, #28
 800dd04:	f003 0307 	and.w	r3, r3, #7
 800dd08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	695b      	ldr	r3, [r3, #20]
 800dd0e:	019a      	lsls	r2, r3, #6
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6a1b      	ldr	r3, [r3, #32]
 800dd14:	041b      	lsls	r3, r3, #16
 800dd16:	431a      	orrs	r2, r3
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	061b      	lsls	r3, r3, #24
 800dd1c:	431a      	orrs	r2, r3
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	071b      	lsls	r3, r3, #28
 800dd22:	4929      	ldr	r1, [pc, #164]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dd24:	4313      	orrs	r3, r2
 800dd26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f003 0308 	and.w	r3, r3, #8
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d028      	beq.n	800dd88 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800dd36:	4b24      	ldr	r3, [pc, #144]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd3c:	0e1b      	lsrs	r3, r3, #24
 800dd3e:	f003 030f 	and.w	r3, r3, #15
 800dd42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800dd44:	4b20      	ldr	r3, [pc, #128]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dd46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd4a:	0c1b      	lsrs	r3, r3, #16
 800dd4c:	f003 0303 	and.w	r3, r3, #3
 800dd50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	695b      	ldr	r3, [r3, #20]
 800dd56:	019a      	lsls	r2, r3, #6
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	041b      	lsls	r3, r3, #16
 800dd5c:	431a      	orrs	r2, r3
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	061b      	lsls	r3, r3, #24
 800dd62:	431a      	orrs	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	69db      	ldr	r3, [r3, #28]
 800dd68:	071b      	lsls	r3, r3, #28
 800dd6a:	4917      	ldr	r1, [pc, #92]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800dd72:	4b15      	ldr	r3, [pc, #84]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dd74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd80:	4911      	ldr	r1, [pc, #68]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dd82:	4313      	orrs	r3, r2
 800dd84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800dd88:	4b0f      	ldr	r3, [pc, #60]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a0e      	ldr	r2, [pc, #56]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800dd8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd94:	f7fd fc7e 	bl	800b694 <HAL_GetTick>
 800dd98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800dd9a:	e008      	b.n	800ddae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800dd9c:	f7fd fc7a 	bl	800b694 <HAL_GetTick>
 800dda0:	4602      	mov	r2, r0
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	1ad3      	subs	r3, r2, r3
 800dda6:	2b64      	cmp	r3, #100	; 0x64
 800dda8:	d901      	bls.n	800ddae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ddaa:	2303      	movs	r3, #3
 800ddac:	e007      	b.n	800ddbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ddae:	4b06      	ldr	r3, [pc, #24]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ddba:	d1ef      	bne.n	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3720      	adds	r7, #32
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	40023800 	.word	0x40023800

0800ddcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d101      	bne.n	800ddde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ddda:	2301      	movs	r3, #1
 800dddc:	e049      	b.n	800de72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f841 	bl	800de7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2202      	movs	r2, #2
 800ddfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	3304      	adds	r3, #4
 800de08:	4619      	mov	r1, r3
 800de0a:	4610      	mov	r0, r2
 800de0c:	f000 fa00 	bl	800e210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2201      	movs	r2, #1
 800de1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2201      	movs	r2, #1
 800de24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2201      	movs	r2, #1
 800de2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2201      	movs	r2, #1
 800de34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2201      	movs	r2, #1
 800de4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2201      	movs	r2, #1
 800de64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800de7a:	b480      	push	{r7}
 800de7c:	b083      	sub	sp, #12
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800de82:	bf00      	nop
 800de84:	370c      	adds	r7, #12
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr
	...

0800de90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800de90:	b480      	push	{r7}
 800de92:	b085      	sub	sp, #20
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d001      	beq.n	800dea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
 800dea6:	e054      	b.n	800df52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2202      	movs	r2, #2
 800deac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68da      	ldr	r2, [r3, #12]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f042 0201 	orr.w	r2, r2, #1
 800debe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a26      	ldr	r2, [pc, #152]	; (800df60 <HAL_TIM_Base_Start_IT+0xd0>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d022      	beq.n	800df10 <HAL_TIM_Base_Start_IT+0x80>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ded2:	d01d      	beq.n	800df10 <HAL_TIM_Base_Start_IT+0x80>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a22      	ldr	r2, [pc, #136]	; (800df64 <HAL_TIM_Base_Start_IT+0xd4>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d018      	beq.n	800df10 <HAL_TIM_Base_Start_IT+0x80>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4a21      	ldr	r2, [pc, #132]	; (800df68 <HAL_TIM_Base_Start_IT+0xd8>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d013      	beq.n	800df10 <HAL_TIM_Base_Start_IT+0x80>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	4a1f      	ldr	r2, [pc, #124]	; (800df6c <HAL_TIM_Base_Start_IT+0xdc>)
 800deee:	4293      	cmp	r3, r2
 800def0:	d00e      	beq.n	800df10 <HAL_TIM_Base_Start_IT+0x80>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a1e      	ldr	r2, [pc, #120]	; (800df70 <HAL_TIM_Base_Start_IT+0xe0>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d009      	beq.n	800df10 <HAL_TIM_Base_Start_IT+0x80>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a1c      	ldr	r2, [pc, #112]	; (800df74 <HAL_TIM_Base_Start_IT+0xe4>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d004      	beq.n	800df10 <HAL_TIM_Base_Start_IT+0x80>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a1b      	ldr	r2, [pc, #108]	; (800df78 <HAL_TIM_Base_Start_IT+0xe8>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d115      	bne.n	800df3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	689a      	ldr	r2, [r3, #8]
 800df16:	4b19      	ldr	r3, [pc, #100]	; (800df7c <HAL_TIM_Base_Start_IT+0xec>)
 800df18:	4013      	ands	r3, r2
 800df1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2b06      	cmp	r3, #6
 800df20:	d015      	beq.n	800df4e <HAL_TIM_Base_Start_IT+0xbe>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df28:	d011      	beq.n	800df4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f042 0201 	orr.w	r2, r2, #1
 800df38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df3a:	e008      	b.n	800df4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f042 0201 	orr.w	r2, r2, #1
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	e000      	b.n	800df50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df50:	2300      	movs	r3, #0
}
 800df52:	4618      	mov	r0, r3
 800df54:	3714      	adds	r7, #20
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr
 800df5e:	bf00      	nop
 800df60:	40010000 	.word	0x40010000
 800df64:	40000400 	.word	0x40000400
 800df68:	40000800 	.word	0x40000800
 800df6c:	40000c00 	.word	0x40000c00
 800df70:	40010400 	.word	0x40010400
 800df74:	40014000 	.word	0x40014000
 800df78:	40001800 	.word	0x40001800
 800df7c:	00010007 	.word	0x00010007

0800df80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	691b      	ldr	r3, [r3, #16]
 800df8e:	f003 0302 	and.w	r3, r3, #2
 800df92:	2b02      	cmp	r3, #2
 800df94:	d122      	bne.n	800dfdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	f003 0302 	and.w	r3, r3, #2
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	d11b      	bne.n	800dfdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f06f 0202 	mvn.w	r2, #2
 800dfac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	699b      	ldr	r3, [r3, #24]
 800dfba:	f003 0303 	and.w	r3, r3, #3
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d003      	beq.n	800dfca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 f905 	bl	800e1d2 <HAL_TIM_IC_CaptureCallback>
 800dfc8:	e005      	b.n	800dfd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 f8f7 	bl	800e1be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f908 	bl	800e1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	691b      	ldr	r3, [r3, #16]
 800dfe2:	f003 0304 	and.w	r3, r3, #4
 800dfe6:	2b04      	cmp	r3, #4
 800dfe8:	d122      	bne.n	800e030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	f003 0304 	and.w	r3, r3, #4
 800dff4:	2b04      	cmp	r3, #4
 800dff6:	d11b      	bne.n	800e030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f06f 0204 	mvn.w	r2, #4
 800e000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2202      	movs	r2, #2
 800e006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	699b      	ldr	r3, [r3, #24]
 800e00e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e012:	2b00      	cmp	r3, #0
 800e014:	d003      	beq.n	800e01e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f000 f8db 	bl	800e1d2 <HAL_TIM_IC_CaptureCallback>
 800e01c:	e005      	b.n	800e02a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 f8cd 	bl	800e1be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f8de 	bl	800e1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	f003 0308 	and.w	r3, r3, #8
 800e03a:	2b08      	cmp	r3, #8
 800e03c:	d122      	bne.n	800e084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	f003 0308 	and.w	r3, r3, #8
 800e048:	2b08      	cmp	r3, #8
 800e04a:	d11b      	bne.n	800e084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f06f 0208 	mvn.w	r2, #8
 800e054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2204      	movs	r2, #4
 800e05a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	69db      	ldr	r3, [r3, #28]
 800e062:	f003 0303 	and.w	r3, r3, #3
 800e066:	2b00      	cmp	r3, #0
 800e068:	d003      	beq.n	800e072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f8b1 	bl	800e1d2 <HAL_TIM_IC_CaptureCallback>
 800e070:	e005      	b.n	800e07e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 f8a3 	bl	800e1be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 f8b4 	bl	800e1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2200      	movs	r2, #0
 800e082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	f003 0310 	and.w	r3, r3, #16
 800e08e:	2b10      	cmp	r3, #16
 800e090:	d122      	bne.n	800e0d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	f003 0310 	and.w	r3, r3, #16
 800e09c:	2b10      	cmp	r3, #16
 800e09e:	d11b      	bne.n	800e0d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f06f 0210 	mvn.w	r2, #16
 800e0a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2208      	movs	r2, #8
 800e0ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	69db      	ldr	r3, [r3, #28]
 800e0b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d003      	beq.n	800e0c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f887 	bl	800e1d2 <HAL_TIM_IC_CaptureCallback>
 800e0c4:	e005      	b.n	800e0d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f879 	bl	800e1be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 f88a 	bl	800e1e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	691b      	ldr	r3, [r3, #16]
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d10e      	bne.n	800e104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	f003 0301 	and.w	r3, r3, #1
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d107      	bne.n	800e104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f06f 0201 	mvn.w	r2, #1
 800e0fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f7f5 ff98 	bl	8004034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	691b      	ldr	r3, [r3, #16]
 800e10a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e10e:	2b80      	cmp	r3, #128	; 0x80
 800e110:	d10e      	bne.n	800e130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e11c:	2b80      	cmp	r3, #128	; 0x80
 800e11e:	d107      	bne.n	800e130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f000 f91a 	bl	800e364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e13a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e13e:	d10e      	bne.n	800e15e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e14a:	2b80      	cmp	r3, #128	; 0x80
 800e14c:	d107      	bne.n	800e15e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f000 f90d 	bl	800e378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	691b      	ldr	r3, [r3, #16]
 800e164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e168:	2b40      	cmp	r3, #64	; 0x40
 800e16a:	d10e      	bne.n	800e18a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68db      	ldr	r3, [r3, #12]
 800e172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e176:	2b40      	cmp	r3, #64	; 0x40
 800e178:	d107      	bne.n	800e18a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f000 f838 	bl	800e1fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	f003 0320 	and.w	r3, r3, #32
 800e194:	2b20      	cmp	r3, #32
 800e196:	d10e      	bne.n	800e1b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	f003 0320 	and.w	r3, r3, #32
 800e1a2:	2b20      	cmp	r3, #32
 800e1a4:	d107      	bne.n	800e1b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f06f 0220 	mvn.w	r2, #32
 800e1ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 f8cd 	bl	800e350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e1b6:	bf00      	nop
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e1be:	b480      	push	{r7}
 800e1c0:	b083      	sub	sp, #12
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e1c6:	bf00      	nop
 800e1c8:	370c      	adds	r7, #12
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr

0800e1d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e1d2:	b480      	push	{r7}
 800e1d4:	b083      	sub	sp, #12
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e1da:	bf00      	nop
 800e1dc:	370c      	adds	r7, #12
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr

0800e1e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e1e6:	b480      	push	{r7}
 800e1e8:	b083      	sub	sp, #12
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e1ee:	bf00      	nop
 800e1f0:	370c      	adds	r7, #12
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e1fa:	b480      	push	{r7}
 800e1fc:	b083      	sub	sp, #12
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e202:	bf00      	nop
 800e204:	370c      	adds	r7, #12
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
	...

0800e210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e210:	b480      	push	{r7}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4a40      	ldr	r2, [pc, #256]	; (800e324 <TIM_Base_SetConfig+0x114>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d013      	beq.n	800e250 <TIM_Base_SetConfig+0x40>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e22e:	d00f      	beq.n	800e250 <TIM_Base_SetConfig+0x40>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a3d      	ldr	r2, [pc, #244]	; (800e328 <TIM_Base_SetConfig+0x118>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d00b      	beq.n	800e250 <TIM_Base_SetConfig+0x40>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	4a3c      	ldr	r2, [pc, #240]	; (800e32c <TIM_Base_SetConfig+0x11c>)
 800e23c:	4293      	cmp	r3, r2
 800e23e:	d007      	beq.n	800e250 <TIM_Base_SetConfig+0x40>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	4a3b      	ldr	r2, [pc, #236]	; (800e330 <TIM_Base_SetConfig+0x120>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d003      	beq.n	800e250 <TIM_Base_SetConfig+0x40>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4a3a      	ldr	r2, [pc, #232]	; (800e334 <TIM_Base_SetConfig+0x124>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d108      	bne.n	800e262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	4313      	orrs	r3, r2
 800e260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	4a2f      	ldr	r2, [pc, #188]	; (800e324 <TIM_Base_SetConfig+0x114>)
 800e266:	4293      	cmp	r3, r2
 800e268:	d02b      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e270:	d027      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a2c      	ldr	r2, [pc, #176]	; (800e328 <TIM_Base_SetConfig+0x118>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d023      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a2b      	ldr	r2, [pc, #172]	; (800e32c <TIM_Base_SetConfig+0x11c>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d01f      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a2a      	ldr	r2, [pc, #168]	; (800e330 <TIM_Base_SetConfig+0x120>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d01b      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a29      	ldr	r2, [pc, #164]	; (800e334 <TIM_Base_SetConfig+0x124>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d017      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4a28      	ldr	r2, [pc, #160]	; (800e338 <TIM_Base_SetConfig+0x128>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d013      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a27      	ldr	r2, [pc, #156]	; (800e33c <TIM_Base_SetConfig+0x12c>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d00f      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	4a26      	ldr	r2, [pc, #152]	; (800e340 <TIM_Base_SetConfig+0x130>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d00b      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4a25      	ldr	r2, [pc, #148]	; (800e344 <TIM_Base_SetConfig+0x134>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d007      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	4a24      	ldr	r2, [pc, #144]	; (800e348 <TIM_Base_SetConfig+0x138>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d003      	beq.n	800e2c2 <TIM_Base_SetConfig+0xb2>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	4a23      	ldr	r2, [pc, #140]	; (800e34c <TIM_Base_SetConfig+0x13c>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d108      	bne.n	800e2d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	695b      	ldr	r3, [r3, #20]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	689a      	ldr	r2, [r3, #8]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	681a      	ldr	r2, [r3, #0]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	4a0a      	ldr	r2, [pc, #40]	; (800e324 <TIM_Base_SetConfig+0x114>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d003      	beq.n	800e308 <TIM_Base_SetConfig+0xf8>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4a0c      	ldr	r2, [pc, #48]	; (800e334 <TIM_Base_SetConfig+0x124>)
 800e304:	4293      	cmp	r3, r2
 800e306:	d103      	bne.n	800e310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	691a      	ldr	r2, [r3, #16]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	615a      	str	r2, [r3, #20]
}
 800e316:	bf00      	nop
 800e318:	3714      	adds	r7, #20
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	40010000 	.word	0x40010000
 800e328:	40000400 	.word	0x40000400
 800e32c:	40000800 	.word	0x40000800
 800e330:	40000c00 	.word	0x40000c00
 800e334:	40010400 	.word	0x40010400
 800e338:	40014000 	.word	0x40014000
 800e33c:	40014400 	.word	0x40014400
 800e340:	40014800 	.word	0x40014800
 800e344:	40001800 	.word	0x40001800
 800e348:	40001c00 	.word	0x40001c00
 800e34c:	40002000 	.word	0x40002000

0800e350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e358:	bf00      	nop
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e36c:	bf00      	nop
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e380:	bf00      	nop
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr

0800e38c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d101      	bne.n	800e39e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e39a:	2301      	movs	r3, #1
 800e39c:	e040      	b.n	800e420 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d106      	bne.n	800e3b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f7f7 fbd8 	bl	8005b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2224      	movs	r2, #36	; 0x24
 800e3b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f022 0201 	bic.w	r2, r2, #1
 800e3c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 f8b0 	bl	800e530 <UART_SetConfig>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d101      	bne.n	800e3da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	e022      	b.n	800e420 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d002      	beq.n	800e3e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 fb08 	bl	800e9f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	685a      	ldr	r2, [r3, #4]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e3f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	689a      	ldr	r2, [r3, #8]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e406:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f042 0201 	orr.w	r2, r2, #1
 800e416:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 fb8f 	bl	800eb3c <UART_CheckIdleState>
 800e41e:	4603      	mov	r3, r0
}
 800e420:	4618      	mov	r0, r3
 800e422:	3708      	adds	r7, #8
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b08a      	sub	sp, #40	; 0x28
 800e42c:	af02      	add	r7, sp, #8
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	603b      	str	r3, [r7, #0]
 800e434:	4613      	mov	r3, r2
 800e436:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e43c:	2b20      	cmp	r3, #32
 800e43e:	d171      	bne.n	800e524 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d002      	beq.n	800e44c <HAL_UART_Transmit+0x24>
 800e446:	88fb      	ldrh	r3, [r7, #6]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e44c:	2301      	movs	r3, #1
 800e44e:	e06a      	b.n	800e526 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2221      	movs	r2, #33	; 0x21
 800e45c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e45e:	f7fd f919 	bl	800b694 <HAL_GetTick>
 800e462:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	88fa      	ldrh	r2, [r7, #6]
 800e468:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	88fa      	ldrh	r2, [r7, #6]
 800e470:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e47c:	d108      	bne.n	800e490 <HAL_UART_Transmit+0x68>
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d104      	bne.n	800e490 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e486:	2300      	movs	r3, #0
 800e488:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	61bb      	str	r3, [r7, #24]
 800e48e:	e003      	b.n	800e498 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e494:	2300      	movs	r3, #0
 800e496:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e498:	e02c      	b.n	800e4f4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	2180      	movs	r1, #128	; 0x80
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	f000 fb96 	bl	800ebd6 <UART_WaitOnFlagUntilTimeout>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d001      	beq.n	800e4b4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800e4b0:	2303      	movs	r3, #3
 800e4b2:	e038      	b.n	800e526 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10b      	bne.n	800e4d2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	881b      	ldrh	r3, [r3, #0]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e4c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	3302      	adds	r3, #2
 800e4ce:	61bb      	str	r3, [r7, #24]
 800e4d0:	e007      	b.n	800e4e2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	781a      	ldrb	r2, [r3, #0]
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	b29a      	uxth	r2, r3
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1cc      	bne.n	800e49a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	9300      	str	r3, [sp, #0]
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	2200      	movs	r2, #0
 800e508:	2140      	movs	r1, #64	; 0x40
 800e50a:	68f8      	ldr	r0, [r7, #12]
 800e50c:	f000 fb63 	bl	800ebd6 <UART_WaitOnFlagUntilTimeout>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d001      	beq.n	800e51a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800e516:	2303      	movs	r3, #3
 800e518:	e005      	b.n	800e526 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2220      	movs	r2, #32
 800e51e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800e520:	2300      	movs	r3, #0
 800e522:	e000      	b.n	800e526 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800e524:	2302      	movs	r3, #2
  }
}
 800e526:	4618      	mov	r0, r3
 800e528:	3720      	adds	r7, #32
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
	...

0800e530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b088      	sub	sp, #32
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e538:	2300      	movs	r3, #0
 800e53a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	689a      	ldr	r2, [r3, #8]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	431a      	orrs	r2, r3
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	695b      	ldr	r3, [r3, #20]
 800e54a:	431a      	orrs	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	69db      	ldr	r3, [r3, #28]
 800e550:	4313      	orrs	r3, r2
 800e552:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	4ba6      	ldr	r3, [pc, #664]	; (800e7f4 <UART_SetConfig+0x2c4>)
 800e55c:	4013      	ands	r3, r2
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	6812      	ldr	r2, [r2, #0]
 800e562:	6979      	ldr	r1, [r7, #20]
 800e564:	430b      	orrs	r3, r1
 800e566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	68da      	ldr	r2, [r3, #12]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	430a      	orrs	r2, r1
 800e57c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	699b      	ldr	r3, [r3, #24]
 800e582:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6a1b      	ldr	r3, [r3, #32]
 800e588:	697a      	ldr	r2, [r7, #20]
 800e58a:	4313      	orrs	r3, r2
 800e58c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	697a      	ldr	r2, [r7, #20]
 800e59e:	430a      	orrs	r2, r1
 800e5a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4a94      	ldr	r2, [pc, #592]	; (800e7f8 <UART_SetConfig+0x2c8>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d120      	bne.n	800e5ee <UART_SetConfig+0xbe>
 800e5ac:	4b93      	ldr	r3, [pc, #588]	; (800e7fc <UART_SetConfig+0x2cc>)
 800e5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5b2:	f003 0303 	and.w	r3, r3, #3
 800e5b6:	2b03      	cmp	r3, #3
 800e5b8:	d816      	bhi.n	800e5e8 <UART_SetConfig+0xb8>
 800e5ba:	a201      	add	r2, pc, #4	; (adr r2, 800e5c0 <UART_SetConfig+0x90>)
 800e5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c0:	0800e5d1 	.word	0x0800e5d1
 800e5c4:	0800e5dd 	.word	0x0800e5dd
 800e5c8:	0800e5d7 	.word	0x0800e5d7
 800e5cc:	0800e5e3 	.word	0x0800e5e3
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	77fb      	strb	r3, [r7, #31]
 800e5d4:	e150      	b.n	800e878 <UART_SetConfig+0x348>
 800e5d6:	2302      	movs	r3, #2
 800e5d8:	77fb      	strb	r3, [r7, #31]
 800e5da:	e14d      	b.n	800e878 <UART_SetConfig+0x348>
 800e5dc:	2304      	movs	r3, #4
 800e5de:	77fb      	strb	r3, [r7, #31]
 800e5e0:	e14a      	b.n	800e878 <UART_SetConfig+0x348>
 800e5e2:	2308      	movs	r3, #8
 800e5e4:	77fb      	strb	r3, [r7, #31]
 800e5e6:	e147      	b.n	800e878 <UART_SetConfig+0x348>
 800e5e8:	2310      	movs	r3, #16
 800e5ea:	77fb      	strb	r3, [r7, #31]
 800e5ec:	e144      	b.n	800e878 <UART_SetConfig+0x348>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	4a83      	ldr	r2, [pc, #524]	; (800e800 <UART_SetConfig+0x2d0>)
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d132      	bne.n	800e65e <UART_SetConfig+0x12e>
 800e5f8:	4b80      	ldr	r3, [pc, #512]	; (800e7fc <UART_SetConfig+0x2cc>)
 800e5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5fe:	f003 030c 	and.w	r3, r3, #12
 800e602:	2b0c      	cmp	r3, #12
 800e604:	d828      	bhi.n	800e658 <UART_SetConfig+0x128>
 800e606:	a201      	add	r2, pc, #4	; (adr r2, 800e60c <UART_SetConfig+0xdc>)
 800e608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60c:	0800e641 	.word	0x0800e641
 800e610:	0800e659 	.word	0x0800e659
 800e614:	0800e659 	.word	0x0800e659
 800e618:	0800e659 	.word	0x0800e659
 800e61c:	0800e64d 	.word	0x0800e64d
 800e620:	0800e659 	.word	0x0800e659
 800e624:	0800e659 	.word	0x0800e659
 800e628:	0800e659 	.word	0x0800e659
 800e62c:	0800e647 	.word	0x0800e647
 800e630:	0800e659 	.word	0x0800e659
 800e634:	0800e659 	.word	0x0800e659
 800e638:	0800e659 	.word	0x0800e659
 800e63c:	0800e653 	.word	0x0800e653
 800e640:	2300      	movs	r3, #0
 800e642:	77fb      	strb	r3, [r7, #31]
 800e644:	e118      	b.n	800e878 <UART_SetConfig+0x348>
 800e646:	2302      	movs	r3, #2
 800e648:	77fb      	strb	r3, [r7, #31]
 800e64a:	e115      	b.n	800e878 <UART_SetConfig+0x348>
 800e64c:	2304      	movs	r3, #4
 800e64e:	77fb      	strb	r3, [r7, #31]
 800e650:	e112      	b.n	800e878 <UART_SetConfig+0x348>
 800e652:	2308      	movs	r3, #8
 800e654:	77fb      	strb	r3, [r7, #31]
 800e656:	e10f      	b.n	800e878 <UART_SetConfig+0x348>
 800e658:	2310      	movs	r3, #16
 800e65a:	77fb      	strb	r3, [r7, #31]
 800e65c:	e10c      	b.n	800e878 <UART_SetConfig+0x348>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a68      	ldr	r2, [pc, #416]	; (800e804 <UART_SetConfig+0x2d4>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d120      	bne.n	800e6aa <UART_SetConfig+0x17a>
 800e668:	4b64      	ldr	r3, [pc, #400]	; (800e7fc <UART_SetConfig+0x2cc>)
 800e66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e66e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e672:	2b30      	cmp	r3, #48	; 0x30
 800e674:	d013      	beq.n	800e69e <UART_SetConfig+0x16e>
 800e676:	2b30      	cmp	r3, #48	; 0x30
 800e678:	d814      	bhi.n	800e6a4 <UART_SetConfig+0x174>
 800e67a:	2b20      	cmp	r3, #32
 800e67c:	d009      	beq.n	800e692 <UART_SetConfig+0x162>
 800e67e:	2b20      	cmp	r3, #32
 800e680:	d810      	bhi.n	800e6a4 <UART_SetConfig+0x174>
 800e682:	2b00      	cmp	r3, #0
 800e684:	d002      	beq.n	800e68c <UART_SetConfig+0x15c>
 800e686:	2b10      	cmp	r3, #16
 800e688:	d006      	beq.n	800e698 <UART_SetConfig+0x168>
 800e68a:	e00b      	b.n	800e6a4 <UART_SetConfig+0x174>
 800e68c:	2300      	movs	r3, #0
 800e68e:	77fb      	strb	r3, [r7, #31]
 800e690:	e0f2      	b.n	800e878 <UART_SetConfig+0x348>
 800e692:	2302      	movs	r3, #2
 800e694:	77fb      	strb	r3, [r7, #31]
 800e696:	e0ef      	b.n	800e878 <UART_SetConfig+0x348>
 800e698:	2304      	movs	r3, #4
 800e69a:	77fb      	strb	r3, [r7, #31]
 800e69c:	e0ec      	b.n	800e878 <UART_SetConfig+0x348>
 800e69e:	2308      	movs	r3, #8
 800e6a0:	77fb      	strb	r3, [r7, #31]
 800e6a2:	e0e9      	b.n	800e878 <UART_SetConfig+0x348>
 800e6a4:	2310      	movs	r3, #16
 800e6a6:	77fb      	strb	r3, [r7, #31]
 800e6a8:	e0e6      	b.n	800e878 <UART_SetConfig+0x348>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	4a56      	ldr	r2, [pc, #344]	; (800e808 <UART_SetConfig+0x2d8>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d120      	bne.n	800e6f6 <UART_SetConfig+0x1c6>
 800e6b4:	4b51      	ldr	r3, [pc, #324]	; (800e7fc <UART_SetConfig+0x2cc>)
 800e6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e6be:	2bc0      	cmp	r3, #192	; 0xc0
 800e6c0:	d013      	beq.n	800e6ea <UART_SetConfig+0x1ba>
 800e6c2:	2bc0      	cmp	r3, #192	; 0xc0
 800e6c4:	d814      	bhi.n	800e6f0 <UART_SetConfig+0x1c0>
 800e6c6:	2b80      	cmp	r3, #128	; 0x80
 800e6c8:	d009      	beq.n	800e6de <UART_SetConfig+0x1ae>
 800e6ca:	2b80      	cmp	r3, #128	; 0x80
 800e6cc:	d810      	bhi.n	800e6f0 <UART_SetConfig+0x1c0>
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d002      	beq.n	800e6d8 <UART_SetConfig+0x1a8>
 800e6d2:	2b40      	cmp	r3, #64	; 0x40
 800e6d4:	d006      	beq.n	800e6e4 <UART_SetConfig+0x1b4>
 800e6d6:	e00b      	b.n	800e6f0 <UART_SetConfig+0x1c0>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	77fb      	strb	r3, [r7, #31]
 800e6dc:	e0cc      	b.n	800e878 <UART_SetConfig+0x348>
 800e6de:	2302      	movs	r3, #2
 800e6e0:	77fb      	strb	r3, [r7, #31]
 800e6e2:	e0c9      	b.n	800e878 <UART_SetConfig+0x348>
 800e6e4:	2304      	movs	r3, #4
 800e6e6:	77fb      	strb	r3, [r7, #31]
 800e6e8:	e0c6      	b.n	800e878 <UART_SetConfig+0x348>
 800e6ea:	2308      	movs	r3, #8
 800e6ec:	77fb      	strb	r3, [r7, #31]
 800e6ee:	e0c3      	b.n	800e878 <UART_SetConfig+0x348>
 800e6f0:	2310      	movs	r3, #16
 800e6f2:	77fb      	strb	r3, [r7, #31]
 800e6f4:	e0c0      	b.n	800e878 <UART_SetConfig+0x348>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a44      	ldr	r2, [pc, #272]	; (800e80c <UART_SetConfig+0x2dc>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d125      	bne.n	800e74c <UART_SetConfig+0x21c>
 800e700:	4b3e      	ldr	r3, [pc, #248]	; (800e7fc <UART_SetConfig+0x2cc>)
 800e702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e70a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e70e:	d017      	beq.n	800e740 <UART_SetConfig+0x210>
 800e710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e714:	d817      	bhi.n	800e746 <UART_SetConfig+0x216>
 800e716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e71a:	d00b      	beq.n	800e734 <UART_SetConfig+0x204>
 800e71c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e720:	d811      	bhi.n	800e746 <UART_SetConfig+0x216>
 800e722:	2b00      	cmp	r3, #0
 800e724:	d003      	beq.n	800e72e <UART_SetConfig+0x1fe>
 800e726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e72a:	d006      	beq.n	800e73a <UART_SetConfig+0x20a>
 800e72c:	e00b      	b.n	800e746 <UART_SetConfig+0x216>
 800e72e:	2300      	movs	r3, #0
 800e730:	77fb      	strb	r3, [r7, #31]
 800e732:	e0a1      	b.n	800e878 <UART_SetConfig+0x348>
 800e734:	2302      	movs	r3, #2
 800e736:	77fb      	strb	r3, [r7, #31]
 800e738:	e09e      	b.n	800e878 <UART_SetConfig+0x348>
 800e73a:	2304      	movs	r3, #4
 800e73c:	77fb      	strb	r3, [r7, #31]
 800e73e:	e09b      	b.n	800e878 <UART_SetConfig+0x348>
 800e740:	2308      	movs	r3, #8
 800e742:	77fb      	strb	r3, [r7, #31]
 800e744:	e098      	b.n	800e878 <UART_SetConfig+0x348>
 800e746:	2310      	movs	r3, #16
 800e748:	77fb      	strb	r3, [r7, #31]
 800e74a:	e095      	b.n	800e878 <UART_SetConfig+0x348>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a2f      	ldr	r2, [pc, #188]	; (800e810 <UART_SetConfig+0x2e0>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d125      	bne.n	800e7a2 <UART_SetConfig+0x272>
 800e756:	4b29      	ldr	r3, [pc, #164]	; (800e7fc <UART_SetConfig+0x2cc>)
 800e758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e75c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e764:	d017      	beq.n	800e796 <UART_SetConfig+0x266>
 800e766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e76a:	d817      	bhi.n	800e79c <UART_SetConfig+0x26c>
 800e76c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e770:	d00b      	beq.n	800e78a <UART_SetConfig+0x25a>
 800e772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e776:	d811      	bhi.n	800e79c <UART_SetConfig+0x26c>
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d003      	beq.n	800e784 <UART_SetConfig+0x254>
 800e77c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e780:	d006      	beq.n	800e790 <UART_SetConfig+0x260>
 800e782:	e00b      	b.n	800e79c <UART_SetConfig+0x26c>
 800e784:	2301      	movs	r3, #1
 800e786:	77fb      	strb	r3, [r7, #31]
 800e788:	e076      	b.n	800e878 <UART_SetConfig+0x348>
 800e78a:	2302      	movs	r3, #2
 800e78c:	77fb      	strb	r3, [r7, #31]
 800e78e:	e073      	b.n	800e878 <UART_SetConfig+0x348>
 800e790:	2304      	movs	r3, #4
 800e792:	77fb      	strb	r3, [r7, #31]
 800e794:	e070      	b.n	800e878 <UART_SetConfig+0x348>
 800e796:	2308      	movs	r3, #8
 800e798:	77fb      	strb	r3, [r7, #31]
 800e79a:	e06d      	b.n	800e878 <UART_SetConfig+0x348>
 800e79c:	2310      	movs	r3, #16
 800e79e:	77fb      	strb	r3, [r7, #31]
 800e7a0:	e06a      	b.n	800e878 <UART_SetConfig+0x348>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4a1b      	ldr	r2, [pc, #108]	; (800e814 <UART_SetConfig+0x2e4>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d138      	bne.n	800e81e <UART_SetConfig+0x2ee>
 800e7ac:	4b13      	ldr	r3, [pc, #76]	; (800e7fc <UART_SetConfig+0x2cc>)
 800e7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e7b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e7ba:	d017      	beq.n	800e7ec <UART_SetConfig+0x2bc>
 800e7bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e7c0:	d82a      	bhi.n	800e818 <UART_SetConfig+0x2e8>
 800e7c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7c6:	d00b      	beq.n	800e7e0 <UART_SetConfig+0x2b0>
 800e7c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7cc:	d824      	bhi.n	800e818 <UART_SetConfig+0x2e8>
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d003      	beq.n	800e7da <UART_SetConfig+0x2aa>
 800e7d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7d6:	d006      	beq.n	800e7e6 <UART_SetConfig+0x2b6>
 800e7d8:	e01e      	b.n	800e818 <UART_SetConfig+0x2e8>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	77fb      	strb	r3, [r7, #31]
 800e7de:	e04b      	b.n	800e878 <UART_SetConfig+0x348>
 800e7e0:	2302      	movs	r3, #2
 800e7e2:	77fb      	strb	r3, [r7, #31]
 800e7e4:	e048      	b.n	800e878 <UART_SetConfig+0x348>
 800e7e6:	2304      	movs	r3, #4
 800e7e8:	77fb      	strb	r3, [r7, #31]
 800e7ea:	e045      	b.n	800e878 <UART_SetConfig+0x348>
 800e7ec:	2308      	movs	r3, #8
 800e7ee:	77fb      	strb	r3, [r7, #31]
 800e7f0:	e042      	b.n	800e878 <UART_SetConfig+0x348>
 800e7f2:	bf00      	nop
 800e7f4:	efff69f3 	.word	0xefff69f3
 800e7f8:	40011000 	.word	0x40011000
 800e7fc:	40023800 	.word	0x40023800
 800e800:	40004400 	.word	0x40004400
 800e804:	40004800 	.word	0x40004800
 800e808:	40004c00 	.word	0x40004c00
 800e80c:	40005000 	.word	0x40005000
 800e810:	40011400 	.word	0x40011400
 800e814:	40007800 	.word	0x40007800
 800e818:	2310      	movs	r3, #16
 800e81a:	77fb      	strb	r3, [r7, #31]
 800e81c:	e02c      	b.n	800e878 <UART_SetConfig+0x348>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a72      	ldr	r2, [pc, #456]	; (800e9ec <UART_SetConfig+0x4bc>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d125      	bne.n	800e874 <UART_SetConfig+0x344>
 800e828:	4b71      	ldr	r3, [pc, #452]	; (800e9f0 <UART_SetConfig+0x4c0>)
 800e82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e82e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e832:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e836:	d017      	beq.n	800e868 <UART_SetConfig+0x338>
 800e838:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e83c:	d817      	bhi.n	800e86e <UART_SetConfig+0x33e>
 800e83e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e842:	d00b      	beq.n	800e85c <UART_SetConfig+0x32c>
 800e844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e848:	d811      	bhi.n	800e86e <UART_SetConfig+0x33e>
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d003      	beq.n	800e856 <UART_SetConfig+0x326>
 800e84e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e852:	d006      	beq.n	800e862 <UART_SetConfig+0x332>
 800e854:	e00b      	b.n	800e86e <UART_SetConfig+0x33e>
 800e856:	2300      	movs	r3, #0
 800e858:	77fb      	strb	r3, [r7, #31]
 800e85a:	e00d      	b.n	800e878 <UART_SetConfig+0x348>
 800e85c:	2302      	movs	r3, #2
 800e85e:	77fb      	strb	r3, [r7, #31]
 800e860:	e00a      	b.n	800e878 <UART_SetConfig+0x348>
 800e862:	2304      	movs	r3, #4
 800e864:	77fb      	strb	r3, [r7, #31]
 800e866:	e007      	b.n	800e878 <UART_SetConfig+0x348>
 800e868:	2308      	movs	r3, #8
 800e86a:	77fb      	strb	r3, [r7, #31]
 800e86c:	e004      	b.n	800e878 <UART_SetConfig+0x348>
 800e86e:	2310      	movs	r3, #16
 800e870:	77fb      	strb	r3, [r7, #31]
 800e872:	e001      	b.n	800e878 <UART_SetConfig+0x348>
 800e874:	2310      	movs	r3, #16
 800e876:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	69db      	ldr	r3, [r3, #28]
 800e87c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e880:	d15b      	bne.n	800e93a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e882:	7ffb      	ldrb	r3, [r7, #31]
 800e884:	2b08      	cmp	r3, #8
 800e886:	d828      	bhi.n	800e8da <UART_SetConfig+0x3aa>
 800e888:	a201      	add	r2, pc, #4	; (adr r2, 800e890 <UART_SetConfig+0x360>)
 800e88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e88e:	bf00      	nop
 800e890:	0800e8b5 	.word	0x0800e8b5
 800e894:	0800e8bd 	.word	0x0800e8bd
 800e898:	0800e8c5 	.word	0x0800e8c5
 800e89c:	0800e8db 	.word	0x0800e8db
 800e8a0:	0800e8cb 	.word	0x0800e8cb
 800e8a4:	0800e8db 	.word	0x0800e8db
 800e8a8:	0800e8db 	.word	0x0800e8db
 800e8ac:	0800e8db 	.word	0x0800e8db
 800e8b0:	0800e8d3 	.word	0x0800e8d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e8b4:	f7fe fe08 	bl	800d4c8 <HAL_RCC_GetPCLK1Freq>
 800e8b8:	61b8      	str	r0, [r7, #24]
        break;
 800e8ba:	e013      	b.n	800e8e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8bc:	f7fe fe18 	bl	800d4f0 <HAL_RCC_GetPCLK2Freq>
 800e8c0:	61b8      	str	r0, [r7, #24]
        break;
 800e8c2:	e00f      	b.n	800e8e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e8c4:	4b4b      	ldr	r3, [pc, #300]	; (800e9f4 <UART_SetConfig+0x4c4>)
 800e8c6:	61bb      	str	r3, [r7, #24]
        break;
 800e8c8:	e00c      	b.n	800e8e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e8ca:	f7fe fceb 	bl	800d2a4 <HAL_RCC_GetSysClockFreq>
 800e8ce:	61b8      	str	r0, [r7, #24]
        break;
 800e8d0:	e008      	b.n	800e8e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8d6:	61bb      	str	r3, [r7, #24]
        break;
 800e8d8:	e004      	b.n	800e8e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	77bb      	strb	r3, [r7, #30]
        break;
 800e8e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d074      	beq.n	800e9d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e8ea:	69bb      	ldr	r3, [r7, #24]
 800e8ec:	005a      	lsls	r2, r3, #1
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	085b      	lsrs	r3, r3, #1
 800e8f4:	441a      	add	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	2b0f      	cmp	r3, #15
 800e904:	d916      	bls.n	800e934 <UART_SetConfig+0x404>
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e90c:	d212      	bcs.n	800e934 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	b29b      	uxth	r3, r3
 800e912:	f023 030f 	bic.w	r3, r3, #15
 800e916:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	085b      	lsrs	r3, r3, #1
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	f003 0307 	and.w	r3, r3, #7
 800e922:	b29a      	uxth	r2, r3
 800e924:	89fb      	ldrh	r3, [r7, #14]
 800e926:	4313      	orrs	r3, r2
 800e928:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	89fa      	ldrh	r2, [r7, #14]
 800e930:	60da      	str	r2, [r3, #12]
 800e932:	e04f      	b.n	800e9d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e934:	2301      	movs	r3, #1
 800e936:	77bb      	strb	r3, [r7, #30]
 800e938:	e04c      	b.n	800e9d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e93a:	7ffb      	ldrb	r3, [r7, #31]
 800e93c:	2b08      	cmp	r3, #8
 800e93e:	d828      	bhi.n	800e992 <UART_SetConfig+0x462>
 800e940:	a201      	add	r2, pc, #4	; (adr r2, 800e948 <UART_SetConfig+0x418>)
 800e942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e946:	bf00      	nop
 800e948:	0800e96d 	.word	0x0800e96d
 800e94c:	0800e975 	.word	0x0800e975
 800e950:	0800e97d 	.word	0x0800e97d
 800e954:	0800e993 	.word	0x0800e993
 800e958:	0800e983 	.word	0x0800e983
 800e95c:	0800e993 	.word	0x0800e993
 800e960:	0800e993 	.word	0x0800e993
 800e964:	0800e993 	.word	0x0800e993
 800e968:	0800e98b 	.word	0x0800e98b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e96c:	f7fe fdac 	bl	800d4c8 <HAL_RCC_GetPCLK1Freq>
 800e970:	61b8      	str	r0, [r7, #24]
        break;
 800e972:	e013      	b.n	800e99c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e974:	f7fe fdbc 	bl	800d4f0 <HAL_RCC_GetPCLK2Freq>
 800e978:	61b8      	str	r0, [r7, #24]
        break;
 800e97a:	e00f      	b.n	800e99c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e97c:	4b1d      	ldr	r3, [pc, #116]	; (800e9f4 <UART_SetConfig+0x4c4>)
 800e97e:	61bb      	str	r3, [r7, #24]
        break;
 800e980:	e00c      	b.n	800e99c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e982:	f7fe fc8f 	bl	800d2a4 <HAL_RCC_GetSysClockFreq>
 800e986:	61b8      	str	r0, [r7, #24]
        break;
 800e988:	e008      	b.n	800e99c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e98a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e98e:	61bb      	str	r3, [r7, #24]
        break;
 800e990:	e004      	b.n	800e99c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e992:	2300      	movs	r3, #0
 800e994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	77bb      	strb	r3, [r7, #30]
        break;
 800e99a:	bf00      	nop
    }

    if (pclk != 0U)
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d018      	beq.n	800e9d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	685b      	ldr	r3, [r3, #4]
 800e9a6:	085a      	lsrs	r2, r3, #1
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	441a      	add	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	2b0f      	cmp	r3, #15
 800e9ba:	d909      	bls.n	800e9d0 <UART_SetConfig+0x4a0>
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9c2:	d205      	bcs.n	800e9d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	b29a      	uxth	r2, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	60da      	str	r2, [r3, #12]
 800e9ce:	e001      	b.n	800e9d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e9e0:	7fbb      	ldrb	r3, [r7, #30]
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3720      	adds	r7, #32
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	40007c00 	.word	0x40007c00
 800e9f0:	40023800 	.word	0x40023800
 800e9f4:	00f42400 	.word	0x00f42400

0800e9f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea04:	f003 0301 	and.w	r3, r3, #1
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d00a      	beq.n	800ea22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	430a      	orrs	r2, r1
 800ea20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea26:	f003 0302 	and.w	r3, r3, #2
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d00a      	beq.n	800ea44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	430a      	orrs	r2, r1
 800ea42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea48:	f003 0304 	and.w	r3, r3, #4
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d00a      	beq.n	800ea66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	430a      	orrs	r2, r1
 800ea64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6a:	f003 0308 	and.w	r3, r3, #8
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00a      	beq.n	800ea88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	430a      	orrs	r2, r1
 800ea86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8c:	f003 0310 	and.w	r3, r3, #16
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00a      	beq.n	800eaaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	689b      	ldr	r3, [r3, #8]
 800ea9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	430a      	orrs	r2, r1
 800eaa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaae:	f003 0320 	and.w	r3, r3, #32
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00a      	beq.n	800eacc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	430a      	orrs	r2, r1
 800eaca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d01a      	beq.n	800eb0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	685b      	ldr	r3, [r3, #4]
 800eade:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	430a      	orrs	r2, r1
 800eaec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eaf6:	d10a      	bne.n	800eb0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	430a      	orrs	r2, r1
 800eb0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00a      	beq.n	800eb30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	430a      	orrs	r2, r1
 800eb2e:	605a      	str	r2, [r3, #4]
  }
}
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af02      	add	r7, sp, #8
 800eb42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eb4c:	f7fc fda2 	bl	800b694 <HAL_GetTick>
 800eb50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f003 0308 	and.w	r3, r3, #8
 800eb5c:	2b08      	cmp	r3, #8
 800eb5e:	d10e      	bne.n	800eb7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb64:	9300      	str	r3, [sp, #0]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 f831 	bl	800ebd6 <UART_WaitOnFlagUntilTimeout>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d001      	beq.n	800eb7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	e027      	b.n	800ebce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f003 0304 	and.w	r3, r3, #4
 800eb88:	2b04      	cmp	r3, #4
 800eb8a:	d10e      	bne.n	800ebaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eb8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2200      	movs	r2, #0
 800eb96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f000 f81b 	bl	800ebd6 <UART_WaitOnFlagUntilTimeout>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d001      	beq.n	800ebaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eba6:	2303      	movs	r3, #3
 800eba8:	e011      	b.n	800ebce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2220      	movs	r2, #32
 800ebae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2220      	movs	r2, #32
 800ebb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ebcc:	2300      	movs	r3, #0
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b09c      	sub	sp, #112	; 0x70
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	60f8      	str	r0, [r7, #12]
 800ebde:	60b9      	str	r1, [r7, #8]
 800ebe0:	603b      	str	r3, [r7, #0]
 800ebe2:	4613      	mov	r3, r2
 800ebe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebe6:	e0a7      	b.n	800ed38 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ebea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebee:	f000 80a3 	beq.w	800ed38 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebf2:	f7fc fd4f 	bl	800b694 <HAL_GetTick>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	1ad3      	subs	r3, r2, r3
 800ebfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d302      	bcc.n	800ec08 <UART_WaitOnFlagUntilTimeout+0x32>
 800ec02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d13f      	bne.n	800ec88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec10:	e853 3f00 	ldrex	r3, [r3]
 800ec14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ec16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec1c:	667b      	str	r3, [r7, #100]	; 0x64
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	461a      	mov	r2, r3
 800ec24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ec2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ec2e:	e841 2300 	strex	r3, r2, [r1]
 800ec32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ec34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d1e6      	bne.n	800ec08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	3308      	adds	r3, #8
 800ec40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec44:	e853 3f00 	ldrex	r3, [r3]
 800ec48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4c:	f023 0301 	bic.w	r3, r3, #1
 800ec50:	663b      	str	r3, [r7, #96]	; 0x60
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	3308      	adds	r3, #8
 800ec58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec5a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ec5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec62:	e841 2300 	strex	r3, r2, [r1]
 800ec66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ec68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d1e5      	bne.n	800ec3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2220      	movs	r2, #32
 800ec72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2220      	movs	r2, #32
 800ec78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800ec84:	2303      	movs	r3, #3
 800ec86:	e068      	b.n	800ed5a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f003 0304 	and.w	r3, r3, #4
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d050      	beq.n	800ed38 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	69db      	ldr	r3, [r3, #28]
 800ec9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eca4:	d148      	bne.n	800ed38 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb8:	e853 3f00 	ldrex	r3, [r3]
 800ecbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ecbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ecc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	461a      	mov	r2, r3
 800eccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecce:	637b      	str	r3, [r7, #52]	; 0x34
 800ecd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ecd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecd6:	e841 2300 	strex	r3, r2, [r1]
 800ecda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ecdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d1e6      	bne.n	800ecb0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	3308      	adds	r3, #8
 800ece8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	e853 3f00 	ldrex	r3, [r3]
 800ecf0:	613b      	str	r3, [r7, #16]
   return(result);
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	f023 0301 	bic.w	r3, r3, #1
 800ecf8:	66bb      	str	r3, [r7, #104]	; 0x68
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	3308      	adds	r3, #8
 800ed00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ed02:	623a      	str	r2, [r7, #32]
 800ed04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed06:	69f9      	ldr	r1, [r7, #28]
 800ed08:	6a3a      	ldr	r2, [r7, #32]
 800ed0a:	e841 2300 	strex	r3, r2, [r1]
 800ed0e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d1e5      	bne.n	800ece2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2220      	movs	r2, #32
 800ed1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2220      	movs	r2, #32
 800ed20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2220      	movs	r2, #32
 800ed28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ed34:	2303      	movs	r3, #3
 800ed36:	e010      	b.n	800ed5a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	69da      	ldr	r2, [r3, #28]
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	4013      	ands	r3, r2
 800ed42:	68ba      	ldr	r2, [r7, #8]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	bf0c      	ite	eq
 800ed48:	2301      	moveq	r3, #1
 800ed4a:	2300      	movne	r3, #0
 800ed4c:	b2db      	uxtb	r3, r3
 800ed4e:	461a      	mov	r2, r3
 800ed50:	79fb      	ldrb	r3, [r7, #7]
 800ed52:	429a      	cmp	r2, r3
 800ed54:	f43f af48 	beq.w	800ebe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ed58:	2300      	movs	r3, #0
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3770      	adds	r7, #112	; 0x70
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ed62:	b480      	push	{r7}
 800ed64:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ed66:	bf00      	nop
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr

0800ed70 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ed70:	b480      	push	{r7}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed76:	f3ef 8305 	mrs	r3, IPSR
 800ed7a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ed7c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d10f      	bne.n	800eda2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed82:	f3ef 8310 	mrs	r3, PRIMASK
 800ed86:	607b      	str	r3, [r7, #4]
  return(result);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d105      	bne.n	800ed9a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed8e:	f3ef 8311 	mrs	r3, BASEPRI
 800ed92:	603b      	str	r3, [r7, #0]
  return(result);
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d007      	beq.n	800edaa <osKernelInitialize+0x3a>
 800ed9a:	4b0e      	ldr	r3, [pc, #56]	; (800edd4 <osKernelInitialize+0x64>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	2b02      	cmp	r3, #2
 800eda0:	d103      	bne.n	800edaa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800eda2:	f06f 0305 	mvn.w	r3, #5
 800eda6:	60fb      	str	r3, [r7, #12]
 800eda8:	e00c      	b.n	800edc4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800edaa:	4b0a      	ldr	r3, [pc, #40]	; (800edd4 <osKernelInitialize+0x64>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d105      	bne.n	800edbe <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800edb2:	4b08      	ldr	r3, [pc, #32]	; (800edd4 <osKernelInitialize+0x64>)
 800edb4:	2201      	movs	r2, #1
 800edb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800edb8:	2300      	movs	r3, #0
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	e002      	b.n	800edc4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800edbe:	f04f 33ff 	mov.w	r3, #4294967295
 800edc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800edc4:	68fb      	ldr	r3, [r7, #12]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3714      	adds	r7, #20
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	200012a8 	.word	0x200012a8

0800edd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edde:	f3ef 8305 	mrs	r3, IPSR
 800ede2:	60bb      	str	r3, [r7, #8]
  return(result);
 800ede4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d10f      	bne.n	800ee0a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edea:	f3ef 8310 	mrs	r3, PRIMASK
 800edee:	607b      	str	r3, [r7, #4]
  return(result);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d105      	bne.n	800ee02 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800edf6:	f3ef 8311 	mrs	r3, BASEPRI
 800edfa:	603b      	str	r3, [r7, #0]
  return(result);
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d007      	beq.n	800ee12 <osKernelStart+0x3a>
 800ee02:	4b0f      	ldr	r3, [pc, #60]	; (800ee40 <osKernelStart+0x68>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	2b02      	cmp	r3, #2
 800ee08:	d103      	bne.n	800ee12 <osKernelStart+0x3a>
    stat = osErrorISR;
 800ee0a:	f06f 0305 	mvn.w	r3, #5
 800ee0e:	60fb      	str	r3, [r7, #12]
 800ee10:	e010      	b.n	800ee34 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ee12:	4b0b      	ldr	r3, [pc, #44]	; (800ee40 <osKernelStart+0x68>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d109      	bne.n	800ee2e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ee1a:	f7ff ffa2 	bl	800ed62 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ee1e:	4b08      	ldr	r3, [pc, #32]	; (800ee40 <osKernelStart+0x68>)
 800ee20:	2202      	movs	r2, #2
 800ee22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ee24:	f001 fd70 	bl	8010908 <vTaskStartScheduler>
      stat = osOK;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	60fb      	str	r3, [r7, #12]
 800ee2c:	e002      	b.n	800ee34 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ee2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ee34:	68fb      	ldr	r3, [r7, #12]
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	200012a8 	.word	0x200012a8

0800ee44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b090      	sub	sp, #64	; 0x40
 800ee48:	af04      	add	r7, sp, #16
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	60b9      	str	r1, [r7, #8]
 800ee4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ee50:	2300      	movs	r3, #0
 800ee52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee54:	f3ef 8305 	mrs	r3, IPSR
 800ee58:	61fb      	str	r3, [r7, #28]
  return(result);
 800ee5a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f040 808f 	bne.w	800ef80 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee62:	f3ef 8310 	mrs	r3, PRIMASK
 800ee66:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d105      	bne.n	800ee7a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee6e:	f3ef 8311 	mrs	r3, BASEPRI
 800ee72:	617b      	str	r3, [r7, #20]
  return(result);
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d003      	beq.n	800ee82 <osThreadNew+0x3e>
 800ee7a:	4b44      	ldr	r3, [pc, #272]	; (800ef8c <osThreadNew+0x148>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b02      	cmp	r3, #2
 800ee80:	d07e      	beq.n	800ef80 <osThreadNew+0x13c>
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d07b      	beq.n	800ef80 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ee88:	2380      	movs	r3, #128	; 0x80
 800ee8a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ee8c:	2318      	movs	r3, #24
 800ee8e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ee90:	2300      	movs	r3, #0
 800ee92:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ee94:	f04f 33ff 	mov.w	r3, #4294967295
 800ee98:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d045      	beq.n	800ef2c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d002      	beq.n	800eeae <osThreadNew+0x6a>
        name = attr->name;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d002      	beq.n	800eebc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	699b      	ldr	r3, [r3, #24]
 800eeba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d008      	beq.n	800eed4 <osThreadNew+0x90>
 800eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec4:	2b38      	cmp	r3, #56	; 0x38
 800eec6:	d805      	bhi.n	800eed4 <osThreadNew+0x90>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	685b      	ldr	r3, [r3, #4]
 800eecc:	f003 0301 	and.w	r3, r3, #1
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d001      	beq.n	800eed8 <osThreadNew+0x94>
        return (NULL);
 800eed4:	2300      	movs	r3, #0
 800eed6:	e054      	b.n	800ef82 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	695b      	ldr	r3, [r3, #20]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d003      	beq.n	800eee8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	695b      	ldr	r3, [r3, #20]
 800eee4:	089b      	lsrs	r3, r3, #2
 800eee6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d00e      	beq.n	800ef0e <osThreadNew+0xca>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	68db      	ldr	r3, [r3, #12]
 800eef4:	2bbb      	cmp	r3, #187	; 0xbb
 800eef6:	d90a      	bls.n	800ef0e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d006      	beq.n	800ef0e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	695b      	ldr	r3, [r3, #20]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d002      	beq.n	800ef0e <osThreadNew+0xca>
        mem = 1;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	623b      	str	r3, [r7, #32]
 800ef0c:	e010      	b.n	800ef30 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d10c      	bne.n	800ef30 <osThreadNew+0xec>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d108      	bne.n	800ef30 <osThreadNew+0xec>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d104      	bne.n	800ef30 <osThreadNew+0xec>
          mem = 0;
 800ef26:	2300      	movs	r3, #0
 800ef28:	623b      	str	r3, [r7, #32]
 800ef2a:	e001      	b.n	800ef30 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ef30:	6a3b      	ldr	r3, [r7, #32]
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d110      	bne.n	800ef58 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ef3e:	9202      	str	r2, [sp, #8]
 800ef40:	9301      	str	r3, [sp, #4]
 800ef42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f001 fae5 	bl	801051c <xTaskCreateStatic>
 800ef52:	4603      	mov	r3, r0
 800ef54:	613b      	str	r3, [r7, #16]
 800ef56:	e013      	b.n	800ef80 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ef58:	6a3b      	ldr	r3, [r7, #32]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d110      	bne.n	800ef80 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ef5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef60:	b29a      	uxth	r2, r3
 800ef62:	f107 0310 	add.w	r3, r7, #16
 800ef66:	9301      	str	r3, [sp, #4]
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef70:	68f8      	ldr	r0, [r7, #12]
 800ef72:	f001 fb36 	bl	80105e2 <xTaskCreate>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d001      	beq.n	800ef80 <osThreadNew+0x13c>
          hTask = NULL;
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ef80:	693b      	ldr	r3, [r7, #16]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3730      	adds	r7, #48	; 0x30
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	200012a8 	.word	0x200012a8

0800ef90 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef98:	f3ef 8305 	mrs	r3, IPSR
 800ef9c:	613b      	str	r3, [r7, #16]
  return(result);
 800ef9e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10f      	bne.n	800efc4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efa4:	f3ef 8310 	mrs	r3, PRIMASK
 800efa8:	60fb      	str	r3, [r7, #12]
  return(result);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d105      	bne.n	800efbc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800efb0:	f3ef 8311 	mrs	r3, BASEPRI
 800efb4:	60bb      	str	r3, [r7, #8]
  return(result);
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d007      	beq.n	800efcc <osDelay+0x3c>
 800efbc:	4b0a      	ldr	r3, [pc, #40]	; (800efe8 <osDelay+0x58>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	2b02      	cmp	r3, #2
 800efc2:	d103      	bne.n	800efcc <osDelay+0x3c>
    stat = osErrorISR;
 800efc4:	f06f 0305 	mvn.w	r3, #5
 800efc8:	617b      	str	r3, [r7, #20]
 800efca:	e007      	b.n	800efdc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800efcc:	2300      	movs	r3, #0
 800efce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d002      	beq.n	800efdc <osDelay+0x4c>
      vTaskDelay(ticks);
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f001 fc60 	bl	801089c <vTaskDelay>
    }
  }

  return (stat);
 800efdc:	697b      	ldr	r3, [r7, #20]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3718      	adds	r7, #24
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	200012a8 	.word	0x200012a8

0800efec <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800efec:	b580      	push	{r7, lr}
 800efee:	b08c      	sub	sp, #48	; 0x30
 800eff0:	af02      	add	r7, sp, #8
 800eff2:	60f8      	str	r0, [r7, #12]
 800eff4:	60b9      	str	r1, [r7, #8]
 800eff6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800eff8:	2300      	movs	r3, #0
 800effa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800effc:	f3ef 8305 	mrs	r3, IPSR
 800f000:	61bb      	str	r3, [r7, #24]
  return(result);
 800f002:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f004:	2b00      	cmp	r3, #0
 800f006:	f040 8086 	bne.w	800f116 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f00a:	f3ef 8310 	mrs	r3, PRIMASK
 800f00e:	617b      	str	r3, [r7, #20]
  return(result);
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d105      	bne.n	800f022 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f016:	f3ef 8311 	mrs	r3, BASEPRI
 800f01a:	613b      	str	r3, [r7, #16]
  return(result);
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d003      	beq.n	800f02a <osSemaphoreNew+0x3e>
 800f022:	4b3f      	ldr	r3, [pc, #252]	; (800f120 <osSemaphoreNew+0x134>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	2b02      	cmp	r3, #2
 800f028:	d075      	beq.n	800f116 <osSemaphoreNew+0x12a>
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d072      	beq.n	800f116 <osSemaphoreNew+0x12a>
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	429a      	cmp	r2, r3
 800f036:	d86e      	bhi.n	800f116 <osSemaphoreNew+0x12a>
    mem = -1;
 800f038:	f04f 33ff 	mov.w	r3, #4294967295
 800f03c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d015      	beq.n	800f070 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d006      	beq.n	800f05a <osSemaphoreNew+0x6e>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	2b4f      	cmp	r3, #79	; 0x4f
 800f052:	d902      	bls.n	800f05a <osSemaphoreNew+0x6e>
        mem = 1;
 800f054:	2301      	movs	r3, #1
 800f056:	623b      	str	r3, [r7, #32]
 800f058:	e00c      	b.n	800f074 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d108      	bne.n	800f074 <osSemaphoreNew+0x88>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d104      	bne.n	800f074 <osSemaphoreNew+0x88>
          mem = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	623b      	str	r3, [r7, #32]
 800f06e:	e001      	b.n	800f074 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800f070:	2300      	movs	r3, #0
 800f072:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f074:	6a3b      	ldr	r3, [r7, #32]
 800f076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f07a:	d04c      	beq.n	800f116 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d128      	bne.n	800f0d4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800f082:	6a3b      	ldr	r3, [r7, #32]
 800f084:	2b01      	cmp	r3, #1
 800f086:	d10a      	bne.n	800f09e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	689b      	ldr	r3, [r3, #8]
 800f08c:	2203      	movs	r2, #3
 800f08e:	9200      	str	r2, [sp, #0]
 800f090:	2200      	movs	r2, #0
 800f092:	2100      	movs	r1, #0
 800f094:	2001      	movs	r0, #1
 800f096:	f000 fa55 	bl	800f544 <xQueueGenericCreateStatic>
 800f09a:	6278      	str	r0, [r7, #36]	; 0x24
 800f09c:	e005      	b.n	800f0aa <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f09e:	2203      	movs	r2, #3
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	2001      	movs	r0, #1
 800f0a4:	f000 fad0 	bl	800f648 <xQueueGenericCreate>
 800f0a8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d022      	beq.n	800f0f6 <osSemaphoreNew+0x10a>
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d01f      	beq.n	800f0f6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	2100      	movs	r1, #0
 800f0bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0be:	f000 fb9b 	bl	800f7f8 <xQueueGenericSend>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d016      	beq.n	800f0f6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800f0c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0ca:	f001 f851 	bl	8010170 <vQueueDelete>
            hSemaphore = NULL;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800f0d2:	e010      	b.n	800f0f6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800f0d4:	6a3b      	ldr	r3, [r7, #32]
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d108      	bne.n	800f0ec <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	689b      	ldr	r3, [r3, #8]
 800f0de:	461a      	mov	r2, r3
 800f0e0:	68b9      	ldr	r1, [r7, #8]
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f000 fb15 	bl	800f712 <xQueueCreateCountingSemaphoreStatic>
 800f0e8:	6278      	str	r0, [r7, #36]	; 0x24
 800f0ea:	e004      	b.n	800f0f6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f0ec:	68b9      	ldr	r1, [r7, #8]
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f000 fb4a 	bl	800f788 <xQueueCreateCountingSemaphore>
 800f0f4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00c      	beq.n	800f116 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d003      	beq.n	800f10a <osSemaphoreNew+0x11e>
          name = attr->name;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	61fb      	str	r3, [r7, #28]
 800f108:	e001      	b.n	800f10e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800f10a:	2300      	movs	r3, #0
 800f10c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f10e:	69f9      	ldr	r1, [r7, #28]
 800f110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f112:	f001 f97b 	bl	801040c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3728      	adds	r7, #40	; 0x28
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}
 800f120:	200012a8 	.word	0x200012a8

0800f124 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f124:	b580      	push	{r7, lr}
 800f126:	b088      	sub	sp, #32
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f132:	2300      	movs	r3, #0
 800f134:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d103      	bne.n	800f144 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f13c:	f06f 0303 	mvn.w	r3, #3
 800f140:	61fb      	str	r3, [r7, #28]
 800f142:	e04b      	b.n	800f1dc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f144:	f3ef 8305 	mrs	r3, IPSR
 800f148:	617b      	str	r3, [r7, #20]
  return(result);
 800f14a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d10f      	bne.n	800f170 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f150:	f3ef 8310 	mrs	r3, PRIMASK
 800f154:	613b      	str	r3, [r7, #16]
  return(result);
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d105      	bne.n	800f168 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f15c:	f3ef 8311 	mrs	r3, BASEPRI
 800f160:	60fb      	str	r3, [r7, #12]
  return(result);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d026      	beq.n	800f1b6 <osSemaphoreAcquire+0x92>
 800f168:	4b1f      	ldr	r3, [pc, #124]	; (800f1e8 <osSemaphoreAcquire+0xc4>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2b02      	cmp	r3, #2
 800f16e:	d122      	bne.n	800f1b6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f176:	f06f 0303 	mvn.w	r3, #3
 800f17a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f17c:	e02d      	b.n	800f1da <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f17e:	2300      	movs	r3, #0
 800f180:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f182:	f107 0308 	add.w	r3, r7, #8
 800f186:	461a      	mov	r2, r3
 800f188:	2100      	movs	r1, #0
 800f18a:	69b8      	ldr	r0, [r7, #24]
 800f18c:	f000 ff6a 	bl	8010064 <xQueueReceiveFromISR>
 800f190:	4603      	mov	r3, r0
 800f192:	2b01      	cmp	r3, #1
 800f194:	d003      	beq.n	800f19e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f196:	f06f 0302 	mvn.w	r3, #2
 800f19a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f19c:	e01d      	b.n	800f1da <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d01a      	beq.n	800f1da <osSemaphoreAcquire+0xb6>
 800f1a4:	4b11      	ldr	r3, [pc, #68]	; (800f1ec <osSemaphoreAcquire+0xc8>)
 800f1a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1aa:	601a      	str	r2, [r3, #0]
 800f1ac:	f3bf 8f4f 	dsb	sy
 800f1b0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f1b4:	e011      	b.n	800f1da <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f1b6:	6839      	ldr	r1, [r7, #0]
 800f1b8:	69b8      	ldr	r0, [r7, #24]
 800f1ba:	f000 fe3f 	bl	800fe3c <xQueueSemaphoreTake>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d00b      	beq.n	800f1dc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d003      	beq.n	800f1d2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f1ca:	f06f 0301 	mvn.w	r3, #1
 800f1ce:	61fb      	str	r3, [r7, #28]
 800f1d0:	e004      	b.n	800f1dc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f1d2:	f06f 0302 	mvn.w	r3, #2
 800f1d6:	61fb      	str	r3, [r7, #28]
 800f1d8:	e000      	b.n	800f1dc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f1da:	bf00      	nop
      }
    }
  }

  return (stat);
 800f1dc:	69fb      	ldr	r3, [r7, #28]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3720      	adds	r7, #32
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	200012a8 	.word	0x200012a8
 800f1ec:	e000ed04 	.word	0xe000ed04

0800f1f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b088      	sub	sp, #32
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d103      	bne.n	800f20e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f206:	f06f 0303 	mvn.w	r3, #3
 800f20a:	61fb      	str	r3, [r7, #28]
 800f20c:	e03e      	b.n	800f28c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f20e:	f3ef 8305 	mrs	r3, IPSR
 800f212:	617b      	str	r3, [r7, #20]
  return(result);
 800f214:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f216:	2b00      	cmp	r3, #0
 800f218:	d10f      	bne.n	800f23a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f21a:	f3ef 8310 	mrs	r3, PRIMASK
 800f21e:	613b      	str	r3, [r7, #16]
  return(result);
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d105      	bne.n	800f232 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f226:	f3ef 8311 	mrs	r3, BASEPRI
 800f22a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d01e      	beq.n	800f270 <osSemaphoreRelease+0x80>
 800f232:	4b19      	ldr	r3, [pc, #100]	; (800f298 <osSemaphoreRelease+0xa8>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b02      	cmp	r3, #2
 800f238:	d11a      	bne.n	800f270 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f23a:	2300      	movs	r3, #0
 800f23c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f23e:	f107 0308 	add.w	r3, r7, #8
 800f242:	4619      	mov	r1, r3
 800f244:	69b8      	ldr	r0, [r7, #24]
 800f246:	f000 fc7d 	bl	800fb44 <xQueueGiveFromISR>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d003      	beq.n	800f258 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f250:	f06f 0302 	mvn.w	r3, #2
 800f254:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f256:	e018      	b.n	800f28a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d015      	beq.n	800f28a <osSemaphoreRelease+0x9a>
 800f25e:	4b0f      	ldr	r3, [pc, #60]	; (800f29c <osSemaphoreRelease+0xac>)
 800f260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f264:	601a      	str	r2, [r3, #0]
 800f266:	f3bf 8f4f 	dsb	sy
 800f26a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f26e:	e00c      	b.n	800f28a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f270:	2300      	movs	r3, #0
 800f272:	2200      	movs	r2, #0
 800f274:	2100      	movs	r1, #0
 800f276:	69b8      	ldr	r0, [r7, #24]
 800f278:	f000 fabe 	bl	800f7f8 <xQueueGenericSend>
 800f27c:	4603      	mov	r3, r0
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d004      	beq.n	800f28c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f282:	f06f 0302 	mvn.w	r3, #2
 800f286:	61fb      	str	r3, [r7, #28]
 800f288:	e000      	b.n	800f28c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f28a:	bf00      	nop
    }
  }

  return (stat);
 800f28c:	69fb      	ldr	r3, [r7, #28]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3720      	adds	r7, #32
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	200012a8 	.word	0x200012a8
 800f29c:	e000ed04 	.word	0xe000ed04

0800f2a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	60b9      	str	r1, [r7, #8]
 800f2aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	4a07      	ldr	r2, [pc, #28]	; (800f2cc <vApplicationGetIdleTaskMemory+0x2c>)
 800f2b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	4a06      	ldr	r2, [pc, #24]	; (800f2d0 <vApplicationGetIdleTaskMemory+0x30>)
 800f2b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2280      	movs	r2, #128	; 0x80
 800f2bc:	601a      	str	r2, [r3, #0]
}
 800f2be:	bf00      	nop
 800f2c0:	3714      	adds	r7, #20
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr
 800f2ca:	bf00      	nop
 800f2cc:	200012ac 	.word	0x200012ac
 800f2d0:	20001368 	.word	0x20001368

0800f2d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f2d4:	b480      	push	{r7}
 800f2d6:	b085      	sub	sp, #20
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	4a07      	ldr	r2, [pc, #28]	; (800f300 <vApplicationGetTimerTaskMemory+0x2c>)
 800f2e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	4a06      	ldr	r2, [pc, #24]	; (800f304 <vApplicationGetTimerTaskMemory+0x30>)
 800f2ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f2f2:	601a      	str	r2, [r3, #0]
}
 800f2f4:	bf00      	nop
 800f2f6:	3714      	adds	r7, #20
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr
 800f300:	20001568 	.word	0x20001568
 800f304:	20001624 	.word	0x20001624

0800f308 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f103 0208 	add.w	r2, r3, #8
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f04f 32ff 	mov.w	r2, #4294967295
 800f320:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f103 0208 	add.w	r2, r3, #8
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f103 0208 	add.w	r2, r3, #8
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2200      	movs	r2, #0
 800f354:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f356:	bf00      	nop
 800f358:	370c      	adds	r7, #12
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr

0800f362 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f362:	b480      	push	{r7}
 800f364:	b085      	sub	sp, #20
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
 800f36a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	68fa      	ldr	r2, [r7, #12]
 800f376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	689a      	ldr	r2, [r3, #8]
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	689b      	ldr	r3, [r3, #8]
 800f384:	683a      	ldr	r2, [r7, #0]
 800f386:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	683a      	ldr	r2, [r7, #0]
 800f38c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	601a      	str	r2, [r3, #0]
}
 800f39e:	bf00      	nop
 800f3a0:	3714      	adds	r7, #20
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr

0800f3aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3aa:	b480      	push	{r7}
 800f3ac:	b085      	sub	sp, #20
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3c0:	d103      	bne.n	800f3ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	691b      	ldr	r3, [r3, #16]
 800f3c6:	60fb      	str	r3, [r7, #12]
 800f3c8:	e00c      	b.n	800f3e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	3308      	adds	r3, #8
 800f3ce:	60fb      	str	r3, [r7, #12]
 800f3d0:	e002      	b.n	800f3d8 <vListInsert+0x2e>
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	60fb      	str	r3, [r7, #12]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	68ba      	ldr	r2, [r7, #8]
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d2f6      	bcs.n	800f3d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	685a      	ldr	r2, [r3, #4]
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	683a      	ldr	r2, [r7, #0]
 800f3f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	68fa      	ldr	r2, [r7, #12]
 800f3f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	683a      	ldr	r2, [r7, #0]
 800f3fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	1c5a      	adds	r2, r3, #1
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	601a      	str	r2, [r3, #0]
}
 800f410:	bf00      	nop
 800f412:	3714      	adds	r7, #20
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f41c:	b480      	push	{r7}
 800f41e:	b085      	sub	sp, #20
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	6892      	ldr	r2, [r2, #8]
 800f432:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	689b      	ldr	r3, [r3, #8]
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	6852      	ldr	r2, [r2, #4]
 800f43c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	429a      	cmp	r2, r3
 800f446:	d103      	bne.n	800f450 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	689a      	ldr	r2, [r3, #8]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	1e5a      	subs	r2, r3, #1
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
}
 800f464:	4618      	mov	r0, r3
 800f466:	3714      	adds	r7, #20
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b084      	sub	sp, #16
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d10c      	bne.n	800f49e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f484:	f04f 0310 	mov.w	r3, #16
 800f488:	b672      	cpsid	i
 800f48a:	f383 8811 	msr	BASEPRI, r3
 800f48e:	f3bf 8f6f 	isb	sy
 800f492:	f3bf 8f4f 	dsb	sy
 800f496:	b662      	cpsie	i
 800f498:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f49a:	bf00      	nop
 800f49c:	e7fe      	b.n	800f49c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f49e:	f002 fcf5 	bl	8011e8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4aa:	68f9      	ldr	r1, [r7, #12]
 800f4ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f4ae:	fb01 f303 	mul.w	r3, r1, r3
 800f4b2:	441a      	add	r2, r3
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4ce:	3b01      	subs	r3, #1
 800f4d0:	68f9      	ldr	r1, [r7, #12]
 800f4d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f4d4:	fb01 f303 	mul.w	r3, r1, r3
 800f4d8:	441a      	add	r2, r3
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	22ff      	movs	r2, #255	; 0xff
 800f4e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	22ff      	movs	r2, #255	; 0xff
 800f4ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d114      	bne.n	800f51e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d01a      	beq.n	800f532 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	3310      	adds	r3, #16
 800f500:	4618      	mov	r0, r3
 800f502:	f001 fca9 	bl	8010e58 <xTaskRemoveFromEventList>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d012      	beq.n	800f532 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f50c:	4b0c      	ldr	r3, [pc, #48]	; (800f540 <xQueueGenericReset+0xd0>)
 800f50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f512:	601a      	str	r2, [r3, #0]
 800f514:	f3bf 8f4f 	dsb	sy
 800f518:	f3bf 8f6f 	isb	sy
 800f51c:	e009      	b.n	800f532 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	3310      	adds	r3, #16
 800f522:	4618      	mov	r0, r3
 800f524:	f7ff fef0 	bl	800f308 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	3324      	adds	r3, #36	; 0x24
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7ff feeb 	bl	800f308 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f532:	f002 fcdf 	bl	8011ef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f536:	2301      	movs	r3, #1
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3710      	adds	r7, #16
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	e000ed04 	.word	0xe000ed04

0800f544 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08e      	sub	sp, #56	; 0x38
 800f548:	af02      	add	r7, sp, #8
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
 800f550:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d10c      	bne.n	800f572 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f558:	f04f 0310 	mov.w	r3, #16
 800f55c:	b672      	cpsid	i
 800f55e:	f383 8811 	msr	BASEPRI, r3
 800f562:	f3bf 8f6f 	isb	sy
 800f566:	f3bf 8f4f 	dsb	sy
 800f56a:	b662      	cpsie	i
 800f56c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f56e:	bf00      	nop
 800f570:	e7fe      	b.n	800f570 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d10c      	bne.n	800f592 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f578:	f04f 0310 	mov.w	r3, #16
 800f57c:	b672      	cpsid	i
 800f57e:	f383 8811 	msr	BASEPRI, r3
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	f3bf 8f4f 	dsb	sy
 800f58a:	b662      	cpsie	i
 800f58c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f58e:	bf00      	nop
 800f590:	e7fe      	b.n	800f590 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d002      	beq.n	800f59e <xQueueGenericCreateStatic+0x5a>
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d001      	beq.n	800f5a2 <xQueueGenericCreateStatic+0x5e>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e000      	b.n	800f5a4 <xQueueGenericCreateStatic+0x60>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d10c      	bne.n	800f5c2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f5a8:	f04f 0310 	mov.w	r3, #16
 800f5ac:	b672      	cpsid	i
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	b662      	cpsie	i
 800f5bc:	623b      	str	r3, [r7, #32]
}
 800f5be:	bf00      	nop
 800f5c0:	e7fe      	b.n	800f5c0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d102      	bne.n	800f5ce <xQueueGenericCreateStatic+0x8a>
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d101      	bne.n	800f5d2 <xQueueGenericCreateStatic+0x8e>
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	e000      	b.n	800f5d4 <xQueueGenericCreateStatic+0x90>
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d10c      	bne.n	800f5f2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f5d8:	f04f 0310 	mov.w	r3, #16
 800f5dc:	b672      	cpsid	i
 800f5de:	f383 8811 	msr	BASEPRI, r3
 800f5e2:	f3bf 8f6f 	isb	sy
 800f5e6:	f3bf 8f4f 	dsb	sy
 800f5ea:	b662      	cpsie	i
 800f5ec:	61fb      	str	r3, [r7, #28]
}
 800f5ee:	bf00      	nop
 800f5f0:	e7fe      	b.n	800f5f0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f5f2:	2350      	movs	r3, #80	; 0x50
 800f5f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2b50      	cmp	r3, #80	; 0x50
 800f5fa:	d00c      	beq.n	800f616 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f5fc:	f04f 0310 	mov.w	r3, #16
 800f600:	b672      	cpsid	i
 800f602:	f383 8811 	msr	BASEPRI, r3
 800f606:	f3bf 8f6f 	isb	sy
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	b662      	cpsie	i
 800f610:	61bb      	str	r3, [r7, #24]
}
 800f612:	bf00      	nop
 800f614:	e7fe      	b.n	800f614 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f616:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00d      	beq.n	800f63e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f624:	2201      	movs	r2, #1
 800f626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f62a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	4613      	mov	r3, r2
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	68b9      	ldr	r1, [r7, #8]
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f000 f847 	bl	800f6cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f640:	4618      	mov	r0, r3
 800f642:	3730      	adds	r7, #48	; 0x30
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}

0800f648 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b08a      	sub	sp, #40	; 0x28
 800f64c:	af02      	add	r7, sp, #8
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	4613      	mov	r3, r2
 800f654:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d10c      	bne.n	800f676 <xQueueGenericCreate+0x2e>
	__asm volatile
 800f65c:	f04f 0310 	mov.w	r3, #16
 800f660:	b672      	cpsid	i
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	b662      	cpsie	i
 800f670:	613b      	str	r3, [r7, #16]
}
 800f672:	bf00      	nop
 800f674:	e7fe      	b.n	800f674 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d102      	bne.n	800f682 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f67c:	2300      	movs	r3, #0
 800f67e:	61fb      	str	r3, [r7, #28]
 800f680:	e004      	b.n	800f68c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	fb02 f303 	mul.w	r3, r2, r3
 800f68a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	3350      	adds	r3, #80	; 0x50
 800f690:	4618      	mov	r0, r3
 800f692:	f002 fd27 	bl	80120e4 <pvPortMalloc>
 800f696:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d011      	beq.n	800f6c2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f69e:	69bb      	ldr	r3, [r7, #24]
 800f6a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	3350      	adds	r3, #80	; 0x50
 800f6a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f6b0:	79fa      	ldrb	r2, [r7, #7]
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	9300      	str	r3, [sp, #0]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	697a      	ldr	r2, [r7, #20]
 800f6ba:	68b9      	ldr	r1, [r7, #8]
 800f6bc:	68f8      	ldr	r0, [r7, #12]
 800f6be:	f000 f805 	bl	800f6cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f6c2:	69bb      	ldr	r3, [r7, #24]
	}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3720      	adds	r7, #32
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]
 800f6d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d103      	bne.n	800f6e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	69ba      	ldr	r2, [r7, #24]
 800f6e4:	601a      	str	r2, [r3, #0]
 800f6e6:	e002      	b.n	800f6ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f6ee:	69bb      	ldr	r3, [r7, #24]
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f6fa:	2101      	movs	r1, #1
 800f6fc:	69b8      	ldr	r0, [r7, #24]
 800f6fe:	f7ff feb7 	bl	800f470 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	78fa      	ldrb	r2, [r7, #3]
 800f706:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f70a:	bf00      	nop
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}

0800f712 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f712:	b580      	push	{r7, lr}
 800f714:	b08a      	sub	sp, #40	; 0x28
 800f716:	af02      	add	r7, sp, #8
 800f718:	60f8      	str	r0, [r7, #12]
 800f71a:	60b9      	str	r1, [r7, #8]
 800f71c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d10c      	bne.n	800f73e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800f724:	f04f 0310 	mov.w	r3, #16
 800f728:	b672      	cpsid	i
 800f72a:	f383 8811 	msr	BASEPRI, r3
 800f72e:	f3bf 8f6f 	isb	sy
 800f732:	f3bf 8f4f 	dsb	sy
 800f736:	b662      	cpsie	i
 800f738:	61bb      	str	r3, [r7, #24]
}
 800f73a:	bf00      	nop
 800f73c:	e7fe      	b.n	800f73c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f73e:	68ba      	ldr	r2, [r7, #8]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	429a      	cmp	r2, r3
 800f744:	d90c      	bls.n	800f760 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800f746:	f04f 0310 	mov.w	r3, #16
 800f74a:	b672      	cpsid	i
 800f74c:	f383 8811 	msr	BASEPRI, r3
 800f750:	f3bf 8f6f 	isb	sy
 800f754:	f3bf 8f4f 	dsb	sy
 800f758:	b662      	cpsie	i
 800f75a:	617b      	str	r3, [r7, #20]
}
 800f75c:	bf00      	nop
 800f75e:	e7fe      	b.n	800f75e <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f760:	2302      	movs	r3, #2
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	2100      	movs	r1, #0
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f7ff feea 	bl	800f544 <xQueueGenericCreateStatic>
 800f770:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d002      	beq.n	800f77e <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	68ba      	ldr	r2, [r7, #8]
 800f77c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f77e:	69fb      	ldr	r3, [r7, #28]
	}
 800f780:	4618      	mov	r0, r3
 800f782:	3720      	adds	r7, #32
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b086      	sub	sp, #24
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d10c      	bne.n	800f7b2 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800f798:	f04f 0310 	mov.w	r3, #16
 800f79c:	b672      	cpsid	i
 800f79e:	f383 8811 	msr	BASEPRI, r3
 800f7a2:	f3bf 8f6f 	isb	sy
 800f7a6:	f3bf 8f4f 	dsb	sy
 800f7aa:	b662      	cpsie	i
 800f7ac:	613b      	str	r3, [r7, #16]
}
 800f7ae:	bf00      	nop
 800f7b0:	e7fe      	b.n	800f7b0 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f7b2:	683a      	ldr	r2, [r7, #0]
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d90c      	bls.n	800f7d4 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800f7ba:	f04f 0310 	mov.w	r3, #16
 800f7be:	b672      	cpsid	i
 800f7c0:	f383 8811 	msr	BASEPRI, r3
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	b662      	cpsie	i
 800f7ce:	60fb      	str	r3, [r7, #12]
}
 800f7d0:	bf00      	nop
 800f7d2:	e7fe      	b.n	800f7d2 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f7d4:	2202      	movs	r2, #2
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7ff ff35 	bl	800f648 <xQueueGenericCreate>
 800f7de:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d002      	beq.n	800f7ec <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	683a      	ldr	r2, [r7, #0]
 800f7ea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f7ec:	697b      	ldr	r3, [r7, #20]
	}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3718      	adds	r7, #24
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
	...

0800f7f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b08e      	sub	sp, #56	; 0x38
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	607a      	str	r2, [r7, #4]
 800f804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f806:	2300      	movs	r3, #0
 800f808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f810:	2b00      	cmp	r3, #0
 800f812:	d10c      	bne.n	800f82e <xQueueGenericSend+0x36>
	__asm volatile
 800f814:	f04f 0310 	mov.w	r3, #16
 800f818:	b672      	cpsid	i
 800f81a:	f383 8811 	msr	BASEPRI, r3
 800f81e:	f3bf 8f6f 	isb	sy
 800f822:	f3bf 8f4f 	dsb	sy
 800f826:	b662      	cpsie	i
 800f828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f82a:	bf00      	nop
 800f82c:	e7fe      	b.n	800f82c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d103      	bne.n	800f83c <xQueueGenericSend+0x44>
 800f834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d101      	bne.n	800f840 <xQueueGenericSend+0x48>
 800f83c:	2301      	movs	r3, #1
 800f83e:	e000      	b.n	800f842 <xQueueGenericSend+0x4a>
 800f840:	2300      	movs	r3, #0
 800f842:	2b00      	cmp	r3, #0
 800f844:	d10c      	bne.n	800f860 <xQueueGenericSend+0x68>
	__asm volatile
 800f846:	f04f 0310 	mov.w	r3, #16
 800f84a:	b672      	cpsid	i
 800f84c:	f383 8811 	msr	BASEPRI, r3
 800f850:	f3bf 8f6f 	isb	sy
 800f854:	f3bf 8f4f 	dsb	sy
 800f858:	b662      	cpsie	i
 800f85a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f85c:	bf00      	nop
 800f85e:	e7fe      	b.n	800f85e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	2b02      	cmp	r3, #2
 800f864:	d103      	bne.n	800f86e <xQueueGenericSend+0x76>
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d101      	bne.n	800f872 <xQueueGenericSend+0x7a>
 800f86e:	2301      	movs	r3, #1
 800f870:	e000      	b.n	800f874 <xQueueGenericSend+0x7c>
 800f872:	2300      	movs	r3, #0
 800f874:	2b00      	cmp	r3, #0
 800f876:	d10c      	bne.n	800f892 <xQueueGenericSend+0x9a>
	__asm volatile
 800f878:	f04f 0310 	mov.w	r3, #16
 800f87c:	b672      	cpsid	i
 800f87e:	f383 8811 	msr	BASEPRI, r3
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	f3bf 8f4f 	dsb	sy
 800f88a:	b662      	cpsie	i
 800f88c:	623b      	str	r3, [r7, #32]
}
 800f88e:	bf00      	nop
 800f890:	e7fe      	b.n	800f890 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f892:	f001 fcab 	bl	80111ec <xTaskGetSchedulerState>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d102      	bne.n	800f8a2 <xQueueGenericSend+0xaa>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d101      	bne.n	800f8a6 <xQueueGenericSend+0xae>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	e000      	b.n	800f8a8 <xQueueGenericSend+0xb0>
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d10c      	bne.n	800f8c6 <xQueueGenericSend+0xce>
	__asm volatile
 800f8ac:	f04f 0310 	mov.w	r3, #16
 800f8b0:	b672      	cpsid	i
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	b662      	cpsie	i
 800f8c0:	61fb      	str	r3, [r7, #28]
}
 800f8c2:	bf00      	nop
 800f8c4:	e7fe      	b.n	800f8c4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8c6:	f002 fae1 	bl	8011e8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d302      	bcc.n	800f8dc <xQueueGenericSend+0xe4>
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	2b02      	cmp	r3, #2
 800f8da:	d129      	bne.n	800f930 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8dc:	683a      	ldr	r2, [r7, #0]
 800f8de:	68b9      	ldr	r1, [r7, #8]
 800f8e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8e2:	f000 fc82 	bl	80101ea <prvCopyDataToQueue>
 800f8e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d010      	beq.n	800f912 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f2:	3324      	adds	r3, #36	; 0x24
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f001 faaf 	bl	8010e58 <xTaskRemoveFromEventList>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d013      	beq.n	800f928 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f900:	4b3f      	ldr	r3, [pc, #252]	; (800fa00 <xQueueGenericSend+0x208>)
 800f902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f906:	601a      	str	r2, [r3, #0]
 800f908:	f3bf 8f4f 	dsb	sy
 800f90c:	f3bf 8f6f 	isb	sy
 800f910:	e00a      	b.n	800f928 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f914:	2b00      	cmp	r3, #0
 800f916:	d007      	beq.n	800f928 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f918:	4b39      	ldr	r3, [pc, #228]	; (800fa00 <xQueueGenericSend+0x208>)
 800f91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f91e:	601a      	str	r2, [r3, #0]
 800f920:	f3bf 8f4f 	dsb	sy
 800f924:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f928:	f002 fae4 	bl	8011ef4 <vPortExitCritical>
				return pdPASS;
 800f92c:	2301      	movs	r3, #1
 800f92e:	e063      	b.n	800f9f8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d103      	bne.n	800f93e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f936:	f002 fadd 	bl	8011ef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f93a:	2300      	movs	r3, #0
 800f93c:	e05c      	b.n	800f9f8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f940:	2b00      	cmp	r3, #0
 800f942:	d106      	bne.n	800f952 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f944:	f107 0314 	add.w	r3, r7, #20
 800f948:	4618      	mov	r0, r3
 800f94a:	f001 faeb 	bl	8010f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f94e:	2301      	movs	r3, #1
 800f950:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f952:	f002 facf 	bl	8011ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f956:	f001 f84b 	bl	80109f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f95a:	f002 fa97 	bl	8011e8c <vPortEnterCritical>
 800f95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f964:	b25b      	sxtb	r3, r3
 800f966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f96a:	d103      	bne.n	800f974 <xQueueGenericSend+0x17c>
 800f96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96e:	2200      	movs	r2, #0
 800f970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f97a:	b25b      	sxtb	r3, r3
 800f97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f980:	d103      	bne.n	800f98a <xQueueGenericSend+0x192>
 800f982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f984:	2200      	movs	r2, #0
 800f986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f98a:	f002 fab3 	bl	8011ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f98e:	1d3a      	adds	r2, r7, #4
 800f990:	f107 0314 	add.w	r3, r7, #20
 800f994:	4611      	mov	r1, r2
 800f996:	4618      	mov	r0, r3
 800f998:	f001 fada 	bl	8010f50 <xTaskCheckForTimeOut>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d124      	bne.n	800f9ec <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f9a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9a4:	f000 fd19 	bl	80103da <prvIsQueueFull>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d018      	beq.n	800f9e0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b0:	3310      	adds	r3, #16
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f001 f9fa 	bl	8010db0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f9bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9be:	f000 fca4 	bl	801030a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f9c2:	f001 f823 	bl	8010a0c <xTaskResumeAll>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	f47f af7c 	bne.w	800f8c6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800f9ce:	4b0c      	ldr	r3, [pc, #48]	; (800fa00 <xQueueGenericSend+0x208>)
 800f9d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9d4:	601a      	str	r2, [r3, #0]
 800f9d6:	f3bf 8f4f 	dsb	sy
 800f9da:	f3bf 8f6f 	isb	sy
 800f9de:	e772      	b.n	800f8c6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f9e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9e2:	f000 fc92 	bl	801030a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9e6:	f001 f811 	bl	8010a0c <xTaskResumeAll>
 800f9ea:	e76c      	b.n	800f8c6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f9ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9ee:	f000 fc8c 	bl	801030a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9f2:	f001 f80b 	bl	8010a0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f9f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3738      	adds	r7, #56	; 0x38
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	e000ed04 	.word	0xe000ed04

0800fa04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08e      	sub	sp, #56	; 0x38
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	607a      	str	r2, [r7, #4]
 800fa10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d10c      	bne.n	800fa36 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800fa1c:	f04f 0310 	mov.w	r3, #16
 800fa20:	b672      	cpsid	i
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	b662      	cpsie	i
 800fa30:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fa32:	bf00      	nop
 800fa34:	e7fe      	b.n	800fa34 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d103      	bne.n	800fa44 <xQueueGenericSendFromISR+0x40>
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d101      	bne.n	800fa48 <xQueueGenericSendFromISR+0x44>
 800fa44:	2301      	movs	r3, #1
 800fa46:	e000      	b.n	800fa4a <xQueueGenericSendFromISR+0x46>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10c      	bne.n	800fa68 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800fa4e:	f04f 0310 	mov.w	r3, #16
 800fa52:	b672      	cpsid	i
 800fa54:	f383 8811 	msr	BASEPRI, r3
 800fa58:	f3bf 8f6f 	isb	sy
 800fa5c:	f3bf 8f4f 	dsb	sy
 800fa60:	b662      	cpsie	i
 800fa62:	623b      	str	r3, [r7, #32]
}
 800fa64:	bf00      	nop
 800fa66:	e7fe      	b.n	800fa66 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	2b02      	cmp	r3, #2
 800fa6c:	d103      	bne.n	800fa76 <xQueueGenericSendFromISR+0x72>
 800fa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d101      	bne.n	800fa7a <xQueueGenericSendFromISR+0x76>
 800fa76:	2301      	movs	r3, #1
 800fa78:	e000      	b.n	800fa7c <xQueueGenericSendFromISR+0x78>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d10c      	bne.n	800fa9a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800fa80:	f04f 0310 	mov.w	r3, #16
 800fa84:	b672      	cpsid	i
 800fa86:	f383 8811 	msr	BASEPRI, r3
 800fa8a:	f3bf 8f6f 	isb	sy
 800fa8e:	f3bf 8f4f 	dsb	sy
 800fa92:	b662      	cpsie	i
 800fa94:	61fb      	str	r3, [r7, #28]
}
 800fa96:	bf00      	nop
 800fa98:	e7fe      	b.n	800fa98 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa9a:	f002 fadf 	bl	801205c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fa9e:	f3ef 8211 	mrs	r2, BASEPRI
 800faa2:	f04f 0310 	mov.w	r3, #16
 800faa6:	b672      	cpsid	i
 800faa8:	f383 8811 	msr	BASEPRI, r3
 800faac:	f3bf 8f6f 	isb	sy
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	b662      	cpsie	i
 800fab6:	61ba      	str	r2, [r7, #24]
 800fab8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800faba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fabc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d302      	bcc.n	800fad0 <xQueueGenericSendFromISR+0xcc>
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	2b02      	cmp	r3, #2
 800face:	d12c      	bne.n	800fb2a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fada:	683a      	ldr	r2, [r7, #0]
 800fadc:	68b9      	ldr	r1, [r7, #8]
 800fade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fae0:	f000 fb83 	bl	80101ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fae4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faec:	d112      	bne.n	800fb14 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d016      	beq.n	800fb24 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800faf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf8:	3324      	adds	r3, #36	; 0x24
 800fafa:	4618      	mov	r0, r3
 800fafc:	f001 f9ac 	bl	8010e58 <xTaskRemoveFromEventList>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00e      	beq.n	800fb24 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d00b      	beq.n	800fb24 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	601a      	str	r2, [r3, #0]
 800fb12:	e007      	b.n	800fb24 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fb14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb18:	3301      	adds	r3, #1
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	b25a      	sxtb	r2, r3
 800fb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fb24:	2301      	movs	r3, #1
 800fb26:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800fb28:	e001      	b.n	800fb2e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	637b      	str	r3, [r7, #52]	; 0x34
 800fb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb30:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fb38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3738      	adds	r7, #56	; 0x38
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b08e      	sub	sp, #56	; 0x38
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10c      	bne.n	800fb72 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800fb58:	f04f 0310 	mov.w	r3, #16
 800fb5c:	b672      	cpsid	i
 800fb5e:	f383 8811 	msr	BASEPRI, r3
 800fb62:	f3bf 8f6f 	isb	sy
 800fb66:	f3bf 8f4f 	dsb	sy
 800fb6a:	b662      	cpsie	i
 800fb6c:	623b      	str	r3, [r7, #32]
}
 800fb6e:	bf00      	nop
 800fb70:	e7fe      	b.n	800fb70 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00c      	beq.n	800fb94 <xQueueGiveFromISR+0x50>
	__asm volatile
 800fb7a:	f04f 0310 	mov.w	r3, #16
 800fb7e:	b672      	cpsid	i
 800fb80:	f383 8811 	msr	BASEPRI, r3
 800fb84:	f3bf 8f6f 	isb	sy
 800fb88:	f3bf 8f4f 	dsb	sy
 800fb8c:	b662      	cpsie	i
 800fb8e:	61fb      	str	r3, [r7, #28]
}
 800fb90:	bf00      	nop
 800fb92:	e7fe      	b.n	800fb92 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d103      	bne.n	800fba4 <xQueueGiveFromISR+0x60>
 800fb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d101      	bne.n	800fba8 <xQueueGiveFromISR+0x64>
 800fba4:	2301      	movs	r3, #1
 800fba6:	e000      	b.n	800fbaa <xQueueGiveFromISR+0x66>
 800fba8:	2300      	movs	r3, #0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d10c      	bne.n	800fbc8 <xQueueGiveFromISR+0x84>
	__asm volatile
 800fbae:	f04f 0310 	mov.w	r3, #16
 800fbb2:	b672      	cpsid	i
 800fbb4:	f383 8811 	msr	BASEPRI, r3
 800fbb8:	f3bf 8f6f 	isb	sy
 800fbbc:	f3bf 8f4f 	dsb	sy
 800fbc0:	b662      	cpsie	i
 800fbc2:	61bb      	str	r3, [r7, #24]
}
 800fbc4:	bf00      	nop
 800fbc6:	e7fe      	b.n	800fbc6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fbc8:	f002 fa48 	bl	801205c <vPortValidateInterruptPriority>
	__asm volatile
 800fbcc:	f3ef 8211 	mrs	r2, BASEPRI
 800fbd0:	f04f 0310 	mov.w	r3, #16
 800fbd4:	b672      	cpsid	i
 800fbd6:	f383 8811 	msr	BASEPRI, r3
 800fbda:	f3bf 8f6f 	isb	sy
 800fbde:	f3bf 8f4f 	dsb	sy
 800fbe2:	b662      	cpsie	i
 800fbe4:	617a      	str	r2, [r7, #20]
 800fbe6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fbe8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fbea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbf0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d22b      	bcs.n	800fc54 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc08:	1c5a      	adds	r2, r3, #1
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fc0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc16:	d112      	bne.n	800fc3e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d016      	beq.n	800fc4e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc22:	3324      	adds	r3, #36	; 0x24
 800fc24:	4618      	mov	r0, r3
 800fc26:	f001 f917 	bl	8010e58 <xTaskRemoveFromEventList>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d00e      	beq.n	800fc4e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00b      	beq.n	800fc4e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	601a      	str	r2, [r3, #0]
 800fc3c:	e007      	b.n	800fc4e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc42:	3301      	adds	r3, #1
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	b25a      	sxtb	r2, r3
 800fc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fc4e:	2301      	movs	r3, #1
 800fc50:	637b      	str	r3, [r7, #52]	; 0x34
 800fc52:	e001      	b.n	800fc58 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc54:	2300      	movs	r3, #0
 800fc56:	637b      	str	r3, [r7, #52]	; 0x34
 800fc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f383 8811 	msr	BASEPRI, r3
}
 800fc62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3738      	adds	r7, #56	; 0x38
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}
	...

0800fc70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b08c      	sub	sp, #48	; 0x30
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	60b9      	str	r1, [r7, #8]
 800fc7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d10c      	bne.n	800fca4 <xQueueReceive+0x34>
	__asm volatile
 800fc8a:	f04f 0310 	mov.w	r3, #16
 800fc8e:	b672      	cpsid	i
 800fc90:	f383 8811 	msr	BASEPRI, r3
 800fc94:	f3bf 8f6f 	isb	sy
 800fc98:	f3bf 8f4f 	dsb	sy
 800fc9c:	b662      	cpsie	i
 800fc9e:	623b      	str	r3, [r7, #32]
}
 800fca0:	bf00      	nop
 800fca2:	e7fe      	b.n	800fca2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d103      	bne.n	800fcb2 <xQueueReceive+0x42>
 800fcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d101      	bne.n	800fcb6 <xQueueReceive+0x46>
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	e000      	b.n	800fcb8 <xQueueReceive+0x48>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d10c      	bne.n	800fcd6 <xQueueReceive+0x66>
	__asm volatile
 800fcbc:	f04f 0310 	mov.w	r3, #16
 800fcc0:	b672      	cpsid	i
 800fcc2:	f383 8811 	msr	BASEPRI, r3
 800fcc6:	f3bf 8f6f 	isb	sy
 800fcca:	f3bf 8f4f 	dsb	sy
 800fcce:	b662      	cpsie	i
 800fcd0:	61fb      	str	r3, [r7, #28]
}
 800fcd2:	bf00      	nop
 800fcd4:	e7fe      	b.n	800fcd4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fcd6:	f001 fa89 	bl	80111ec <xTaskGetSchedulerState>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d102      	bne.n	800fce6 <xQueueReceive+0x76>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d101      	bne.n	800fcea <xQueueReceive+0x7a>
 800fce6:	2301      	movs	r3, #1
 800fce8:	e000      	b.n	800fcec <xQueueReceive+0x7c>
 800fcea:	2300      	movs	r3, #0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d10c      	bne.n	800fd0a <xQueueReceive+0x9a>
	__asm volatile
 800fcf0:	f04f 0310 	mov.w	r3, #16
 800fcf4:	b672      	cpsid	i
 800fcf6:	f383 8811 	msr	BASEPRI, r3
 800fcfa:	f3bf 8f6f 	isb	sy
 800fcfe:	f3bf 8f4f 	dsb	sy
 800fd02:	b662      	cpsie	i
 800fd04:	61bb      	str	r3, [r7, #24]
}
 800fd06:	bf00      	nop
 800fd08:	e7fe      	b.n	800fd08 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd0a:	f002 f8bf 	bl	8011e8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d01f      	beq.n	800fd5a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd1a:	68b9      	ldr	r1, [r7, #8]
 800fd1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd1e:	f000 face 	bl	80102be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd24:	1e5a      	subs	r2, r3, #1
 800fd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2c:	691b      	ldr	r3, [r3, #16]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00f      	beq.n	800fd52 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd34:	3310      	adds	r3, #16
 800fd36:	4618      	mov	r0, r3
 800fd38:	f001 f88e 	bl	8010e58 <xTaskRemoveFromEventList>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d007      	beq.n	800fd52 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fd42:	4b3d      	ldr	r3, [pc, #244]	; (800fe38 <xQueueReceive+0x1c8>)
 800fd44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd48:	601a      	str	r2, [r3, #0]
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fd52:	f002 f8cf 	bl	8011ef4 <vPortExitCritical>
				return pdPASS;
 800fd56:	2301      	movs	r3, #1
 800fd58:	e069      	b.n	800fe2e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d103      	bne.n	800fd68 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd60:	f002 f8c8 	bl	8011ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd64:	2300      	movs	r3, #0
 800fd66:	e062      	b.n	800fe2e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d106      	bne.n	800fd7c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd6e:	f107 0310 	add.w	r3, r7, #16
 800fd72:	4618      	mov	r0, r3
 800fd74:	f001 f8d6 	bl	8010f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd7c:	f002 f8ba 	bl	8011ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd80:	f000 fe36 	bl	80109f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd84:	f002 f882 	bl	8011e8c <vPortEnterCritical>
 800fd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd8e:	b25b      	sxtb	r3, r3
 800fd90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd94:	d103      	bne.n	800fd9e <xQueueReceive+0x12e>
 800fd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fda4:	b25b      	sxtb	r3, r3
 800fda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdaa:	d103      	bne.n	800fdb4 <xQueueReceive+0x144>
 800fdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fdb4:	f002 f89e 	bl	8011ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fdb8:	1d3a      	adds	r2, r7, #4
 800fdba:	f107 0310 	add.w	r3, r7, #16
 800fdbe:	4611      	mov	r1, r2
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f001 f8c5 	bl	8010f50 <xTaskCheckForTimeOut>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d123      	bne.n	800fe14 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdce:	f000 faee 	bl	80103ae <prvIsQueueEmpty>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d017      	beq.n	800fe08 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdda:	3324      	adds	r3, #36	; 0x24
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	4611      	mov	r1, r2
 800fde0:	4618      	mov	r0, r3
 800fde2:	f000 ffe5 	bl	8010db0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fde6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fde8:	f000 fa8f 	bl	801030a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fdec:	f000 fe0e 	bl	8010a0c <xTaskResumeAll>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d189      	bne.n	800fd0a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800fdf6:	4b10      	ldr	r3, [pc, #64]	; (800fe38 <xQueueReceive+0x1c8>)
 800fdf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdfc:	601a      	str	r2, [r3, #0]
 800fdfe:	f3bf 8f4f 	dsb	sy
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	e780      	b.n	800fd0a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fe08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe0a:	f000 fa7e 	bl	801030a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe0e:	f000 fdfd 	bl	8010a0c <xTaskResumeAll>
 800fe12:	e77a      	b.n	800fd0a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fe14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe16:	f000 fa78 	bl	801030a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe1a:	f000 fdf7 	bl	8010a0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe20:	f000 fac5 	bl	80103ae <prvIsQueueEmpty>
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f43f af6f 	beq.w	800fd0a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3730      	adds	r7, #48	; 0x30
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	e000ed04 	.word	0xe000ed04

0800fe3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b08e      	sub	sp, #56	; 0x38
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fe46:	2300      	movs	r3, #0
 800fe48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fe52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d10c      	bne.n	800fe72 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800fe58:	f04f 0310 	mov.w	r3, #16
 800fe5c:	b672      	cpsid	i
 800fe5e:	f383 8811 	msr	BASEPRI, r3
 800fe62:	f3bf 8f6f 	isb	sy
 800fe66:	f3bf 8f4f 	dsb	sy
 800fe6a:	b662      	cpsie	i
 800fe6c:	623b      	str	r3, [r7, #32]
}
 800fe6e:	bf00      	nop
 800fe70:	e7fe      	b.n	800fe70 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d00c      	beq.n	800fe94 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800fe7a:	f04f 0310 	mov.w	r3, #16
 800fe7e:	b672      	cpsid	i
 800fe80:	f383 8811 	msr	BASEPRI, r3
 800fe84:	f3bf 8f6f 	isb	sy
 800fe88:	f3bf 8f4f 	dsb	sy
 800fe8c:	b662      	cpsie	i
 800fe8e:	61fb      	str	r3, [r7, #28]
}
 800fe90:	bf00      	nop
 800fe92:	e7fe      	b.n	800fe92 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe94:	f001 f9aa 	bl	80111ec <xTaskGetSchedulerState>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d102      	bne.n	800fea4 <xQueueSemaphoreTake+0x68>
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d101      	bne.n	800fea8 <xQueueSemaphoreTake+0x6c>
 800fea4:	2301      	movs	r3, #1
 800fea6:	e000      	b.n	800feaa <xQueueSemaphoreTake+0x6e>
 800fea8:	2300      	movs	r3, #0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d10c      	bne.n	800fec8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800feae:	f04f 0310 	mov.w	r3, #16
 800feb2:	b672      	cpsid	i
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	b662      	cpsie	i
 800fec2:	61bb      	str	r3, [r7, #24]
}
 800fec4:	bf00      	nop
 800fec6:	e7fe      	b.n	800fec6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fec8:	f001 ffe0 	bl	8011e8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fed0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d024      	beq.n	800ff22 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feda:	1e5a      	subs	r2, r3, #1
 800fedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fede:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d104      	bne.n	800fef2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fee8:	f001 fafe 	bl	80114e8 <pvTaskIncrementMutexHeldCount>
 800feec:	4602      	mov	r2, r0
 800feee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef4:	691b      	ldr	r3, [r3, #16]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00f      	beq.n	800ff1a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefc:	3310      	adds	r3, #16
 800fefe:	4618      	mov	r0, r3
 800ff00:	f000 ffaa 	bl	8010e58 <xTaskRemoveFromEventList>
 800ff04:	4603      	mov	r3, r0
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d007      	beq.n	800ff1a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff0a:	4b55      	ldr	r3, [pc, #340]	; (8010060 <xQueueSemaphoreTake+0x224>)
 800ff0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff10:	601a      	str	r2, [r3, #0]
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff1a:	f001 ffeb 	bl	8011ef4 <vPortExitCritical>
				return pdPASS;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	e099      	b.n	8010056 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d113      	bne.n	800ff50 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ff28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d00c      	beq.n	800ff48 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ff2e:	f04f 0310 	mov.w	r3, #16
 800ff32:	b672      	cpsid	i
 800ff34:	f383 8811 	msr	BASEPRI, r3
 800ff38:	f3bf 8f6f 	isb	sy
 800ff3c:	f3bf 8f4f 	dsb	sy
 800ff40:	b662      	cpsie	i
 800ff42:	617b      	str	r3, [r7, #20]
}
 800ff44:	bf00      	nop
 800ff46:	e7fe      	b.n	800ff46 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ff48:	f001 ffd4 	bl	8011ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	e082      	b.n	8010056 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d106      	bne.n	800ff64 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff56:	f107 030c 	add.w	r3, r7, #12
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f000 ffe2 	bl	8010f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff60:	2301      	movs	r3, #1
 800ff62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff64:	f001 ffc6 	bl	8011ef4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff68:	f000 fd42 	bl	80109f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff6c:	f001 ff8e 	bl	8011e8c <vPortEnterCritical>
 800ff70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff76:	b25b      	sxtb	r3, r3
 800ff78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff7c:	d103      	bne.n	800ff86 <xQueueSemaphoreTake+0x14a>
 800ff7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff80:	2200      	movs	r2, #0
 800ff82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff8c:	b25b      	sxtb	r3, r3
 800ff8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff92:	d103      	bne.n	800ff9c <xQueueSemaphoreTake+0x160>
 800ff94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff96:	2200      	movs	r2, #0
 800ff98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff9c:	f001 ffaa 	bl	8011ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffa0:	463a      	mov	r2, r7
 800ffa2:	f107 030c 	add.w	r3, r7, #12
 800ffa6:	4611      	mov	r1, r2
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f000 ffd1 	bl	8010f50 <xTaskCheckForTimeOut>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d132      	bne.n	801001a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffb6:	f000 f9fa 	bl	80103ae <prvIsQueueEmpty>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d026      	beq.n	801000e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d109      	bne.n	800ffdc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ffc8:	f001 ff60 	bl	8011e8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ffcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffce:	689b      	ldr	r3, [r3, #8]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f001 f929 	bl	8011228 <xTaskPriorityInherit>
 800ffd6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ffd8:	f001 ff8c 	bl	8011ef4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ffdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffde:	3324      	adds	r3, #36	; 0x24
 800ffe0:	683a      	ldr	r2, [r7, #0]
 800ffe2:	4611      	mov	r1, r2
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f000 fee3 	bl	8010db0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ffea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffec:	f000 f98d 	bl	801030a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fff0:	f000 fd0c 	bl	8010a0c <xTaskResumeAll>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	f47f af66 	bne.w	800fec8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800fffc:	4b18      	ldr	r3, [pc, #96]	; (8010060 <xQueueSemaphoreTake+0x224>)
 800fffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010002:	601a      	str	r2, [r3, #0]
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	e75c      	b.n	800fec8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801000e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010010:	f000 f97b 	bl	801030a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010014:	f000 fcfa 	bl	8010a0c <xTaskResumeAll>
 8010018:	e756      	b.n	800fec8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801001a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801001c:	f000 f975 	bl	801030a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010020:	f000 fcf4 	bl	8010a0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010026:	f000 f9c2 	bl	80103ae <prvIsQueueEmpty>
 801002a:	4603      	mov	r3, r0
 801002c:	2b00      	cmp	r3, #0
 801002e:	f43f af4b 	beq.w	800fec8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010034:	2b00      	cmp	r3, #0
 8010036:	d00d      	beq.n	8010054 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8010038:	f001 ff28 	bl	8011e8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801003c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801003e:	f000 f8bc 	bl	80101ba <prvGetDisinheritPriorityAfterTimeout>
 8010042:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801004a:	4618      	mov	r0, r3
 801004c:	f001 f9c6 	bl	80113dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010050:	f001 ff50 	bl	8011ef4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010054:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010056:	4618      	mov	r0, r3
 8010058:	3738      	adds	r7, #56	; 0x38
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	e000ed04 	.word	0xe000ed04

08010064 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b08e      	sub	sp, #56	; 0x38
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010076:	2b00      	cmp	r3, #0
 8010078:	d10c      	bne.n	8010094 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801007a:	f04f 0310 	mov.w	r3, #16
 801007e:	b672      	cpsid	i
 8010080:	f383 8811 	msr	BASEPRI, r3
 8010084:	f3bf 8f6f 	isb	sy
 8010088:	f3bf 8f4f 	dsb	sy
 801008c:	b662      	cpsie	i
 801008e:	623b      	str	r3, [r7, #32]
}
 8010090:	bf00      	nop
 8010092:	e7fe      	b.n	8010092 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d103      	bne.n	80100a2 <xQueueReceiveFromISR+0x3e>
 801009a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d101      	bne.n	80100a6 <xQueueReceiveFromISR+0x42>
 80100a2:	2301      	movs	r3, #1
 80100a4:	e000      	b.n	80100a8 <xQueueReceiveFromISR+0x44>
 80100a6:	2300      	movs	r3, #0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d10c      	bne.n	80100c6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80100ac:	f04f 0310 	mov.w	r3, #16
 80100b0:	b672      	cpsid	i
 80100b2:	f383 8811 	msr	BASEPRI, r3
 80100b6:	f3bf 8f6f 	isb	sy
 80100ba:	f3bf 8f4f 	dsb	sy
 80100be:	b662      	cpsie	i
 80100c0:	61fb      	str	r3, [r7, #28]
}
 80100c2:	bf00      	nop
 80100c4:	e7fe      	b.n	80100c4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80100c6:	f001 ffc9 	bl	801205c <vPortValidateInterruptPriority>
	__asm volatile
 80100ca:	f3ef 8211 	mrs	r2, BASEPRI
 80100ce:	f04f 0310 	mov.w	r3, #16
 80100d2:	b672      	cpsid	i
 80100d4:	f383 8811 	msr	BASEPRI, r3
 80100d8:	f3bf 8f6f 	isb	sy
 80100dc:	f3bf 8f4f 	dsb	sy
 80100e0:	b662      	cpsie	i
 80100e2:	61ba      	str	r2, [r7, #24]
 80100e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80100e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80100e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d02f      	beq.n	8010156 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80100f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80100fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010100:	68b9      	ldr	r1, [r7, #8]
 8010102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010104:	f000 f8db 	bl	80102be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801010a:	1e5a      	subs	r2, r3, #1
 801010c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010110:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010118:	d112      	bne.n	8010140 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801011a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011c:	691b      	ldr	r3, [r3, #16]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d016      	beq.n	8010150 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010124:	3310      	adds	r3, #16
 8010126:	4618      	mov	r0, r3
 8010128:	f000 fe96 	bl	8010e58 <xTaskRemoveFromEventList>
 801012c:	4603      	mov	r3, r0
 801012e:	2b00      	cmp	r3, #0
 8010130:	d00e      	beq.n	8010150 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d00b      	beq.n	8010150 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2201      	movs	r2, #1
 801013c:	601a      	str	r2, [r3, #0]
 801013e:	e007      	b.n	8010150 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010144:	3301      	adds	r3, #1
 8010146:	b2db      	uxtb	r3, r3
 8010148:	b25a      	sxtb	r2, r3
 801014a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010150:	2301      	movs	r3, #1
 8010152:	637b      	str	r3, [r7, #52]	; 0x34
 8010154:	e001      	b.n	801015a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8010156:	2300      	movs	r3, #0
 8010158:	637b      	str	r3, [r7, #52]	; 0x34
 801015a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	f383 8811 	msr	BASEPRI, r3
}
 8010164:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010168:	4618      	mov	r0, r3
 801016a:	3738      	adds	r7, #56	; 0x38
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}

08010170 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d10c      	bne.n	801019c <vQueueDelete+0x2c>
	__asm volatile
 8010182:	f04f 0310 	mov.w	r3, #16
 8010186:	b672      	cpsid	i
 8010188:	f383 8811 	msr	BASEPRI, r3
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	f3bf 8f4f 	dsb	sy
 8010194:	b662      	cpsie	i
 8010196:	60bb      	str	r3, [r7, #8]
}
 8010198:	bf00      	nop
 801019a:	e7fe      	b.n	801019a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801019c:	68f8      	ldr	r0, [r7, #12]
 801019e:	f000 f95f 	bl	8010460 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d102      	bne.n	80101b2 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f002 f863 	bl	8012278 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80101b2:	bf00      	nop
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80101ba:	b480      	push	{r7}
 80101bc:	b085      	sub	sp, #20
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d006      	beq.n	80101d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80101d4:	60fb      	str	r3, [r7, #12]
 80101d6:	e001      	b.n	80101dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80101d8:	2300      	movs	r3, #0
 80101da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80101dc:	68fb      	ldr	r3, [r7, #12]
	}
 80101de:	4618      	mov	r0, r3
 80101e0:	3714      	adds	r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b086      	sub	sp, #24
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	60f8      	str	r0, [r7, #12]
 80101f2:	60b9      	str	r1, [r7, #8]
 80101f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80101f6:	2300      	movs	r3, #0
 80101f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010204:	2b00      	cmp	r3, #0
 8010206:	d10d      	bne.n	8010224 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d14d      	bne.n	80102ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	4618      	mov	r0, r3
 8010216:	f001 f86f 	bl	80112f8 <xTaskPriorityDisinherit>
 801021a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2200      	movs	r2, #0
 8010220:	609a      	str	r2, [r3, #8]
 8010222:	e043      	b.n	80102ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d119      	bne.n	801025e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	6858      	ldr	r0, [r3, #4]
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010232:	461a      	mov	r2, r3
 8010234:	68b9      	ldr	r1, [r7, #8]
 8010236:	f002 fa5c 	bl	80126f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	685a      	ldr	r2, [r3, #4]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010242:	441a      	add	r2, r3
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	685a      	ldr	r2, [r3, #4]
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	689b      	ldr	r3, [r3, #8]
 8010250:	429a      	cmp	r2, r3
 8010252:	d32b      	bcc.n	80102ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	605a      	str	r2, [r3, #4]
 801025c:	e026      	b.n	80102ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	68d8      	ldr	r0, [r3, #12]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010266:	461a      	mov	r2, r3
 8010268:	68b9      	ldr	r1, [r7, #8]
 801026a:	f002 fa42 	bl	80126f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	68da      	ldr	r2, [r3, #12]
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010276:	425b      	negs	r3, r3
 8010278:	441a      	add	r2, r3
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	68da      	ldr	r2, [r3, #12]
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	429a      	cmp	r2, r3
 8010288:	d207      	bcs.n	801029a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	689a      	ldr	r2, [r3, #8]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010292:	425b      	negs	r3, r3
 8010294:	441a      	add	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2b02      	cmp	r3, #2
 801029e:	d105      	bne.n	80102ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d002      	beq.n	80102ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	1c5a      	adds	r2, r3, #1
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80102b4:	697b      	ldr	r3, [r7, #20]
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3718      	adds	r7, #24
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b082      	sub	sp, #8
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
 80102c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d018      	beq.n	8010302 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	68da      	ldr	r2, [r3, #12]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102d8:	441a      	add	r2, r3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	68da      	ldr	r2, [r3, #12]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	689b      	ldr	r3, [r3, #8]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d303      	bcc.n	80102f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	68d9      	ldr	r1, [r3, #12]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102fa:	461a      	mov	r2, r3
 80102fc:	6838      	ldr	r0, [r7, #0]
 80102fe:	f002 f9f8 	bl	80126f2 <memcpy>
	}
}
 8010302:	bf00      	nop
 8010304:	3708      	adds	r7, #8
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}

0801030a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801030a:	b580      	push	{r7, lr}
 801030c:	b084      	sub	sp, #16
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010312:	f001 fdbb 	bl	8011e8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801031c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801031e:	e011      	b.n	8010344 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010324:	2b00      	cmp	r3, #0
 8010326:	d012      	beq.n	801034e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	3324      	adds	r3, #36	; 0x24
 801032c:	4618      	mov	r0, r3
 801032e:	f000 fd93 	bl	8010e58 <xTaskRemoveFromEventList>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d001      	beq.n	801033c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010338:	f000 fe70 	bl	801101c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801033c:	7bfb      	ldrb	r3, [r7, #15]
 801033e:	3b01      	subs	r3, #1
 8010340:	b2db      	uxtb	r3, r3
 8010342:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010348:	2b00      	cmp	r3, #0
 801034a:	dce9      	bgt.n	8010320 <prvUnlockQueue+0x16>
 801034c:	e000      	b.n	8010350 <prvUnlockQueue+0x46>
					break;
 801034e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	22ff      	movs	r2, #255	; 0xff
 8010354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010358:	f001 fdcc 	bl	8011ef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801035c:	f001 fd96 	bl	8011e8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010366:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010368:	e011      	b.n	801038e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	691b      	ldr	r3, [r3, #16]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d012      	beq.n	8010398 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	3310      	adds	r3, #16
 8010376:	4618      	mov	r0, r3
 8010378:	f000 fd6e 	bl	8010e58 <xTaskRemoveFromEventList>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d001      	beq.n	8010386 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010382:	f000 fe4b 	bl	801101c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010386:	7bbb      	ldrb	r3, [r7, #14]
 8010388:	3b01      	subs	r3, #1
 801038a:	b2db      	uxtb	r3, r3
 801038c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801038e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010392:	2b00      	cmp	r3, #0
 8010394:	dce9      	bgt.n	801036a <prvUnlockQueue+0x60>
 8010396:	e000      	b.n	801039a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010398:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	22ff      	movs	r2, #255	; 0xff
 801039e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80103a2:	f001 fda7 	bl	8011ef4 <vPortExitCritical>
}
 80103a6:	bf00      	nop
 80103a8:	3710      	adds	r7, #16
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}

080103ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80103ae:	b580      	push	{r7, lr}
 80103b0:	b084      	sub	sp, #16
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80103b6:	f001 fd69 	bl	8011e8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d102      	bne.n	80103c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80103c2:	2301      	movs	r3, #1
 80103c4:	60fb      	str	r3, [r7, #12]
 80103c6:	e001      	b.n	80103cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80103c8:	2300      	movs	r3, #0
 80103ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80103cc:	f001 fd92 	bl	8011ef4 <vPortExitCritical>

	return xReturn;
 80103d0:	68fb      	ldr	r3, [r7, #12]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b084      	sub	sp, #16
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80103e2:	f001 fd53 	bl	8011e8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d102      	bne.n	80103f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80103f2:	2301      	movs	r3, #1
 80103f4:	60fb      	str	r3, [r7, #12]
 80103f6:	e001      	b.n	80103fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80103f8:	2300      	movs	r3, #0
 80103fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80103fc:	f001 fd7a 	bl	8011ef4 <vPortExitCritical>

	return xReturn;
 8010400:	68fb      	ldr	r3, [r7, #12]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
	...

0801040c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801040c:	b480      	push	{r7}
 801040e:	b085      	sub	sp, #20
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010416:	2300      	movs	r3, #0
 8010418:	60fb      	str	r3, [r7, #12]
 801041a:	e014      	b.n	8010446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801041c:	4a0f      	ldr	r2, [pc, #60]	; (801045c <vQueueAddToRegistry+0x50>)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d10b      	bne.n	8010440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010428:	490c      	ldr	r1, [pc, #48]	; (801045c <vQueueAddToRegistry+0x50>)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	683a      	ldr	r2, [r7, #0]
 801042e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010432:	4a0a      	ldr	r2, [pc, #40]	; (801045c <vQueueAddToRegistry+0x50>)
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	00db      	lsls	r3, r3, #3
 8010438:	4413      	add	r3, r2
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801043e:	e006      	b.n	801044e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	3301      	adds	r3, #1
 8010444:	60fb      	str	r3, [r7, #12]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2b07      	cmp	r3, #7
 801044a:	d9e7      	bls.n	801041c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801044c:	bf00      	nop
 801044e:	bf00      	nop
 8010450:	3714      	adds	r7, #20
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	20001a24 	.word	0x20001a24

08010460 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010460:	b480      	push	{r7}
 8010462:	b085      	sub	sp, #20
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010468:	2300      	movs	r3, #0
 801046a:	60fb      	str	r3, [r7, #12]
 801046c:	e016      	b.n	801049c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801046e:	4a10      	ldr	r2, [pc, #64]	; (80104b0 <vQueueUnregisterQueue+0x50>)
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	00db      	lsls	r3, r3, #3
 8010474:	4413      	add	r3, r2
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	429a      	cmp	r2, r3
 801047c:	d10b      	bne.n	8010496 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801047e:	4a0c      	ldr	r2, [pc, #48]	; (80104b0 <vQueueUnregisterQueue+0x50>)
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2100      	movs	r1, #0
 8010484:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010488:	4a09      	ldr	r2, [pc, #36]	; (80104b0 <vQueueUnregisterQueue+0x50>)
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	00db      	lsls	r3, r3, #3
 801048e:	4413      	add	r3, r2
 8010490:	2200      	movs	r2, #0
 8010492:	605a      	str	r2, [r3, #4]
				break;
 8010494:	e006      	b.n	80104a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	3301      	adds	r3, #1
 801049a:	60fb      	str	r3, [r7, #12]
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2b07      	cmp	r3, #7
 80104a0:	d9e5      	bls.n	801046e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80104a2:	bf00      	nop
 80104a4:	bf00      	nop
 80104a6:	3714      	adds	r7, #20
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr
 80104b0:	20001a24 	.word	0x20001a24

080104b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b086      	sub	sp, #24
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	60b9      	str	r1, [r7, #8]
 80104be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80104c4:	f001 fce2 	bl	8011e8c <vPortEnterCritical>
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104ce:	b25b      	sxtb	r3, r3
 80104d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104d4:	d103      	bne.n	80104de <vQueueWaitForMessageRestricted+0x2a>
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	2200      	movs	r2, #0
 80104da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104e4:	b25b      	sxtb	r3, r3
 80104e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ea:	d103      	bne.n	80104f4 <vQueueWaitForMessageRestricted+0x40>
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	2200      	movs	r2, #0
 80104f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104f4:	f001 fcfe 	bl	8011ef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d106      	bne.n	801050e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	3324      	adds	r3, #36	; 0x24
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	68b9      	ldr	r1, [r7, #8]
 8010508:	4618      	mov	r0, r3
 801050a:	f000 fc77 	bl	8010dfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801050e:	6978      	ldr	r0, [r7, #20]
 8010510:	f7ff fefb 	bl	801030a <prvUnlockQueue>
	}
 8010514:	bf00      	nop
 8010516:	3718      	adds	r7, #24
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801051c:	b580      	push	{r7, lr}
 801051e:	b08e      	sub	sp, #56	; 0x38
 8010520:	af04      	add	r7, sp, #16
 8010522:	60f8      	str	r0, [r7, #12]
 8010524:	60b9      	str	r1, [r7, #8]
 8010526:	607a      	str	r2, [r7, #4]
 8010528:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801052a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052c:	2b00      	cmp	r3, #0
 801052e:	d10c      	bne.n	801054a <xTaskCreateStatic+0x2e>
	__asm volatile
 8010530:	f04f 0310 	mov.w	r3, #16
 8010534:	b672      	cpsid	i
 8010536:	f383 8811 	msr	BASEPRI, r3
 801053a:	f3bf 8f6f 	isb	sy
 801053e:	f3bf 8f4f 	dsb	sy
 8010542:	b662      	cpsie	i
 8010544:	623b      	str	r3, [r7, #32]
}
 8010546:	bf00      	nop
 8010548:	e7fe      	b.n	8010548 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801054a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054c:	2b00      	cmp	r3, #0
 801054e:	d10c      	bne.n	801056a <xTaskCreateStatic+0x4e>
	__asm volatile
 8010550:	f04f 0310 	mov.w	r3, #16
 8010554:	b672      	cpsid	i
 8010556:	f383 8811 	msr	BASEPRI, r3
 801055a:	f3bf 8f6f 	isb	sy
 801055e:	f3bf 8f4f 	dsb	sy
 8010562:	b662      	cpsie	i
 8010564:	61fb      	str	r3, [r7, #28]
}
 8010566:	bf00      	nop
 8010568:	e7fe      	b.n	8010568 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801056a:	23bc      	movs	r3, #188	; 0xbc
 801056c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	2bbc      	cmp	r3, #188	; 0xbc
 8010572:	d00c      	beq.n	801058e <xTaskCreateStatic+0x72>
	__asm volatile
 8010574:	f04f 0310 	mov.w	r3, #16
 8010578:	b672      	cpsid	i
 801057a:	f383 8811 	msr	BASEPRI, r3
 801057e:	f3bf 8f6f 	isb	sy
 8010582:	f3bf 8f4f 	dsb	sy
 8010586:	b662      	cpsie	i
 8010588:	61bb      	str	r3, [r7, #24]
}
 801058a:	bf00      	nop
 801058c:	e7fe      	b.n	801058c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801058e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010592:	2b00      	cmp	r3, #0
 8010594:	d01e      	beq.n	80105d4 <xTaskCreateStatic+0xb8>
 8010596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010598:	2b00      	cmp	r3, #0
 801059a:	d01b      	beq.n	80105d4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801059c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80105a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80105a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80105a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a8:	2202      	movs	r2, #2
 80105aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80105ae:	2300      	movs	r3, #0
 80105b0:	9303      	str	r3, [sp, #12]
 80105b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b4:	9302      	str	r3, [sp, #8]
 80105b6:	f107 0314 	add.w	r3, r7, #20
 80105ba:	9301      	str	r3, [sp, #4]
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	68b9      	ldr	r1, [r7, #8]
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f000 f850 	bl	801066c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80105cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80105ce:	f000 f8f5 	bl	80107bc <prvAddNewTaskToReadyList>
 80105d2:	e001      	b.n	80105d8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80105d4:	2300      	movs	r3, #0
 80105d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80105d8:	697b      	ldr	r3, [r7, #20]
	}
 80105da:	4618      	mov	r0, r3
 80105dc:	3728      	adds	r7, #40	; 0x28
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b08c      	sub	sp, #48	; 0x30
 80105e6:	af04      	add	r7, sp, #16
 80105e8:	60f8      	str	r0, [r7, #12]
 80105ea:	60b9      	str	r1, [r7, #8]
 80105ec:	603b      	str	r3, [r7, #0]
 80105ee:	4613      	mov	r3, r2
 80105f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80105f2:	88fb      	ldrh	r3, [r7, #6]
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	4618      	mov	r0, r3
 80105f8:	f001 fd74 	bl	80120e4 <pvPortMalloc>
 80105fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00e      	beq.n	8010622 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010604:	20bc      	movs	r0, #188	; 0xbc
 8010606:	f001 fd6d 	bl	80120e4 <pvPortMalloc>
 801060a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801060c:	69fb      	ldr	r3, [r7, #28]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d003      	beq.n	801061a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	697a      	ldr	r2, [r7, #20]
 8010616:	631a      	str	r2, [r3, #48]	; 0x30
 8010618:	e005      	b.n	8010626 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801061a:	6978      	ldr	r0, [r7, #20]
 801061c:	f001 fe2c 	bl	8012278 <vPortFree>
 8010620:	e001      	b.n	8010626 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010622:	2300      	movs	r3, #0
 8010624:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d017      	beq.n	801065c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801062c:	69fb      	ldr	r3, [r7, #28]
 801062e:	2200      	movs	r2, #0
 8010630:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010634:	88fa      	ldrh	r2, [r7, #6]
 8010636:	2300      	movs	r3, #0
 8010638:	9303      	str	r3, [sp, #12]
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	9302      	str	r3, [sp, #8]
 801063e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010640:	9301      	str	r3, [sp, #4]
 8010642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010644:	9300      	str	r3, [sp, #0]
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	68b9      	ldr	r1, [r7, #8]
 801064a:	68f8      	ldr	r0, [r7, #12]
 801064c:	f000 f80e 	bl	801066c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010650:	69f8      	ldr	r0, [r7, #28]
 8010652:	f000 f8b3 	bl	80107bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010656:	2301      	movs	r3, #1
 8010658:	61bb      	str	r3, [r7, #24]
 801065a:	e002      	b.n	8010662 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801065c:	f04f 33ff 	mov.w	r3, #4294967295
 8010660:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010662:	69bb      	ldr	r3, [r7, #24]
	}
 8010664:	4618      	mov	r0, r3
 8010666:	3720      	adds	r7, #32
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b088      	sub	sp, #32
 8010670:	af00      	add	r7, sp, #0
 8010672:	60f8      	str	r0, [r7, #12]
 8010674:	60b9      	str	r1, [r7, #8]
 8010676:	607a      	str	r2, [r7, #4]
 8010678:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801067a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801067c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	009b      	lsls	r3, r3, #2
 8010682:	461a      	mov	r2, r3
 8010684:	21a5      	movs	r1, #165	; 0xa5
 8010686:	f002 f842 	bl	801270e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801068c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801068e:	6879      	ldr	r1, [r7, #4]
 8010690:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010694:	440b      	add	r3, r1
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	4413      	add	r3, r2
 801069a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801069c:	69bb      	ldr	r3, [r7, #24]
 801069e:	f023 0307 	bic.w	r3, r3, #7
 80106a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	f003 0307 	and.w	r3, r3, #7
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d00c      	beq.n	80106c8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80106ae:	f04f 0310 	mov.w	r3, #16
 80106b2:	b672      	cpsid	i
 80106b4:	f383 8811 	msr	BASEPRI, r3
 80106b8:	f3bf 8f6f 	isb	sy
 80106bc:	f3bf 8f4f 	dsb	sy
 80106c0:	b662      	cpsie	i
 80106c2:	617b      	str	r3, [r7, #20]
}
 80106c4:	bf00      	nop
 80106c6:	e7fe      	b.n	80106c6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d01f      	beq.n	801070e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80106ce:	2300      	movs	r3, #0
 80106d0:	61fb      	str	r3, [r7, #28]
 80106d2:	e012      	b.n	80106fa <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80106d4:	68ba      	ldr	r2, [r7, #8]
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	4413      	add	r3, r2
 80106da:	7819      	ldrb	r1, [r3, #0]
 80106dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	4413      	add	r3, r2
 80106e2:	3334      	adds	r3, #52	; 0x34
 80106e4:	460a      	mov	r2, r1
 80106e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80106e8:	68ba      	ldr	r2, [r7, #8]
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	4413      	add	r3, r2
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d006      	beq.n	8010702 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	3301      	adds	r3, #1
 80106f8:	61fb      	str	r3, [r7, #28]
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	2b0f      	cmp	r3, #15
 80106fe:	d9e9      	bls.n	80106d4 <prvInitialiseNewTask+0x68>
 8010700:	e000      	b.n	8010704 <prvInitialiseNewTask+0x98>
			{
				break;
 8010702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010706:	2200      	movs	r2, #0
 8010708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801070c:	e003      	b.n	8010716 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801070e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010710:	2200      	movs	r2, #0
 8010712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010718:	2b37      	cmp	r3, #55	; 0x37
 801071a:	d901      	bls.n	8010720 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801071c:	2337      	movs	r3, #55	; 0x37
 801071e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801072a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801072c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072e:	2200      	movs	r2, #0
 8010730:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010734:	3304      	adds	r3, #4
 8010736:	4618      	mov	r0, r3
 8010738:	f7fe fe06 	bl	800f348 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801073c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801073e:	3318      	adds	r3, #24
 8010740:	4618      	mov	r0, r3
 8010742:	f7fe fe01 	bl	800f348 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801074a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801075a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801075c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075e:	2200      	movs	r2, #0
 8010760:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010766:	2200      	movs	r2, #0
 8010768:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801076c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801076e:	3354      	adds	r3, #84	; 0x54
 8010770:	2260      	movs	r2, #96	; 0x60
 8010772:	2100      	movs	r1, #0
 8010774:	4618      	mov	r0, r3
 8010776:	f001 ffca 	bl	801270e <memset>
 801077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077c:	4a0c      	ldr	r2, [pc, #48]	; (80107b0 <prvInitialiseNewTask+0x144>)
 801077e:	659a      	str	r2, [r3, #88]	; 0x58
 8010780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010782:	4a0c      	ldr	r2, [pc, #48]	; (80107b4 <prvInitialiseNewTask+0x148>)
 8010784:	65da      	str	r2, [r3, #92]	; 0x5c
 8010786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010788:	4a0b      	ldr	r2, [pc, #44]	; (80107b8 <prvInitialiseNewTask+0x14c>)
 801078a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801078c:	683a      	ldr	r2, [r7, #0]
 801078e:	68f9      	ldr	r1, [r7, #12]
 8010790:	69b8      	ldr	r0, [r7, #24]
 8010792:	f001 fa6d 	bl	8011c70 <pxPortInitialiseStack>
 8010796:	4602      	mov	r2, r0
 8010798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801079c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d002      	beq.n	80107a8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80107a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80107a8:	bf00      	nop
 80107aa:	3720      	adds	r7, #32
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd80      	pop	{r7, pc}
 80107b0:	0801576c 	.word	0x0801576c
 80107b4:	0801578c 	.word	0x0801578c
 80107b8:	0801574c 	.word	0x0801574c

080107bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80107c4:	f001 fb62 	bl	8011e8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80107c8:	4b2d      	ldr	r3, [pc, #180]	; (8010880 <prvAddNewTaskToReadyList+0xc4>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	3301      	adds	r3, #1
 80107ce:	4a2c      	ldr	r2, [pc, #176]	; (8010880 <prvAddNewTaskToReadyList+0xc4>)
 80107d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80107d2:	4b2c      	ldr	r3, [pc, #176]	; (8010884 <prvAddNewTaskToReadyList+0xc8>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d109      	bne.n	80107ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80107da:	4a2a      	ldr	r2, [pc, #168]	; (8010884 <prvAddNewTaskToReadyList+0xc8>)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80107e0:	4b27      	ldr	r3, [pc, #156]	; (8010880 <prvAddNewTaskToReadyList+0xc4>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d110      	bne.n	801080a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80107e8:	f000 fc3c 	bl	8011064 <prvInitialiseTaskLists>
 80107ec:	e00d      	b.n	801080a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80107ee:	4b26      	ldr	r3, [pc, #152]	; (8010888 <prvAddNewTaskToReadyList+0xcc>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d109      	bne.n	801080a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80107f6:	4b23      	ldr	r3, [pc, #140]	; (8010884 <prvAddNewTaskToReadyList+0xc8>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010800:	429a      	cmp	r2, r3
 8010802:	d802      	bhi.n	801080a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010804:	4a1f      	ldr	r2, [pc, #124]	; (8010884 <prvAddNewTaskToReadyList+0xc8>)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801080a:	4b20      	ldr	r3, [pc, #128]	; (801088c <prvAddNewTaskToReadyList+0xd0>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	3301      	adds	r3, #1
 8010810:	4a1e      	ldr	r2, [pc, #120]	; (801088c <prvAddNewTaskToReadyList+0xd0>)
 8010812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010814:	4b1d      	ldr	r3, [pc, #116]	; (801088c <prvAddNewTaskToReadyList+0xd0>)
 8010816:	681a      	ldr	r2, [r3, #0]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010820:	4b1b      	ldr	r3, [pc, #108]	; (8010890 <prvAddNewTaskToReadyList+0xd4>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	429a      	cmp	r2, r3
 8010826:	d903      	bls.n	8010830 <prvAddNewTaskToReadyList+0x74>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801082c:	4a18      	ldr	r2, [pc, #96]	; (8010890 <prvAddNewTaskToReadyList+0xd4>)
 801082e:	6013      	str	r3, [r2, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010834:	4613      	mov	r3, r2
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	4413      	add	r3, r2
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	4a15      	ldr	r2, [pc, #84]	; (8010894 <prvAddNewTaskToReadyList+0xd8>)
 801083e:	441a      	add	r2, r3
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	3304      	adds	r3, #4
 8010844:	4619      	mov	r1, r3
 8010846:	4610      	mov	r0, r2
 8010848:	f7fe fd8b 	bl	800f362 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801084c:	f001 fb52 	bl	8011ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010850:	4b0d      	ldr	r3, [pc, #52]	; (8010888 <prvAddNewTaskToReadyList+0xcc>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d00e      	beq.n	8010876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010858:	4b0a      	ldr	r3, [pc, #40]	; (8010884 <prvAddNewTaskToReadyList+0xc8>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010862:	429a      	cmp	r2, r3
 8010864:	d207      	bcs.n	8010876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010866:	4b0c      	ldr	r3, [pc, #48]	; (8010898 <prvAddNewTaskToReadyList+0xdc>)
 8010868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801086c:	601a      	str	r2, [r3, #0]
 801086e:	f3bf 8f4f 	dsb	sy
 8010872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010876:	bf00      	nop
 8010878:	3708      	adds	r7, #8
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	20001f38 	.word	0x20001f38
 8010884:	20001a64 	.word	0x20001a64
 8010888:	20001f44 	.word	0x20001f44
 801088c:	20001f54 	.word	0x20001f54
 8010890:	20001f40 	.word	0x20001f40
 8010894:	20001a68 	.word	0x20001a68
 8010898:	e000ed04 	.word	0xe000ed04

0801089c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80108a4:	2300      	movs	r3, #0
 80108a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d019      	beq.n	80108e2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80108ae:	4b14      	ldr	r3, [pc, #80]	; (8010900 <vTaskDelay+0x64>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d00c      	beq.n	80108d0 <vTaskDelay+0x34>
	__asm volatile
 80108b6:	f04f 0310 	mov.w	r3, #16
 80108ba:	b672      	cpsid	i
 80108bc:	f383 8811 	msr	BASEPRI, r3
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	b662      	cpsie	i
 80108ca:	60bb      	str	r3, [r7, #8]
}
 80108cc:	bf00      	nop
 80108ce:	e7fe      	b.n	80108ce <vTaskDelay+0x32>
			vTaskSuspendAll();
 80108d0:	f000 f88e 	bl	80109f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80108d4:	2100      	movs	r1, #0
 80108d6:	6878      	ldr	r0, [r7, #4]
 80108d8:	f000 fe1a 	bl	8011510 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80108dc:	f000 f896 	bl	8010a0c <xTaskResumeAll>
 80108e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d107      	bne.n	80108f8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80108e8:	4b06      	ldr	r3, [pc, #24]	; (8010904 <vTaskDelay+0x68>)
 80108ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ee:	601a      	str	r2, [r3, #0]
 80108f0:	f3bf 8f4f 	dsb	sy
 80108f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80108f8:	bf00      	nop
 80108fa:	3710      	adds	r7, #16
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	20001f60 	.word	0x20001f60
 8010904:	e000ed04 	.word	0xe000ed04

08010908 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b08a      	sub	sp, #40	; 0x28
 801090c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801090e:	2300      	movs	r3, #0
 8010910:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010912:	2300      	movs	r3, #0
 8010914:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010916:	463a      	mov	r2, r7
 8010918:	1d39      	adds	r1, r7, #4
 801091a:	f107 0308 	add.w	r3, r7, #8
 801091e:	4618      	mov	r0, r3
 8010920:	f7fe fcbe 	bl	800f2a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010924:	6839      	ldr	r1, [r7, #0]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	68ba      	ldr	r2, [r7, #8]
 801092a:	9202      	str	r2, [sp, #8]
 801092c:	9301      	str	r3, [sp, #4]
 801092e:	2300      	movs	r3, #0
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	2300      	movs	r3, #0
 8010934:	460a      	mov	r2, r1
 8010936:	4926      	ldr	r1, [pc, #152]	; (80109d0 <vTaskStartScheduler+0xc8>)
 8010938:	4826      	ldr	r0, [pc, #152]	; (80109d4 <vTaskStartScheduler+0xcc>)
 801093a:	f7ff fdef 	bl	801051c <xTaskCreateStatic>
 801093e:	4603      	mov	r3, r0
 8010940:	4a25      	ldr	r2, [pc, #148]	; (80109d8 <vTaskStartScheduler+0xd0>)
 8010942:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010944:	4b24      	ldr	r3, [pc, #144]	; (80109d8 <vTaskStartScheduler+0xd0>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801094c:	2301      	movs	r3, #1
 801094e:	617b      	str	r3, [r7, #20]
 8010950:	e001      	b.n	8010956 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010952:	2300      	movs	r3, #0
 8010954:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	2b01      	cmp	r3, #1
 801095a:	d102      	bne.n	8010962 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801095c:	f000 fe2c 	bl	80115b8 <xTimerCreateTimerTask>
 8010960:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	2b01      	cmp	r3, #1
 8010966:	d11d      	bne.n	80109a4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8010968:	f04f 0310 	mov.w	r3, #16
 801096c:	b672      	cpsid	i
 801096e:	f383 8811 	msr	BASEPRI, r3
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	f3bf 8f4f 	dsb	sy
 801097a:	b662      	cpsie	i
 801097c:	613b      	str	r3, [r7, #16]
}
 801097e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010980:	4b16      	ldr	r3, [pc, #88]	; (80109dc <vTaskStartScheduler+0xd4>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	3354      	adds	r3, #84	; 0x54
 8010986:	4a16      	ldr	r2, [pc, #88]	; (80109e0 <vTaskStartScheduler+0xd8>)
 8010988:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801098a:	4b16      	ldr	r3, [pc, #88]	; (80109e4 <vTaskStartScheduler+0xdc>)
 801098c:	f04f 32ff 	mov.w	r2, #4294967295
 8010990:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010992:	4b15      	ldr	r3, [pc, #84]	; (80109e8 <vTaskStartScheduler+0xe0>)
 8010994:	2201      	movs	r2, #1
 8010996:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010998:	4b14      	ldr	r3, [pc, #80]	; (80109ec <vTaskStartScheduler+0xe4>)
 801099a:	2200      	movs	r2, #0
 801099c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801099e:	f001 f9f7 	bl	8011d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80109a2:	e010      	b.n	80109c6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109aa:	d10c      	bne.n	80109c6 <vTaskStartScheduler+0xbe>
	__asm volatile
 80109ac:	f04f 0310 	mov.w	r3, #16
 80109b0:	b672      	cpsid	i
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	b662      	cpsie	i
 80109c0:	60fb      	str	r3, [r7, #12]
}
 80109c2:	bf00      	nop
 80109c4:	e7fe      	b.n	80109c4 <vTaskStartScheduler+0xbc>
}
 80109c6:	bf00      	nop
 80109c8:	3718      	adds	r7, #24
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	080155e8 	.word	0x080155e8
 80109d4:	08011035 	.word	0x08011035
 80109d8:	20001f5c 	.word	0x20001f5c
 80109dc:	20001a64 	.word	0x20001a64
 80109e0:	200001e4 	.word	0x200001e4
 80109e4:	20001f58 	.word	0x20001f58
 80109e8:	20001f44 	.word	0x20001f44
 80109ec:	20001f3c 	.word	0x20001f3c

080109f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80109f0:	b480      	push	{r7}
 80109f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80109f4:	4b04      	ldr	r3, [pc, #16]	; (8010a08 <vTaskSuspendAll+0x18>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	3301      	adds	r3, #1
 80109fa:	4a03      	ldr	r2, [pc, #12]	; (8010a08 <vTaskSuspendAll+0x18>)
 80109fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80109fe:	bf00      	nop
 8010a00:	46bd      	mov	sp, r7
 8010a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a06:	4770      	bx	lr
 8010a08:	20001f60 	.word	0x20001f60

08010a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a12:	2300      	movs	r3, #0
 8010a14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a16:	2300      	movs	r3, #0
 8010a18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a1a:	4b43      	ldr	r3, [pc, #268]	; (8010b28 <xTaskResumeAll+0x11c>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d10c      	bne.n	8010a3c <xTaskResumeAll+0x30>
	__asm volatile
 8010a22:	f04f 0310 	mov.w	r3, #16
 8010a26:	b672      	cpsid	i
 8010a28:	f383 8811 	msr	BASEPRI, r3
 8010a2c:	f3bf 8f6f 	isb	sy
 8010a30:	f3bf 8f4f 	dsb	sy
 8010a34:	b662      	cpsie	i
 8010a36:	603b      	str	r3, [r7, #0]
}
 8010a38:	bf00      	nop
 8010a3a:	e7fe      	b.n	8010a3a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010a3c:	f001 fa26 	bl	8011e8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010a40:	4b39      	ldr	r3, [pc, #228]	; (8010b28 <xTaskResumeAll+0x11c>)
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	3b01      	subs	r3, #1
 8010a46:	4a38      	ldr	r2, [pc, #224]	; (8010b28 <xTaskResumeAll+0x11c>)
 8010a48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a4a:	4b37      	ldr	r3, [pc, #220]	; (8010b28 <xTaskResumeAll+0x11c>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d162      	bne.n	8010b18 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010a52:	4b36      	ldr	r3, [pc, #216]	; (8010b2c <xTaskResumeAll+0x120>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d05e      	beq.n	8010b18 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a5a:	e02f      	b.n	8010abc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a5c:	4b34      	ldr	r3, [pc, #208]	; (8010b30 <xTaskResumeAll+0x124>)
 8010a5e:	68db      	ldr	r3, [r3, #12]
 8010a60:	68db      	ldr	r3, [r3, #12]
 8010a62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	3318      	adds	r3, #24
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fe fcd7 	bl	800f41c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	3304      	adds	r3, #4
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7fe fcd2 	bl	800f41c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a7c:	4b2d      	ldr	r3, [pc, #180]	; (8010b34 <xTaskResumeAll+0x128>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d903      	bls.n	8010a8c <xTaskResumeAll+0x80>
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a88:	4a2a      	ldr	r2, [pc, #168]	; (8010b34 <xTaskResumeAll+0x128>)
 8010a8a:	6013      	str	r3, [r2, #0]
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a90:	4613      	mov	r3, r2
 8010a92:	009b      	lsls	r3, r3, #2
 8010a94:	4413      	add	r3, r2
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	4a27      	ldr	r2, [pc, #156]	; (8010b38 <xTaskResumeAll+0x12c>)
 8010a9a:	441a      	add	r2, r3
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	3304      	adds	r3, #4
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	4610      	mov	r0, r2
 8010aa4:	f7fe fc5d 	bl	800f362 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aac:	4b23      	ldr	r3, [pc, #140]	; (8010b3c <xTaskResumeAll+0x130>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d302      	bcc.n	8010abc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8010ab6:	4b22      	ldr	r3, [pc, #136]	; (8010b40 <xTaskResumeAll+0x134>)
 8010ab8:	2201      	movs	r2, #1
 8010aba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010abc:	4b1c      	ldr	r3, [pc, #112]	; (8010b30 <xTaskResumeAll+0x124>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d1cb      	bne.n	8010a5c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d001      	beq.n	8010ace <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010aca:	f000 fb6f 	bl	80111ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010ace:	4b1d      	ldr	r3, [pc, #116]	; (8010b44 <xTaskResumeAll+0x138>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d010      	beq.n	8010afc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010ada:	f000 f847 	bl	8010b6c <xTaskIncrementTick>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d002      	beq.n	8010aea <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8010ae4:	4b16      	ldr	r3, [pc, #88]	; (8010b40 <xTaskResumeAll+0x134>)
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	3b01      	subs	r3, #1
 8010aee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d1f1      	bne.n	8010ada <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8010af6:	4b13      	ldr	r3, [pc, #76]	; (8010b44 <xTaskResumeAll+0x138>)
 8010af8:	2200      	movs	r2, #0
 8010afa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010afc:	4b10      	ldr	r3, [pc, #64]	; (8010b40 <xTaskResumeAll+0x134>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d009      	beq.n	8010b18 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010b04:	2301      	movs	r3, #1
 8010b06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010b08:	4b0f      	ldr	r3, [pc, #60]	; (8010b48 <xTaskResumeAll+0x13c>)
 8010b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b0e:	601a      	str	r2, [r3, #0]
 8010b10:	f3bf 8f4f 	dsb	sy
 8010b14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b18:	f001 f9ec 	bl	8011ef4 <vPortExitCritical>

	return xAlreadyYielded;
 8010b1c:	68bb      	ldr	r3, [r7, #8]
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3710      	adds	r7, #16
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	20001f60 	.word	0x20001f60
 8010b2c:	20001f38 	.word	0x20001f38
 8010b30:	20001ef8 	.word	0x20001ef8
 8010b34:	20001f40 	.word	0x20001f40
 8010b38:	20001a68 	.word	0x20001a68
 8010b3c:	20001a64 	.word	0x20001a64
 8010b40:	20001f4c 	.word	0x20001f4c
 8010b44:	20001f48 	.word	0x20001f48
 8010b48:	e000ed04 	.word	0xe000ed04

08010b4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b083      	sub	sp, #12
 8010b50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010b52:	4b05      	ldr	r3, [pc, #20]	; (8010b68 <xTaskGetTickCount+0x1c>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010b58:	687b      	ldr	r3, [r7, #4]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	370c      	adds	r7, #12
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr
 8010b66:	bf00      	nop
 8010b68:	20001f3c 	.word	0x20001f3c

08010b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b086      	sub	sp, #24
 8010b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010b72:	2300      	movs	r3, #0
 8010b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b76:	4b50      	ldr	r3, [pc, #320]	; (8010cb8 <xTaskIncrementTick+0x14c>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	f040 808b 	bne.w	8010c96 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010b80:	4b4e      	ldr	r3, [pc, #312]	; (8010cbc <xTaskIncrementTick+0x150>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	3301      	adds	r3, #1
 8010b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010b88:	4a4c      	ldr	r2, [pc, #304]	; (8010cbc <xTaskIncrementTick+0x150>)
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d122      	bne.n	8010bda <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8010b94:	4b4a      	ldr	r3, [pc, #296]	; (8010cc0 <xTaskIncrementTick+0x154>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d00c      	beq.n	8010bb8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8010b9e:	f04f 0310 	mov.w	r3, #16
 8010ba2:	b672      	cpsid	i
 8010ba4:	f383 8811 	msr	BASEPRI, r3
 8010ba8:	f3bf 8f6f 	isb	sy
 8010bac:	f3bf 8f4f 	dsb	sy
 8010bb0:	b662      	cpsie	i
 8010bb2:	603b      	str	r3, [r7, #0]
}
 8010bb4:	bf00      	nop
 8010bb6:	e7fe      	b.n	8010bb6 <xTaskIncrementTick+0x4a>
 8010bb8:	4b41      	ldr	r3, [pc, #260]	; (8010cc0 <xTaskIncrementTick+0x154>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	60fb      	str	r3, [r7, #12]
 8010bbe:	4b41      	ldr	r3, [pc, #260]	; (8010cc4 <xTaskIncrementTick+0x158>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4a3f      	ldr	r2, [pc, #252]	; (8010cc0 <xTaskIncrementTick+0x154>)
 8010bc4:	6013      	str	r3, [r2, #0]
 8010bc6:	4a3f      	ldr	r2, [pc, #252]	; (8010cc4 <xTaskIncrementTick+0x158>)
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	6013      	str	r3, [r2, #0]
 8010bcc:	4b3e      	ldr	r3, [pc, #248]	; (8010cc8 <xTaskIncrementTick+0x15c>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	4a3d      	ldr	r2, [pc, #244]	; (8010cc8 <xTaskIncrementTick+0x15c>)
 8010bd4:	6013      	str	r3, [r2, #0]
 8010bd6:	f000 fae9 	bl	80111ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010bda:	4b3c      	ldr	r3, [pc, #240]	; (8010ccc <xTaskIncrementTick+0x160>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	693a      	ldr	r2, [r7, #16]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d349      	bcc.n	8010c78 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010be4:	4b36      	ldr	r3, [pc, #216]	; (8010cc0 <xTaskIncrementTick+0x154>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d104      	bne.n	8010bf8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bee:	4b37      	ldr	r3, [pc, #220]	; (8010ccc <xTaskIncrementTick+0x160>)
 8010bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8010bf4:	601a      	str	r2, [r3, #0]
					break;
 8010bf6:	e03f      	b.n	8010c78 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bf8:	4b31      	ldr	r3, [pc, #196]	; (8010cc0 <xTaskIncrementTick+0x154>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010c08:	693a      	ldr	r2, [r7, #16]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d203      	bcs.n	8010c18 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010c10:	4a2e      	ldr	r2, [pc, #184]	; (8010ccc <xTaskIncrementTick+0x160>)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010c16:	e02f      	b.n	8010c78 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	3304      	adds	r3, #4
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fe fbfd 	bl	800f41c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d004      	beq.n	8010c34 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	3318      	adds	r3, #24
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fe fbf4 	bl	800f41c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c38:	4b25      	ldr	r3, [pc, #148]	; (8010cd0 <xTaskIncrementTick+0x164>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d903      	bls.n	8010c48 <xTaskIncrementTick+0xdc>
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c44:	4a22      	ldr	r2, [pc, #136]	; (8010cd0 <xTaskIncrementTick+0x164>)
 8010c46:	6013      	str	r3, [r2, #0]
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c4c:	4613      	mov	r3, r2
 8010c4e:	009b      	lsls	r3, r3, #2
 8010c50:	4413      	add	r3, r2
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	4a1f      	ldr	r2, [pc, #124]	; (8010cd4 <xTaskIncrementTick+0x168>)
 8010c56:	441a      	add	r2, r3
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	3304      	adds	r3, #4
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	4610      	mov	r0, r2
 8010c60:	f7fe fb7f 	bl	800f362 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c68:	4b1b      	ldr	r3, [pc, #108]	; (8010cd8 <xTaskIncrementTick+0x16c>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d3b8      	bcc.n	8010be4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8010c72:	2301      	movs	r3, #1
 8010c74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c76:	e7b5      	b.n	8010be4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010c78:	4b17      	ldr	r3, [pc, #92]	; (8010cd8 <xTaskIncrementTick+0x16c>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c7e:	4915      	ldr	r1, [pc, #84]	; (8010cd4 <xTaskIncrementTick+0x168>)
 8010c80:	4613      	mov	r3, r2
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	4413      	add	r3, r2
 8010c86:	009b      	lsls	r3, r3, #2
 8010c88:	440b      	add	r3, r1
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d907      	bls.n	8010ca0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8010c90:	2301      	movs	r3, #1
 8010c92:	617b      	str	r3, [r7, #20]
 8010c94:	e004      	b.n	8010ca0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010c96:	4b11      	ldr	r3, [pc, #68]	; (8010cdc <xTaskIncrementTick+0x170>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	4a0f      	ldr	r2, [pc, #60]	; (8010cdc <xTaskIncrementTick+0x170>)
 8010c9e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010ca0:	4b0f      	ldr	r3, [pc, #60]	; (8010ce0 <xTaskIncrementTick+0x174>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d001      	beq.n	8010cac <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010cac:	697b      	ldr	r3, [r7, #20]
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3718      	adds	r7, #24
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	20001f60 	.word	0x20001f60
 8010cbc:	20001f3c 	.word	0x20001f3c
 8010cc0:	20001ef0 	.word	0x20001ef0
 8010cc4:	20001ef4 	.word	0x20001ef4
 8010cc8:	20001f50 	.word	0x20001f50
 8010ccc:	20001f58 	.word	0x20001f58
 8010cd0:	20001f40 	.word	0x20001f40
 8010cd4:	20001a68 	.word	0x20001a68
 8010cd8:	20001a64 	.word	0x20001a64
 8010cdc:	20001f48 	.word	0x20001f48
 8010ce0:	20001f4c 	.word	0x20001f4c

08010ce4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b085      	sub	sp, #20
 8010ce8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010cea:	4b2b      	ldr	r3, [pc, #172]	; (8010d98 <vTaskSwitchContext+0xb4>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d003      	beq.n	8010cfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010cf2:	4b2a      	ldr	r3, [pc, #168]	; (8010d9c <vTaskSwitchContext+0xb8>)
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010cf8:	e048      	b.n	8010d8c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8010cfa:	4b28      	ldr	r3, [pc, #160]	; (8010d9c <vTaskSwitchContext+0xb8>)
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d00:	4b27      	ldr	r3, [pc, #156]	; (8010da0 <vTaskSwitchContext+0xbc>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	60fb      	str	r3, [r7, #12]
 8010d06:	e012      	b.n	8010d2e <vTaskSwitchContext+0x4a>
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d10c      	bne.n	8010d28 <vTaskSwitchContext+0x44>
	__asm volatile
 8010d0e:	f04f 0310 	mov.w	r3, #16
 8010d12:	b672      	cpsid	i
 8010d14:	f383 8811 	msr	BASEPRI, r3
 8010d18:	f3bf 8f6f 	isb	sy
 8010d1c:	f3bf 8f4f 	dsb	sy
 8010d20:	b662      	cpsie	i
 8010d22:	607b      	str	r3, [r7, #4]
}
 8010d24:	bf00      	nop
 8010d26:	e7fe      	b.n	8010d26 <vTaskSwitchContext+0x42>
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	60fb      	str	r3, [r7, #12]
 8010d2e:	491d      	ldr	r1, [pc, #116]	; (8010da4 <vTaskSwitchContext+0xc0>)
 8010d30:	68fa      	ldr	r2, [r7, #12]
 8010d32:	4613      	mov	r3, r2
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	4413      	add	r3, r2
 8010d38:	009b      	lsls	r3, r3, #2
 8010d3a:	440b      	add	r3, r1
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d0e2      	beq.n	8010d08 <vTaskSwitchContext+0x24>
 8010d42:	68fa      	ldr	r2, [r7, #12]
 8010d44:	4613      	mov	r3, r2
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	4413      	add	r3, r2
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	4a15      	ldr	r2, [pc, #84]	; (8010da4 <vTaskSwitchContext+0xc0>)
 8010d4e:	4413      	add	r3, r2
 8010d50:	60bb      	str	r3, [r7, #8]
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	685a      	ldr	r2, [r3, #4]
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	605a      	str	r2, [r3, #4]
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	685a      	ldr	r2, [r3, #4]
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	3308      	adds	r3, #8
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d104      	bne.n	8010d72 <vTaskSwitchContext+0x8e>
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	685b      	ldr	r3, [r3, #4]
 8010d6c:	685a      	ldr	r2, [r3, #4]
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	605a      	str	r2, [r3, #4]
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	4a0b      	ldr	r2, [pc, #44]	; (8010da8 <vTaskSwitchContext+0xc4>)
 8010d7a:	6013      	str	r3, [r2, #0]
 8010d7c:	4a08      	ldr	r2, [pc, #32]	; (8010da0 <vTaskSwitchContext+0xbc>)
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010d82:	4b09      	ldr	r3, [pc, #36]	; (8010da8 <vTaskSwitchContext+0xc4>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	3354      	adds	r3, #84	; 0x54
 8010d88:	4a08      	ldr	r2, [pc, #32]	; (8010dac <vTaskSwitchContext+0xc8>)
 8010d8a:	6013      	str	r3, [r2, #0]
}
 8010d8c:	bf00      	nop
 8010d8e:	3714      	adds	r7, #20
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr
 8010d98:	20001f60 	.word	0x20001f60
 8010d9c:	20001f4c 	.word	0x20001f4c
 8010da0:	20001f40 	.word	0x20001f40
 8010da4:	20001a68 	.word	0x20001a68
 8010da8:	20001a64 	.word	0x20001a64
 8010dac:	200001e4 	.word	0x200001e4

08010db0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d10c      	bne.n	8010dda <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8010dc0:	f04f 0310 	mov.w	r3, #16
 8010dc4:	b672      	cpsid	i
 8010dc6:	f383 8811 	msr	BASEPRI, r3
 8010dca:	f3bf 8f6f 	isb	sy
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	b662      	cpsie	i
 8010dd4:	60fb      	str	r3, [r7, #12]
}
 8010dd6:	bf00      	nop
 8010dd8:	e7fe      	b.n	8010dd8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010dda:	4b07      	ldr	r3, [pc, #28]	; (8010df8 <vTaskPlaceOnEventList+0x48>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	3318      	adds	r3, #24
 8010de0:	4619      	mov	r1, r3
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f7fe fae1 	bl	800f3aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010de8:	2101      	movs	r1, #1
 8010dea:	6838      	ldr	r0, [r7, #0]
 8010dec:	f000 fb90 	bl	8011510 <prvAddCurrentTaskToDelayedList>
}
 8010df0:	bf00      	nop
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	20001a64 	.word	0x20001a64

08010dfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b086      	sub	sp, #24
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	60f8      	str	r0, [r7, #12]
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d10c      	bne.n	8010e28 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8010e0e:	f04f 0310 	mov.w	r3, #16
 8010e12:	b672      	cpsid	i
 8010e14:	f383 8811 	msr	BASEPRI, r3
 8010e18:	f3bf 8f6f 	isb	sy
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	b662      	cpsie	i
 8010e22:	617b      	str	r3, [r7, #20]
}
 8010e24:	bf00      	nop
 8010e26:	e7fe      	b.n	8010e26 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e28:	4b0a      	ldr	r3, [pc, #40]	; (8010e54 <vTaskPlaceOnEventListRestricted+0x58>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	3318      	adds	r3, #24
 8010e2e:	4619      	mov	r1, r3
 8010e30:	68f8      	ldr	r0, [r7, #12]
 8010e32:	f7fe fa96 	bl	800f362 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8010e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010e42:	6879      	ldr	r1, [r7, #4]
 8010e44:	68b8      	ldr	r0, [r7, #8]
 8010e46:	f000 fb63 	bl	8011510 <prvAddCurrentTaskToDelayedList>
	}
 8010e4a:	bf00      	nop
 8010e4c:	3718      	adds	r7, #24
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	bf00      	nop
 8010e54:	20001a64 	.word	0x20001a64

08010e58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b086      	sub	sp, #24
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d10c      	bne.n	8010e88 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8010e6e:	f04f 0310 	mov.w	r3, #16
 8010e72:	b672      	cpsid	i
 8010e74:	f383 8811 	msr	BASEPRI, r3
 8010e78:	f3bf 8f6f 	isb	sy
 8010e7c:	f3bf 8f4f 	dsb	sy
 8010e80:	b662      	cpsie	i
 8010e82:	60fb      	str	r3, [r7, #12]
}
 8010e84:	bf00      	nop
 8010e86:	e7fe      	b.n	8010e86 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	3318      	adds	r3, #24
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7fe fac5 	bl	800f41c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e92:	4b1e      	ldr	r3, [pc, #120]	; (8010f0c <xTaskRemoveFromEventList+0xb4>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d11d      	bne.n	8010ed6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	3304      	adds	r3, #4
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fe fabc 	bl	800f41c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ea8:	4b19      	ldr	r3, [pc, #100]	; (8010f10 <xTaskRemoveFromEventList+0xb8>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d903      	bls.n	8010eb8 <xTaskRemoveFromEventList+0x60>
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eb4:	4a16      	ldr	r2, [pc, #88]	; (8010f10 <xTaskRemoveFromEventList+0xb8>)
 8010eb6:	6013      	str	r3, [r2, #0]
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ebc:	4613      	mov	r3, r2
 8010ebe:	009b      	lsls	r3, r3, #2
 8010ec0:	4413      	add	r3, r2
 8010ec2:	009b      	lsls	r3, r3, #2
 8010ec4:	4a13      	ldr	r2, [pc, #76]	; (8010f14 <xTaskRemoveFromEventList+0xbc>)
 8010ec6:	441a      	add	r2, r3
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	3304      	adds	r3, #4
 8010ecc:	4619      	mov	r1, r3
 8010ece:	4610      	mov	r0, r2
 8010ed0:	f7fe fa47 	bl	800f362 <vListInsertEnd>
 8010ed4:	e005      	b.n	8010ee2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	3318      	adds	r3, #24
 8010eda:	4619      	mov	r1, r3
 8010edc:	480e      	ldr	r0, [pc, #56]	; (8010f18 <xTaskRemoveFromEventList+0xc0>)
 8010ede:	f7fe fa40 	bl	800f362 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ee6:	4b0d      	ldr	r3, [pc, #52]	; (8010f1c <xTaskRemoveFromEventList+0xc4>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d905      	bls.n	8010efc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010ef4:	4b0a      	ldr	r3, [pc, #40]	; (8010f20 <xTaskRemoveFromEventList+0xc8>)
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	601a      	str	r2, [r3, #0]
 8010efa:	e001      	b.n	8010f00 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8010efc:	2300      	movs	r3, #0
 8010efe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010f00:	697b      	ldr	r3, [r7, #20]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3718      	adds	r7, #24
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	20001f60 	.word	0x20001f60
 8010f10:	20001f40 	.word	0x20001f40
 8010f14:	20001a68 	.word	0x20001a68
 8010f18:	20001ef8 	.word	0x20001ef8
 8010f1c:	20001a64 	.word	0x20001a64
 8010f20:	20001f4c 	.word	0x20001f4c

08010f24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010f24:	b480      	push	{r7}
 8010f26:	b083      	sub	sp, #12
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010f2c:	4b06      	ldr	r3, [pc, #24]	; (8010f48 <vTaskInternalSetTimeOutState+0x24>)
 8010f2e:	681a      	ldr	r2, [r3, #0]
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010f34:	4b05      	ldr	r3, [pc, #20]	; (8010f4c <vTaskInternalSetTimeOutState+0x28>)
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	605a      	str	r2, [r3, #4]
}
 8010f3c:	bf00      	nop
 8010f3e:	370c      	adds	r7, #12
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr
 8010f48:	20001f50 	.word	0x20001f50
 8010f4c:	20001f3c 	.word	0x20001f3c

08010f50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b088      	sub	sp, #32
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d10c      	bne.n	8010f7a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010f60:	f04f 0310 	mov.w	r3, #16
 8010f64:	b672      	cpsid	i
 8010f66:	f383 8811 	msr	BASEPRI, r3
 8010f6a:	f3bf 8f6f 	isb	sy
 8010f6e:	f3bf 8f4f 	dsb	sy
 8010f72:	b662      	cpsie	i
 8010f74:	613b      	str	r3, [r7, #16]
}
 8010f76:	bf00      	nop
 8010f78:	e7fe      	b.n	8010f78 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d10c      	bne.n	8010f9a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010f80:	f04f 0310 	mov.w	r3, #16
 8010f84:	b672      	cpsid	i
 8010f86:	f383 8811 	msr	BASEPRI, r3
 8010f8a:	f3bf 8f6f 	isb	sy
 8010f8e:	f3bf 8f4f 	dsb	sy
 8010f92:	b662      	cpsie	i
 8010f94:	60fb      	str	r3, [r7, #12]
}
 8010f96:	bf00      	nop
 8010f98:	e7fe      	b.n	8010f98 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010f9a:	f000 ff77 	bl	8011e8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010f9e:	4b1d      	ldr	r3, [pc, #116]	; (8011014 <xTaskCheckForTimeOut+0xc4>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	69ba      	ldr	r2, [r7, #24]
 8010faa:	1ad3      	subs	r3, r2, r3
 8010fac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fb6:	d102      	bne.n	8010fbe <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	61fb      	str	r3, [r7, #28]
 8010fbc:	e023      	b.n	8011006 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681a      	ldr	r2, [r3, #0]
 8010fc2:	4b15      	ldr	r3, [pc, #84]	; (8011018 <xTaskCheckForTimeOut+0xc8>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d007      	beq.n	8010fda <xTaskCheckForTimeOut+0x8a>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	69ba      	ldr	r2, [r7, #24]
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d302      	bcc.n	8010fda <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	61fb      	str	r3, [r7, #28]
 8010fd8:	e015      	b.n	8011006 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	697a      	ldr	r2, [r7, #20]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d20b      	bcs.n	8010ffc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	1ad2      	subs	r2, r2, r3
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f7ff ff97 	bl	8010f24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	61fb      	str	r3, [r7, #28]
 8010ffa:	e004      	b.n	8011006 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	2200      	movs	r2, #0
 8011000:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011002:	2301      	movs	r3, #1
 8011004:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011006:	f000 ff75 	bl	8011ef4 <vPortExitCritical>

	return xReturn;
 801100a:	69fb      	ldr	r3, [r7, #28]
}
 801100c:	4618      	mov	r0, r3
 801100e:	3720      	adds	r7, #32
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	20001f3c 	.word	0x20001f3c
 8011018:	20001f50 	.word	0x20001f50

0801101c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801101c:	b480      	push	{r7}
 801101e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011020:	4b03      	ldr	r3, [pc, #12]	; (8011030 <vTaskMissedYield+0x14>)
 8011022:	2201      	movs	r2, #1
 8011024:	601a      	str	r2, [r3, #0]
}
 8011026:	bf00      	nop
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr
 8011030:	20001f4c 	.word	0x20001f4c

08011034 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801103c:	f000 f852 	bl	80110e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011040:	4b06      	ldr	r3, [pc, #24]	; (801105c <prvIdleTask+0x28>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b01      	cmp	r3, #1
 8011046:	d9f9      	bls.n	801103c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011048:	4b05      	ldr	r3, [pc, #20]	; (8011060 <prvIdleTask+0x2c>)
 801104a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801104e:	601a      	str	r2, [r3, #0]
 8011050:	f3bf 8f4f 	dsb	sy
 8011054:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011058:	e7f0      	b.n	801103c <prvIdleTask+0x8>
 801105a:	bf00      	nop
 801105c:	20001a68 	.word	0x20001a68
 8011060:	e000ed04 	.word	0xe000ed04

08011064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801106a:	2300      	movs	r3, #0
 801106c:	607b      	str	r3, [r7, #4]
 801106e:	e00c      	b.n	801108a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	4613      	mov	r3, r2
 8011074:	009b      	lsls	r3, r3, #2
 8011076:	4413      	add	r3, r2
 8011078:	009b      	lsls	r3, r3, #2
 801107a:	4a12      	ldr	r2, [pc, #72]	; (80110c4 <prvInitialiseTaskLists+0x60>)
 801107c:	4413      	add	r3, r2
 801107e:	4618      	mov	r0, r3
 8011080:	f7fe f942 	bl	800f308 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	3301      	adds	r3, #1
 8011088:	607b      	str	r3, [r7, #4]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2b37      	cmp	r3, #55	; 0x37
 801108e:	d9ef      	bls.n	8011070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011090:	480d      	ldr	r0, [pc, #52]	; (80110c8 <prvInitialiseTaskLists+0x64>)
 8011092:	f7fe f939 	bl	800f308 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011096:	480d      	ldr	r0, [pc, #52]	; (80110cc <prvInitialiseTaskLists+0x68>)
 8011098:	f7fe f936 	bl	800f308 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801109c:	480c      	ldr	r0, [pc, #48]	; (80110d0 <prvInitialiseTaskLists+0x6c>)
 801109e:	f7fe f933 	bl	800f308 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80110a2:	480c      	ldr	r0, [pc, #48]	; (80110d4 <prvInitialiseTaskLists+0x70>)
 80110a4:	f7fe f930 	bl	800f308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80110a8:	480b      	ldr	r0, [pc, #44]	; (80110d8 <prvInitialiseTaskLists+0x74>)
 80110aa:	f7fe f92d 	bl	800f308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80110ae:	4b0b      	ldr	r3, [pc, #44]	; (80110dc <prvInitialiseTaskLists+0x78>)
 80110b0:	4a05      	ldr	r2, [pc, #20]	; (80110c8 <prvInitialiseTaskLists+0x64>)
 80110b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80110b4:	4b0a      	ldr	r3, [pc, #40]	; (80110e0 <prvInitialiseTaskLists+0x7c>)
 80110b6:	4a05      	ldr	r2, [pc, #20]	; (80110cc <prvInitialiseTaskLists+0x68>)
 80110b8:	601a      	str	r2, [r3, #0]
}
 80110ba:	bf00      	nop
 80110bc:	3708      	adds	r7, #8
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	20001a68 	.word	0x20001a68
 80110c8:	20001ec8 	.word	0x20001ec8
 80110cc:	20001edc 	.word	0x20001edc
 80110d0:	20001ef8 	.word	0x20001ef8
 80110d4:	20001f0c 	.word	0x20001f0c
 80110d8:	20001f24 	.word	0x20001f24
 80110dc:	20001ef0 	.word	0x20001ef0
 80110e0:	20001ef4 	.word	0x20001ef4

080110e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80110ea:	e019      	b.n	8011120 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80110ec:	f000 fece 	bl	8011e8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110f0:	4b10      	ldr	r3, [pc, #64]	; (8011134 <prvCheckTasksWaitingTermination+0x50>)
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	68db      	ldr	r3, [r3, #12]
 80110f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	3304      	adds	r3, #4
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7fe f98d 	bl	800f41c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011102:	4b0d      	ldr	r3, [pc, #52]	; (8011138 <prvCheckTasksWaitingTermination+0x54>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	3b01      	subs	r3, #1
 8011108:	4a0b      	ldr	r2, [pc, #44]	; (8011138 <prvCheckTasksWaitingTermination+0x54>)
 801110a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801110c:	4b0b      	ldr	r3, [pc, #44]	; (801113c <prvCheckTasksWaitingTermination+0x58>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	3b01      	subs	r3, #1
 8011112:	4a0a      	ldr	r2, [pc, #40]	; (801113c <prvCheckTasksWaitingTermination+0x58>)
 8011114:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011116:	f000 feed 	bl	8011ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 f810 	bl	8011140 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011120:	4b06      	ldr	r3, [pc, #24]	; (801113c <prvCheckTasksWaitingTermination+0x58>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d1e1      	bne.n	80110ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011128:	bf00      	nop
 801112a:	bf00      	nop
 801112c:	3708      	adds	r7, #8
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	20001f0c 	.word	0x20001f0c
 8011138:	20001f38 	.word	0x20001f38
 801113c:	20001f20 	.word	0x20001f20

08011140 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	3354      	adds	r3, #84	; 0x54
 801114c:	4618      	mov	r0, r3
 801114e:	f002 f859 	bl	8013204 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011158:	2b00      	cmp	r3, #0
 801115a:	d108      	bne.n	801116e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011160:	4618      	mov	r0, r3
 8011162:	f001 f889 	bl	8012278 <vPortFree>
				vPortFree( pxTCB );
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f001 f886 	bl	8012278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801116c:	e01a      	b.n	80111a4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011174:	2b01      	cmp	r3, #1
 8011176:	d103      	bne.n	8011180 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f001 f87d 	bl	8012278 <vPortFree>
	}
 801117e:	e011      	b.n	80111a4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011186:	2b02      	cmp	r3, #2
 8011188:	d00c      	beq.n	80111a4 <prvDeleteTCB+0x64>
	__asm volatile
 801118a:	f04f 0310 	mov.w	r3, #16
 801118e:	b672      	cpsid	i
 8011190:	f383 8811 	msr	BASEPRI, r3
 8011194:	f3bf 8f6f 	isb	sy
 8011198:	f3bf 8f4f 	dsb	sy
 801119c:	b662      	cpsie	i
 801119e:	60fb      	str	r3, [r7, #12]
}
 80111a0:	bf00      	nop
 80111a2:	e7fe      	b.n	80111a2 <prvDeleteTCB+0x62>
	}
 80111a4:	bf00      	nop
 80111a6:	3710      	adds	r7, #16
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111b2:	4b0c      	ldr	r3, [pc, #48]	; (80111e4 <prvResetNextTaskUnblockTime+0x38>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d104      	bne.n	80111c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80111bc:	4b0a      	ldr	r3, [pc, #40]	; (80111e8 <prvResetNextTaskUnblockTime+0x3c>)
 80111be:	f04f 32ff 	mov.w	r2, #4294967295
 80111c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80111c4:	e008      	b.n	80111d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111c6:	4b07      	ldr	r3, [pc, #28]	; (80111e4 <prvResetNextTaskUnblockTime+0x38>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	4a04      	ldr	r2, [pc, #16]	; (80111e8 <prvResetNextTaskUnblockTime+0x3c>)
 80111d6:	6013      	str	r3, [r2, #0]
}
 80111d8:	bf00      	nop
 80111da:	370c      	adds	r7, #12
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr
 80111e4:	20001ef0 	.word	0x20001ef0
 80111e8:	20001f58 	.word	0x20001f58

080111ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80111ec:	b480      	push	{r7}
 80111ee:	b083      	sub	sp, #12
 80111f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80111f2:	4b0b      	ldr	r3, [pc, #44]	; (8011220 <xTaskGetSchedulerState+0x34>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d102      	bne.n	8011200 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80111fa:	2301      	movs	r3, #1
 80111fc:	607b      	str	r3, [r7, #4]
 80111fe:	e008      	b.n	8011212 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011200:	4b08      	ldr	r3, [pc, #32]	; (8011224 <xTaskGetSchedulerState+0x38>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d102      	bne.n	801120e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011208:	2302      	movs	r3, #2
 801120a:	607b      	str	r3, [r7, #4]
 801120c:	e001      	b.n	8011212 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801120e:	2300      	movs	r3, #0
 8011210:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011212:	687b      	ldr	r3, [r7, #4]
	}
 8011214:	4618      	mov	r0, r3
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	20001f44 	.word	0x20001f44
 8011224:	20001f60 	.word	0x20001f60

08011228 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011234:	2300      	movs	r3, #0
 8011236:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d051      	beq.n	80112e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011242:	4b2a      	ldr	r3, [pc, #168]	; (80112ec <xTaskPriorityInherit+0xc4>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011248:	429a      	cmp	r2, r3
 801124a:	d241      	bcs.n	80112d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	699b      	ldr	r3, [r3, #24]
 8011250:	2b00      	cmp	r3, #0
 8011252:	db06      	blt.n	8011262 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011254:	4b25      	ldr	r3, [pc, #148]	; (80112ec <xTaskPriorityInherit+0xc4>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801125a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	6959      	ldr	r1, [r3, #20]
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801126a:	4613      	mov	r3, r2
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	4413      	add	r3, r2
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	4a1f      	ldr	r2, [pc, #124]	; (80112f0 <xTaskPriorityInherit+0xc8>)
 8011274:	4413      	add	r3, r2
 8011276:	4299      	cmp	r1, r3
 8011278:	d122      	bne.n	80112c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	3304      	adds	r3, #4
 801127e:	4618      	mov	r0, r3
 8011280:	f7fe f8cc 	bl	800f41c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011284:	4b19      	ldr	r3, [pc, #100]	; (80112ec <xTaskPriorityInherit+0xc4>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011292:	4b18      	ldr	r3, [pc, #96]	; (80112f4 <xTaskPriorityInherit+0xcc>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	429a      	cmp	r2, r3
 8011298:	d903      	bls.n	80112a2 <xTaskPriorityInherit+0x7a>
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801129e:	4a15      	ldr	r2, [pc, #84]	; (80112f4 <xTaskPriorityInherit+0xcc>)
 80112a0:	6013      	str	r3, [r2, #0]
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112a6:	4613      	mov	r3, r2
 80112a8:	009b      	lsls	r3, r3, #2
 80112aa:	4413      	add	r3, r2
 80112ac:	009b      	lsls	r3, r3, #2
 80112ae:	4a10      	ldr	r2, [pc, #64]	; (80112f0 <xTaskPriorityInherit+0xc8>)
 80112b0:	441a      	add	r2, r3
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	3304      	adds	r3, #4
 80112b6:	4619      	mov	r1, r3
 80112b8:	4610      	mov	r0, r2
 80112ba:	f7fe f852 	bl	800f362 <vListInsertEnd>
 80112be:	e004      	b.n	80112ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80112c0:	4b0a      	ldr	r3, [pc, #40]	; (80112ec <xTaskPriorityInherit+0xc4>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80112ca:	2301      	movs	r3, #1
 80112cc:	60fb      	str	r3, [r7, #12]
 80112ce:	e008      	b.n	80112e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112d4:	4b05      	ldr	r3, [pc, #20]	; (80112ec <xTaskPriorityInherit+0xc4>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112da:	429a      	cmp	r2, r3
 80112dc:	d201      	bcs.n	80112e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80112de:	2301      	movs	r3, #1
 80112e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80112e2:	68fb      	ldr	r3, [r7, #12]
	}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3710      	adds	r7, #16
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	20001a64 	.word	0x20001a64
 80112f0:	20001a68 	.word	0x20001a68
 80112f4:	20001f40 	.word	0x20001f40

080112f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b086      	sub	sp, #24
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011304:	2300      	movs	r3, #0
 8011306:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d05a      	beq.n	80113c4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801130e:	4b30      	ldr	r3, [pc, #192]	; (80113d0 <xTaskPriorityDisinherit+0xd8>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	693a      	ldr	r2, [r7, #16]
 8011314:	429a      	cmp	r2, r3
 8011316:	d00c      	beq.n	8011332 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011318:	f04f 0310 	mov.w	r3, #16
 801131c:	b672      	cpsid	i
 801131e:	f383 8811 	msr	BASEPRI, r3
 8011322:	f3bf 8f6f 	isb	sy
 8011326:	f3bf 8f4f 	dsb	sy
 801132a:	b662      	cpsie	i
 801132c:	60fb      	str	r3, [r7, #12]
}
 801132e:	bf00      	nop
 8011330:	e7fe      	b.n	8011330 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011336:	2b00      	cmp	r3, #0
 8011338:	d10c      	bne.n	8011354 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801133a:	f04f 0310 	mov.w	r3, #16
 801133e:	b672      	cpsid	i
 8011340:	f383 8811 	msr	BASEPRI, r3
 8011344:	f3bf 8f6f 	isb	sy
 8011348:	f3bf 8f4f 	dsb	sy
 801134c:	b662      	cpsie	i
 801134e:	60bb      	str	r3, [r7, #8]
}
 8011350:	bf00      	nop
 8011352:	e7fe      	b.n	8011352 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011358:	1e5a      	subs	r2, r3, #1
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011366:	429a      	cmp	r2, r3
 8011368:	d02c      	beq.n	80113c4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801136e:	2b00      	cmp	r3, #0
 8011370:	d128      	bne.n	80113c4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	3304      	adds	r3, #4
 8011376:	4618      	mov	r0, r3
 8011378:	f7fe f850 	bl	800f41c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011388:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011390:	693b      	ldr	r3, [r7, #16]
 8011392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011394:	4b0f      	ldr	r3, [pc, #60]	; (80113d4 <xTaskPriorityDisinherit+0xdc>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	429a      	cmp	r2, r3
 801139a:	d903      	bls.n	80113a4 <xTaskPriorityDisinherit+0xac>
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a0:	4a0c      	ldr	r2, [pc, #48]	; (80113d4 <xTaskPriorityDisinherit+0xdc>)
 80113a2:	6013      	str	r3, [r2, #0]
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113a8:	4613      	mov	r3, r2
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	4413      	add	r3, r2
 80113ae:	009b      	lsls	r3, r3, #2
 80113b0:	4a09      	ldr	r2, [pc, #36]	; (80113d8 <xTaskPriorityDisinherit+0xe0>)
 80113b2:	441a      	add	r2, r3
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	3304      	adds	r3, #4
 80113b8:	4619      	mov	r1, r3
 80113ba:	4610      	mov	r0, r2
 80113bc:	f7fd ffd1 	bl	800f362 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80113c0:	2301      	movs	r3, #1
 80113c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80113c4:	697b      	ldr	r3, [r7, #20]
	}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3718      	adds	r7, #24
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	20001a64 	.word	0x20001a64
 80113d4:	20001f40 	.word	0x20001f40
 80113d8:	20001a68 	.word	0x20001a68

080113dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b088      	sub	sp, #32
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80113ea:	2301      	movs	r3, #1
 80113ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d06e      	beq.n	80114d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80113f4:	69bb      	ldr	r3, [r7, #24]
 80113f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d10c      	bne.n	8011416 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80113fc:	f04f 0310 	mov.w	r3, #16
 8011400:	b672      	cpsid	i
 8011402:	f383 8811 	msr	BASEPRI, r3
 8011406:	f3bf 8f6f 	isb	sy
 801140a:	f3bf 8f4f 	dsb	sy
 801140e:	b662      	cpsie	i
 8011410:	60fb      	str	r3, [r7, #12]
}
 8011412:	bf00      	nop
 8011414:	e7fe      	b.n	8011414 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801141a:	683a      	ldr	r2, [r7, #0]
 801141c:	429a      	cmp	r2, r3
 801141e:	d902      	bls.n	8011426 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	61fb      	str	r3, [r7, #28]
 8011424:	e002      	b.n	801142c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801142a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801142c:	69bb      	ldr	r3, [r7, #24]
 801142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011430:	69fa      	ldr	r2, [r7, #28]
 8011432:	429a      	cmp	r2, r3
 8011434:	d04d      	beq.n	80114d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011436:	69bb      	ldr	r3, [r7, #24]
 8011438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801143a:	697a      	ldr	r2, [r7, #20]
 801143c:	429a      	cmp	r2, r3
 801143e:	d148      	bne.n	80114d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011440:	4b26      	ldr	r3, [pc, #152]	; (80114dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	69ba      	ldr	r2, [r7, #24]
 8011446:	429a      	cmp	r2, r3
 8011448:	d10c      	bne.n	8011464 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 801144a:	f04f 0310 	mov.w	r3, #16
 801144e:	b672      	cpsid	i
 8011450:	f383 8811 	msr	BASEPRI, r3
 8011454:	f3bf 8f6f 	isb	sy
 8011458:	f3bf 8f4f 	dsb	sy
 801145c:	b662      	cpsie	i
 801145e:	60bb      	str	r3, [r7, #8]
}
 8011460:	bf00      	nop
 8011462:	e7fe      	b.n	8011462 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011464:	69bb      	ldr	r3, [r7, #24]
 8011466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011468:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801146a:	69bb      	ldr	r3, [r7, #24]
 801146c:	69fa      	ldr	r2, [r7, #28]
 801146e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	699b      	ldr	r3, [r3, #24]
 8011474:	2b00      	cmp	r3, #0
 8011476:	db04      	blt.n	8011482 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801147e:	69bb      	ldr	r3, [r7, #24]
 8011480:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	6959      	ldr	r1, [r3, #20]
 8011486:	693a      	ldr	r2, [r7, #16]
 8011488:	4613      	mov	r3, r2
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4413      	add	r3, r2
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4a13      	ldr	r2, [pc, #76]	; (80114e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011492:	4413      	add	r3, r2
 8011494:	4299      	cmp	r1, r3
 8011496:	d11c      	bne.n	80114d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011498:	69bb      	ldr	r3, [r7, #24]
 801149a:	3304      	adds	r3, #4
 801149c:	4618      	mov	r0, r3
 801149e:	f7fd ffbd 	bl	800f41c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114a6:	4b0f      	ldr	r3, [pc, #60]	; (80114e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d903      	bls.n	80114b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80114ae:	69bb      	ldr	r3, [r7, #24]
 80114b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b2:	4a0c      	ldr	r2, [pc, #48]	; (80114e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80114b4:	6013      	str	r3, [r2, #0]
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ba:	4613      	mov	r3, r2
 80114bc:	009b      	lsls	r3, r3, #2
 80114be:	4413      	add	r3, r2
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	4a07      	ldr	r2, [pc, #28]	; (80114e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80114c4:	441a      	add	r2, r3
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	3304      	adds	r3, #4
 80114ca:	4619      	mov	r1, r3
 80114cc:	4610      	mov	r0, r2
 80114ce:	f7fd ff48 	bl	800f362 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80114d2:	bf00      	nop
 80114d4:	3720      	adds	r7, #32
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop
 80114dc:	20001a64 	.word	0x20001a64
 80114e0:	20001a68 	.word	0x20001a68
 80114e4:	20001f40 	.word	0x20001f40

080114e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80114e8:	b480      	push	{r7}
 80114ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80114ec:	4b07      	ldr	r3, [pc, #28]	; (801150c <pvTaskIncrementMutexHeldCount+0x24>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d004      	beq.n	80114fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80114f4:	4b05      	ldr	r3, [pc, #20]	; (801150c <pvTaskIncrementMutexHeldCount+0x24>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114fa:	3201      	adds	r2, #1
 80114fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80114fe:	4b03      	ldr	r3, [pc, #12]	; (801150c <pvTaskIncrementMutexHeldCount+0x24>)
 8011500:	681b      	ldr	r3, [r3, #0]
	}
 8011502:	4618      	mov	r0, r3
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr
 801150c:	20001a64 	.word	0x20001a64

08011510 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801151a:	4b21      	ldr	r3, [pc, #132]	; (80115a0 <prvAddCurrentTaskToDelayedList+0x90>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011520:	4b20      	ldr	r3, [pc, #128]	; (80115a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	3304      	adds	r3, #4
 8011526:	4618      	mov	r0, r3
 8011528:	f7fd ff78 	bl	800f41c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011532:	d10a      	bne.n	801154a <prvAddCurrentTaskToDelayedList+0x3a>
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d007      	beq.n	801154a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801153a:	4b1a      	ldr	r3, [pc, #104]	; (80115a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	3304      	adds	r3, #4
 8011540:	4619      	mov	r1, r3
 8011542:	4819      	ldr	r0, [pc, #100]	; (80115a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011544:	f7fd ff0d 	bl	800f362 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011548:	e026      	b.n	8011598 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801154a:	68fa      	ldr	r2, [r7, #12]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	4413      	add	r3, r2
 8011550:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011552:	4b14      	ldr	r3, [pc, #80]	; (80115a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	68ba      	ldr	r2, [r7, #8]
 8011558:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801155a:	68ba      	ldr	r2, [r7, #8]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	429a      	cmp	r2, r3
 8011560:	d209      	bcs.n	8011576 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011562:	4b12      	ldr	r3, [pc, #72]	; (80115ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	4b0f      	ldr	r3, [pc, #60]	; (80115a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	3304      	adds	r3, #4
 801156c:	4619      	mov	r1, r3
 801156e:	4610      	mov	r0, r2
 8011570:	f7fd ff1b 	bl	800f3aa <vListInsert>
}
 8011574:	e010      	b.n	8011598 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011576:	4b0e      	ldr	r3, [pc, #56]	; (80115b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	4b0a      	ldr	r3, [pc, #40]	; (80115a4 <prvAddCurrentTaskToDelayedList+0x94>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	3304      	adds	r3, #4
 8011580:	4619      	mov	r1, r3
 8011582:	4610      	mov	r0, r2
 8011584:	f7fd ff11 	bl	800f3aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011588:	4b0a      	ldr	r3, [pc, #40]	; (80115b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	68ba      	ldr	r2, [r7, #8]
 801158e:	429a      	cmp	r2, r3
 8011590:	d202      	bcs.n	8011598 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011592:	4a08      	ldr	r2, [pc, #32]	; (80115b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	6013      	str	r3, [r2, #0]
}
 8011598:	bf00      	nop
 801159a:	3710      	adds	r7, #16
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	20001f3c 	.word	0x20001f3c
 80115a4:	20001a64 	.word	0x20001a64
 80115a8:	20001f24 	.word	0x20001f24
 80115ac:	20001ef4 	.word	0x20001ef4
 80115b0:	20001ef0 	.word	0x20001ef0
 80115b4:	20001f58 	.word	0x20001f58

080115b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b08a      	sub	sp, #40	; 0x28
 80115bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80115be:	2300      	movs	r3, #0
 80115c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80115c2:	f000 fb15 	bl	8011bf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80115c6:	4b1d      	ldr	r3, [pc, #116]	; (801163c <xTimerCreateTimerTask+0x84>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d021      	beq.n	8011612 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80115ce:	2300      	movs	r3, #0
 80115d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80115d2:	2300      	movs	r3, #0
 80115d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80115d6:	1d3a      	adds	r2, r7, #4
 80115d8:	f107 0108 	add.w	r1, r7, #8
 80115dc:	f107 030c 	add.w	r3, r7, #12
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7fd fe77 	bl	800f2d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80115e6:	6879      	ldr	r1, [r7, #4]
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	9202      	str	r2, [sp, #8]
 80115ee:	9301      	str	r3, [sp, #4]
 80115f0:	2302      	movs	r3, #2
 80115f2:	9300      	str	r3, [sp, #0]
 80115f4:	2300      	movs	r3, #0
 80115f6:	460a      	mov	r2, r1
 80115f8:	4911      	ldr	r1, [pc, #68]	; (8011640 <xTimerCreateTimerTask+0x88>)
 80115fa:	4812      	ldr	r0, [pc, #72]	; (8011644 <xTimerCreateTimerTask+0x8c>)
 80115fc:	f7fe ff8e 	bl	801051c <xTaskCreateStatic>
 8011600:	4603      	mov	r3, r0
 8011602:	4a11      	ldr	r2, [pc, #68]	; (8011648 <xTimerCreateTimerTask+0x90>)
 8011604:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011606:	4b10      	ldr	r3, [pc, #64]	; (8011648 <xTimerCreateTimerTask+0x90>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d001      	beq.n	8011612 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801160e:	2301      	movs	r3, #1
 8011610:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d10c      	bne.n	8011632 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8011618:	f04f 0310 	mov.w	r3, #16
 801161c:	b672      	cpsid	i
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	b662      	cpsie	i
 801162c:	613b      	str	r3, [r7, #16]
}
 801162e:	bf00      	nop
 8011630:	e7fe      	b.n	8011630 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8011632:	697b      	ldr	r3, [r7, #20]
}
 8011634:	4618      	mov	r0, r3
 8011636:	3718      	adds	r7, #24
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	20001f94 	.word	0x20001f94
 8011640:	080155f0 	.word	0x080155f0
 8011644:	08011789 	.word	0x08011789
 8011648:	20001f98 	.word	0x20001f98

0801164c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b08a      	sub	sp, #40	; 0x28
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	607a      	str	r2, [r7, #4]
 8011658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801165a:	2300      	movs	r3, #0
 801165c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d10c      	bne.n	801167e <xTimerGenericCommand+0x32>
	__asm volatile
 8011664:	f04f 0310 	mov.w	r3, #16
 8011668:	b672      	cpsid	i
 801166a:	f383 8811 	msr	BASEPRI, r3
 801166e:	f3bf 8f6f 	isb	sy
 8011672:	f3bf 8f4f 	dsb	sy
 8011676:	b662      	cpsie	i
 8011678:	623b      	str	r3, [r7, #32]
}
 801167a:	bf00      	nop
 801167c:	e7fe      	b.n	801167c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801167e:	4b1a      	ldr	r3, [pc, #104]	; (80116e8 <xTimerGenericCommand+0x9c>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d02a      	beq.n	80116dc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	2b05      	cmp	r3, #5
 8011696:	dc18      	bgt.n	80116ca <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011698:	f7ff fda8 	bl	80111ec <xTaskGetSchedulerState>
 801169c:	4603      	mov	r3, r0
 801169e:	2b02      	cmp	r3, #2
 80116a0:	d109      	bne.n	80116b6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80116a2:	4b11      	ldr	r3, [pc, #68]	; (80116e8 <xTimerGenericCommand+0x9c>)
 80116a4:	6818      	ldr	r0, [r3, #0]
 80116a6:	f107 0110 	add.w	r1, r7, #16
 80116aa:	2300      	movs	r3, #0
 80116ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116ae:	f7fe f8a3 	bl	800f7f8 <xQueueGenericSend>
 80116b2:	6278      	str	r0, [r7, #36]	; 0x24
 80116b4:	e012      	b.n	80116dc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80116b6:	4b0c      	ldr	r3, [pc, #48]	; (80116e8 <xTimerGenericCommand+0x9c>)
 80116b8:	6818      	ldr	r0, [r3, #0]
 80116ba:	f107 0110 	add.w	r1, r7, #16
 80116be:	2300      	movs	r3, #0
 80116c0:	2200      	movs	r2, #0
 80116c2:	f7fe f899 	bl	800f7f8 <xQueueGenericSend>
 80116c6:	6278      	str	r0, [r7, #36]	; 0x24
 80116c8:	e008      	b.n	80116dc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80116ca:	4b07      	ldr	r3, [pc, #28]	; (80116e8 <xTimerGenericCommand+0x9c>)
 80116cc:	6818      	ldr	r0, [r3, #0]
 80116ce:	f107 0110 	add.w	r1, r7, #16
 80116d2:	2300      	movs	r3, #0
 80116d4:	683a      	ldr	r2, [r7, #0]
 80116d6:	f7fe f995 	bl	800fa04 <xQueueGenericSendFromISR>
 80116da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80116dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3728      	adds	r7, #40	; 0x28
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	20001f94 	.word	0x20001f94

080116ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b088      	sub	sp, #32
 80116f0:	af02      	add	r7, sp, #8
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116f6:	4b23      	ldr	r3, [pc, #140]	; (8011784 <prvProcessExpiredTimer+0x98>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	3304      	adds	r3, #4
 8011704:	4618      	mov	r0, r3
 8011706:	f7fd fe89 	bl	800f41c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011710:	f003 0304 	and.w	r3, r3, #4
 8011714:	2b00      	cmp	r3, #0
 8011716:	d024      	beq.n	8011762 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	699a      	ldr	r2, [r3, #24]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	18d1      	adds	r1, r2, r3
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	683a      	ldr	r2, [r7, #0]
 8011724:	6978      	ldr	r0, [r7, #20]
 8011726:	f000 f8d3 	bl	80118d0 <prvInsertTimerInActiveList>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d021      	beq.n	8011774 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011730:	2300      	movs	r3, #0
 8011732:	9300      	str	r3, [sp, #0]
 8011734:	2300      	movs	r3, #0
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	2100      	movs	r1, #0
 801173a:	6978      	ldr	r0, [r7, #20]
 801173c:	f7ff ff86 	bl	801164c <xTimerGenericCommand>
 8011740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d115      	bne.n	8011774 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8011748:	f04f 0310 	mov.w	r3, #16
 801174c:	b672      	cpsid	i
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	b662      	cpsie	i
 801175c:	60fb      	str	r3, [r7, #12]
}
 801175e:	bf00      	nop
 8011760:	e7fe      	b.n	8011760 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011768:	f023 0301 	bic.w	r3, r3, #1
 801176c:	b2da      	uxtb	r2, r3
 801176e:	697b      	ldr	r3, [r7, #20]
 8011770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	6a1b      	ldr	r3, [r3, #32]
 8011778:	6978      	ldr	r0, [r7, #20]
 801177a:	4798      	blx	r3
}
 801177c:	bf00      	nop
 801177e:	3718      	adds	r7, #24
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	20001f8c 	.word	0x20001f8c

08011788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011790:	f107 0308 	add.w	r3, r7, #8
 8011794:	4618      	mov	r0, r3
 8011796:	f000 f857 	bl	8011848 <prvGetNextExpireTime>
 801179a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	4619      	mov	r1, r3
 80117a0:	68f8      	ldr	r0, [r7, #12]
 80117a2:	f000 f803 	bl	80117ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80117a6:	f000 f8d5 	bl	8011954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80117aa:	e7f1      	b.n	8011790 <prvTimerTask+0x8>

080117ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80117b6:	f7ff f91b 	bl	80109f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80117ba:	f107 0308 	add.w	r3, r7, #8
 80117be:	4618      	mov	r0, r3
 80117c0:	f000 f866 	bl	8011890 <prvSampleTimeNow>
 80117c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d130      	bne.n	801182e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d10a      	bne.n	80117e8 <prvProcessTimerOrBlockTask+0x3c>
 80117d2:	687a      	ldr	r2, [r7, #4]
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d806      	bhi.n	80117e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80117da:	f7ff f917 	bl	8010a0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80117de:	68f9      	ldr	r1, [r7, #12]
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f7ff ff83 	bl	80116ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80117e6:	e024      	b.n	8011832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d008      	beq.n	8011800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80117ee:	4b13      	ldr	r3, [pc, #76]	; (801183c <prvProcessTimerOrBlockTask+0x90>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d101      	bne.n	80117fc <prvProcessTimerOrBlockTask+0x50>
 80117f8:	2301      	movs	r3, #1
 80117fa:	e000      	b.n	80117fe <prvProcessTimerOrBlockTask+0x52>
 80117fc:	2300      	movs	r3, #0
 80117fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011800:	4b0f      	ldr	r3, [pc, #60]	; (8011840 <prvProcessTimerOrBlockTask+0x94>)
 8011802:	6818      	ldr	r0, [r3, #0]
 8011804:	687a      	ldr	r2, [r7, #4]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	1ad3      	subs	r3, r2, r3
 801180a:	683a      	ldr	r2, [r7, #0]
 801180c:	4619      	mov	r1, r3
 801180e:	f7fe fe51 	bl	80104b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011812:	f7ff f8fb 	bl	8010a0c <xTaskResumeAll>
 8011816:	4603      	mov	r3, r0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d10a      	bne.n	8011832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801181c:	4b09      	ldr	r3, [pc, #36]	; (8011844 <prvProcessTimerOrBlockTask+0x98>)
 801181e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011822:	601a      	str	r2, [r3, #0]
 8011824:	f3bf 8f4f 	dsb	sy
 8011828:	f3bf 8f6f 	isb	sy
}
 801182c:	e001      	b.n	8011832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801182e:	f7ff f8ed 	bl	8010a0c <xTaskResumeAll>
}
 8011832:	bf00      	nop
 8011834:	3710      	adds	r7, #16
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	20001f90 	.word	0x20001f90
 8011840:	20001f94 	.word	0x20001f94
 8011844:	e000ed04 	.word	0xe000ed04

08011848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011848:	b480      	push	{r7}
 801184a:	b085      	sub	sp, #20
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011850:	4b0e      	ldr	r3, [pc, #56]	; (801188c <prvGetNextExpireTime+0x44>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d101      	bne.n	801185e <prvGetNextExpireTime+0x16>
 801185a:	2201      	movs	r2, #1
 801185c:	e000      	b.n	8011860 <prvGetNextExpireTime+0x18>
 801185e:	2200      	movs	r2, #0
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d105      	bne.n	8011878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801186c:	4b07      	ldr	r3, [pc, #28]	; (801188c <prvGetNextExpireTime+0x44>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	60fb      	str	r3, [r7, #12]
 8011876:	e001      	b.n	801187c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011878:	2300      	movs	r3, #0
 801187a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801187c:	68fb      	ldr	r3, [r7, #12]
}
 801187e:	4618      	mov	r0, r3
 8011880:	3714      	adds	r7, #20
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop
 801188c:	20001f8c 	.word	0x20001f8c

08011890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011898:	f7ff f958 	bl	8010b4c <xTaskGetTickCount>
 801189c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801189e:	4b0b      	ldr	r3, [pc, #44]	; (80118cc <prvSampleTimeNow+0x3c>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d205      	bcs.n	80118b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80118a8:	f000 f93c 	bl	8011b24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2201      	movs	r2, #1
 80118b0:	601a      	str	r2, [r3, #0]
 80118b2:	e002      	b.n	80118ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2200      	movs	r2, #0
 80118b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80118ba:	4a04      	ldr	r2, [pc, #16]	; (80118cc <prvSampleTimeNow+0x3c>)
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80118c0:	68fb      	ldr	r3, [r7, #12]
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	20001f9c 	.word	0x20001f9c

080118d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b086      	sub	sp, #24
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	607a      	str	r2, [r7, #4]
 80118dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80118de:	2300      	movs	r3, #0
 80118e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	68ba      	ldr	r2, [r7, #8]
 80118e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	68fa      	ldr	r2, [r7, #12]
 80118ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80118ee:	68ba      	ldr	r2, [r7, #8]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d812      	bhi.n	801191c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	1ad2      	subs	r2, r2, r3
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	699b      	ldr	r3, [r3, #24]
 8011900:	429a      	cmp	r2, r3
 8011902:	d302      	bcc.n	801190a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011904:	2301      	movs	r3, #1
 8011906:	617b      	str	r3, [r7, #20]
 8011908:	e01b      	b.n	8011942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801190a:	4b10      	ldr	r3, [pc, #64]	; (801194c <prvInsertTimerInActiveList+0x7c>)
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	3304      	adds	r3, #4
 8011912:	4619      	mov	r1, r3
 8011914:	4610      	mov	r0, r2
 8011916:	f7fd fd48 	bl	800f3aa <vListInsert>
 801191a:	e012      	b.n	8011942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	429a      	cmp	r2, r3
 8011922:	d206      	bcs.n	8011932 <prvInsertTimerInActiveList+0x62>
 8011924:	68ba      	ldr	r2, [r7, #8]
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	429a      	cmp	r2, r3
 801192a:	d302      	bcc.n	8011932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801192c:	2301      	movs	r3, #1
 801192e:	617b      	str	r3, [r7, #20]
 8011930:	e007      	b.n	8011942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011932:	4b07      	ldr	r3, [pc, #28]	; (8011950 <prvInsertTimerInActiveList+0x80>)
 8011934:	681a      	ldr	r2, [r3, #0]
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	3304      	adds	r3, #4
 801193a:	4619      	mov	r1, r3
 801193c:	4610      	mov	r0, r2
 801193e:	f7fd fd34 	bl	800f3aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011942:	697b      	ldr	r3, [r7, #20]
}
 8011944:	4618      	mov	r0, r3
 8011946:	3718      	adds	r7, #24
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	20001f90 	.word	0x20001f90
 8011950:	20001f8c 	.word	0x20001f8c

08011954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011954:	b580      	push	{r7, lr}
 8011956:	b08e      	sub	sp, #56	; 0x38
 8011958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801195a:	e0d0      	b.n	8011afe <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2b00      	cmp	r3, #0
 8011960:	da1a      	bge.n	8011998 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011962:	1d3b      	adds	r3, r7, #4
 8011964:	3304      	adds	r3, #4
 8011966:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196a:	2b00      	cmp	r3, #0
 801196c:	d10c      	bne.n	8011988 <prvProcessReceivedCommands+0x34>
	__asm volatile
 801196e:	f04f 0310 	mov.w	r3, #16
 8011972:	b672      	cpsid	i
 8011974:	f383 8811 	msr	BASEPRI, r3
 8011978:	f3bf 8f6f 	isb	sy
 801197c:	f3bf 8f4f 	dsb	sy
 8011980:	b662      	cpsie	i
 8011982:	61fb      	str	r3, [r7, #28]
}
 8011984:	bf00      	nop
 8011986:	e7fe      	b.n	8011986 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801198e:	6850      	ldr	r0, [r2, #4]
 8011990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011992:	6892      	ldr	r2, [r2, #8]
 8011994:	4611      	mov	r1, r2
 8011996:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2b00      	cmp	r3, #0
 801199c:	f2c0 80ae 	blt.w	8011afc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80119a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a6:	695b      	ldr	r3, [r3, #20]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d004      	beq.n	80119b6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80119ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ae:	3304      	adds	r3, #4
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fd fd33 	bl	800f41c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80119b6:	463b      	mov	r3, r7
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7ff ff69 	bl	8011890 <prvSampleTimeNow>
 80119be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2b09      	cmp	r3, #9
 80119c4:	f200 809b 	bhi.w	8011afe <prvProcessReceivedCommands+0x1aa>
 80119c8:	a201      	add	r2, pc, #4	; (adr r2, 80119d0 <prvProcessReceivedCommands+0x7c>)
 80119ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ce:	bf00      	nop
 80119d0:	080119f9 	.word	0x080119f9
 80119d4:	080119f9 	.word	0x080119f9
 80119d8:	080119f9 	.word	0x080119f9
 80119dc:	08011a71 	.word	0x08011a71
 80119e0:	08011a85 	.word	0x08011a85
 80119e4:	08011ad3 	.word	0x08011ad3
 80119e8:	080119f9 	.word	0x080119f9
 80119ec:	080119f9 	.word	0x080119f9
 80119f0:	08011a71 	.word	0x08011a71
 80119f4:	08011a85 	.word	0x08011a85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80119f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80119fe:	f043 0301 	orr.w	r3, r3, #1
 8011a02:	b2da      	uxtb	r2, r3
 8011a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011a0a:	68ba      	ldr	r2, [r7, #8]
 8011a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0e:	699b      	ldr	r3, [r3, #24]
 8011a10:	18d1      	adds	r1, r2, r3
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a18:	f7ff ff5a 	bl	80118d0 <prvInsertTimerInActiveList>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d06d      	beq.n	8011afe <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a24:	6a1b      	ldr	r3, [r3, #32]
 8011a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a30:	f003 0304 	and.w	r3, r3, #4
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d062      	beq.n	8011afe <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011a38:	68ba      	ldr	r2, [r7, #8]
 8011a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a3c:	699b      	ldr	r3, [r3, #24]
 8011a3e:	441a      	add	r2, r3
 8011a40:	2300      	movs	r3, #0
 8011a42:	9300      	str	r3, [sp, #0]
 8011a44:	2300      	movs	r3, #0
 8011a46:	2100      	movs	r1, #0
 8011a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a4a:	f7ff fdff 	bl	801164c <xTimerGenericCommand>
 8011a4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011a50:	6a3b      	ldr	r3, [r7, #32]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d153      	bne.n	8011afe <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8011a56:	f04f 0310 	mov.w	r3, #16
 8011a5a:	b672      	cpsid	i
 8011a5c:	f383 8811 	msr	BASEPRI, r3
 8011a60:	f3bf 8f6f 	isb	sy
 8011a64:	f3bf 8f4f 	dsb	sy
 8011a68:	b662      	cpsie	i
 8011a6a:	61bb      	str	r3, [r7, #24]
}
 8011a6c:	bf00      	nop
 8011a6e:	e7fe      	b.n	8011a6e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a76:	f023 0301 	bic.w	r3, r3, #1
 8011a7a:	b2da      	uxtb	r2, r3
 8011a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011a82:	e03c      	b.n	8011afe <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011a8a:	f043 0301 	orr.w	r3, r3, #1
 8011a8e:	b2da      	uxtb	r2, r3
 8011a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011a96:	68ba      	ldr	r2, [r7, #8]
 8011a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9e:	699b      	ldr	r3, [r3, #24]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d10c      	bne.n	8011abe <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8011aa4:	f04f 0310 	mov.w	r3, #16
 8011aa8:	b672      	cpsid	i
 8011aaa:	f383 8811 	msr	BASEPRI, r3
 8011aae:	f3bf 8f6f 	isb	sy
 8011ab2:	f3bf 8f4f 	dsb	sy
 8011ab6:	b662      	cpsie	i
 8011ab8:	617b      	str	r3, [r7, #20]
}
 8011aba:	bf00      	nop
 8011abc:	e7fe      	b.n	8011abc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac0:	699a      	ldr	r2, [r3, #24]
 8011ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac4:	18d1      	adds	r1, r2, r3
 8011ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011acc:	f7ff ff00 	bl	80118d0 <prvInsertTimerInActiveList>
					break;
 8011ad0:	e015      	b.n	8011afe <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ad8:	f003 0302 	and.w	r3, r3, #2
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d103      	bne.n	8011ae8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8011ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ae2:	f000 fbc9 	bl	8012278 <vPortFree>
 8011ae6:	e00a      	b.n	8011afe <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011aee:	f023 0301 	bic.w	r3, r3, #1
 8011af2:	b2da      	uxtb	r2, r3
 8011af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011afa:	e000      	b.n	8011afe <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011afc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011afe:	4b08      	ldr	r3, [pc, #32]	; (8011b20 <prvProcessReceivedCommands+0x1cc>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	1d39      	adds	r1, r7, #4
 8011b04:	2200      	movs	r2, #0
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fe f8b2 	bl	800fc70 <xQueueReceive>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f47f af24 	bne.w	801195c <prvProcessReceivedCommands+0x8>
	}
}
 8011b14:	bf00      	nop
 8011b16:	bf00      	nop
 8011b18:	3730      	adds	r7, #48	; 0x30
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	20001f94 	.word	0x20001f94

08011b24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b088      	sub	sp, #32
 8011b28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011b2a:	e04a      	b.n	8011bc2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011b2c:	4b2e      	ldr	r3, [pc, #184]	; (8011be8 <prvSwitchTimerLists+0xc4>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b36:	4b2c      	ldr	r3, [pc, #176]	; (8011be8 <prvSwitchTimerLists+0xc4>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	68db      	ldr	r3, [r3, #12]
 8011b3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	3304      	adds	r3, #4
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7fd fc69 	bl	800f41c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	6a1b      	ldr	r3, [r3, #32]
 8011b4e:	68f8      	ldr	r0, [r7, #12]
 8011b50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b58:	f003 0304 	and.w	r3, r3, #4
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d030      	beq.n	8011bc2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	699b      	ldr	r3, [r3, #24]
 8011b64:	693a      	ldr	r2, [r7, #16]
 8011b66:	4413      	add	r3, r2
 8011b68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011b6a:	68ba      	ldr	r2, [r7, #8]
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d90e      	bls.n	8011b90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	68ba      	ldr	r2, [r7, #8]
 8011b76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	68fa      	ldr	r2, [r7, #12]
 8011b7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011b7e:	4b1a      	ldr	r3, [pc, #104]	; (8011be8 <prvSwitchTimerLists+0xc4>)
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	3304      	adds	r3, #4
 8011b86:	4619      	mov	r1, r3
 8011b88:	4610      	mov	r0, r2
 8011b8a:	f7fd fc0e 	bl	800f3aa <vListInsert>
 8011b8e:	e018      	b.n	8011bc2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011b90:	2300      	movs	r3, #0
 8011b92:	9300      	str	r3, [sp, #0]
 8011b94:	2300      	movs	r3, #0
 8011b96:	693a      	ldr	r2, [r7, #16]
 8011b98:	2100      	movs	r1, #0
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f7ff fd56 	bl	801164c <xTimerGenericCommand>
 8011ba0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d10c      	bne.n	8011bc2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8011ba8:	f04f 0310 	mov.w	r3, #16
 8011bac:	b672      	cpsid	i
 8011bae:	f383 8811 	msr	BASEPRI, r3
 8011bb2:	f3bf 8f6f 	isb	sy
 8011bb6:	f3bf 8f4f 	dsb	sy
 8011bba:	b662      	cpsie	i
 8011bbc:	603b      	str	r3, [r7, #0]
}
 8011bbe:	bf00      	nop
 8011bc0:	e7fe      	b.n	8011bc0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011bc2:	4b09      	ldr	r3, [pc, #36]	; (8011be8 <prvSwitchTimerLists+0xc4>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1af      	bne.n	8011b2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011bcc:	4b06      	ldr	r3, [pc, #24]	; (8011be8 <prvSwitchTimerLists+0xc4>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011bd2:	4b06      	ldr	r3, [pc, #24]	; (8011bec <prvSwitchTimerLists+0xc8>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	4a04      	ldr	r2, [pc, #16]	; (8011be8 <prvSwitchTimerLists+0xc4>)
 8011bd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011bda:	4a04      	ldr	r2, [pc, #16]	; (8011bec <prvSwitchTimerLists+0xc8>)
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	6013      	str	r3, [r2, #0]
}
 8011be0:	bf00      	nop
 8011be2:	3718      	adds	r7, #24
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	20001f8c 	.word	0x20001f8c
 8011bec:	20001f90 	.word	0x20001f90

08011bf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b082      	sub	sp, #8
 8011bf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011bf6:	f000 f949 	bl	8011e8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011bfa:	4b15      	ldr	r3, [pc, #84]	; (8011c50 <prvCheckForValidListAndQueue+0x60>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d120      	bne.n	8011c44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011c02:	4814      	ldr	r0, [pc, #80]	; (8011c54 <prvCheckForValidListAndQueue+0x64>)
 8011c04:	f7fd fb80 	bl	800f308 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011c08:	4813      	ldr	r0, [pc, #76]	; (8011c58 <prvCheckForValidListAndQueue+0x68>)
 8011c0a:	f7fd fb7d 	bl	800f308 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8011c0e:	4b13      	ldr	r3, [pc, #76]	; (8011c5c <prvCheckForValidListAndQueue+0x6c>)
 8011c10:	4a10      	ldr	r2, [pc, #64]	; (8011c54 <prvCheckForValidListAndQueue+0x64>)
 8011c12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011c14:	4b12      	ldr	r3, [pc, #72]	; (8011c60 <prvCheckForValidListAndQueue+0x70>)
 8011c16:	4a10      	ldr	r2, [pc, #64]	; (8011c58 <prvCheckForValidListAndQueue+0x68>)
 8011c18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	9300      	str	r3, [sp, #0]
 8011c1e:	4b11      	ldr	r3, [pc, #68]	; (8011c64 <prvCheckForValidListAndQueue+0x74>)
 8011c20:	4a11      	ldr	r2, [pc, #68]	; (8011c68 <prvCheckForValidListAndQueue+0x78>)
 8011c22:	2110      	movs	r1, #16
 8011c24:	200a      	movs	r0, #10
 8011c26:	f7fd fc8d 	bl	800f544 <xQueueGenericCreateStatic>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	4a08      	ldr	r2, [pc, #32]	; (8011c50 <prvCheckForValidListAndQueue+0x60>)
 8011c2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011c30:	4b07      	ldr	r3, [pc, #28]	; (8011c50 <prvCheckForValidListAndQueue+0x60>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d005      	beq.n	8011c44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011c38:	4b05      	ldr	r3, [pc, #20]	; (8011c50 <prvCheckForValidListAndQueue+0x60>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	490b      	ldr	r1, [pc, #44]	; (8011c6c <prvCheckForValidListAndQueue+0x7c>)
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fe fbe4 	bl	801040c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011c44:	f000 f956 	bl	8011ef4 <vPortExitCritical>
}
 8011c48:	bf00      	nop
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	20001f94 	.word	0x20001f94
 8011c54:	20001f64 	.word	0x20001f64
 8011c58:	20001f78 	.word	0x20001f78
 8011c5c:	20001f8c 	.word	0x20001f8c
 8011c60:	20001f90 	.word	0x20001f90
 8011c64:	20002040 	.word	0x20002040
 8011c68:	20001fa0 	.word	0x20001fa0
 8011c6c:	080155f8 	.word	0x080155f8

08011c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011c70:	b480      	push	{r7}
 8011c72:	b085      	sub	sp, #20
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	60f8      	str	r0, [r7, #12]
 8011c78:	60b9      	str	r1, [r7, #8]
 8011c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	3b04      	subs	r3, #4
 8011c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	3b04      	subs	r3, #4
 8011c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	f023 0201 	bic.w	r2, r3, #1
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	3b04      	subs	r3, #4
 8011c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011ca0:	4a0c      	ldr	r2, [pc, #48]	; (8011cd4 <pxPortInitialiseStack+0x64>)
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	3b14      	subs	r3, #20
 8011caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	3b04      	subs	r3, #4
 8011cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f06f 0202 	mvn.w	r2, #2
 8011cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	3b20      	subs	r3, #32
 8011cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3714      	adds	r7, #20
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd2:	4770      	bx	lr
 8011cd4:	08011cd9 	.word	0x08011cd9

08011cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b085      	sub	sp, #20
 8011cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011ce2:	4b14      	ldr	r3, [pc, #80]	; (8011d34 <prvTaskExitError+0x5c>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cea:	d00c      	beq.n	8011d06 <prvTaskExitError+0x2e>
	__asm volatile
 8011cec:	f04f 0310 	mov.w	r3, #16
 8011cf0:	b672      	cpsid	i
 8011cf2:	f383 8811 	msr	BASEPRI, r3
 8011cf6:	f3bf 8f6f 	isb	sy
 8011cfa:	f3bf 8f4f 	dsb	sy
 8011cfe:	b662      	cpsie	i
 8011d00:	60fb      	str	r3, [r7, #12]
}
 8011d02:	bf00      	nop
 8011d04:	e7fe      	b.n	8011d04 <prvTaskExitError+0x2c>
	__asm volatile
 8011d06:	f04f 0310 	mov.w	r3, #16
 8011d0a:	b672      	cpsid	i
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	b662      	cpsie	i
 8011d1a:	60bb      	str	r3, [r7, #8]
}
 8011d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011d1e:	bf00      	nop
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d0fc      	beq.n	8011d20 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011d26:	bf00      	nop
 8011d28:	bf00      	nop
 8011d2a:	3714      	adds	r7, #20
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr
 8011d34:	200001e0 	.word	0x200001e0
	...

08011d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011d40:	4b07      	ldr	r3, [pc, #28]	; (8011d60 <pxCurrentTCBConst2>)
 8011d42:	6819      	ldr	r1, [r3, #0]
 8011d44:	6808      	ldr	r0, [r1, #0]
 8011d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4a:	f380 8809 	msr	PSP, r0
 8011d4e:	f3bf 8f6f 	isb	sy
 8011d52:	f04f 0000 	mov.w	r0, #0
 8011d56:	f380 8811 	msr	BASEPRI, r0
 8011d5a:	4770      	bx	lr
 8011d5c:	f3af 8000 	nop.w

08011d60 <pxCurrentTCBConst2>:
 8011d60:	20001a64 	.word	0x20001a64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011d64:	bf00      	nop
 8011d66:	bf00      	nop

08011d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011d68:	4808      	ldr	r0, [pc, #32]	; (8011d8c <prvPortStartFirstTask+0x24>)
 8011d6a:	6800      	ldr	r0, [r0, #0]
 8011d6c:	6800      	ldr	r0, [r0, #0]
 8011d6e:	f380 8808 	msr	MSP, r0
 8011d72:	f04f 0000 	mov.w	r0, #0
 8011d76:	f380 8814 	msr	CONTROL, r0
 8011d7a:	b662      	cpsie	i
 8011d7c:	b661      	cpsie	f
 8011d7e:	f3bf 8f4f 	dsb	sy
 8011d82:	f3bf 8f6f 	isb	sy
 8011d86:	df00      	svc	0
 8011d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011d8a:	bf00      	nop
 8011d8c:	e000ed08 	.word	0xe000ed08

08011d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011d96:	4b37      	ldr	r3, [pc, #220]	; (8011e74 <xPortStartScheduler+0xe4>)
 8011d98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	b2db      	uxtb	r3, r3
 8011da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	22ff      	movs	r2, #255	; 0xff
 8011da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	781b      	ldrb	r3, [r3, #0]
 8011dac:	b2db      	uxtb	r3, r3
 8011dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011db0:	78fb      	ldrb	r3, [r7, #3]
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	f003 0310 	and.w	r3, r3, #16
 8011db8:	b2da      	uxtb	r2, r3
 8011dba:	4b2f      	ldr	r3, [pc, #188]	; (8011e78 <xPortStartScheduler+0xe8>)
 8011dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011dbe:	4b2f      	ldr	r3, [pc, #188]	; (8011e7c <xPortStartScheduler+0xec>)
 8011dc0:	2207      	movs	r2, #7
 8011dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011dc4:	e009      	b.n	8011dda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011dc6:	4b2d      	ldr	r3, [pc, #180]	; (8011e7c <xPortStartScheduler+0xec>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	3b01      	subs	r3, #1
 8011dcc:	4a2b      	ldr	r2, [pc, #172]	; (8011e7c <xPortStartScheduler+0xec>)
 8011dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011dd0:	78fb      	ldrb	r3, [r7, #3]
 8011dd2:	b2db      	uxtb	r3, r3
 8011dd4:	005b      	lsls	r3, r3, #1
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011dda:	78fb      	ldrb	r3, [r7, #3]
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011de2:	2b80      	cmp	r3, #128	; 0x80
 8011de4:	d0ef      	beq.n	8011dc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011de6:	4b25      	ldr	r3, [pc, #148]	; (8011e7c <xPortStartScheduler+0xec>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f1c3 0307 	rsb	r3, r3, #7
 8011dee:	2b04      	cmp	r3, #4
 8011df0:	d00c      	beq.n	8011e0c <xPortStartScheduler+0x7c>
	__asm volatile
 8011df2:	f04f 0310 	mov.w	r3, #16
 8011df6:	b672      	cpsid	i
 8011df8:	f383 8811 	msr	BASEPRI, r3
 8011dfc:	f3bf 8f6f 	isb	sy
 8011e00:	f3bf 8f4f 	dsb	sy
 8011e04:	b662      	cpsie	i
 8011e06:	60bb      	str	r3, [r7, #8]
}
 8011e08:	bf00      	nop
 8011e0a:	e7fe      	b.n	8011e0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011e0c:	4b1b      	ldr	r3, [pc, #108]	; (8011e7c <xPortStartScheduler+0xec>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	021b      	lsls	r3, r3, #8
 8011e12:	4a1a      	ldr	r2, [pc, #104]	; (8011e7c <xPortStartScheduler+0xec>)
 8011e14:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011e16:	4b19      	ldr	r3, [pc, #100]	; (8011e7c <xPortStartScheduler+0xec>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011e1e:	4a17      	ldr	r2, [pc, #92]	; (8011e7c <xPortStartScheduler+0xec>)
 8011e20:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	b2da      	uxtb	r2, r3
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011e2a:	4b15      	ldr	r3, [pc, #84]	; (8011e80 <xPortStartScheduler+0xf0>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	4a14      	ldr	r2, [pc, #80]	; (8011e80 <xPortStartScheduler+0xf0>)
 8011e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011e34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011e36:	4b12      	ldr	r3, [pc, #72]	; (8011e80 <xPortStartScheduler+0xf0>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	4a11      	ldr	r2, [pc, #68]	; (8011e80 <xPortStartScheduler+0xf0>)
 8011e3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011e40:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011e42:	f000 f8dd 	bl	8012000 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011e46:	4b0f      	ldr	r3, [pc, #60]	; (8011e84 <xPortStartScheduler+0xf4>)
 8011e48:	2200      	movs	r2, #0
 8011e4a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011e4c:	f000 f8fc 	bl	8012048 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011e50:	4b0d      	ldr	r3, [pc, #52]	; (8011e88 <xPortStartScheduler+0xf8>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	4a0c      	ldr	r2, [pc, #48]	; (8011e88 <xPortStartScheduler+0xf8>)
 8011e56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011e5a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011e5c:	f7ff ff84 	bl	8011d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011e60:	f7fe ff40 	bl	8010ce4 <vTaskSwitchContext>
	prvTaskExitError();
 8011e64:	f7ff ff38 	bl	8011cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011e68:	2300      	movs	r3, #0
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3710      	adds	r7, #16
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}
 8011e72:	bf00      	nop
 8011e74:	e000e400 	.word	0xe000e400
 8011e78:	20002090 	.word	0x20002090
 8011e7c:	20002094 	.word	0x20002094
 8011e80:	e000ed20 	.word	0xe000ed20
 8011e84:	200001e0 	.word	0x200001e0
 8011e88:	e000ef34 	.word	0xe000ef34

08011e8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
	__asm volatile
 8011e92:	f04f 0310 	mov.w	r3, #16
 8011e96:	b672      	cpsid	i
 8011e98:	f383 8811 	msr	BASEPRI, r3
 8011e9c:	f3bf 8f6f 	isb	sy
 8011ea0:	f3bf 8f4f 	dsb	sy
 8011ea4:	b662      	cpsie	i
 8011ea6:	607b      	str	r3, [r7, #4]
}
 8011ea8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011eaa:	4b10      	ldr	r3, [pc, #64]	; (8011eec <vPortEnterCritical+0x60>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	3301      	adds	r3, #1
 8011eb0:	4a0e      	ldr	r2, [pc, #56]	; (8011eec <vPortEnterCritical+0x60>)
 8011eb2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011eb4:	4b0d      	ldr	r3, [pc, #52]	; (8011eec <vPortEnterCritical+0x60>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	d111      	bne.n	8011ee0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011ebc:	4b0c      	ldr	r3, [pc, #48]	; (8011ef0 <vPortEnterCritical+0x64>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d00c      	beq.n	8011ee0 <vPortEnterCritical+0x54>
	__asm volatile
 8011ec6:	f04f 0310 	mov.w	r3, #16
 8011eca:	b672      	cpsid	i
 8011ecc:	f383 8811 	msr	BASEPRI, r3
 8011ed0:	f3bf 8f6f 	isb	sy
 8011ed4:	f3bf 8f4f 	dsb	sy
 8011ed8:	b662      	cpsie	i
 8011eda:	603b      	str	r3, [r7, #0]
}
 8011edc:	bf00      	nop
 8011ede:	e7fe      	b.n	8011ede <vPortEnterCritical+0x52>
	}
}
 8011ee0:	bf00      	nop
 8011ee2:	370c      	adds	r7, #12
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr
 8011eec:	200001e0 	.word	0x200001e0
 8011ef0:	e000ed04 	.word	0xe000ed04

08011ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011efa:	4b13      	ldr	r3, [pc, #76]	; (8011f48 <vPortExitCritical+0x54>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d10c      	bne.n	8011f1c <vPortExitCritical+0x28>
	__asm volatile
 8011f02:	f04f 0310 	mov.w	r3, #16
 8011f06:	b672      	cpsid	i
 8011f08:	f383 8811 	msr	BASEPRI, r3
 8011f0c:	f3bf 8f6f 	isb	sy
 8011f10:	f3bf 8f4f 	dsb	sy
 8011f14:	b662      	cpsie	i
 8011f16:	607b      	str	r3, [r7, #4]
}
 8011f18:	bf00      	nop
 8011f1a:	e7fe      	b.n	8011f1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011f1c:	4b0a      	ldr	r3, [pc, #40]	; (8011f48 <vPortExitCritical+0x54>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	3b01      	subs	r3, #1
 8011f22:	4a09      	ldr	r2, [pc, #36]	; (8011f48 <vPortExitCritical+0x54>)
 8011f24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011f26:	4b08      	ldr	r3, [pc, #32]	; (8011f48 <vPortExitCritical+0x54>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d105      	bne.n	8011f3a <vPortExitCritical+0x46>
 8011f2e:	2300      	movs	r3, #0
 8011f30:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	f383 8811 	msr	BASEPRI, r3
}
 8011f38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011f3a:	bf00      	nop
 8011f3c:	370c      	adds	r7, #12
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop
 8011f48:	200001e0 	.word	0x200001e0
 8011f4c:	00000000 	.word	0x00000000

08011f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011f50:	f3ef 8009 	mrs	r0, PSP
 8011f54:	f3bf 8f6f 	isb	sy
 8011f58:	4b15      	ldr	r3, [pc, #84]	; (8011fb0 <pxCurrentTCBConst>)
 8011f5a:	681a      	ldr	r2, [r3, #0]
 8011f5c:	f01e 0f10 	tst.w	lr, #16
 8011f60:	bf08      	it	eq
 8011f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f6a:	6010      	str	r0, [r2, #0]
 8011f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011f70:	f04f 0010 	mov.w	r0, #16
 8011f74:	b672      	cpsid	i
 8011f76:	f380 8811 	msr	BASEPRI, r0
 8011f7a:	f3bf 8f4f 	dsb	sy
 8011f7e:	f3bf 8f6f 	isb	sy
 8011f82:	b662      	cpsie	i
 8011f84:	f7fe feae 	bl	8010ce4 <vTaskSwitchContext>
 8011f88:	f04f 0000 	mov.w	r0, #0
 8011f8c:	f380 8811 	msr	BASEPRI, r0
 8011f90:	bc09      	pop	{r0, r3}
 8011f92:	6819      	ldr	r1, [r3, #0]
 8011f94:	6808      	ldr	r0, [r1, #0]
 8011f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f9a:	f01e 0f10 	tst.w	lr, #16
 8011f9e:	bf08      	it	eq
 8011fa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011fa4:	f380 8809 	msr	PSP, r0
 8011fa8:	f3bf 8f6f 	isb	sy
 8011fac:	4770      	bx	lr
 8011fae:	bf00      	nop

08011fb0 <pxCurrentTCBConst>:
 8011fb0:	20001a64 	.word	0x20001a64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011fb4:	bf00      	nop
 8011fb6:	bf00      	nop

08011fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8011fbe:	f04f 0310 	mov.w	r3, #16
 8011fc2:	b672      	cpsid	i
 8011fc4:	f383 8811 	msr	BASEPRI, r3
 8011fc8:	f3bf 8f6f 	isb	sy
 8011fcc:	f3bf 8f4f 	dsb	sy
 8011fd0:	b662      	cpsie	i
 8011fd2:	607b      	str	r3, [r7, #4]
}
 8011fd4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011fd6:	f7fe fdc9 	bl	8010b6c <xTaskIncrementTick>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d003      	beq.n	8011fe8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011fe0:	4b06      	ldr	r3, [pc, #24]	; (8011ffc <SysTick_Handler+0x44>)
 8011fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fe6:	601a      	str	r2, [r3, #0]
 8011fe8:	2300      	movs	r3, #0
 8011fea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	f383 8811 	msr	BASEPRI, r3
}
 8011ff2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011ff4:	bf00      	nop
 8011ff6:	3708      	adds	r7, #8
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	bd80      	pop	{r7, pc}
 8011ffc:	e000ed04 	.word	0xe000ed04

08012000 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012000:	b480      	push	{r7}
 8012002:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012004:	4b0b      	ldr	r3, [pc, #44]	; (8012034 <vPortSetupTimerInterrupt+0x34>)
 8012006:	2200      	movs	r2, #0
 8012008:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801200a:	4b0b      	ldr	r3, [pc, #44]	; (8012038 <vPortSetupTimerInterrupt+0x38>)
 801200c:	2200      	movs	r2, #0
 801200e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012010:	4b0a      	ldr	r3, [pc, #40]	; (801203c <vPortSetupTimerInterrupt+0x3c>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	4a0a      	ldr	r2, [pc, #40]	; (8012040 <vPortSetupTimerInterrupt+0x40>)
 8012016:	fba2 2303 	umull	r2, r3, r2, r3
 801201a:	099b      	lsrs	r3, r3, #6
 801201c:	4a09      	ldr	r2, [pc, #36]	; (8012044 <vPortSetupTimerInterrupt+0x44>)
 801201e:	3b01      	subs	r3, #1
 8012020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012022:	4b04      	ldr	r3, [pc, #16]	; (8012034 <vPortSetupTimerInterrupt+0x34>)
 8012024:	2207      	movs	r2, #7
 8012026:	601a      	str	r2, [r3, #0]
}
 8012028:	bf00      	nop
 801202a:	46bd      	mov	sp, r7
 801202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012030:	4770      	bx	lr
 8012032:	bf00      	nop
 8012034:	e000e010 	.word	0xe000e010
 8012038:	e000e018 	.word	0xe000e018
 801203c:	2000007c 	.word	0x2000007c
 8012040:	10624dd3 	.word	0x10624dd3
 8012044:	e000e014 	.word	0xe000e014

08012048 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012048:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012058 <vPortEnableVFP+0x10>
 801204c:	6801      	ldr	r1, [r0, #0]
 801204e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012052:	6001      	str	r1, [r0, #0]
 8012054:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012056:	bf00      	nop
 8012058:	e000ed88 	.word	0xe000ed88

0801205c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801205c:	b480      	push	{r7}
 801205e:	b085      	sub	sp, #20
 8012060:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012062:	f3ef 8305 	mrs	r3, IPSR
 8012066:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2b0f      	cmp	r3, #15
 801206c:	d916      	bls.n	801209c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801206e:	4a19      	ldr	r2, [pc, #100]	; (80120d4 <vPortValidateInterruptPriority+0x78>)
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	4413      	add	r3, r2
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012078:	4b17      	ldr	r3, [pc, #92]	; (80120d8 <vPortValidateInterruptPriority+0x7c>)
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	7afa      	ldrb	r2, [r7, #11]
 801207e:	429a      	cmp	r2, r3
 8012080:	d20c      	bcs.n	801209c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012082:	f04f 0310 	mov.w	r3, #16
 8012086:	b672      	cpsid	i
 8012088:	f383 8811 	msr	BASEPRI, r3
 801208c:	f3bf 8f6f 	isb	sy
 8012090:	f3bf 8f4f 	dsb	sy
 8012094:	b662      	cpsie	i
 8012096:	607b      	str	r3, [r7, #4]
}
 8012098:	bf00      	nop
 801209a:	e7fe      	b.n	801209a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801209c:	4b0f      	ldr	r3, [pc, #60]	; (80120dc <vPortValidateInterruptPriority+0x80>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80120a4:	4b0e      	ldr	r3, [pc, #56]	; (80120e0 <vPortValidateInterruptPriority+0x84>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d90c      	bls.n	80120c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80120ac:	f04f 0310 	mov.w	r3, #16
 80120b0:	b672      	cpsid	i
 80120b2:	f383 8811 	msr	BASEPRI, r3
 80120b6:	f3bf 8f6f 	isb	sy
 80120ba:	f3bf 8f4f 	dsb	sy
 80120be:	b662      	cpsie	i
 80120c0:	603b      	str	r3, [r7, #0]
}
 80120c2:	bf00      	nop
 80120c4:	e7fe      	b.n	80120c4 <vPortValidateInterruptPriority+0x68>
	}
 80120c6:	bf00      	nop
 80120c8:	3714      	adds	r7, #20
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr
 80120d2:	bf00      	nop
 80120d4:	e000e3f0 	.word	0xe000e3f0
 80120d8:	20002090 	.word	0x20002090
 80120dc:	e000ed0c 	.word	0xe000ed0c
 80120e0:	20002094 	.word	0x20002094

080120e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b08a      	sub	sp, #40	; 0x28
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80120ec:	2300      	movs	r3, #0
 80120ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80120f0:	f7fe fc7e 	bl	80109f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80120f4:	4b5b      	ldr	r3, [pc, #364]	; (8012264 <pvPortMalloc+0x180>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d101      	bne.n	8012100 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80120fc:	f000 f91a 	bl	8012334 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012100:	4b59      	ldr	r3, [pc, #356]	; (8012268 <pvPortMalloc+0x184>)
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	4013      	ands	r3, r2
 8012108:	2b00      	cmp	r3, #0
 801210a:	f040 8092 	bne.w	8012232 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d01f      	beq.n	8012154 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012114:	2208      	movs	r2, #8
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	4413      	add	r3, r2
 801211a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f003 0307 	and.w	r3, r3, #7
 8012122:	2b00      	cmp	r3, #0
 8012124:	d016      	beq.n	8012154 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f023 0307 	bic.w	r3, r3, #7
 801212c:	3308      	adds	r3, #8
 801212e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f003 0307 	and.w	r3, r3, #7
 8012136:	2b00      	cmp	r3, #0
 8012138:	d00c      	beq.n	8012154 <pvPortMalloc+0x70>
	__asm volatile
 801213a:	f04f 0310 	mov.w	r3, #16
 801213e:	b672      	cpsid	i
 8012140:	f383 8811 	msr	BASEPRI, r3
 8012144:	f3bf 8f6f 	isb	sy
 8012148:	f3bf 8f4f 	dsb	sy
 801214c:	b662      	cpsie	i
 801214e:	617b      	str	r3, [r7, #20]
}
 8012150:	bf00      	nop
 8012152:	e7fe      	b.n	8012152 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d06b      	beq.n	8012232 <pvPortMalloc+0x14e>
 801215a:	4b44      	ldr	r3, [pc, #272]	; (801226c <pvPortMalloc+0x188>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	429a      	cmp	r2, r3
 8012162:	d866      	bhi.n	8012232 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012164:	4b42      	ldr	r3, [pc, #264]	; (8012270 <pvPortMalloc+0x18c>)
 8012166:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012168:	4b41      	ldr	r3, [pc, #260]	; (8012270 <pvPortMalloc+0x18c>)
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801216e:	e004      	b.n	801217a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012172:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	687a      	ldr	r2, [r7, #4]
 8012180:	429a      	cmp	r2, r3
 8012182:	d903      	bls.n	801218c <pvPortMalloc+0xa8>
 8012184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d1f1      	bne.n	8012170 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801218c:	4b35      	ldr	r3, [pc, #212]	; (8012264 <pvPortMalloc+0x180>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012192:	429a      	cmp	r2, r3
 8012194:	d04d      	beq.n	8012232 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012196:	6a3b      	ldr	r3, [r7, #32]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	2208      	movs	r2, #8
 801219c:	4413      	add	r3, r2
 801219e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80121a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a2:	681a      	ldr	r2, [r3, #0]
 80121a4:	6a3b      	ldr	r3, [r7, #32]
 80121a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80121a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121aa:	685a      	ldr	r2, [r3, #4]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	1ad2      	subs	r2, r2, r3
 80121b0:	2308      	movs	r3, #8
 80121b2:	005b      	lsls	r3, r3, #1
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d921      	bls.n	80121fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80121b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	4413      	add	r3, r2
 80121be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	f003 0307 	and.w	r3, r3, #7
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d00c      	beq.n	80121e4 <pvPortMalloc+0x100>
	__asm volatile
 80121ca:	f04f 0310 	mov.w	r3, #16
 80121ce:	b672      	cpsid	i
 80121d0:	f383 8811 	msr	BASEPRI, r3
 80121d4:	f3bf 8f6f 	isb	sy
 80121d8:	f3bf 8f4f 	dsb	sy
 80121dc:	b662      	cpsie	i
 80121de:	613b      	str	r3, [r7, #16]
}
 80121e0:	bf00      	nop
 80121e2:	e7fe      	b.n	80121e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80121e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e6:	685a      	ldr	r2, [r3, #4]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	1ad2      	subs	r2, r2, r3
 80121ec:	69bb      	ldr	r3, [r7, #24]
 80121ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80121f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80121f6:	69b8      	ldr	r0, [r7, #24]
 80121f8:	f000 f8fe 	bl	80123f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80121fc:	4b1b      	ldr	r3, [pc, #108]	; (801226c <pvPortMalloc+0x188>)
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012202:	685b      	ldr	r3, [r3, #4]
 8012204:	1ad3      	subs	r3, r2, r3
 8012206:	4a19      	ldr	r2, [pc, #100]	; (801226c <pvPortMalloc+0x188>)
 8012208:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801220a:	4b18      	ldr	r3, [pc, #96]	; (801226c <pvPortMalloc+0x188>)
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	4b19      	ldr	r3, [pc, #100]	; (8012274 <pvPortMalloc+0x190>)
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	429a      	cmp	r2, r3
 8012214:	d203      	bcs.n	801221e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012216:	4b15      	ldr	r3, [pc, #84]	; (801226c <pvPortMalloc+0x188>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	4a16      	ldr	r2, [pc, #88]	; (8012274 <pvPortMalloc+0x190>)
 801221c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012220:	685a      	ldr	r2, [r3, #4]
 8012222:	4b11      	ldr	r3, [pc, #68]	; (8012268 <pvPortMalloc+0x184>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	431a      	orrs	r2, r3
 8012228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222e:	2200      	movs	r2, #0
 8012230:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012232:	f7fe fbeb 	bl	8010a0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012236:	69fb      	ldr	r3, [r7, #28]
 8012238:	f003 0307 	and.w	r3, r3, #7
 801223c:	2b00      	cmp	r3, #0
 801223e:	d00c      	beq.n	801225a <pvPortMalloc+0x176>
	__asm volatile
 8012240:	f04f 0310 	mov.w	r3, #16
 8012244:	b672      	cpsid	i
 8012246:	f383 8811 	msr	BASEPRI, r3
 801224a:	f3bf 8f6f 	isb	sy
 801224e:	f3bf 8f4f 	dsb	sy
 8012252:	b662      	cpsie	i
 8012254:	60fb      	str	r3, [r7, #12]
}
 8012256:	bf00      	nop
 8012258:	e7fe      	b.n	8012258 <pvPortMalloc+0x174>
	return pvReturn;
 801225a:	69fb      	ldr	r3, [r7, #28]
}
 801225c:	4618      	mov	r0, r3
 801225e:	3728      	adds	r7, #40	; 0x28
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}
 8012264:	20005ca0 	.word	0x20005ca0
 8012268:	20005cac 	.word	0x20005cac
 801226c:	20005ca4 	.word	0x20005ca4
 8012270:	20005c98 	.word	0x20005c98
 8012274:	20005ca8 	.word	0x20005ca8

08012278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b086      	sub	sp, #24
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d04c      	beq.n	8012324 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801228a:	2308      	movs	r3, #8
 801228c:	425b      	negs	r3, r3
 801228e:	697a      	ldr	r2, [r7, #20]
 8012290:	4413      	add	r3, r2
 8012292:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	685a      	ldr	r2, [r3, #4]
 801229c:	4b23      	ldr	r3, [pc, #140]	; (801232c <vPortFree+0xb4>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	4013      	ands	r3, r2
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d10c      	bne.n	80122c0 <vPortFree+0x48>
	__asm volatile
 80122a6:	f04f 0310 	mov.w	r3, #16
 80122aa:	b672      	cpsid	i
 80122ac:	f383 8811 	msr	BASEPRI, r3
 80122b0:	f3bf 8f6f 	isb	sy
 80122b4:	f3bf 8f4f 	dsb	sy
 80122b8:	b662      	cpsie	i
 80122ba:	60fb      	str	r3, [r7, #12]
}
 80122bc:	bf00      	nop
 80122be:	e7fe      	b.n	80122be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d00c      	beq.n	80122e2 <vPortFree+0x6a>
	__asm volatile
 80122c8:	f04f 0310 	mov.w	r3, #16
 80122cc:	b672      	cpsid	i
 80122ce:	f383 8811 	msr	BASEPRI, r3
 80122d2:	f3bf 8f6f 	isb	sy
 80122d6:	f3bf 8f4f 	dsb	sy
 80122da:	b662      	cpsie	i
 80122dc:	60bb      	str	r3, [r7, #8]
}
 80122de:	bf00      	nop
 80122e0:	e7fe      	b.n	80122e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	685a      	ldr	r2, [r3, #4]
 80122e6:	4b11      	ldr	r3, [pc, #68]	; (801232c <vPortFree+0xb4>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	4013      	ands	r3, r2
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d019      	beq.n	8012324 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d115      	bne.n	8012324 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	685a      	ldr	r2, [r3, #4]
 80122fc:	4b0b      	ldr	r3, [pc, #44]	; (801232c <vPortFree+0xb4>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	43db      	mvns	r3, r3
 8012302:	401a      	ands	r2, r3
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012308:	f7fe fb72 	bl	80109f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	685a      	ldr	r2, [r3, #4]
 8012310:	4b07      	ldr	r3, [pc, #28]	; (8012330 <vPortFree+0xb8>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	4413      	add	r3, r2
 8012316:	4a06      	ldr	r2, [pc, #24]	; (8012330 <vPortFree+0xb8>)
 8012318:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801231a:	6938      	ldr	r0, [r7, #16]
 801231c:	f000 f86c 	bl	80123f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012320:	f7fe fb74 	bl	8010a0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012324:	bf00      	nop
 8012326:	3718      	adds	r7, #24
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	20005cac 	.word	0x20005cac
 8012330:	20005ca4 	.word	0x20005ca4

08012334 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012334:	b480      	push	{r7}
 8012336:	b085      	sub	sp, #20
 8012338:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801233a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801233e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012340:	4b27      	ldr	r3, [pc, #156]	; (80123e0 <prvHeapInit+0xac>)
 8012342:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	f003 0307 	and.w	r3, r3, #7
 801234a:	2b00      	cmp	r3, #0
 801234c:	d00c      	beq.n	8012368 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	3307      	adds	r3, #7
 8012352:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f023 0307 	bic.w	r3, r3, #7
 801235a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801235c:	68ba      	ldr	r2, [r7, #8]
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	1ad3      	subs	r3, r2, r3
 8012362:	4a1f      	ldr	r2, [pc, #124]	; (80123e0 <prvHeapInit+0xac>)
 8012364:	4413      	add	r3, r2
 8012366:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801236c:	4a1d      	ldr	r2, [pc, #116]	; (80123e4 <prvHeapInit+0xb0>)
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012372:	4b1c      	ldr	r3, [pc, #112]	; (80123e4 <prvHeapInit+0xb0>)
 8012374:	2200      	movs	r2, #0
 8012376:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	68ba      	ldr	r2, [r7, #8]
 801237c:	4413      	add	r3, r2
 801237e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012380:	2208      	movs	r2, #8
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	1a9b      	subs	r3, r3, r2
 8012386:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	f023 0307 	bic.w	r3, r3, #7
 801238e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	4a15      	ldr	r2, [pc, #84]	; (80123e8 <prvHeapInit+0xb4>)
 8012394:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012396:	4b14      	ldr	r3, [pc, #80]	; (80123e8 <prvHeapInit+0xb4>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	2200      	movs	r2, #0
 801239c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801239e:	4b12      	ldr	r3, [pc, #72]	; (80123e8 <prvHeapInit+0xb4>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2200      	movs	r2, #0
 80123a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	68fa      	ldr	r2, [r7, #12]
 80123ae:	1ad2      	subs	r2, r2, r3
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80123b4:	4b0c      	ldr	r3, [pc, #48]	; (80123e8 <prvHeapInit+0xb4>)
 80123b6:	681a      	ldr	r2, [r3, #0]
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80123bc:	683b      	ldr	r3, [r7, #0]
 80123be:	685b      	ldr	r3, [r3, #4]
 80123c0:	4a0a      	ldr	r2, [pc, #40]	; (80123ec <prvHeapInit+0xb8>)
 80123c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	4a09      	ldr	r2, [pc, #36]	; (80123f0 <prvHeapInit+0xbc>)
 80123ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80123cc:	4b09      	ldr	r3, [pc, #36]	; (80123f4 <prvHeapInit+0xc0>)
 80123ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80123d2:	601a      	str	r2, [r3, #0]
}
 80123d4:	bf00      	nop
 80123d6:	3714      	adds	r7, #20
 80123d8:	46bd      	mov	sp, r7
 80123da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123de:	4770      	bx	lr
 80123e0:	20002098 	.word	0x20002098
 80123e4:	20005c98 	.word	0x20005c98
 80123e8:	20005ca0 	.word	0x20005ca0
 80123ec:	20005ca8 	.word	0x20005ca8
 80123f0:	20005ca4 	.word	0x20005ca4
 80123f4:	20005cac 	.word	0x20005cac

080123f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80123f8:	b480      	push	{r7}
 80123fa:	b085      	sub	sp, #20
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012400:	4b28      	ldr	r3, [pc, #160]	; (80124a4 <prvInsertBlockIntoFreeList+0xac>)
 8012402:	60fb      	str	r3, [r7, #12]
 8012404:	e002      	b.n	801240c <prvInsertBlockIntoFreeList+0x14>
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	60fb      	str	r3, [r7, #12]
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	687a      	ldr	r2, [r7, #4]
 8012412:	429a      	cmp	r2, r3
 8012414:	d8f7      	bhi.n	8012406 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	68ba      	ldr	r2, [r7, #8]
 8012420:	4413      	add	r3, r2
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	429a      	cmp	r2, r3
 8012426:	d108      	bne.n	801243a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	685a      	ldr	r2, [r3, #4]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	441a      	add	r2, r3
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	68ba      	ldr	r2, [r7, #8]
 8012444:	441a      	add	r2, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	429a      	cmp	r2, r3
 801244c:	d118      	bne.n	8012480 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681a      	ldr	r2, [r3, #0]
 8012452:	4b15      	ldr	r3, [pc, #84]	; (80124a8 <prvInsertBlockIntoFreeList+0xb0>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	429a      	cmp	r2, r3
 8012458:	d00d      	beq.n	8012476 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	685a      	ldr	r2, [r3, #4]
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	441a      	add	r2, r3
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	601a      	str	r2, [r3, #0]
 8012474:	e008      	b.n	8012488 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012476:	4b0c      	ldr	r3, [pc, #48]	; (80124a8 <prvInsertBlockIntoFreeList+0xb0>)
 8012478:	681a      	ldr	r2, [r3, #0]
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	601a      	str	r2, [r3, #0]
 801247e:	e003      	b.n	8012488 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681a      	ldr	r2, [r3, #0]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012488:	68fa      	ldr	r2, [r7, #12]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	429a      	cmp	r2, r3
 801248e:	d002      	beq.n	8012496 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012496:	bf00      	nop
 8012498:	3714      	adds	r7, #20
 801249a:	46bd      	mov	sp, r7
 801249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a0:	4770      	bx	lr
 80124a2:	bf00      	nop
 80124a4:	20005c98 	.word	0x20005c98
 80124a8:	20005ca0 	.word	0x20005ca0

080124ac <__errno>:
 80124ac:	4b01      	ldr	r3, [pc, #4]	; (80124b4 <__errno+0x8>)
 80124ae:	6818      	ldr	r0, [r3, #0]
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop
 80124b4:	200001e4 	.word	0x200001e4

080124b8 <std>:
 80124b8:	2300      	movs	r3, #0
 80124ba:	b510      	push	{r4, lr}
 80124bc:	4604      	mov	r4, r0
 80124be:	e9c0 3300 	strd	r3, r3, [r0]
 80124c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80124c6:	6083      	str	r3, [r0, #8]
 80124c8:	8181      	strh	r1, [r0, #12]
 80124ca:	6643      	str	r3, [r0, #100]	; 0x64
 80124cc:	81c2      	strh	r2, [r0, #14]
 80124ce:	6183      	str	r3, [r0, #24]
 80124d0:	4619      	mov	r1, r3
 80124d2:	2208      	movs	r2, #8
 80124d4:	305c      	adds	r0, #92	; 0x5c
 80124d6:	f000 f91a 	bl	801270e <memset>
 80124da:	4b05      	ldr	r3, [pc, #20]	; (80124f0 <std+0x38>)
 80124dc:	6263      	str	r3, [r4, #36]	; 0x24
 80124de:	4b05      	ldr	r3, [pc, #20]	; (80124f4 <std+0x3c>)
 80124e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80124e2:	4b05      	ldr	r3, [pc, #20]	; (80124f8 <std+0x40>)
 80124e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80124e6:	4b05      	ldr	r3, [pc, #20]	; (80124fc <std+0x44>)
 80124e8:	6224      	str	r4, [r4, #32]
 80124ea:	6323      	str	r3, [r4, #48]	; 0x30
 80124ec:	bd10      	pop	{r4, pc}
 80124ee:	bf00      	nop
 80124f0:	080132dd 	.word	0x080132dd
 80124f4:	080132ff 	.word	0x080132ff
 80124f8:	08013337 	.word	0x08013337
 80124fc:	0801335b 	.word	0x0801335b

08012500 <_cleanup_r>:
 8012500:	4901      	ldr	r1, [pc, #4]	; (8012508 <_cleanup_r+0x8>)
 8012502:	f000 b8af 	b.w	8012664 <_fwalk_reent>
 8012506:	bf00      	nop
 8012508:	08014229 	.word	0x08014229

0801250c <__sfmoreglue>:
 801250c:	b570      	push	{r4, r5, r6, lr}
 801250e:	2268      	movs	r2, #104	; 0x68
 8012510:	1e4d      	subs	r5, r1, #1
 8012512:	4355      	muls	r5, r2
 8012514:	460e      	mov	r6, r1
 8012516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801251a:	f000 f921 	bl	8012760 <_malloc_r>
 801251e:	4604      	mov	r4, r0
 8012520:	b140      	cbz	r0, 8012534 <__sfmoreglue+0x28>
 8012522:	2100      	movs	r1, #0
 8012524:	e9c0 1600 	strd	r1, r6, [r0]
 8012528:	300c      	adds	r0, #12
 801252a:	60a0      	str	r0, [r4, #8]
 801252c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012530:	f000 f8ed 	bl	801270e <memset>
 8012534:	4620      	mov	r0, r4
 8012536:	bd70      	pop	{r4, r5, r6, pc}

08012538 <__sfp_lock_acquire>:
 8012538:	4801      	ldr	r0, [pc, #4]	; (8012540 <__sfp_lock_acquire+0x8>)
 801253a:	f000 b8d8 	b.w	80126ee <__retarget_lock_acquire_recursive>
 801253e:	bf00      	nop
 8012540:	20005cb1 	.word	0x20005cb1

08012544 <__sfp_lock_release>:
 8012544:	4801      	ldr	r0, [pc, #4]	; (801254c <__sfp_lock_release+0x8>)
 8012546:	f000 b8d3 	b.w	80126f0 <__retarget_lock_release_recursive>
 801254a:	bf00      	nop
 801254c:	20005cb1 	.word	0x20005cb1

08012550 <__sinit_lock_acquire>:
 8012550:	4801      	ldr	r0, [pc, #4]	; (8012558 <__sinit_lock_acquire+0x8>)
 8012552:	f000 b8cc 	b.w	80126ee <__retarget_lock_acquire_recursive>
 8012556:	bf00      	nop
 8012558:	20005cb2 	.word	0x20005cb2

0801255c <__sinit_lock_release>:
 801255c:	4801      	ldr	r0, [pc, #4]	; (8012564 <__sinit_lock_release+0x8>)
 801255e:	f000 b8c7 	b.w	80126f0 <__retarget_lock_release_recursive>
 8012562:	bf00      	nop
 8012564:	20005cb2 	.word	0x20005cb2

08012568 <__sinit>:
 8012568:	b510      	push	{r4, lr}
 801256a:	4604      	mov	r4, r0
 801256c:	f7ff fff0 	bl	8012550 <__sinit_lock_acquire>
 8012570:	69a3      	ldr	r3, [r4, #24]
 8012572:	b11b      	cbz	r3, 801257c <__sinit+0x14>
 8012574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012578:	f7ff bff0 	b.w	801255c <__sinit_lock_release>
 801257c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012580:	6523      	str	r3, [r4, #80]	; 0x50
 8012582:	4b13      	ldr	r3, [pc, #76]	; (80125d0 <__sinit+0x68>)
 8012584:	4a13      	ldr	r2, [pc, #76]	; (80125d4 <__sinit+0x6c>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	62a2      	str	r2, [r4, #40]	; 0x28
 801258a:	42a3      	cmp	r3, r4
 801258c:	bf04      	itt	eq
 801258e:	2301      	moveq	r3, #1
 8012590:	61a3      	streq	r3, [r4, #24]
 8012592:	4620      	mov	r0, r4
 8012594:	f000 f820 	bl	80125d8 <__sfp>
 8012598:	6060      	str	r0, [r4, #4]
 801259a:	4620      	mov	r0, r4
 801259c:	f000 f81c 	bl	80125d8 <__sfp>
 80125a0:	60a0      	str	r0, [r4, #8]
 80125a2:	4620      	mov	r0, r4
 80125a4:	f000 f818 	bl	80125d8 <__sfp>
 80125a8:	2200      	movs	r2, #0
 80125aa:	60e0      	str	r0, [r4, #12]
 80125ac:	2104      	movs	r1, #4
 80125ae:	6860      	ldr	r0, [r4, #4]
 80125b0:	f7ff ff82 	bl	80124b8 <std>
 80125b4:	68a0      	ldr	r0, [r4, #8]
 80125b6:	2201      	movs	r2, #1
 80125b8:	2109      	movs	r1, #9
 80125ba:	f7ff ff7d 	bl	80124b8 <std>
 80125be:	68e0      	ldr	r0, [r4, #12]
 80125c0:	2202      	movs	r2, #2
 80125c2:	2112      	movs	r1, #18
 80125c4:	f7ff ff78 	bl	80124b8 <std>
 80125c8:	2301      	movs	r3, #1
 80125ca:	61a3      	str	r3, [r4, #24]
 80125cc:	e7d2      	b.n	8012574 <__sinit+0xc>
 80125ce:	bf00      	nop
 80125d0:	080157ac 	.word	0x080157ac
 80125d4:	08012501 	.word	0x08012501

080125d8 <__sfp>:
 80125d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125da:	4607      	mov	r7, r0
 80125dc:	f7ff ffac 	bl	8012538 <__sfp_lock_acquire>
 80125e0:	4b1e      	ldr	r3, [pc, #120]	; (801265c <__sfp+0x84>)
 80125e2:	681e      	ldr	r6, [r3, #0]
 80125e4:	69b3      	ldr	r3, [r6, #24]
 80125e6:	b913      	cbnz	r3, 80125ee <__sfp+0x16>
 80125e8:	4630      	mov	r0, r6
 80125ea:	f7ff ffbd 	bl	8012568 <__sinit>
 80125ee:	3648      	adds	r6, #72	; 0x48
 80125f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80125f4:	3b01      	subs	r3, #1
 80125f6:	d503      	bpl.n	8012600 <__sfp+0x28>
 80125f8:	6833      	ldr	r3, [r6, #0]
 80125fa:	b30b      	cbz	r3, 8012640 <__sfp+0x68>
 80125fc:	6836      	ldr	r6, [r6, #0]
 80125fe:	e7f7      	b.n	80125f0 <__sfp+0x18>
 8012600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012604:	b9d5      	cbnz	r5, 801263c <__sfp+0x64>
 8012606:	4b16      	ldr	r3, [pc, #88]	; (8012660 <__sfp+0x88>)
 8012608:	60e3      	str	r3, [r4, #12]
 801260a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801260e:	6665      	str	r5, [r4, #100]	; 0x64
 8012610:	f000 f86c 	bl	80126ec <__retarget_lock_init_recursive>
 8012614:	f7ff ff96 	bl	8012544 <__sfp_lock_release>
 8012618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801261c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012620:	6025      	str	r5, [r4, #0]
 8012622:	61a5      	str	r5, [r4, #24]
 8012624:	2208      	movs	r2, #8
 8012626:	4629      	mov	r1, r5
 8012628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801262c:	f000 f86f 	bl	801270e <memset>
 8012630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012638:	4620      	mov	r0, r4
 801263a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801263c:	3468      	adds	r4, #104	; 0x68
 801263e:	e7d9      	b.n	80125f4 <__sfp+0x1c>
 8012640:	2104      	movs	r1, #4
 8012642:	4638      	mov	r0, r7
 8012644:	f7ff ff62 	bl	801250c <__sfmoreglue>
 8012648:	4604      	mov	r4, r0
 801264a:	6030      	str	r0, [r6, #0]
 801264c:	2800      	cmp	r0, #0
 801264e:	d1d5      	bne.n	80125fc <__sfp+0x24>
 8012650:	f7ff ff78 	bl	8012544 <__sfp_lock_release>
 8012654:	230c      	movs	r3, #12
 8012656:	603b      	str	r3, [r7, #0]
 8012658:	e7ee      	b.n	8012638 <__sfp+0x60>
 801265a:	bf00      	nop
 801265c:	080157ac 	.word	0x080157ac
 8012660:	ffff0001 	.word	0xffff0001

08012664 <_fwalk_reent>:
 8012664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012668:	4606      	mov	r6, r0
 801266a:	4688      	mov	r8, r1
 801266c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012670:	2700      	movs	r7, #0
 8012672:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012676:	f1b9 0901 	subs.w	r9, r9, #1
 801267a:	d505      	bpl.n	8012688 <_fwalk_reent+0x24>
 801267c:	6824      	ldr	r4, [r4, #0]
 801267e:	2c00      	cmp	r4, #0
 8012680:	d1f7      	bne.n	8012672 <_fwalk_reent+0xe>
 8012682:	4638      	mov	r0, r7
 8012684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012688:	89ab      	ldrh	r3, [r5, #12]
 801268a:	2b01      	cmp	r3, #1
 801268c:	d907      	bls.n	801269e <_fwalk_reent+0x3a>
 801268e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012692:	3301      	adds	r3, #1
 8012694:	d003      	beq.n	801269e <_fwalk_reent+0x3a>
 8012696:	4629      	mov	r1, r5
 8012698:	4630      	mov	r0, r6
 801269a:	47c0      	blx	r8
 801269c:	4307      	orrs	r7, r0
 801269e:	3568      	adds	r5, #104	; 0x68
 80126a0:	e7e9      	b.n	8012676 <_fwalk_reent+0x12>
	...

080126a4 <__libc_init_array>:
 80126a4:	b570      	push	{r4, r5, r6, lr}
 80126a6:	4d0d      	ldr	r5, [pc, #52]	; (80126dc <__libc_init_array+0x38>)
 80126a8:	4c0d      	ldr	r4, [pc, #52]	; (80126e0 <__libc_init_array+0x3c>)
 80126aa:	1b64      	subs	r4, r4, r5
 80126ac:	10a4      	asrs	r4, r4, #2
 80126ae:	2600      	movs	r6, #0
 80126b0:	42a6      	cmp	r6, r4
 80126b2:	d109      	bne.n	80126c8 <__libc_init_array+0x24>
 80126b4:	4d0b      	ldr	r5, [pc, #44]	; (80126e4 <__libc_init_array+0x40>)
 80126b6:	4c0c      	ldr	r4, [pc, #48]	; (80126e8 <__libc_init_array+0x44>)
 80126b8:	f002 feb4 	bl	8015424 <_init>
 80126bc:	1b64      	subs	r4, r4, r5
 80126be:	10a4      	asrs	r4, r4, #2
 80126c0:	2600      	movs	r6, #0
 80126c2:	42a6      	cmp	r6, r4
 80126c4:	d105      	bne.n	80126d2 <__libc_init_array+0x2e>
 80126c6:	bd70      	pop	{r4, r5, r6, pc}
 80126c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80126cc:	4798      	blx	r3
 80126ce:	3601      	adds	r6, #1
 80126d0:	e7ee      	b.n	80126b0 <__libc_init_array+0xc>
 80126d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80126d6:	4798      	blx	r3
 80126d8:	3601      	adds	r6, #1
 80126da:	e7f2      	b.n	80126c2 <__libc_init_array+0x1e>
 80126dc:	08015da8 	.word	0x08015da8
 80126e0:	08015da8 	.word	0x08015da8
 80126e4:	08015da8 	.word	0x08015da8
 80126e8:	08015dac 	.word	0x08015dac

080126ec <__retarget_lock_init_recursive>:
 80126ec:	4770      	bx	lr

080126ee <__retarget_lock_acquire_recursive>:
 80126ee:	4770      	bx	lr

080126f0 <__retarget_lock_release_recursive>:
 80126f0:	4770      	bx	lr

080126f2 <memcpy>:
 80126f2:	440a      	add	r2, r1
 80126f4:	4291      	cmp	r1, r2
 80126f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80126fa:	d100      	bne.n	80126fe <memcpy+0xc>
 80126fc:	4770      	bx	lr
 80126fe:	b510      	push	{r4, lr}
 8012700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012708:	4291      	cmp	r1, r2
 801270a:	d1f9      	bne.n	8012700 <memcpy+0xe>
 801270c:	bd10      	pop	{r4, pc}

0801270e <memset>:
 801270e:	4402      	add	r2, r0
 8012710:	4603      	mov	r3, r0
 8012712:	4293      	cmp	r3, r2
 8012714:	d100      	bne.n	8012718 <memset+0xa>
 8012716:	4770      	bx	lr
 8012718:	f803 1b01 	strb.w	r1, [r3], #1
 801271c:	e7f9      	b.n	8012712 <memset+0x4>
	...

08012720 <sbrk_aligned>:
 8012720:	b570      	push	{r4, r5, r6, lr}
 8012722:	4e0e      	ldr	r6, [pc, #56]	; (801275c <sbrk_aligned+0x3c>)
 8012724:	460c      	mov	r4, r1
 8012726:	6831      	ldr	r1, [r6, #0]
 8012728:	4605      	mov	r5, r0
 801272a:	b911      	cbnz	r1, 8012732 <sbrk_aligned+0x12>
 801272c:	f000 fdc6 	bl	80132bc <_sbrk_r>
 8012730:	6030      	str	r0, [r6, #0]
 8012732:	4621      	mov	r1, r4
 8012734:	4628      	mov	r0, r5
 8012736:	f000 fdc1 	bl	80132bc <_sbrk_r>
 801273a:	1c43      	adds	r3, r0, #1
 801273c:	d00a      	beq.n	8012754 <sbrk_aligned+0x34>
 801273e:	1cc4      	adds	r4, r0, #3
 8012740:	f024 0403 	bic.w	r4, r4, #3
 8012744:	42a0      	cmp	r0, r4
 8012746:	d007      	beq.n	8012758 <sbrk_aligned+0x38>
 8012748:	1a21      	subs	r1, r4, r0
 801274a:	4628      	mov	r0, r5
 801274c:	f000 fdb6 	bl	80132bc <_sbrk_r>
 8012750:	3001      	adds	r0, #1
 8012752:	d101      	bne.n	8012758 <sbrk_aligned+0x38>
 8012754:	f04f 34ff 	mov.w	r4, #4294967295
 8012758:	4620      	mov	r0, r4
 801275a:	bd70      	pop	{r4, r5, r6, pc}
 801275c:	20005cb8 	.word	0x20005cb8

08012760 <_malloc_r>:
 8012760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012764:	1ccd      	adds	r5, r1, #3
 8012766:	f025 0503 	bic.w	r5, r5, #3
 801276a:	3508      	adds	r5, #8
 801276c:	2d0c      	cmp	r5, #12
 801276e:	bf38      	it	cc
 8012770:	250c      	movcc	r5, #12
 8012772:	2d00      	cmp	r5, #0
 8012774:	4607      	mov	r7, r0
 8012776:	db01      	blt.n	801277c <_malloc_r+0x1c>
 8012778:	42a9      	cmp	r1, r5
 801277a:	d905      	bls.n	8012788 <_malloc_r+0x28>
 801277c:	230c      	movs	r3, #12
 801277e:	603b      	str	r3, [r7, #0]
 8012780:	2600      	movs	r6, #0
 8012782:	4630      	mov	r0, r6
 8012784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012788:	4e2e      	ldr	r6, [pc, #184]	; (8012844 <_malloc_r+0xe4>)
 801278a:	f001 fe0d 	bl	80143a8 <__malloc_lock>
 801278e:	6833      	ldr	r3, [r6, #0]
 8012790:	461c      	mov	r4, r3
 8012792:	bb34      	cbnz	r4, 80127e2 <_malloc_r+0x82>
 8012794:	4629      	mov	r1, r5
 8012796:	4638      	mov	r0, r7
 8012798:	f7ff ffc2 	bl	8012720 <sbrk_aligned>
 801279c:	1c43      	adds	r3, r0, #1
 801279e:	4604      	mov	r4, r0
 80127a0:	d14d      	bne.n	801283e <_malloc_r+0xde>
 80127a2:	6834      	ldr	r4, [r6, #0]
 80127a4:	4626      	mov	r6, r4
 80127a6:	2e00      	cmp	r6, #0
 80127a8:	d140      	bne.n	801282c <_malloc_r+0xcc>
 80127aa:	6823      	ldr	r3, [r4, #0]
 80127ac:	4631      	mov	r1, r6
 80127ae:	4638      	mov	r0, r7
 80127b0:	eb04 0803 	add.w	r8, r4, r3
 80127b4:	f000 fd82 	bl	80132bc <_sbrk_r>
 80127b8:	4580      	cmp	r8, r0
 80127ba:	d13a      	bne.n	8012832 <_malloc_r+0xd2>
 80127bc:	6821      	ldr	r1, [r4, #0]
 80127be:	3503      	adds	r5, #3
 80127c0:	1a6d      	subs	r5, r5, r1
 80127c2:	f025 0503 	bic.w	r5, r5, #3
 80127c6:	3508      	adds	r5, #8
 80127c8:	2d0c      	cmp	r5, #12
 80127ca:	bf38      	it	cc
 80127cc:	250c      	movcc	r5, #12
 80127ce:	4629      	mov	r1, r5
 80127d0:	4638      	mov	r0, r7
 80127d2:	f7ff ffa5 	bl	8012720 <sbrk_aligned>
 80127d6:	3001      	adds	r0, #1
 80127d8:	d02b      	beq.n	8012832 <_malloc_r+0xd2>
 80127da:	6823      	ldr	r3, [r4, #0]
 80127dc:	442b      	add	r3, r5
 80127de:	6023      	str	r3, [r4, #0]
 80127e0:	e00e      	b.n	8012800 <_malloc_r+0xa0>
 80127e2:	6822      	ldr	r2, [r4, #0]
 80127e4:	1b52      	subs	r2, r2, r5
 80127e6:	d41e      	bmi.n	8012826 <_malloc_r+0xc6>
 80127e8:	2a0b      	cmp	r2, #11
 80127ea:	d916      	bls.n	801281a <_malloc_r+0xba>
 80127ec:	1961      	adds	r1, r4, r5
 80127ee:	42a3      	cmp	r3, r4
 80127f0:	6025      	str	r5, [r4, #0]
 80127f2:	bf18      	it	ne
 80127f4:	6059      	strne	r1, [r3, #4]
 80127f6:	6863      	ldr	r3, [r4, #4]
 80127f8:	bf08      	it	eq
 80127fa:	6031      	streq	r1, [r6, #0]
 80127fc:	5162      	str	r2, [r4, r5]
 80127fe:	604b      	str	r3, [r1, #4]
 8012800:	4638      	mov	r0, r7
 8012802:	f104 060b 	add.w	r6, r4, #11
 8012806:	f001 fdd5 	bl	80143b4 <__malloc_unlock>
 801280a:	f026 0607 	bic.w	r6, r6, #7
 801280e:	1d23      	adds	r3, r4, #4
 8012810:	1af2      	subs	r2, r6, r3
 8012812:	d0b6      	beq.n	8012782 <_malloc_r+0x22>
 8012814:	1b9b      	subs	r3, r3, r6
 8012816:	50a3      	str	r3, [r4, r2]
 8012818:	e7b3      	b.n	8012782 <_malloc_r+0x22>
 801281a:	6862      	ldr	r2, [r4, #4]
 801281c:	42a3      	cmp	r3, r4
 801281e:	bf0c      	ite	eq
 8012820:	6032      	streq	r2, [r6, #0]
 8012822:	605a      	strne	r2, [r3, #4]
 8012824:	e7ec      	b.n	8012800 <_malloc_r+0xa0>
 8012826:	4623      	mov	r3, r4
 8012828:	6864      	ldr	r4, [r4, #4]
 801282a:	e7b2      	b.n	8012792 <_malloc_r+0x32>
 801282c:	4634      	mov	r4, r6
 801282e:	6876      	ldr	r6, [r6, #4]
 8012830:	e7b9      	b.n	80127a6 <_malloc_r+0x46>
 8012832:	230c      	movs	r3, #12
 8012834:	603b      	str	r3, [r7, #0]
 8012836:	4638      	mov	r0, r7
 8012838:	f001 fdbc 	bl	80143b4 <__malloc_unlock>
 801283c:	e7a1      	b.n	8012782 <_malloc_r+0x22>
 801283e:	6025      	str	r5, [r4, #0]
 8012840:	e7de      	b.n	8012800 <_malloc_r+0xa0>
 8012842:	bf00      	nop
 8012844:	20005cb4 	.word	0x20005cb4

08012848 <__cvt>:
 8012848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801284a:	ed2d 8b02 	vpush	{d8}
 801284e:	eeb0 8b40 	vmov.f64	d8, d0
 8012852:	b085      	sub	sp, #20
 8012854:	4617      	mov	r7, r2
 8012856:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012858:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801285a:	ee18 2a90 	vmov	r2, s17
 801285e:	f025 0520 	bic.w	r5, r5, #32
 8012862:	2a00      	cmp	r2, #0
 8012864:	bfb6      	itet	lt
 8012866:	222d      	movlt	r2, #45	; 0x2d
 8012868:	2200      	movge	r2, #0
 801286a:	eeb1 8b40 	vneglt.f64	d8, d0
 801286e:	2d46      	cmp	r5, #70	; 0x46
 8012870:	460c      	mov	r4, r1
 8012872:	701a      	strb	r2, [r3, #0]
 8012874:	d004      	beq.n	8012880 <__cvt+0x38>
 8012876:	2d45      	cmp	r5, #69	; 0x45
 8012878:	d100      	bne.n	801287c <__cvt+0x34>
 801287a:	3401      	adds	r4, #1
 801287c:	2102      	movs	r1, #2
 801287e:	e000      	b.n	8012882 <__cvt+0x3a>
 8012880:	2103      	movs	r1, #3
 8012882:	ab03      	add	r3, sp, #12
 8012884:	9301      	str	r3, [sp, #4]
 8012886:	ab02      	add	r3, sp, #8
 8012888:	9300      	str	r3, [sp, #0]
 801288a:	4622      	mov	r2, r4
 801288c:	4633      	mov	r3, r6
 801288e:	eeb0 0b48 	vmov.f64	d0, d8
 8012892:	f000 fed5 	bl	8013640 <_dtoa_r>
 8012896:	2d47      	cmp	r5, #71	; 0x47
 8012898:	d101      	bne.n	801289e <__cvt+0x56>
 801289a:	07fb      	lsls	r3, r7, #31
 801289c:	d51a      	bpl.n	80128d4 <__cvt+0x8c>
 801289e:	2d46      	cmp	r5, #70	; 0x46
 80128a0:	eb00 0204 	add.w	r2, r0, r4
 80128a4:	d10c      	bne.n	80128c0 <__cvt+0x78>
 80128a6:	7803      	ldrb	r3, [r0, #0]
 80128a8:	2b30      	cmp	r3, #48	; 0x30
 80128aa:	d107      	bne.n	80128bc <__cvt+0x74>
 80128ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b4:	bf1c      	itt	ne
 80128b6:	f1c4 0401 	rsbne	r4, r4, #1
 80128ba:	6034      	strne	r4, [r6, #0]
 80128bc:	6833      	ldr	r3, [r6, #0]
 80128be:	441a      	add	r2, r3
 80128c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c8:	bf08      	it	eq
 80128ca:	9203      	streq	r2, [sp, #12]
 80128cc:	2130      	movs	r1, #48	; 0x30
 80128ce:	9b03      	ldr	r3, [sp, #12]
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d307      	bcc.n	80128e4 <__cvt+0x9c>
 80128d4:	9b03      	ldr	r3, [sp, #12]
 80128d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128d8:	1a1b      	subs	r3, r3, r0
 80128da:	6013      	str	r3, [r2, #0]
 80128dc:	b005      	add	sp, #20
 80128de:	ecbd 8b02 	vpop	{d8}
 80128e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128e4:	1c5c      	adds	r4, r3, #1
 80128e6:	9403      	str	r4, [sp, #12]
 80128e8:	7019      	strb	r1, [r3, #0]
 80128ea:	e7f0      	b.n	80128ce <__cvt+0x86>

080128ec <__exponent>:
 80128ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128ee:	4603      	mov	r3, r0
 80128f0:	2900      	cmp	r1, #0
 80128f2:	bfb8      	it	lt
 80128f4:	4249      	neglt	r1, r1
 80128f6:	f803 2b02 	strb.w	r2, [r3], #2
 80128fa:	bfb4      	ite	lt
 80128fc:	222d      	movlt	r2, #45	; 0x2d
 80128fe:	222b      	movge	r2, #43	; 0x2b
 8012900:	2909      	cmp	r1, #9
 8012902:	7042      	strb	r2, [r0, #1]
 8012904:	dd2a      	ble.n	801295c <__exponent+0x70>
 8012906:	f10d 0407 	add.w	r4, sp, #7
 801290a:	46a4      	mov	ip, r4
 801290c:	270a      	movs	r7, #10
 801290e:	46a6      	mov	lr, r4
 8012910:	460a      	mov	r2, r1
 8012912:	fb91 f6f7 	sdiv	r6, r1, r7
 8012916:	fb07 1516 	mls	r5, r7, r6, r1
 801291a:	3530      	adds	r5, #48	; 0x30
 801291c:	2a63      	cmp	r2, #99	; 0x63
 801291e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012922:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012926:	4631      	mov	r1, r6
 8012928:	dcf1      	bgt.n	801290e <__exponent+0x22>
 801292a:	3130      	adds	r1, #48	; 0x30
 801292c:	f1ae 0502 	sub.w	r5, lr, #2
 8012930:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012934:	1c44      	adds	r4, r0, #1
 8012936:	4629      	mov	r1, r5
 8012938:	4561      	cmp	r1, ip
 801293a:	d30a      	bcc.n	8012952 <__exponent+0x66>
 801293c:	f10d 0209 	add.w	r2, sp, #9
 8012940:	eba2 020e 	sub.w	r2, r2, lr
 8012944:	4565      	cmp	r5, ip
 8012946:	bf88      	it	hi
 8012948:	2200      	movhi	r2, #0
 801294a:	4413      	add	r3, r2
 801294c:	1a18      	subs	r0, r3, r0
 801294e:	b003      	add	sp, #12
 8012950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012952:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012956:	f804 2f01 	strb.w	r2, [r4, #1]!
 801295a:	e7ed      	b.n	8012938 <__exponent+0x4c>
 801295c:	2330      	movs	r3, #48	; 0x30
 801295e:	3130      	adds	r1, #48	; 0x30
 8012960:	7083      	strb	r3, [r0, #2]
 8012962:	70c1      	strb	r1, [r0, #3]
 8012964:	1d03      	adds	r3, r0, #4
 8012966:	e7f1      	b.n	801294c <__exponent+0x60>

08012968 <_printf_float>:
 8012968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801296c:	b08b      	sub	sp, #44	; 0x2c
 801296e:	460c      	mov	r4, r1
 8012970:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012974:	4616      	mov	r6, r2
 8012976:	461f      	mov	r7, r3
 8012978:	4605      	mov	r5, r0
 801297a:	f001 fc91 	bl	80142a0 <_localeconv_r>
 801297e:	f8d0 b000 	ldr.w	fp, [r0]
 8012982:	4658      	mov	r0, fp
 8012984:	f7ed fc5c 	bl	8000240 <strlen>
 8012988:	2300      	movs	r3, #0
 801298a:	9308      	str	r3, [sp, #32]
 801298c:	f8d8 3000 	ldr.w	r3, [r8]
 8012990:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012994:	6822      	ldr	r2, [r4, #0]
 8012996:	3307      	adds	r3, #7
 8012998:	f023 0307 	bic.w	r3, r3, #7
 801299c:	f103 0108 	add.w	r1, r3, #8
 80129a0:	f8c8 1000 	str.w	r1, [r8]
 80129a4:	4682      	mov	sl, r0
 80129a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80129aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80129ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012c10 <_printf_float+0x2a8>
 80129b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80129b6:	eeb0 6bc0 	vabs.f64	d6, d0
 80129ba:	eeb4 6b47 	vcmp.f64	d6, d7
 80129be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c2:	dd24      	ble.n	8012a0e <_printf_float+0xa6>
 80129c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80129c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129cc:	d502      	bpl.n	80129d4 <_printf_float+0x6c>
 80129ce:	232d      	movs	r3, #45	; 0x2d
 80129d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129d4:	4b90      	ldr	r3, [pc, #576]	; (8012c18 <_printf_float+0x2b0>)
 80129d6:	4891      	ldr	r0, [pc, #580]	; (8012c1c <_printf_float+0x2b4>)
 80129d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80129dc:	bf94      	ite	ls
 80129de:	4698      	movls	r8, r3
 80129e0:	4680      	movhi	r8, r0
 80129e2:	2303      	movs	r3, #3
 80129e4:	6123      	str	r3, [r4, #16]
 80129e6:	f022 0204 	bic.w	r2, r2, #4
 80129ea:	2300      	movs	r3, #0
 80129ec:	6022      	str	r2, [r4, #0]
 80129ee:	9304      	str	r3, [sp, #16]
 80129f0:	9700      	str	r7, [sp, #0]
 80129f2:	4633      	mov	r3, r6
 80129f4:	aa09      	add	r2, sp, #36	; 0x24
 80129f6:	4621      	mov	r1, r4
 80129f8:	4628      	mov	r0, r5
 80129fa:	f000 f9d3 	bl	8012da4 <_printf_common>
 80129fe:	3001      	adds	r0, #1
 8012a00:	f040 808a 	bne.w	8012b18 <_printf_float+0x1b0>
 8012a04:	f04f 30ff 	mov.w	r0, #4294967295
 8012a08:	b00b      	add	sp, #44	; 0x2c
 8012a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a0e:	eeb4 0b40 	vcmp.f64	d0, d0
 8012a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a16:	d709      	bvc.n	8012a2c <_printf_float+0xc4>
 8012a18:	ee10 3a90 	vmov	r3, s1
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	bfbc      	itt	lt
 8012a20:	232d      	movlt	r3, #45	; 0x2d
 8012a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012a26:	487e      	ldr	r0, [pc, #504]	; (8012c20 <_printf_float+0x2b8>)
 8012a28:	4b7e      	ldr	r3, [pc, #504]	; (8012c24 <_printf_float+0x2bc>)
 8012a2a:	e7d5      	b.n	80129d8 <_printf_float+0x70>
 8012a2c:	6863      	ldr	r3, [r4, #4]
 8012a2e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012a32:	9104      	str	r1, [sp, #16]
 8012a34:	1c59      	adds	r1, r3, #1
 8012a36:	d13c      	bne.n	8012ab2 <_printf_float+0x14a>
 8012a38:	2306      	movs	r3, #6
 8012a3a:	6063      	str	r3, [r4, #4]
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	9303      	str	r3, [sp, #12]
 8012a40:	ab08      	add	r3, sp, #32
 8012a42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012a46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012a4a:	ab07      	add	r3, sp, #28
 8012a4c:	6861      	ldr	r1, [r4, #4]
 8012a4e:	9300      	str	r3, [sp, #0]
 8012a50:	6022      	str	r2, [r4, #0]
 8012a52:	f10d 031b 	add.w	r3, sp, #27
 8012a56:	4628      	mov	r0, r5
 8012a58:	f7ff fef6 	bl	8012848 <__cvt>
 8012a5c:	9b04      	ldr	r3, [sp, #16]
 8012a5e:	9907      	ldr	r1, [sp, #28]
 8012a60:	2b47      	cmp	r3, #71	; 0x47
 8012a62:	4680      	mov	r8, r0
 8012a64:	d108      	bne.n	8012a78 <_printf_float+0x110>
 8012a66:	1cc8      	adds	r0, r1, #3
 8012a68:	db02      	blt.n	8012a70 <_printf_float+0x108>
 8012a6a:	6863      	ldr	r3, [r4, #4]
 8012a6c:	4299      	cmp	r1, r3
 8012a6e:	dd41      	ble.n	8012af4 <_printf_float+0x18c>
 8012a70:	f1a9 0902 	sub.w	r9, r9, #2
 8012a74:	fa5f f989 	uxtb.w	r9, r9
 8012a78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012a7c:	d820      	bhi.n	8012ac0 <_printf_float+0x158>
 8012a7e:	3901      	subs	r1, #1
 8012a80:	464a      	mov	r2, r9
 8012a82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012a86:	9107      	str	r1, [sp, #28]
 8012a88:	f7ff ff30 	bl	80128ec <__exponent>
 8012a8c:	9a08      	ldr	r2, [sp, #32]
 8012a8e:	9004      	str	r0, [sp, #16]
 8012a90:	1813      	adds	r3, r2, r0
 8012a92:	2a01      	cmp	r2, #1
 8012a94:	6123      	str	r3, [r4, #16]
 8012a96:	dc02      	bgt.n	8012a9e <_printf_float+0x136>
 8012a98:	6822      	ldr	r2, [r4, #0]
 8012a9a:	07d2      	lsls	r2, r2, #31
 8012a9c:	d501      	bpl.n	8012aa2 <_printf_float+0x13a>
 8012a9e:	3301      	adds	r3, #1
 8012aa0:	6123      	str	r3, [r4, #16]
 8012aa2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d0a2      	beq.n	80129f0 <_printf_float+0x88>
 8012aaa:	232d      	movs	r3, #45	; 0x2d
 8012aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ab0:	e79e      	b.n	80129f0 <_printf_float+0x88>
 8012ab2:	9904      	ldr	r1, [sp, #16]
 8012ab4:	2947      	cmp	r1, #71	; 0x47
 8012ab6:	d1c1      	bne.n	8012a3c <_printf_float+0xd4>
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d1bf      	bne.n	8012a3c <_printf_float+0xd4>
 8012abc:	2301      	movs	r3, #1
 8012abe:	e7bc      	b.n	8012a3a <_printf_float+0xd2>
 8012ac0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012ac4:	d118      	bne.n	8012af8 <_printf_float+0x190>
 8012ac6:	2900      	cmp	r1, #0
 8012ac8:	6863      	ldr	r3, [r4, #4]
 8012aca:	dd0b      	ble.n	8012ae4 <_printf_float+0x17c>
 8012acc:	6121      	str	r1, [r4, #16]
 8012ace:	b913      	cbnz	r3, 8012ad6 <_printf_float+0x16e>
 8012ad0:	6822      	ldr	r2, [r4, #0]
 8012ad2:	07d0      	lsls	r0, r2, #31
 8012ad4:	d502      	bpl.n	8012adc <_printf_float+0x174>
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	440b      	add	r3, r1
 8012ada:	6123      	str	r3, [r4, #16]
 8012adc:	2300      	movs	r3, #0
 8012ade:	65a1      	str	r1, [r4, #88]	; 0x58
 8012ae0:	9304      	str	r3, [sp, #16]
 8012ae2:	e7de      	b.n	8012aa2 <_printf_float+0x13a>
 8012ae4:	b913      	cbnz	r3, 8012aec <_printf_float+0x184>
 8012ae6:	6822      	ldr	r2, [r4, #0]
 8012ae8:	07d2      	lsls	r2, r2, #31
 8012aea:	d501      	bpl.n	8012af0 <_printf_float+0x188>
 8012aec:	3302      	adds	r3, #2
 8012aee:	e7f4      	b.n	8012ada <_printf_float+0x172>
 8012af0:	2301      	movs	r3, #1
 8012af2:	e7f2      	b.n	8012ada <_printf_float+0x172>
 8012af4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012af8:	9b08      	ldr	r3, [sp, #32]
 8012afa:	4299      	cmp	r1, r3
 8012afc:	db05      	blt.n	8012b0a <_printf_float+0x1a2>
 8012afe:	6823      	ldr	r3, [r4, #0]
 8012b00:	6121      	str	r1, [r4, #16]
 8012b02:	07d8      	lsls	r0, r3, #31
 8012b04:	d5ea      	bpl.n	8012adc <_printf_float+0x174>
 8012b06:	1c4b      	adds	r3, r1, #1
 8012b08:	e7e7      	b.n	8012ada <_printf_float+0x172>
 8012b0a:	2900      	cmp	r1, #0
 8012b0c:	bfd4      	ite	le
 8012b0e:	f1c1 0202 	rsble	r2, r1, #2
 8012b12:	2201      	movgt	r2, #1
 8012b14:	4413      	add	r3, r2
 8012b16:	e7e0      	b.n	8012ada <_printf_float+0x172>
 8012b18:	6823      	ldr	r3, [r4, #0]
 8012b1a:	055a      	lsls	r2, r3, #21
 8012b1c:	d407      	bmi.n	8012b2e <_printf_float+0x1c6>
 8012b1e:	6923      	ldr	r3, [r4, #16]
 8012b20:	4642      	mov	r2, r8
 8012b22:	4631      	mov	r1, r6
 8012b24:	4628      	mov	r0, r5
 8012b26:	47b8      	blx	r7
 8012b28:	3001      	adds	r0, #1
 8012b2a:	d12a      	bne.n	8012b82 <_printf_float+0x21a>
 8012b2c:	e76a      	b.n	8012a04 <_printf_float+0x9c>
 8012b2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012b32:	f240 80e2 	bls.w	8012cfa <_printf_float+0x392>
 8012b36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012b3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b42:	d133      	bne.n	8012bac <_printf_float+0x244>
 8012b44:	4a38      	ldr	r2, [pc, #224]	; (8012c28 <_printf_float+0x2c0>)
 8012b46:	2301      	movs	r3, #1
 8012b48:	4631      	mov	r1, r6
 8012b4a:	4628      	mov	r0, r5
 8012b4c:	47b8      	blx	r7
 8012b4e:	3001      	adds	r0, #1
 8012b50:	f43f af58 	beq.w	8012a04 <_printf_float+0x9c>
 8012b54:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	db02      	blt.n	8012b62 <_printf_float+0x1fa>
 8012b5c:	6823      	ldr	r3, [r4, #0]
 8012b5e:	07d8      	lsls	r0, r3, #31
 8012b60:	d50f      	bpl.n	8012b82 <_printf_float+0x21a>
 8012b62:	4653      	mov	r3, sl
 8012b64:	465a      	mov	r2, fp
 8012b66:	4631      	mov	r1, r6
 8012b68:	4628      	mov	r0, r5
 8012b6a:	47b8      	blx	r7
 8012b6c:	3001      	adds	r0, #1
 8012b6e:	f43f af49 	beq.w	8012a04 <_printf_float+0x9c>
 8012b72:	f04f 0800 	mov.w	r8, #0
 8012b76:	f104 091a 	add.w	r9, r4, #26
 8012b7a:	9b08      	ldr	r3, [sp, #32]
 8012b7c:	3b01      	subs	r3, #1
 8012b7e:	4543      	cmp	r3, r8
 8012b80:	dc09      	bgt.n	8012b96 <_printf_float+0x22e>
 8012b82:	6823      	ldr	r3, [r4, #0]
 8012b84:	079b      	lsls	r3, r3, #30
 8012b86:	f100 8108 	bmi.w	8012d9a <_printf_float+0x432>
 8012b8a:	68e0      	ldr	r0, [r4, #12]
 8012b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b8e:	4298      	cmp	r0, r3
 8012b90:	bfb8      	it	lt
 8012b92:	4618      	movlt	r0, r3
 8012b94:	e738      	b.n	8012a08 <_printf_float+0xa0>
 8012b96:	2301      	movs	r3, #1
 8012b98:	464a      	mov	r2, r9
 8012b9a:	4631      	mov	r1, r6
 8012b9c:	4628      	mov	r0, r5
 8012b9e:	47b8      	blx	r7
 8012ba0:	3001      	adds	r0, #1
 8012ba2:	f43f af2f 	beq.w	8012a04 <_printf_float+0x9c>
 8012ba6:	f108 0801 	add.w	r8, r8, #1
 8012baa:	e7e6      	b.n	8012b7a <_printf_float+0x212>
 8012bac:	9b07      	ldr	r3, [sp, #28]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	dc3c      	bgt.n	8012c2c <_printf_float+0x2c4>
 8012bb2:	4a1d      	ldr	r2, [pc, #116]	; (8012c28 <_printf_float+0x2c0>)
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	4631      	mov	r1, r6
 8012bb8:	4628      	mov	r0, r5
 8012bba:	47b8      	blx	r7
 8012bbc:	3001      	adds	r0, #1
 8012bbe:	f43f af21 	beq.w	8012a04 <_printf_float+0x9c>
 8012bc2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012bc6:	4313      	orrs	r3, r2
 8012bc8:	d102      	bne.n	8012bd0 <_printf_float+0x268>
 8012bca:	6823      	ldr	r3, [r4, #0]
 8012bcc:	07d9      	lsls	r1, r3, #31
 8012bce:	d5d8      	bpl.n	8012b82 <_printf_float+0x21a>
 8012bd0:	4653      	mov	r3, sl
 8012bd2:	465a      	mov	r2, fp
 8012bd4:	4631      	mov	r1, r6
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	47b8      	blx	r7
 8012bda:	3001      	adds	r0, #1
 8012bdc:	f43f af12 	beq.w	8012a04 <_printf_float+0x9c>
 8012be0:	f04f 0900 	mov.w	r9, #0
 8012be4:	f104 0a1a 	add.w	sl, r4, #26
 8012be8:	9b07      	ldr	r3, [sp, #28]
 8012bea:	425b      	negs	r3, r3
 8012bec:	454b      	cmp	r3, r9
 8012bee:	dc01      	bgt.n	8012bf4 <_printf_float+0x28c>
 8012bf0:	9b08      	ldr	r3, [sp, #32]
 8012bf2:	e795      	b.n	8012b20 <_printf_float+0x1b8>
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	4652      	mov	r2, sl
 8012bf8:	4631      	mov	r1, r6
 8012bfa:	4628      	mov	r0, r5
 8012bfc:	47b8      	blx	r7
 8012bfe:	3001      	adds	r0, #1
 8012c00:	f43f af00 	beq.w	8012a04 <_printf_float+0x9c>
 8012c04:	f109 0901 	add.w	r9, r9, #1
 8012c08:	e7ee      	b.n	8012be8 <_printf_float+0x280>
 8012c0a:	bf00      	nop
 8012c0c:	f3af 8000 	nop.w
 8012c10:	ffffffff 	.word	0xffffffff
 8012c14:	7fefffff 	.word	0x7fefffff
 8012c18:	080157b0 	.word	0x080157b0
 8012c1c:	080157b4 	.word	0x080157b4
 8012c20:	080157bc 	.word	0x080157bc
 8012c24:	080157b8 	.word	0x080157b8
 8012c28:	080157c0 	.word	0x080157c0
 8012c2c:	9a08      	ldr	r2, [sp, #32]
 8012c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c30:	429a      	cmp	r2, r3
 8012c32:	bfa8      	it	ge
 8012c34:	461a      	movge	r2, r3
 8012c36:	2a00      	cmp	r2, #0
 8012c38:	4691      	mov	r9, r2
 8012c3a:	dc38      	bgt.n	8012cae <_printf_float+0x346>
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	9305      	str	r3, [sp, #20]
 8012c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c44:	f104 021a 	add.w	r2, r4, #26
 8012c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012c4a:	9905      	ldr	r1, [sp, #20]
 8012c4c:	9304      	str	r3, [sp, #16]
 8012c4e:	eba3 0309 	sub.w	r3, r3, r9
 8012c52:	428b      	cmp	r3, r1
 8012c54:	dc33      	bgt.n	8012cbe <_printf_float+0x356>
 8012c56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	db3c      	blt.n	8012cd8 <_printf_float+0x370>
 8012c5e:	6823      	ldr	r3, [r4, #0]
 8012c60:	07da      	lsls	r2, r3, #31
 8012c62:	d439      	bmi.n	8012cd8 <_printf_float+0x370>
 8012c64:	9b08      	ldr	r3, [sp, #32]
 8012c66:	9a04      	ldr	r2, [sp, #16]
 8012c68:	9907      	ldr	r1, [sp, #28]
 8012c6a:	1a9a      	subs	r2, r3, r2
 8012c6c:	eba3 0901 	sub.w	r9, r3, r1
 8012c70:	4591      	cmp	r9, r2
 8012c72:	bfa8      	it	ge
 8012c74:	4691      	movge	r9, r2
 8012c76:	f1b9 0f00 	cmp.w	r9, #0
 8012c7a:	dc35      	bgt.n	8012ce8 <_printf_float+0x380>
 8012c7c:	f04f 0800 	mov.w	r8, #0
 8012c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c84:	f104 0a1a 	add.w	sl, r4, #26
 8012c88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012c8c:	1a9b      	subs	r3, r3, r2
 8012c8e:	eba3 0309 	sub.w	r3, r3, r9
 8012c92:	4543      	cmp	r3, r8
 8012c94:	f77f af75 	ble.w	8012b82 <_printf_float+0x21a>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	4652      	mov	r2, sl
 8012c9c:	4631      	mov	r1, r6
 8012c9e:	4628      	mov	r0, r5
 8012ca0:	47b8      	blx	r7
 8012ca2:	3001      	adds	r0, #1
 8012ca4:	f43f aeae 	beq.w	8012a04 <_printf_float+0x9c>
 8012ca8:	f108 0801 	add.w	r8, r8, #1
 8012cac:	e7ec      	b.n	8012c88 <_printf_float+0x320>
 8012cae:	4613      	mov	r3, r2
 8012cb0:	4631      	mov	r1, r6
 8012cb2:	4642      	mov	r2, r8
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	47b8      	blx	r7
 8012cb8:	3001      	adds	r0, #1
 8012cba:	d1bf      	bne.n	8012c3c <_printf_float+0x2d4>
 8012cbc:	e6a2      	b.n	8012a04 <_printf_float+0x9c>
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	4631      	mov	r1, r6
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	9204      	str	r2, [sp, #16]
 8012cc6:	47b8      	blx	r7
 8012cc8:	3001      	adds	r0, #1
 8012cca:	f43f ae9b 	beq.w	8012a04 <_printf_float+0x9c>
 8012cce:	9b05      	ldr	r3, [sp, #20]
 8012cd0:	9a04      	ldr	r2, [sp, #16]
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	9305      	str	r3, [sp, #20]
 8012cd6:	e7b7      	b.n	8012c48 <_printf_float+0x2e0>
 8012cd8:	4653      	mov	r3, sl
 8012cda:	465a      	mov	r2, fp
 8012cdc:	4631      	mov	r1, r6
 8012cde:	4628      	mov	r0, r5
 8012ce0:	47b8      	blx	r7
 8012ce2:	3001      	adds	r0, #1
 8012ce4:	d1be      	bne.n	8012c64 <_printf_float+0x2fc>
 8012ce6:	e68d      	b.n	8012a04 <_printf_float+0x9c>
 8012ce8:	9a04      	ldr	r2, [sp, #16]
 8012cea:	464b      	mov	r3, r9
 8012cec:	4442      	add	r2, r8
 8012cee:	4631      	mov	r1, r6
 8012cf0:	4628      	mov	r0, r5
 8012cf2:	47b8      	blx	r7
 8012cf4:	3001      	adds	r0, #1
 8012cf6:	d1c1      	bne.n	8012c7c <_printf_float+0x314>
 8012cf8:	e684      	b.n	8012a04 <_printf_float+0x9c>
 8012cfa:	9a08      	ldr	r2, [sp, #32]
 8012cfc:	2a01      	cmp	r2, #1
 8012cfe:	dc01      	bgt.n	8012d04 <_printf_float+0x39c>
 8012d00:	07db      	lsls	r3, r3, #31
 8012d02:	d537      	bpl.n	8012d74 <_printf_float+0x40c>
 8012d04:	2301      	movs	r3, #1
 8012d06:	4642      	mov	r2, r8
 8012d08:	4631      	mov	r1, r6
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	47b8      	blx	r7
 8012d0e:	3001      	adds	r0, #1
 8012d10:	f43f ae78 	beq.w	8012a04 <_printf_float+0x9c>
 8012d14:	4653      	mov	r3, sl
 8012d16:	465a      	mov	r2, fp
 8012d18:	4631      	mov	r1, r6
 8012d1a:	4628      	mov	r0, r5
 8012d1c:	47b8      	blx	r7
 8012d1e:	3001      	adds	r0, #1
 8012d20:	f43f ae70 	beq.w	8012a04 <_printf_float+0x9c>
 8012d24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012d28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d30:	d01b      	beq.n	8012d6a <_printf_float+0x402>
 8012d32:	9b08      	ldr	r3, [sp, #32]
 8012d34:	f108 0201 	add.w	r2, r8, #1
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	4631      	mov	r1, r6
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	47b8      	blx	r7
 8012d40:	3001      	adds	r0, #1
 8012d42:	d10e      	bne.n	8012d62 <_printf_float+0x3fa>
 8012d44:	e65e      	b.n	8012a04 <_printf_float+0x9c>
 8012d46:	2301      	movs	r3, #1
 8012d48:	464a      	mov	r2, r9
 8012d4a:	4631      	mov	r1, r6
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	47b8      	blx	r7
 8012d50:	3001      	adds	r0, #1
 8012d52:	f43f ae57 	beq.w	8012a04 <_printf_float+0x9c>
 8012d56:	f108 0801 	add.w	r8, r8, #1
 8012d5a:	9b08      	ldr	r3, [sp, #32]
 8012d5c:	3b01      	subs	r3, #1
 8012d5e:	4543      	cmp	r3, r8
 8012d60:	dcf1      	bgt.n	8012d46 <_printf_float+0x3de>
 8012d62:	9b04      	ldr	r3, [sp, #16]
 8012d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012d68:	e6db      	b.n	8012b22 <_printf_float+0x1ba>
 8012d6a:	f04f 0800 	mov.w	r8, #0
 8012d6e:	f104 091a 	add.w	r9, r4, #26
 8012d72:	e7f2      	b.n	8012d5a <_printf_float+0x3f2>
 8012d74:	2301      	movs	r3, #1
 8012d76:	4642      	mov	r2, r8
 8012d78:	e7df      	b.n	8012d3a <_printf_float+0x3d2>
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	464a      	mov	r2, r9
 8012d7e:	4631      	mov	r1, r6
 8012d80:	4628      	mov	r0, r5
 8012d82:	47b8      	blx	r7
 8012d84:	3001      	adds	r0, #1
 8012d86:	f43f ae3d 	beq.w	8012a04 <_printf_float+0x9c>
 8012d8a:	f108 0801 	add.w	r8, r8, #1
 8012d8e:	68e3      	ldr	r3, [r4, #12]
 8012d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d92:	1a5b      	subs	r3, r3, r1
 8012d94:	4543      	cmp	r3, r8
 8012d96:	dcf0      	bgt.n	8012d7a <_printf_float+0x412>
 8012d98:	e6f7      	b.n	8012b8a <_printf_float+0x222>
 8012d9a:	f04f 0800 	mov.w	r8, #0
 8012d9e:	f104 0919 	add.w	r9, r4, #25
 8012da2:	e7f4      	b.n	8012d8e <_printf_float+0x426>

08012da4 <_printf_common>:
 8012da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012da8:	4616      	mov	r6, r2
 8012daa:	4699      	mov	r9, r3
 8012dac:	688a      	ldr	r2, [r1, #8]
 8012dae:	690b      	ldr	r3, [r1, #16]
 8012db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012db4:	4293      	cmp	r3, r2
 8012db6:	bfb8      	it	lt
 8012db8:	4613      	movlt	r3, r2
 8012dba:	6033      	str	r3, [r6, #0]
 8012dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012dc0:	4607      	mov	r7, r0
 8012dc2:	460c      	mov	r4, r1
 8012dc4:	b10a      	cbz	r2, 8012dca <_printf_common+0x26>
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	6033      	str	r3, [r6, #0]
 8012dca:	6823      	ldr	r3, [r4, #0]
 8012dcc:	0699      	lsls	r1, r3, #26
 8012dce:	bf42      	ittt	mi
 8012dd0:	6833      	ldrmi	r3, [r6, #0]
 8012dd2:	3302      	addmi	r3, #2
 8012dd4:	6033      	strmi	r3, [r6, #0]
 8012dd6:	6825      	ldr	r5, [r4, #0]
 8012dd8:	f015 0506 	ands.w	r5, r5, #6
 8012ddc:	d106      	bne.n	8012dec <_printf_common+0x48>
 8012dde:	f104 0a19 	add.w	sl, r4, #25
 8012de2:	68e3      	ldr	r3, [r4, #12]
 8012de4:	6832      	ldr	r2, [r6, #0]
 8012de6:	1a9b      	subs	r3, r3, r2
 8012de8:	42ab      	cmp	r3, r5
 8012dea:	dc26      	bgt.n	8012e3a <_printf_common+0x96>
 8012dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012df0:	1e13      	subs	r3, r2, #0
 8012df2:	6822      	ldr	r2, [r4, #0]
 8012df4:	bf18      	it	ne
 8012df6:	2301      	movne	r3, #1
 8012df8:	0692      	lsls	r2, r2, #26
 8012dfa:	d42b      	bmi.n	8012e54 <_printf_common+0xb0>
 8012dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e00:	4649      	mov	r1, r9
 8012e02:	4638      	mov	r0, r7
 8012e04:	47c0      	blx	r8
 8012e06:	3001      	adds	r0, #1
 8012e08:	d01e      	beq.n	8012e48 <_printf_common+0xa4>
 8012e0a:	6823      	ldr	r3, [r4, #0]
 8012e0c:	68e5      	ldr	r5, [r4, #12]
 8012e0e:	6832      	ldr	r2, [r6, #0]
 8012e10:	f003 0306 	and.w	r3, r3, #6
 8012e14:	2b04      	cmp	r3, #4
 8012e16:	bf08      	it	eq
 8012e18:	1aad      	subeq	r5, r5, r2
 8012e1a:	68a3      	ldr	r3, [r4, #8]
 8012e1c:	6922      	ldr	r2, [r4, #16]
 8012e1e:	bf0c      	ite	eq
 8012e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e24:	2500      	movne	r5, #0
 8012e26:	4293      	cmp	r3, r2
 8012e28:	bfc4      	itt	gt
 8012e2a:	1a9b      	subgt	r3, r3, r2
 8012e2c:	18ed      	addgt	r5, r5, r3
 8012e2e:	2600      	movs	r6, #0
 8012e30:	341a      	adds	r4, #26
 8012e32:	42b5      	cmp	r5, r6
 8012e34:	d11a      	bne.n	8012e6c <_printf_common+0xc8>
 8012e36:	2000      	movs	r0, #0
 8012e38:	e008      	b.n	8012e4c <_printf_common+0xa8>
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	4652      	mov	r2, sl
 8012e3e:	4649      	mov	r1, r9
 8012e40:	4638      	mov	r0, r7
 8012e42:	47c0      	blx	r8
 8012e44:	3001      	adds	r0, #1
 8012e46:	d103      	bne.n	8012e50 <_printf_common+0xac>
 8012e48:	f04f 30ff 	mov.w	r0, #4294967295
 8012e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e50:	3501      	adds	r5, #1
 8012e52:	e7c6      	b.n	8012de2 <_printf_common+0x3e>
 8012e54:	18e1      	adds	r1, r4, r3
 8012e56:	1c5a      	adds	r2, r3, #1
 8012e58:	2030      	movs	r0, #48	; 0x30
 8012e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e5e:	4422      	add	r2, r4
 8012e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e68:	3302      	adds	r3, #2
 8012e6a:	e7c7      	b.n	8012dfc <_printf_common+0x58>
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	4622      	mov	r2, r4
 8012e70:	4649      	mov	r1, r9
 8012e72:	4638      	mov	r0, r7
 8012e74:	47c0      	blx	r8
 8012e76:	3001      	adds	r0, #1
 8012e78:	d0e6      	beq.n	8012e48 <_printf_common+0xa4>
 8012e7a:	3601      	adds	r6, #1
 8012e7c:	e7d9      	b.n	8012e32 <_printf_common+0x8e>
	...

08012e80 <_printf_i>:
 8012e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e84:	7e0f      	ldrb	r7, [r1, #24]
 8012e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012e88:	2f78      	cmp	r7, #120	; 0x78
 8012e8a:	4691      	mov	r9, r2
 8012e8c:	4680      	mov	r8, r0
 8012e8e:	460c      	mov	r4, r1
 8012e90:	469a      	mov	sl, r3
 8012e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012e96:	d807      	bhi.n	8012ea8 <_printf_i+0x28>
 8012e98:	2f62      	cmp	r7, #98	; 0x62
 8012e9a:	d80a      	bhi.n	8012eb2 <_printf_i+0x32>
 8012e9c:	2f00      	cmp	r7, #0
 8012e9e:	f000 80d8 	beq.w	8013052 <_printf_i+0x1d2>
 8012ea2:	2f58      	cmp	r7, #88	; 0x58
 8012ea4:	f000 80a3 	beq.w	8012fee <_printf_i+0x16e>
 8012ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012eb0:	e03a      	b.n	8012f28 <_printf_i+0xa8>
 8012eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012eb6:	2b15      	cmp	r3, #21
 8012eb8:	d8f6      	bhi.n	8012ea8 <_printf_i+0x28>
 8012eba:	a101      	add	r1, pc, #4	; (adr r1, 8012ec0 <_printf_i+0x40>)
 8012ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ec0:	08012f19 	.word	0x08012f19
 8012ec4:	08012f2d 	.word	0x08012f2d
 8012ec8:	08012ea9 	.word	0x08012ea9
 8012ecc:	08012ea9 	.word	0x08012ea9
 8012ed0:	08012ea9 	.word	0x08012ea9
 8012ed4:	08012ea9 	.word	0x08012ea9
 8012ed8:	08012f2d 	.word	0x08012f2d
 8012edc:	08012ea9 	.word	0x08012ea9
 8012ee0:	08012ea9 	.word	0x08012ea9
 8012ee4:	08012ea9 	.word	0x08012ea9
 8012ee8:	08012ea9 	.word	0x08012ea9
 8012eec:	08013039 	.word	0x08013039
 8012ef0:	08012f5d 	.word	0x08012f5d
 8012ef4:	0801301b 	.word	0x0801301b
 8012ef8:	08012ea9 	.word	0x08012ea9
 8012efc:	08012ea9 	.word	0x08012ea9
 8012f00:	0801305b 	.word	0x0801305b
 8012f04:	08012ea9 	.word	0x08012ea9
 8012f08:	08012f5d 	.word	0x08012f5d
 8012f0c:	08012ea9 	.word	0x08012ea9
 8012f10:	08012ea9 	.word	0x08012ea9
 8012f14:	08013023 	.word	0x08013023
 8012f18:	682b      	ldr	r3, [r5, #0]
 8012f1a:	1d1a      	adds	r2, r3, #4
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	602a      	str	r2, [r5, #0]
 8012f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f28:	2301      	movs	r3, #1
 8012f2a:	e0a3      	b.n	8013074 <_printf_i+0x1f4>
 8012f2c:	6820      	ldr	r0, [r4, #0]
 8012f2e:	6829      	ldr	r1, [r5, #0]
 8012f30:	0606      	lsls	r6, r0, #24
 8012f32:	f101 0304 	add.w	r3, r1, #4
 8012f36:	d50a      	bpl.n	8012f4e <_printf_i+0xce>
 8012f38:	680e      	ldr	r6, [r1, #0]
 8012f3a:	602b      	str	r3, [r5, #0]
 8012f3c:	2e00      	cmp	r6, #0
 8012f3e:	da03      	bge.n	8012f48 <_printf_i+0xc8>
 8012f40:	232d      	movs	r3, #45	; 0x2d
 8012f42:	4276      	negs	r6, r6
 8012f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f48:	485e      	ldr	r0, [pc, #376]	; (80130c4 <_printf_i+0x244>)
 8012f4a:	230a      	movs	r3, #10
 8012f4c:	e019      	b.n	8012f82 <_printf_i+0x102>
 8012f4e:	680e      	ldr	r6, [r1, #0]
 8012f50:	602b      	str	r3, [r5, #0]
 8012f52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012f56:	bf18      	it	ne
 8012f58:	b236      	sxthne	r6, r6
 8012f5a:	e7ef      	b.n	8012f3c <_printf_i+0xbc>
 8012f5c:	682b      	ldr	r3, [r5, #0]
 8012f5e:	6820      	ldr	r0, [r4, #0]
 8012f60:	1d19      	adds	r1, r3, #4
 8012f62:	6029      	str	r1, [r5, #0]
 8012f64:	0601      	lsls	r1, r0, #24
 8012f66:	d501      	bpl.n	8012f6c <_printf_i+0xec>
 8012f68:	681e      	ldr	r6, [r3, #0]
 8012f6a:	e002      	b.n	8012f72 <_printf_i+0xf2>
 8012f6c:	0646      	lsls	r6, r0, #25
 8012f6e:	d5fb      	bpl.n	8012f68 <_printf_i+0xe8>
 8012f70:	881e      	ldrh	r6, [r3, #0]
 8012f72:	4854      	ldr	r0, [pc, #336]	; (80130c4 <_printf_i+0x244>)
 8012f74:	2f6f      	cmp	r7, #111	; 0x6f
 8012f76:	bf0c      	ite	eq
 8012f78:	2308      	moveq	r3, #8
 8012f7a:	230a      	movne	r3, #10
 8012f7c:	2100      	movs	r1, #0
 8012f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012f82:	6865      	ldr	r5, [r4, #4]
 8012f84:	60a5      	str	r5, [r4, #8]
 8012f86:	2d00      	cmp	r5, #0
 8012f88:	bfa2      	ittt	ge
 8012f8a:	6821      	ldrge	r1, [r4, #0]
 8012f8c:	f021 0104 	bicge.w	r1, r1, #4
 8012f90:	6021      	strge	r1, [r4, #0]
 8012f92:	b90e      	cbnz	r6, 8012f98 <_printf_i+0x118>
 8012f94:	2d00      	cmp	r5, #0
 8012f96:	d04d      	beq.n	8013034 <_printf_i+0x1b4>
 8012f98:	4615      	mov	r5, r2
 8012f9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012f9e:	fb03 6711 	mls	r7, r3, r1, r6
 8012fa2:	5dc7      	ldrb	r7, [r0, r7]
 8012fa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012fa8:	4637      	mov	r7, r6
 8012faa:	42bb      	cmp	r3, r7
 8012fac:	460e      	mov	r6, r1
 8012fae:	d9f4      	bls.n	8012f9a <_printf_i+0x11a>
 8012fb0:	2b08      	cmp	r3, #8
 8012fb2:	d10b      	bne.n	8012fcc <_printf_i+0x14c>
 8012fb4:	6823      	ldr	r3, [r4, #0]
 8012fb6:	07de      	lsls	r6, r3, #31
 8012fb8:	d508      	bpl.n	8012fcc <_printf_i+0x14c>
 8012fba:	6923      	ldr	r3, [r4, #16]
 8012fbc:	6861      	ldr	r1, [r4, #4]
 8012fbe:	4299      	cmp	r1, r3
 8012fc0:	bfde      	ittt	le
 8012fc2:	2330      	movle	r3, #48	; 0x30
 8012fc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012fc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012fcc:	1b52      	subs	r2, r2, r5
 8012fce:	6122      	str	r2, [r4, #16]
 8012fd0:	f8cd a000 	str.w	sl, [sp]
 8012fd4:	464b      	mov	r3, r9
 8012fd6:	aa03      	add	r2, sp, #12
 8012fd8:	4621      	mov	r1, r4
 8012fda:	4640      	mov	r0, r8
 8012fdc:	f7ff fee2 	bl	8012da4 <_printf_common>
 8012fe0:	3001      	adds	r0, #1
 8012fe2:	d14c      	bne.n	801307e <_printf_i+0x1fe>
 8012fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fe8:	b004      	add	sp, #16
 8012fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fee:	4835      	ldr	r0, [pc, #212]	; (80130c4 <_printf_i+0x244>)
 8012ff0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012ff4:	6829      	ldr	r1, [r5, #0]
 8012ff6:	6823      	ldr	r3, [r4, #0]
 8012ff8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012ffc:	6029      	str	r1, [r5, #0]
 8012ffe:	061d      	lsls	r5, r3, #24
 8013000:	d514      	bpl.n	801302c <_printf_i+0x1ac>
 8013002:	07df      	lsls	r7, r3, #31
 8013004:	bf44      	itt	mi
 8013006:	f043 0320 	orrmi.w	r3, r3, #32
 801300a:	6023      	strmi	r3, [r4, #0]
 801300c:	b91e      	cbnz	r6, 8013016 <_printf_i+0x196>
 801300e:	6823      	ldr	r3, [r4, #0]
 8013010:	f023 0320 	bic.w	r3, r3, #32
 8013014:	6023      	str	r3, [r4, #0]
 8013016:	2310      	movs	r3, #16
 8013018:	e7b0      	b.n	8012f7c <_printf_i+0xfc>
 801301a:	6823      	ldr	r3, [r4, #0]
 801301c:	f043 0320 	orr.w	r3, r3, #32
 8013020:	6023      	str	r3, [r4, #0]
 8013022:	2378      	movs	r3, #120	; 0x78
 8013024:	4828      	ldr	r0, [pc, #160]	; (80130c8 <_printf_i+0x248>)
 8013026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801302a:	e7e3      	b.n	8012ff4 <_printf_i+0x174>
 801302c:	0659      	lsls	r1, r3, #25
 801302e:	bf48      	it	mi
 8013030:	b2b6      	uxthmi	r6, r6
 8013032:	e7e6      	b.n	8013002 <_printf_i+0x182>
 8013034:	4615      	mov	r5, r2
 8013036:	e7bb      	b.n	8012fb0 <_printf_i+0x130>
 8013038:	682b      	ldr	r3, [r5, #0]
 801303a:	6826      	ldr	r6, [r4, #0]
 801303c:	6961      	ldr	r1, [r4, #20]
 801303e:	1d18      	adds	r0, r3, #4
 8013040:	6028      	str	r0, [r5, #0]
 8013042:	0635      	lsls	r5, r6, #24
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	d501      	bpl.n	801304c <_printf_i+0x1cc>
 8013048:	6019      	str	r1, [r3, #0]
 801304a:	e002      	b.n	8013052 <_printf_i+0x1d2>
 801304c:	0670      	lsls	r0, r6, #25
 801304e:	d5fb      	bpl.n	8013048 <_printf_i+0x1c8>
 8013050:	8019      	strh	r1, [r3, #0]
 8013052:	2300      	movs	r3, #0
 8013054:	6123      	str	r3, [r4, #16]
 8013056:	4615      	mov	r5, r2
 8013058:	e7ba      	b.n	8012fd0 <_printf_i+0x150>
 801305a:	682b      	ldr	r3, [r5, #0]
 801305c:	1d1a      	adds	r2, r3, #4
 801305e:	602a      	str	r2, [r5, #0]
 8013060:	681d      	ldr	r5, [r3, #0]
 8013062:	6862      	ldr	r2, [r4, #4]
 8013064:	2100      	movs	r1, #0
 8013066:	4628      	mov	r0, r5
 8013068:	f7ed f8f2 	bl	8000250 <memchr>
 801306c:	b108      	cbz	r0, 8013072 <_printf_i+0x1f2>
 801306e:	1b40      	subs	r0, r0, r5
 8013070:	6060      	str	r0, [r4, #4]
 8013072:	6863      	ldr	r3, [r4, #4]
 8013074:	6123      	str	r3, [r4, #16]
 8013076:	2300      	movs	r3, #0
 8013078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801307c:	e7a8      	b.n	8012fd0 <_printf_i+0x150>
 801307e:	6923      	ldr	r3, [r4, #16]
 8013080:	462a      	mov	r2, r5
 8013082:	4649      	mov	r1, r9
 8013084:	4640      	mov	r0, r8
 8013086:	47d0      	blx	sl
 8013088:	3001      	adds	r0, #1
 801308a:	d0ab      	beq.n	8012fe4 <_printf_i+0x164>
 801308c:	6823      	ldr	r3, [r4, #0]
 801308e:	079b      	lsls	r3, r3, #30
 8013090:	d413      	bmi.n	80130ba <_printf_i+0x23a>
 8013092:	68e0      	ldr	r0, [r4, #12]
 8013094:	9b03      	ldr	r3, [sp, #12]
 8013096:	4298      	cmp	r0, r3
 8013098:	bfb8      	it	lt
 801309a:	4618      	movlt	r0, r3
 801309c:	e7a4      	b.n	8012fe8 <_printf_i+0x168>
 801309e:	2301      	movs	r3, #1
 80130a0:	4632      	mov	r2, r6
 80130a2:	4649      	mov	r1, r9
 80130a4:	4640      	mov	r0, r8
 80130a6:	47d0      	blx	sl
 80130a8:	3001      	adds	r0, #1
 80130aa:	d09b      	beq.n	8012fe4 <_printf_i+0x164>
 80130ac:	3501      	adds	r5, #1
 80130ae:	68e3      	ldr	r3, [r4, #12]
 80130b0:	9903      	ldr	r1, [sp, #12]
 80130b2:	1a5b      	subs	r3, r3, r1
 80130b4:	42ab      	cmp	r3, r5
 80130b6:	dcf2      	bgt.n	801309e <_printf_i+0x21e>
 80130b8:	e7eb      	b.n	8013092 <_printf_i+0x212>
 80130ba:	2500      	movs	r5, #0
 80130bc:	f104 0619 	add.w	r6, r4, #25
 80130c0:	e7f5      	b.n	80130ae <_printf_i+0x22e>
 80130c2:	bf00      	nop
 80130c4:	080157c2 	.word	0x080157c2
 80130c8:	080157d3 	.word	0x080157d3

080130cc <iprintf>:
 80130cc:	b40f      	push	{r0, r1, r2, r3}
 80130ce:	4b0a      	ldr	r3, [pc, #40]	; (80130f8 <iprintf+0x2c>)
 80130d0:	b513      	push	{r0, r1, r4, lr}
 80130d2:	681c      	ldr	r4, [r3, #0]
 80130d4:	b124      	cbz	r4, 80130e0 <iprintf+0x14>
 80130d6:	69a3      	ldr	r3, [r4, #24]
 80130d8:	b913      	cbnz	r3, 80130e0 <iprintf+0x14>
 80130da:	4620      	mov	r0, r4
 80130dc:	f7ff fa44 	bl	8012568 <__sinit>
 80130e0:	ab05      	add	r3, sp, #20
 80130e2:	9a04      	ldr	r2, [sp, #16]
 80130e4:	68a1      	ldr	r1, [r4, #8]
 80130e6:	9301      	str	r3, [sp, #4]
 80130e8:	4620      	mov	r0, r4
 80130ea:	f001 fd79 	bl	8014be0 <_vfiprintf_r>
 80130ee:	b002      	add	sp, #8
 80130f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130f4:	b004      	add	sp, #16
 80130f6:	4770      	bx	lr
 80130f8:	200001e4 	.word	0x200001e4

080130fc <_puts_r>:
 80130fc:	b570      	push	{r4, r5, r6, lr}
 80130fe:	460e      	mov	r6, r1
 8013100:	4605      	mov	r5, r0
 8013102:	b118      	cbz	r0, 801310c <_puts_r+0x10>
 8013104:	6983      	ldr	r3, [r0, #24]
 8013106:	b90b      	cbnz	r3, 801310c <_puts_r+0x10>
 8013108:	f7ff fa2e 	bl	8012568 <__sinit>
 801310c:	69ab      	ldr	r3, [r5, #24]
 801310e:	68ac      	ldr	r4, [r5, #8]
 8013110:	b913      	cbnz	r3, 8013118 <_puts_r+0x1c>
 8013112:	4628      	mov	r0, r5
 8013114:	f7ff fa28 	bl	8012568 <__sinit>
 8013118:	4b2c      	ldr	r3, [pc, #176]	; (80131cc <_puts_r+0xd0>)
 801311a:	429c      	cmp	r4, r3
 801311c:	d120      	bne.n	8013160 <_puts_r+0x64>
 801311e:	686c      	ldr	r4, [r5, #4]
 8013120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013122:	07db      	lsls	r3, r3, #31
 8013124:	d405      	bmi.n	8013132 <_puts_r+0x36>
 8013126:	89a3      	ldrh	r3, [r4, #12]
 8013128:	0598      	lsls	r0, r3, #22
 801312a:	d402      	bmi.n	8013132 <_puts_r+0x36>
 801312c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801312e:	f7ff fade 	bl	80126ee <__retarget_lock_acquire_recursive>
 8013132:	89a3      	ldrh	r3, [r4, #12]
 8013134:	0719      	lsls	r1, r3, #28
 8013136:	d51d      	bpl.n	8013174 <_puts_r+0x78>
 8013138:	6923      	ldr	r3, [r4, #16]
 801313a:	b1db      	cbz	r3, 8013174 <_puts_r+0x78>
 801313c:	3e01      	subs	r6, #1
 801313e:	68a3      	ldr	r3, [r4, #8]
 8013140:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013144:	3b01      	subs	r3, #1
 8013146:	60a3      	str	r3, [r4, #8]
 8013148:	bb39      	cbnz	r1, 801319a <_puts_r+0x9e>
 801314a:	2b00      	cmp	r3, #0
 801314c:	da38      	bge.n	80131c0 <_puts_r+0xc4>
 801314e:	4622      	mov	r2, r4
 8013150:	210a      	movs	r1, #10
 8013152:	4628      	mov	r0, r5
 8013154:	f000 f906 	bl	8013364 <__swbuf_r>
 8013158:	3001      	adds	r0, #1
 801315a:	d011      	beq.n	8013180 <_puts_r+0x84>
 801315c:	250a      	movs	r5, #10
 801315e:	e011      	b.n	8013184 <_puts_r+0x88>
 8013160:	4b1b      	ldr	r3, [pc, #108]	; (80131d0 <_puts_r+0xd4>)
 8013162:	429c      	cmp	r4, r3
 8013164:	d101      	bne.n	801316a <_puts_r+0x6e>
 8013166:	68ac      	ldr	r4, [r5, #8]
 8013168:	e7da      	b.n	8013120 <_puts_r+0x24>
 801316a:	4b1a      	ldr	r3, [pc, #104]	; (80131d4 <_puts_r+0xd8>)
 801316c:	429c      	cmp	r4, r3
 801316e:	bf08      	it	eq
 8013170:	68ec      	ldreq	r4, [r5, #12]
 8013172:	e7d5      	b.n	8013120 <_puts_r+0x24>
 8013174:	4621      	mov	r1, r4
 8013176:	4628      	mov	r0, r5
 8013178:	f000 f958 	bl	801342c <__swsetup_r>
 801317c:	2800      	cmp	r0, #0
 801317e:	d0dd      	beq.n	801313c <_puts_r+0x40>
 8013180:	f04f 35ff 	mov.w	r5, #4294967295
 8013184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013186:	07da      	lsls	r2, r3, #31
 8013188:	d405      	bmi.n	8013196 <_puts_r+0x9a>
 801318a:	89a3      	ldrh	r3, [r4, #12]
 801318c:	059b      	lsls	r3, r3, #22
 801318e:	d402      	bmi.n	8013196 <_puts_r+0x9a>
 8013190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013192:	f7ff faad 	bl	80126f0 <__retarget_lock_release_recursive>
 8013196:	4628      	mov	r0, r5
 8013198:	bd70      	pop	{r4, r5, r6, pc}
 801319a:	2b00      	cmp	r3, #0
 801319c:	da04      	bge.n	80131a8 <_puts_r+0xac>
 801319e:	69a2      	ldr	r2, [r4, #24]
 80131a0:	429a      	cmp	r2, r3
 80131a2:	dc06      	bgt.n	80131b2 <_puts_r+0xb6>
 80131a4:	290a      	cmp	r1, #10
 80131a6:	d004      	beq.n	80131b2 <_puts_r+0xb6>
 80131a8:	6823      	ldr	r3, [r4, #0]
 80131aa:	1c5a      	adds	r2, r3, #1
 80131ac:	6022      	str	r2, [r4, #0]
 80131ae:	7019      	strb	r1, [r3, #0]
 80131b0:	e7c5      	b.n	801313e <_puts_r+0x42>
 80131b2:	4622      	mov	r2, r4
 80131b4:	4628      	mov	r0, r5
 80131b6:	f000 f8d5 	bl	8013364 <__swbuf_r>
 80131ba:	3001      	adds	r0, #1
 80131bc:	d1bf      	bne.n	801313e <_puts_r+0x42>
 80131be:	e7df      	b.n	8013180 <_puts_r+0x84>
 80131c0:	6823      	ldr	r3, [r4, #0]
 80131c2:	250a      	movs	r5, #10
 80131c4:	1c5a      	adds	r2, r3, #1
 80131c6:	6022      	str	r2, [r4, #0]
 80131c8:	701d      	strb	r5, [r3, #0]
 80131ca:	e7db      	b.n	8013184 <_puts_r+0x88>
 80131cc:	0801576c 	.word	0x0801576c
 80131d0:	0801578c 	.word	0x0801578c
 80131d4:	0801574c 	.word	0x0801574c

080131d8 <puts>:
 80131d8:	4b02      	ldr	r3, [pc, #8]	; (80131e4 <puts+0xc>)
 80131da:	4601      	mov	r1, r0
 80131dc:	6818      	ldr	r0, [r3, #0]
 80131de:	f7ff bf8d 	b.w	80130fc <_puts_r>
 80131e2:	bf00      	nop
 80131e4:	200001e4 	.word	0x200001e4

080131e8 <cleanup_glue>:
 80131e8:	b538      	push	{r3, r4, r5, lr}
 80131ea:	460c      	mov	r4, r1
 80131ec:	6809      	ldr	r1, [r1, #0]
 80131ee:	4605      	mov	r5, r0
 80131f0:	b109      	cbz	r1, 80131f6 <cleanup_glue+0xe>
 80131f2:	f7ff fff9 	bl	80131e8 <cleanup_glue>
 80131f6:	4621      	mov	r1, r4
 80131f8:	4628      	mov	r0, r5
 80131fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131fe:	f001 bc79 	b.w	8014af4 <_free_r>
	...

08013204 <_reclaim_reent>:
 8013204:	4b2c      	ldr	r3, [pc, #176]	; (80132b8 <_reclaim_reent+0xb4>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	4283      	cmp	r3, r0
 801320a:	b570      	push	{r4, r5, r6, lr}
 801320c:	4604      	mov	r4, r0
 801320e:	d051      	beq.n	80132b4 <_reclaim_reent+0xb0>
 8013210:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013212:	b143      	cbz	r3, 8013226 <_reclaim_reent+0x22>
 8013214:	68db      	ldr	r3, [r3, #12]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d14a      	bne.n	80132b0 <_reclaim_reent+0xac>
 801321a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801321c:	6819      	ldr	r1, [r3, #0]
 801321e:	b111      	cbz	r1, 8013226 <_reclaim_reent+0x22>
 8013220:	4620      	mov	r0, r4
 8013222:	f001 fc67 	bl	8014af4 <_free_r>
 8013226:	6961      	ldr	r1, [r4, #20]
 8013228:	b111      	cbz	r1, 8013230 <_reclaim_reent+0x2c>
 801322a:	4620      	mov	r0, r4
 801322c:	f001 fc62 	bl	8014af4 <_free_r>
 8013230:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013232:	b111      	cbz	r1, 801323a <_reclaim_reent+0x36>
 8013234:	4620      	mov	r0, r4
 8013236:	f001 fc5d 	bl	8014af4 <_free_r>
 801323a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801323c:	b111      	cbz	r1, 8013244 <_reclaim_reent+0x40>
 801323e:	4620      	mov	r0, r4
 8013240:	f001 fc58 	bl	8014af4 <_free_r>
 8013244:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013246:	b111      	cbz	r1, 801324e <_reclaim_reent+0x4a>
 8013248:	4620      	mov	r0, r4
 801324a:	f001 fc53 	bl	8014af4 <_free_r>
 801324e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013250:	b111      	cbz	r1, 8013258 <_reclaim_reent+0x54>
 8013252:	4620      	mov	r0, r4
 8013254:	f001 fc4e 	bl	8014af4 <_free_r>
 8013258:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801325a:	b111      	cbz	r1, 8013262 <_reclaim_reent+0x5e>
 801325c:	4620      	mov	r0, r4
 801325e:	f001 fc49 	bl	8014af4 <_free_r>
 8013262:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013264:	b111      	cbz	r1, 801326c <_reclaim_reent+0x68>
 8013266:	4620      	mov	r0, r4
 8013268:	f001 fc44 	bl	8014af4 <_free_r>
 801326c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801326e:	b111      	cbz	r1, 8013276 <_reclaim_reent+0x72>
 8013270:	4620      	mov	r0, r4
 8013272:	f001 fc3f 	bl	8014af4 <_free_r>
 8013276:	69a3      	ldr	r3, [r4, #24]
 8013278:	b1e3      	cbz	r3, 80132b4 <_reclaim_reent+0xb0>
 801327a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801327c:	4620      	mov	r0, r4
 801327e:	4798      	blx	r3
 8013280:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013282:	b1b9      	cbz	r1, 80132b4 <_reclaim_reent+0xb0>
 8013284:	4620      	mov	r0, r4
 8013286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801328a:	f7ff bfad 	b.w	80131e8 <cleanup_glue>
 801328e:	5949      	ldr	r1, [r1, r5]
 8013290:	b941      	cbnz	r1, 80132a4 <_reclaim_reent+0xa0>
 8013292:	3504      	adds	r5, #4
 8013294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013296:	2d80      	cmp	r5, #128	; 0x80
 8013298:	68d9      	ldr	r1, [r3, #12]
 801329a:	d1f8      	bne.n	801328e <_reclaim_reent+0x8a>
 801329c:	4620      	mov	r0, r4
 801329e:	f001 fc29 	bl	8014af4 <_free_r>
 80132a2:	e7ba      	b.n	801321a <_reclaim_reent+0x16>
 80132a4:	680e      	ldr	r6, [r1, #0]
 80132a6:	4620      	mov	r0, r4
 80132a8:	f001 fc24 	bl	8014af4 <_free_r>
 80132ac:	4631      	mov	r1, r6
 80132ae:	e7ef      	b.n	8013290 <_reclaim_reent+0x8c>
 80132b0:	2500      	movs	r5, #0
 80132b2:	e7ef      	b.n	8013294 <_reclaim_reent+0x90>
 80132b4:	bd70      	pop	{r4, r5, r6, pc}
 80132b6:	bf00      	nop
 80132b8:	200001e4 	.word	0x200001e4

080132bc <_sbrk_r>:
 80132bc:	b538      	push	{r3, r4, r5, lr}
 80132be:	4d06      	ldr	r5, [pc, #24]	; (80132d8 <_sbrk_r+0x1c>)
 80132c0:	2300      	movs	r3, #0
 80132c2:	4604      	mov	r4, r0
 80132c4:	4608      	mov	r0, r1
 80132c6:	602b      	str	r3, [r5, #0]
 80132c8:	f7f2 ff46 	bl	8006158 <_sbrk>
 80132cc:	1c43      	adds	r3, r0, #1
 80132ce:	d102      	bne.n	80132d6 <_sbrk_r+0x1a>
 80132d0:	682b      	ldr	r3, [r5, #0]
 80132d2:	b103      	cbz	r3, 80132d6 <_sbrk_r+0x1a>
 80132d4:	6023      	str	r3, [r4, #0]
 80132d6:	bd38      	pop	{r3, r4, r5, pc}
 80132d8:	20005cbc 	.word	0x20005cbc

080132dc <__sread>:
 80132dc:	b510      	push	{r4, lr}
 80132de:	460c      	mov	r4, r1
 80132e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132e4:	f001 fdac 	bl	8014e40 <_read_r>
 80132e8:	2800      	cmp	r0, #0
 80132ea:	bfab      	itete	ge
 80132ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80132ee:	89a3      	ldrhlt	r3, [r4, #12]
 80132f0:	181b      	addge	r3, r3, r0
 80132f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80132f6:	bfac      	ite	ge
 80132f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80132fa:	81a3      	strhlt	r3, [r4, #12]
 80132fc:	bd10      	pop	{r4, pc}

080132fe <__swrite>:
 80132fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013302:	461f      	mov	r7, r3
 8013304:	898b      	ldrh	r3, [r1, #12]
 8013306:	05db      	lsls	r3, r3, #23
 8013308:	4605      	mov	r5, r0
 801330a:	460c      	mov	r4, r1
 801330c:	4616      	mov	r6, r2
 801330e:	d505      	bpl.n	801331c <__swrite+0x1e>
 8013310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013314:	2302      	movs	r3, #2
 8013316:	2200      	movs	r2, #0
 8013318:	f000 ffc6 	bl	80142a8 <_lseek_r>
 801331c:	89a3      	ldrh	r3, [r4, #12]
 801331e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013322:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013326:	81a3      	strh	r3, [r4, #12]
 8013328:	4632      	mov	r2, r6
 801332a:	463b      	mov	r3, r7
 801332c:	4628      	mov	r0, r5
 801332e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013332:	f000 b869 	b.w	8013408 <_write_r>

08013336 <__sseek>:
 8013336:	b510      	push	{r4, lr}
 8013338:	460c      	mov	r4, r1
 801333a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801333e:	f000 ffb3 	bl	80142a8 <_lseek_r>
 8013342:	1c43      	adds	r3, r0, #1
 8013344:	89a3      	ldrh	r3, [r4, #12]
 8013346:	bf15      	itete	ne
 8013348:	6560      	strne	r0, [r4, #84]	; 0x54
 801334a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801334e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013352:	81a3      	strheq	r3, [r4, #12]
 8013354:	bf18      	it	ne
 8013356:	81a3      	strhne	r3, [r4, #12]
 8013358:	bd10      	pop	{r4, pc}

0801335a <__sclose>:
 801335a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801335e:	f000 b8d3 	b.w	8013508 <_close_r>
	...

08013364 <__swbuf_r>:
 8013364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013366:	460e      	mov	r6, r1
 8013368:	4614      	mov	r4, r2
 801336a:	4605      	mov	r5, r0
 801336c:	b118      	cbz	r0, 8013376 <__swbuf_r+0x12>
 801336e:	6983      	ldr	r3, [r0, #24]
 8013370:	b90b      	cbnz	r3, 8013376 <__swbuf_r+0x12>
 8013372:	f7ff f8f9 	bl	8012568 <__sinit>
 8013376:	4b21      	ldr	r3, [pc, #132]	; (80133fc <__swbuf_r+0x98>)
 8013378:	429c      	cmp	r4, r3
 801337a:	d12b      	bne.n	80133d4 <__swbuf_r+0x70>
 801337c:	686c      	ldr	r4, [r5, #4]
 801337e:	69a3      	ldr	r3, [r4, #24]
 8013380:	60a3      	str	r3, [r4, #8]
 8013382:	89a3      	ldrh	r3, [r4, #12]
 8013384:	071a      	lsls	r2, r3, #28
 8013386:	d52f      	bpl.n	80133e8 <__swbuf_r+0x84>
 8013388:	6923      	ldr	r3, [r4, #16]
 801338a:	b36b      	cbz	r3, 80133e8 <__swbuf_r+0x84>
 801338c:	6923      	ldr	r3, [r4, #16]
 801338e:	6820      	ldr	r0, [r4, #0]
 8013390:	1ac0      	subs	r0, r0, r3
 8013392:	6963      	ldr	r3, [r4, #20]
 8013394:	b2f6      	uxtb	r6, r6
 8013396:	4283      	cmp	r3, r0
 8013398:	4637      	mov	r7, r6
 801339a:	dc04      	bgt.n	80133a6 <__swbuf_r+0x42>
 801339c:	4621      	mov	r1, r4
 801339e:	4628      	mov	r0, r5
 80133a0:	f000 ff42 	bl	8014228 <_fflush_r>
 80133a4:	bb30      	cbnz	r0, 80133f4 <__swbuf_r+0x90>
 80133a6:	68a3      	ldr	r3, [r4, #8]
 80133a8:	3b01      	subs	r3, #1
 80133aa:	60a3      	str	r3, [r4, #8]
 80133ac:	6823      	ldr	r3, [r4, #0]
 80133ae:	1c5a      	adds	r2, r3, #1
 80133b0:	6022      	str	r2, [r4, #0]
 80133b2:	701e      	strb	r6, [r3, #0]
 80133b4:	6963      	ldr	r3, [r4, #20]
 80133b6:	3001      	adds	r0, #1
 80133b8:	4283      	cmp	r3, r0
 80133ba:	d004      	beq.n	80133c6 <__swbuf_r+0x62>
 80133bc:	89a3      	ldrh	r3, [r4, #12]
 80133be:	07db      	lsls	r3, r3, #31
 80133c0:	d506      	bpl.n	80133d0 <__swbuf_r+0x6c>
 80133c2:	2e0a      	cmp	r6, #10
 80133c4:	d104      	bne.n	80133d0 <__swbuf_r+0x6c>
 80133c6:	4621      	mov	r1, r4
 80133c8:	4628      	mov	r0, r5
 80133ca:	f000 ff2d 	bl	8014228 <_fflush_r>
 80133ce:	b988      	cbnz	r0, 80133f4 <__swbuf_r+0x90>
 80133d0:	4638      	mov	r0, r7
 80133d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133d4:	4b0a      	ldr	r3, [pc, #40]	; (8013400 <__swbuf_r+0x9c>)
 80133d6:	429c      	cmp	r4, r3
 80133d8:	d101      	bne.n	80133de <__swbuf_r+0x7a>
 80133da:	68ac      	ldr	r4, [r5, #8]
 80133dc:	e7cf      	b.n	801337e <__swbuf_r+0x1a>
 80133de:	4b09      	ldr	r3, [pc, #36]	; (8013404 <__swbuf_r+0xa0>)
 80133e0:	429c      	cmp	r4, r3
 80133e2:	bf08      	it	eq
 80133e4:	68ec      	ldreq	r4, [r5, #12]
 80133e6:	e7ca      	b.n	801337e <__swbuf_r+0x1a>
 80133e8:	4621      	mov	r1, r4
 80133ea:	4628      	mov	r0, r5
 80133ec:	f000 f81e 	bl	801342c <__swsetup_r>
 80133f0:	2800      	cmp	r0, #0
 80133f2:	d0cb      	beq.n	801338c <__swbuf_r+0x28>
 80133f4:	f04f 37ff 	mov.w	r7, #4294967295
 80133f8:	e7ea      	b.n	80133d0 <__swbuf_r+0x6c>
 80133fa:	bf00      	nop
 80133fc:	0801576c 	.word	0x0801576c
 8013400:	0801578c 	.word	0x0801578c
 8013404:	0801574c 	.word	0x0801574c

08013408 <_write_r>:
 8013408:	b538      	push	{r3, r4, r5, lr}
 801340a:	4d07      	ldr	r5, [pc, #28]	; (8013428 <_write_r+0x20>)
 801340c:	4604      	mov	r4, r0
 801340e:	4608      	mov	r0, r1
 8013410:	4611      	mov	r1, r2
 8013412:	2200      	movs	r2, #0
 8013414:	602a      	str	r2, [r5, #0]
 8013416:	461a      	mov	r2, r3
 8013418:	f7f0 fb3c 	bl	8003a94 <_write>
 801341c:	1c43      	adds	r3, r0, #1
 801341e:	d102      	bne.n	8013426 <_write_r+0x1e>
 8013420:	682b      	ldr	r3, [r5, #0]
 8013422:	b103      	cbz	r3, 8013426 <_write_r+0x1e>
 8013424:	6023      	str	r3, [r4, #0]
 8013426:	bd38      	pop	{r3, r4, r5, pc}
 8013428:	20005cbc 	.word	0x20005cbc

0801342c <__swsetup_r>:
 801342c:	4b32      	ldr	r3, [pc, #200]	; (80134f8 <__swsetup_r+0xcc>)
 801342e:	b570      	push	{r4, r5, r6, lr}
 8013430:	681d      	ldr	r5, [r3, #0]
 8013432:	4606      	mov	r6, r0
 8013434:	460c      	mov	r4, r1
 8013436:	b125      	cbz	r5, 8013442 <__swsetup_r+0x16>
 8013438:	69ab      	ldr	r3, [r5, #24]
 801343a:	b913      	cbnz	r3, 8013442 <__swsetup_r+0x16>
 801343c:	4628      	mov	r0, r5
 801343e:	f7ff f893 	bl	8012568 <__sinit>
 8013442:	4b2e      	ldr	r3, [pc, #184]	; (80134fc <__swsetup_r+0xd0>)
 8013444:	429c      	cmp	r4, r3
 8013446:	d10f      	bne.n	8013468 <__swsetup_r+0x3c>
 8013448:	686c      	ldr	r4, [r5, #4]
 801344a:	89a3      	ldrh	r3, [r4, #12]
 801344c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013450:	0719      	lsls	r1, r3, #28
 8013452:	d42c      	bmi.n	80134ae <__swsetup_r+0x82>
 8013454:	06dd      	lsls	r5, r3, #27
 8013456:	d411      	bmi.n	801347c <__swsetup_r+0x50>
 8013458:	2309      	movs	r3, #9
 801345a:	6033      	str	r3, [r6, #0]
 801345c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013460:	81a3      	strh	r3, [r4, #12]
 8013462:	f04f 30ff 	mov.w	r0, #4294967295
 8013466:	e03e      	b.n	80134e6 <__swsetup_r+0xba>
 8013468:	4b25      	ldr	r3, [pc, #148]	; (8013500 <__swsetup_r+0xd4>)
 801346a:	429c      	cmp	r4, r3
 801346c:	d101      	bne.n	8013472 <__swsetup_r+0x46>
 801346e:	68ac      	ldr	r4, [r5, #8]
 8013470:	e7eb      	b.n	801344a <__swsetup_r+0x1e>
 8013472:	4b24      	ldr	r3, [pc, #144]	; (8013504 <__swsetup_r+0xd8>)
 8013474:	429c      	cmp	r4, r3
 8013476:	bf08      	it	eq
 8013478:	68ec      	ldreq	r4, [r5, #12]
 801347a:	e7e6      	b.n	801344a <__swsetup_r+0x1e>
 801347c:	0758      	lsls	r0, r3, #29
 801347e:	d512      	bpl.n	80134a6 <__swsetup_r+0x7a>
 8013480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013482:	b141      	cbz	r1, 8013496 <__swsetup_r+0x6a>
 8013484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013488:	4299      	cmp	r1, r3
 801348a:	d002      	beq.n	8013492 <__swsetup_r+0x66>
 801348c:	4630      	mov	r0, r6
 801348e:	f001 fb31 	bl	8014af4 <_free_r>
 8013492:	2300      	movs	r3, #0
 8013494:	6363      	str	r3, [r4, #52]	; 0x34
 8013496:	89a3      	ldrh	r3, [r4, #12]
 8013498:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801349c:	81a3      	strh	r3, [r4, #12]
 801349e:	2300      	movs	r3, #0
 80134a0:	6063      	str	r3, [r4, #4]
 80134a2:	6923      	ldr	r3, [r4, #16]
 80134a4:	6023      	str	r3, [r4, #0]
 80134a6:	89a3      	ldrh	r3, [r4, #12]
 80134a8:	f043 0308 	orr.w	r3, r3, #8
 80134ac:	81a3      	strh	r3, [r4, #12]
 80134ae:	6923      	ldr	r3, [r4, #16]
 80134b0:	b94b      	cbnz	r3, 80134c6 <__swsetup_r+0x9a>
 80134b2:	89a3      	ldrh	r3, [r4, #12]
 80134b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80134b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134bc:	d003      	beq.n	80134c6 <__swsetup_r+0x9a>
 80134be:	4621      	mov	r1, r4
 80134c0:	4630      	mov	r0, r6
 80134c2:	f000 ff29 	bl	8014318 <__smakebuf_r>
 80134c6:	89a0      	ldrh	r0, [r4, #12]
 80134c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134cc:	f010 0301 	ands.w	r3, r0, #1
 80134d0:	d00a      	beq.n	80134e8 <__swsetup_r+0xbc>
 80134d2:	2300      	movs	r3, #0
 80134d4:	60a3      	str	r3, [r4, #8]
 80134d6:	6963      	ldr	r3, [r4, #20]
 80134d8:	425b      	negs	r3, r3
 80134da:	61a3      	str	r3, [r4, #24]
 80134dc:	6923      	ldr	r3, [r4, #16]
 80134de:	b943      	cbnz	r3, 80134f2 <__swsetup_r+0xc6>
 80134e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80134e4:	d1ba      	bne.n	801345c <__swsetup_r+0x30>
 80134e6:	bd70      	pop	{r4, r5, r6, pc}
 80134e8:	0781      	lsls	r1, r0, #30
 80134ea:	bf58      	it	pl
 80134ec:	6963      	ldrpl	r3, [r4, #20]
 80134ee:	60a3      	str	r3, [r4, #8]
 80134f0:	e7f4      	b.n	80134dc <__swsetup_r+0xb0>
 80134f2:	2000      	movs	r0, #0
 80134f4:	e7f7      	b.n	80134e6 <__swsetup_r+0xba>
 80134f6:	bf00      	nop
 80134f8:	200001e4 	.word	0x200001e4
 80134fc:	0801576c 	.word	0x0801576c
 8013500:	0801578c 	.word	0x0801578c
 8013504:	0801574c 	.word	0x0801574c

08013508 <_close_r>:
 8013508:	b538      	push	{r3, r4, r5, lr}
 801350a:	4d06      	ldr	r5, [pc, #24]	; (8013524 <_close_r+0x1c>)
 801350c:	2300      	movs	r3, #0
 801350e:	4604      	mov	r4, r0
 8013510:	4608      	mov	r0, r1
 8013512:	602b      	str	r3, [r5, #0]
 8013514:	f7f2 fdeb 	bl	80060ee <_close>
 8013518:	1c43      	adds	r3, r0, #1
 801351a:	d102      	bne.n	8013522 <_close_r+0x1a>
 801351c:	682b      	ldr	r3, [r5, #0]
 801351e:	b103      	cbz	r3, 8013522 <_close_r+0x1a>
 8013520:	6023      	str	r3, [r4, #0]
 8013522:	bd38      	pop	{r3, r4, r5, pc}
 8013524:	20005cbc 	.word	0x20005cbc

08013528 <quorem>:
 8013528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801352c:	6903      	ldr	r3, [r0, #16]
 801352e:	690c      	ldr	r4, [r1, #16]
 8013530:	42a3      	cmp	r3, r4
 8013532:	4607      	mov	r7, r0
 8013534:	f2c0 8081 	blt.w	801363a <quorem+0x112>
 8013538:	3c01      	subs	r4, #1
 801353a:	f101 0814 	add.w	r8, r1, #20
 801353e:	f100 0514 	add.w	r5, r0, #20
 8013542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013546:	9301      	str	r3, [sp, #4]
 8013548:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801354c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013550:	3301      	adds	r3, #1
 8013552:	429a      	cmp	r2, r3
 8013554:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013558:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801355c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013560:	d331      	bcc.n	80135c6 <quorem+0x9e>
 8013562:	f04f 0e00 	mov.w	lr, #0
 8013566:	4640      	mov	r0, r8
 8013568:	46ac      	mov	ip, r5
 801356a:	46f2      	mov	sl, lr
 801356c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013570:	b293      	uxth	r3, r2
 8013572:	fb06 e303 	mla	r3, r6, r3, lr
 8013576:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801357a:	b29b      	uxth	r3, r3
 801357c:	ebaa 0303 	sub.w	r3, sl, r3
 8013580:	f8dc a000 	ldr.w	sl, [ip]
 8013584:	0c12      	lsrs	r2, r2, #16
 8013586:	fa13 f38a 	uxtah	r3, r3, sl
 801358a:	fb06 e202 	mla	r2, r6, r2, lr
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	9b00      	ldr	r3, [sp, #0]
 8013592:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013596:	b292      	uxth	r2, r2
 8013598:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801359c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80135a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80135a4:	4581      	cmp	r9, r0
 80135a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135aa:	f84c 3b04 	str.w	r3, [ip], #4
 80135ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80135b2:	d2db      	bcs.n	801356c <quorem+0x44>
 80135b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80135b8:	b92b      	cbnz	r3, 80135c6 <quorem+0x9e>
 80135ba:	9b01      	ldr	r3, [sp, #4]
 80135bc:	3b04      	subs	r3, #4
 80135be:	429d      	cmp	r5, r3
 80135c0:	461a      	mov	r2, r3
 80135c2:	d32e      	bcc.n	8013622 <quorem+0xfa>
 80135c4:	613c      	str	r4, [r7, #16]
 80135c6:	4638      	mov	r0, r7
 80135c8:	f001 f97c 	bl	80148c4 <__mcmp>
 80135cc:	2800      	cmp	r0, #0
 80135ce:	db24      	blt.n	801361a <quorem+0xf2>
 80135d0:	3601      	adds	r6, #1
 80135d2:	4628      	mov	r0, r5
 80135d4:	f04f 0c00 	mov.w	ip, #0
 80135d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80135dc:	f8d0 e000 	ldr.w	lr, [r0]
 80135e0:	b293      	uxth	r3, r2
 80135e2:	ebac 0303 	sub.w	r3, ip, r3
 80135e6:	0c12      	lsrs	r2, r2, #16
 80135e8:	fa13 f38e 	uxtah	r3, r3, lr
 80135ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80135f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80135f4:	b29b      	uxth	r3, r3
 80135f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80135fa:	45c1      	cmp	r9, r8
 80135fc:	f840 3b04 	str.w	r3, [r0], #4
 8013600:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013604:	d2e8      	bcs.n	80135d8 <quorem+0xb0>
 8013606:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801360a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801360e:	b922      	cbnz	r2, 801361a <quorem+0xf2>
 8013610:	3b04      	subs	r3, #4
 8013612:	429d      	cmp	r5, r3
 8013614:	461a      	mov	r2, r3
 8013616:	d30a      	bcc.n	801362e <quorem+0x106>
 8013618:	613c      	str	r4, [r7, #16]
 801361a:	4630      	mov	r0, r6
 801361c:	b003      	add	sp, #12
 801361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013622:	6812      	ldr	r2, [r2, #0]
 8013624:	3b04      	subs	r3, #4
 8013626:	2a00      	cmp	r2, #0
 8013628:	d1cc      	bne.n	80135c4 <quorem+0x9c>
 801362a:	3c01      	subs	r4, #1
 801362c:	e7c7      	b.n	80135be <quorem+0x96>
 801362e:	6812      	ldr	r2, [r2, #0]
 8013630:	3b04      	subs	r3, #4
 8013632:	2a00      	cmp	r2, #0
 8013634:	d1f0      	bne.n	8013618 <quorem+0xf0>
 8013636:	3c01      	subs	r4, #1
 8013638:	e7eb      	b.n	8013612 <quorem+0xea>
 801363a:	2000      	movs	r0, #0
 801363c:	e7ee      	b.n	801361c <quorem+0xf4>
	...

08013640 <_dtoa_r>:
 8013640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013644:	ed2d 8b02 	vpush	{d8}
 8013648:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801364a:	b091      	sub	sp, #68	; 0x44
 801364c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013650:	ec59 8b10 	vmov	r8, r9, d0
 8013654:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013656:	9106      	str	r1, [sp, #24]
 8013658:	4606      	mov	r6, r0
 801365a:	9208      	str	r2, [sp, #32]
 801365c:	930c      	str	r3, [sp, #48]	; 0x30
 801365e:	b975      	cbnz	r5, 801367e <_dtoa_r+0x3e>
 8013660:	2010      	movs	r0, #16
 8013662:	f000 fe99 	bl	8014398 <malloc>
 8013666:	4602      	mov	r2, r0
 8013668:	6270      	str	r0, [r6, #36]	; 0x24
 801366a:	b920      	cbnz	r0, 8013676 <_dtoa_r+0x36>
 801366c:	4baa      	ldr	r3, [pc, #680]	; (8013918 <_dtoa_r+0x2d8>)
 801366e:	21ea      	movs	r1, #234	; 0xea
 8013670:	48aa      	ldr	r0, [pc, #680]	; (801391c <_dtoa_r+0x2dc>)
 8013672:	f001 fbf7 	bl	8014e64 <__assert_func>
 8013676:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801367a:	6005      	str	r5, [r0, #0]
 801367c:	60c5      	str	r5, [r0, #12]
 801367e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013680:	6819      	ldr	r1, [r3, #0]
 8013682:	b151      	cbz	r1, 801369a <_dtoa_r+0x5a>
 8013684:	685a      	ldr	r2, [r3, #4]
 8013686:	604a      	str	r2, [r1, #4]
 8013688:	2301      	movs	r3, #1
 801368a:	4093      	lsls	r3, r2
 801368c:	608b      	str	r3, [r1, #8]
 801368e:	4630      	mov	r0, r6
 8013690:	f000 fed6 	bl	8014440 <_Bfree>
 8013694:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013696:	2200      	movs	r2, #0
 8013698:	601a      	str	r2, [r3, #0]
 801369a:	f1b9 0300 	subs.w	r3, r9, #0
 801369e:	bfbb      	ittet	lt
 80136a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80136a4:	9303      	strlt	r3, [sp, #12]
 80136a6:	2300      	movge	r3, #0
 80136a8:	2201      	movlt	r2, #1
 80136aa:	bfac      	ite	ge
 80136ac:	6023      	strge	r3, [r4, #0]
 80136ae:	6022      	strlt	r2, [r4, #0]
 80136b0:	4b9b      	ldr	r3, [pc, #620]	; (8013920 <_dtoa_r+0x2e0>)
 80136b2:	9c03      	ldr	r4, [sp, #12]
 80136b4:	43a3      	bics	r3, r4
 80136b6:	d11c      	bne.n	80136f2 <_dtoa_r+0xb2>
 80136b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80136ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80136be:	6013      	str	r3, [r2, #0]
 80136c0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80136c4:	ea53 0308 	orrs.w	r3, r3, r8
 80136c8:	f000 84fd 	beq.w	80140c6 <_dtoa_r+0xa86>
 80136cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80136ce:	b963      	cbnz	r3, 80136ea <_dtoa_r+0xaa>
 80136d0:	4b94      	ldr	r3, [pc, #592]	; (8013924 <_dtoa_r+0x2e4>)
 80136d2:	e01f      	b.n	8013714 <_dtoa_r+0xd4>
 80136d4:	4b94      	ldr	r3, [pc, #592]	; (8013928 <_dtoa_r+0x2e8>)
 80136d6:	9301      	str	r3, [sp, #4]
 80136d8:	3308      	adds	r3, #8
 80136da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80136dc:	6013      	str	r3, [r2, #0]
 80136de:	9801      	ldr	r0, [sp, #4]
 80136e0:	b011      	add	sp, #68	; 0x44
 80136e2:	ecbd 8b02 	vpop	{d8}
 80136e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ea:	4b8e      	ldr	r3, [pc, #568]	; (8013924 <_dtoa_r+0x2e4>)
 80136ec:	9301      	str	r3, [sp, #4]
 80136ee:	3303      	adds	r3, #3
 80136f0:	e7f3      	b.n	80136da <_dtoa_r+0x9a>
 80136f2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80136f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80136fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136fe:	d10b      	bne.n	8013718 <_dtoa_r+0xd8>
 8013700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013702:	2301      	movs	r3, #1
 8013704:	6013      	str	r3, [r2, #0]
 8013706:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013708:	2b00      	cmp	r3, #0
 801370a:	f000 84d9 	beq.w	80140c0 <_dtoa_r+0xa80>
 801370e:	4887      	ldr	r0, [pc, #540]	; (801392c <_dtoa_r+0x2ec>)
 8013710:	6018      	str	r0, [r3, #0]
 8013712:	1e43      	subs	r3, r0, #1
 8013714:	9301      	str	r3, [sp, #4]
 8013716:	e7e2      	b.n	80136de <_dtoa_r+0x9e>
 8013718:	a90f      	add	r1, sp, #60	; 0x3c
 801371a:	aa0e      	add	r2, sp, #56	; 0x38
 801371c:	4630      	mov	r0, r6
 801371e:	eeb0 0b48 	vmov.f64	d0, d8
 8013722:	f001 f975 	bl	8014a10 <__d2b>
 8013726:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801372a:	4605      	mov	r5, r0
 801372c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801372e:	2900      	cmp	r1, #0
 8013730:	d046      	beq.n	80137c0 <_dtoa_r+0x180>
 8013732:	ee18 4a90 	vmov	r4, s17
 8013736:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801373a:	ec53 2b18 	vmov	r2, r3, d8
 801373e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8013742:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013746:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801374a:	2400      	movs	r4, #0
 801374c:	ec43 2b16 	vmov	d6, r2, r3
 8013750:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8013754:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013900 <_dtoa_r+0x2c0>
 8013758:	ee36 7b47 	vsub.f64	d7, d6, d7
 801375c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8013908 <_dtoa_r+0x2c8>
 8013760:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013764:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8013910 <_dtoa_r+0x2d0>
 8013768:	ee07 1a90 	vmov	s15, r1
 801376c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013770:	eeb0 7b46 	vmov.f64	d7, d6
 8013774:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013778:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801377c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013784:	ee16 ba90 	vmov	fp, s13
 8013788:	940a      	str	r4, [sp, #40]	; 0x28
 801378a:	d508      	bpl.n	801379e <_dtoa_r+0x15e>
 801378c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013790:	eeb4 6b47 	vcmp.f64	d6, d7
 8013794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013798:	bf18      	it	ne
 801379a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801379e:	f1bb 0f16 	cmp.w	fp, #22
 80137a2:	d82f      	bhi.n	8013804 <_dtoa_r+0x1c4>
 80137a4:	4b62      	ldr	r3, [pc, #392]	; (8013930 <_dtoa_r+0x2f0>)
 80137a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80137aa:	ed93 7b00 	vldr	d7, [r3]
 80137ae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80137b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b6:	d501      	bpl.n	80137bc <_dtoa_r+0x17c>
 80137b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80137bc:	2300      	movs	r3, #0
 80137be:	e022      	b.n	8013806 <_dtoa_r+0x1c6>
 80137c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80137c2:	4401      	add	r1, r0
 80137c4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80137c8:	2b20      	cmp	r3, #32
 80137ca:	bfc1      	itttt	gt
 80137cc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80137d0:	fa04 f303 	lslgt.w	r3, r4, r3
 80137d4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80137d8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80137dc:	bfd6      	itet	le
 80137de:	f1c3 0320 	rsble	r3, r3, #32
 80137e2:	ea43 0808 	orrgt.w	r8, r3, r8
 80137e6:	fa08 f803 	lslle.w	r8, r8, r3
 80137ea:	ee07 8a90 	vmov	s15, r8
 80137ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80137f2:	3901      	subs	r1, #1
 80137f4:	ee17 4a90 	vmov	r4, s15
 80137f8:	ec53 2b17 	vmov	r2, r3, d7
 80137fc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8013800:	2401      	movs	r4, #1
 8013802:	e7a3      	b.n	801374c <_dtoa_r+0x10c>
 8013804:	2301      	movs	r3, #1
 8013806:	930b      	str	r3, [sp, #44]	; 0x2c
 8013808:	1a43      	subs	r3, r0, r1
 801380a:	1e5a      	subs	r2, r3, #1
 801380c:	bf45      	ittet	mi
 801380e:	f1c3 0301 	rsbmi	r3, r3, #1
 8013812:	9304      	strmi	r3, [sp, #16]
 8013814:	2300      	movpl	r3, #0
 8013816:	2300      	movmi	r3, #0
 8013818:	9205      	str	r2, [sp, #20]
 801381a:	bf54      	ite	pl
 801381c:	9304      	strpl	r3, [sp, #16]
 801381e:	9305      	strmi	r3, [sp, #20]
 8013820:	f1bb 0f00 	cmp.w	fp, #0
 8013824:	db18      	blt.n	8013858 <_dtoa_r+0x218>
 8013826:	9b05      	ldr	r3, [sp, #20]
 8013828:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801382c:	445b      	add	r3, fp
 801382e:	9305      	str	r3, [sp, #20]
 8013830:	2300      	movs	r3, #0
 8013832:	9a06      	ldr	r2, [sp, #24]
 8013834:	2a09      	cmp	r2, #9
 8013836:	d849      	bhi.n	80138cc <_dtoa_r+0x28c>
 8013838:	2a05      	cmp	r2, #5
 801383a:	bfc4      	itt	gt
 801383c:	3a04      	subgt	r2, #4
 801383e:	9206      	strgt	r2, [sp, #24]
 8013840:	9a06      	ldr	r2, [sp, #24]
 8013842:	f1a2 0202 	sub.w	r2, r2, #2
 8013846:	bfcc      	ite	gt
 8013848:	2400      	movgt	r4, #0
 801384a:	2401      	movle	r4, #1
 801384c:	2a03      	cmp	r2, #3
 801384e:	d848      	bhi.n	80138e2 <_dtoa_r+0x2a2>
 8013850:	e8df f002 	tbb	[pc, r2]
 8013854:	3a2c2e0b 	.word	0x3a2c2e0b
 8013858:	9b04      	ldr	r3, [sp, #16]
 801385a:	2200      	movs	r2, #0
 801385c:	eba3 030b 	sub.w	r3, r3, fp
 8013860:	9304      	str	r3, [sp, #16]
 8013862:	9209      	str	r2, [sp, #36]	; 0x24
 8013864:	f1cb 0300 	rsb	r3, fp, #0
 8013868:	e7e3      	b.n	8013832 <_dtoa_r+0x1f2>
 801386a:	2200      	movs	r2, #0
 801386c:	9207      	str	r2, [sp, #28]
 801386e:	9a08      	ldr	r2, [sp, #32]
 8013870:	2a00      	cmp	r2, #0
 8013872:	dc39      	bgt.n	80138e8 <_dtoa_r+0x2a8>
 8013874:	f04f 0a01 	mov.w	sl, #1
 8013878:	46d1      	mov	r9, sl
 801387a:	4652      	mov	r2, sl
 801387c:	f8cd a020 	str.w	sl, [sp, #32]
 8013880:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8013882:	2100      	movs	r1, #0
 8013884:	6079      	str	r1, [r7, #4]
 8013886:	2004      	movs	r0, #4
 8013888:	f100 0c14 	add.w	ip, r0, #20
 801388c:	4594      	cmp	ip, r2
 801388e:	6879      	ldr	r1, [r7, #4]
 8013890:	d92f      	bls.n	80138f2 <_dtoa_r+0x2b2>
 8013892:	4630      	mov	r0, r6
 8013894:	930d      	str	r3, [sp, #52]	; 0x34
 8013896:	f000 fd93 	bl	80143c0 <_Balloc>
 801389a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801389c:	9001      	str	r0, [sp, #4]
 801389e:	4602      	mov	r2, r0
 80138a0:	2800      	cmp	r0, #0
 80138a2:	d149      	bne.n	8013938 <_dtoa_r+0x2f8>
 80138a4:	4b23      	ldr	r3, [pc, #140]	; (8013934 <_dtoa_r+0x2f4>)
 80138a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80138aa:	e6e1      	b.n	8013670 <_dtoa_r+0x30>
 80138ac:	2201      	movs	r2, #1
 80138ae:	e7dd      	b.n	801386c <_dtoa_r+0x22c>
 80138b0:	2200      	movs	r2, #0
 80138b2:	9207      	str	r2, [sp, #28]
 80138b4:	9a08      	ldr	r2, [sp, #32]
 80138b6:	eb0b 0a02 	add.w	sl, fp, r2
 80138ba:	f10a 0901 	add.w	r9, sl, #1
 80138be:	464a      	mov	r2, r9
 80138c0:	2a01      	cmp	r2, #1
 80138c2:	bfb8      	it	lt
 80138c4:	2201      	movlt	r2, #1
 80138c6:	e7db      	b.n	8013880 <_dtoa_r+0x240>
 80138c8:	2201      	movs	r2, #1
 80138ca:	e7f2      	b.n	80138b2 <_dtoa_r+0x272>
 80138cc:	2401      	movs	r4, #1
 80138ce:	2200      	movs	r2, #0
 80138d0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80138d4:	f04f 3aff 	mov.w	sl, #4294967295
 80138d8:	2100      	movs	r1, #0
 80138da:	46d1      	mov	r9, sl
 80138dc:	2212      	movs	r2, #18
 80138de:	9108      	str	r1, [sp, #32]
 80138e0:	e7ce      	b.n	8013880 <_dtoa_r+0x240>
 80138e2:	2201      	movs	r2, #1
 80138e4:	9207      	str	r2, [sp, #28]
 80138e6:	e7f5      	b.n	80138d4 <_dtoa_r+0x294>
 80138e8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80138ec:	46d1      	mov	r9, sl
 80138ee:	4652      	mov	r2, sl
 80138f0:	e7c6      	b.n	8013880 <_dtoa_r+0x240>
 80138f2:	3101      	adds	r1, #1
 80138f4:	6079      	str	r1, [r7, #4]
 80138f6:	0040      	lsls	r0, r0, #1
 80138f8:	e7c6      	b.n	8013888 <_dtoa_r+0x248>
 80138fa:	bf00      	nop
 80138fc:	f3af 8000 	nop.w
 8013900:	636f4361 	.word	0x636f4361
 8013904:	3fd287a7 	.word	0x3fd287a7
 8013908:	8b60c8b3 	.word	0x8b60c8b3
 801390c:	3fc68a28 	.word	0x3fc68a28
 8013910:	509f79fb 	.word	0x509f79fb
 8013914:	3fd34413 	.word	0x3fd34413
 8013918:	080157f1 	.word	0x080157f1
 801391c:	08015808 	.word	0x08015808
 8013920:	7ff00000 	.word	0x7ff00000
 8013924:	080157ed 	.word	0x080157ed
 8013928:	080157e4 	.word	0x080157e4
 801392c:	080157c1 	.word	0x080157c1
 8013930:	080158f8 	.word	0x080158f8
 8013934:	08015863 	.word	0x08015863
 8013938:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801393a:	9901      	ldr	r1, [sp, #4]
 801393c:	6011      	str	r1, [r2, #0]
 801393e:	f1b9 0f0e 	cmp.w	r9, #14
 8013942:	d86c      	bhi.n	8013a1e <_dtoa_r+0x3de>
 8013944:	2c00      	cmp	r4, #0
 8013946:	d06a      	beq.n	8013a1e <_dtoa_r+0x3de>
 8013948:	f1bb 0f00 	cmp.w	fp, #0
 801394c:	f340 80a0 	ble.w	8013a90 <_dtoa_r+0x450>
 8013950:	49c1      	ldr	r1, [pc, #772]	; (8013c58 <_dtoa_r+0x618>)
 8013952:	f00b 020f 	and.w	r2, fp, #15
 8013956:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801395a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801395e:	ed92 7b00 	vldr	d7, [r2]
 8013962:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013966:	f000 8087 	beq.w	8013a78 <_dtoa_r+0x438>
 801396a:	4abc      	ldr	r2, [pc, #752]	; (8013c5c <_dtoa_r+0x61c>)
 801396c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013970:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013974:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013978:	f001 010f 	and.w	r1, r1, #15
 801397c:	2203      	movs	r2, #3
 801397e:	48b7      	ldr	r0, [pc, #732]	; (8013c5c <_dtoa_r+0x61c>)
 8013980:	2900      	cmp	r1, #0
 8013982:	d17b      	bne.n	8013a7c <_dtoa_r+0x43c>
 8013984:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013988:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801398c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013990:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013992:	2900      	cmp	r1, #0
 8013994:	f000 80a2 	beq.w	8013adc <_dtoa_r+0x49c>
 8013998:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801399c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80139a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80139a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a8:	f140 8098 	bpl.w	8013adc <_dtoa_r+0x49c>
 80139ac:	f1b9 0f00 	cmp.w	r9, #0
 80139b0:	f000 8094 	beq.w	8013adc <_dtoa_r+0x49c>
 80139b4:	f1ba 0f00 	cmp.w	sl, #0
 80139b8:	dd2f      	ble.n	8013a1a <_dtoa_r+0x3da>
 80139ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80139be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80139c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80139c6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80139ca:	3201      	adds	r2, #1
 80139cc:	4650      	mov	r0, sl
 80139ce:	ed9d 6b02 	vldr	d6, [sp, #8]
 80139d2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80139d6:	ee07 2a90 	vmov	s15, r2
 80139da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80139de:	eea7 5b06 	vfma.f64	d5, d7, d6
 80139e2:	ee15 4a90 	vmov	r4, s11
 80139e6:	ec52 1b15 	vmov	r1, r2, d5
 80139ea:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80139ee:	2800      	cmp	r0, #0
 80139f0:	d177      	bne.n	8013ae2 <_dtoa_r+0x4a2>
 80139f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80139f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80139fa:	ec42 1b17 	vmov	d7, r1, r2
 80139fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a06:	f300 8263 	bgt.w	8013ed0 <_dtoa_r+0x890>
 8013a0a:	eeb1 7b47 	vneg.f64	d7, d7
 8013a0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a16:	f100 8258 	bmi.w	8013eca <_dtoa_r+0x88a>
 8013a1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013a1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013a20:	2a00      	cmp	r2, #0
 8013a22:	f2c0 811d 	blt.w	8013c60 <_dtoa_r+0x620>
 8013a26:	f1bb 0f0e 	cmp.w	fp, #14
 8013a2a:	f300 8119 	bgt.w	8013c60 <_dtoa_r+0x620>
 8013a2e:	4b8a      	ldr	r3, [pc, #552]	; (8013c58 <_dtoa_r+0x618>)
 8013a30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013a34:	ed93 6b00 	vldr	d6, [r3]
 8013a38:	9b08      	ldr	r3, [sp, #32]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	f280 80b7 	bge.w	8013bae <_dtoa_r+0x56e>
 8013a40:	f1b9 0f00 	cmp.w	r9, #0
 8013a44:	f300 80b3 	bgt.w	8013bae <_dtoa_r+0x56e>
 8013a48:	f040 823f 	bne.w	8013eca <_dtoa_r+0x88a>
 8013a4c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013a50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013a54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a60:	464c      	mov	r4, r9
 8013a62:	464f      	mov	r7, r9
 8013a64:	f280 8215 	bge.w	8013e92 <_dtoa_r+0x852>
 8013a68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013a6c:	2331      	movs	r3, #49	; 0x31
 8013a6e:	f808 3b01 	strb.w	r3, [r8], #1
 8013a72:	f10b 0b01 	add.w	fp, fp, #1
 8013a76:	e211      	b.n	8013e9c <_dtoa_r+0x85c>
 8013a78:	2202      	movs	r2, #2
 8013a7a:	e780      	b.n	801397e <_dtoa_r+0x33e>
 8013a7c:	07cc      	lsls	r4, r1, #31
 8013a7e:	d504      	bpl.n	8013a8a <_dtoa_r+0x44a>
 8013a80:	ed90 6b00 	vldr	d6, [r0]
 8013a84:	3201      	adds	r2, #1
 8013a86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013a8a:	1049      	asrs	r1, r1, #1
 8013a8c:	3008      	adds	r0, #8
 8013a8e:	e777      	b.n	8013980 <_dtoa_r+0x340>
 8013a90:	d022      	beq.n	8013ad8 <_dtoa_r+0x498>
 8013a92:	f1cb 0100 	rsb	r1, fp, #0
 8013a96:	4a70      	ldr	r2, [pc, #448]	; (8013c58 <_dtoa_r+0x618>)
 8013a98:	f001 000f 	and.w	r0, r1, #15
 8013a9c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013aa0:	ed92 7b00 	vldr	d7, [r2]
 8013aa4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013aa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013aac:	486b      	ldr	r0, [pc, #428]	; (8013c5c <_dtoa_r+0x61c>)
 8013aae:	1109      	asrs	r1, r1, #4
 8013ab0:	2400      	movs	r4, #0
 8013ab2:	2202      	movs	r2, #2
 8013ab4:	b929      	cbnz	r1, 8013ac2 <_dtoa_r+0x482>
 8013ab6:	2c00      	cmp	r4, #0
 8013ab8:	f43f af6a 	beq.w	8013990 <_dtoa_r+0x350>
 8013abc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013ac0:	e766      	b.n	8013990 <_dtoa_r+0x350>
 8013ac2:	07cf      	lsls	r7, r1, #31
 8013ac4:	d505      	bpl.n	8013ad2 <_dtoa_r+0x492>
 8013ac6:	ed90 6b00 	vldr	d6, [r0]
 8013aca:	3201      	adds	r2, #1
 8013acc:	2401      	movs	r4, #1
 8013ace:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013ad2:	1049      	asrs	r1, r1, #1
 8013ad4:	3008      	adds	r0, #8
 8013ad6:	e7ed      	b.n	8013ab4 <_dtoa_r+0x474>
 8013ad8:	2202      	movs	r2, #2
 8013ada:	e759      	b.n	8013990 <_dtoa_r+0x350>
 8013adc:	465f      	mov	r7, fp
 8013ade:	4648      	mov	r0, r9
 8013ae0:	e775      	b.n	80139ce <_dtoa_r+0x38e>
 8013ae2:	ec42 1b17 	vmov	d7, r1, r2
 8013ae6:	4a5c      	ldr	r2, [pc, #368]	; (8013c58 <_dtoa_r+0x618>)
 8013ae8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013aec:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013af0:	9a01      	ldr	r2, [sp, #4]
 8013af2:	1814      	adds	r4, r2, r0
 8013af4:	9a07      	ldr	r2, [sp, #28]
 8013af6:	b352      	cbz	r2, 8013b4e <_dtoa_r+0x50e>
 8013af8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013afc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013b00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013b04:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013b08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013b0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013b10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013b14:	ee14 2a90 	vmov	r2, s9
 8013b18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013b1c:	3230      	adds	r2, #48	; 0x30
 8013b1e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013b22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b2a:	f808 2b01 	strb.w	r2, [r8], #1
 8013b2e:	d439      	bmi.n	8013ba4 <_dtoa_r+0x564>
 8013b30:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013b34:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b3c:	d472      	bmi.n	8013c24 <_dtoa_r+0x5e4>
 8013b3e:	45a0      	cmp	r8, r4
 8013b40:	f43f af6b 	beq.w	8013a1a <_dtoa_r+0x3da>
 8013b44:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013b48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013b4c:	e7e0      	b.n	8013b10 <_dtoa_r+0x4d0>
 8013b4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013b52:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013b56:	4621      	mov	r1, r4
 8013b58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013b5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013b60:	ee14 2a90 	vmov	r2, s9
 8013b64:	3230      	adds	r2, #48	; 0x30
 8013b66:	f808 2b01 	strb.w	r2, [r8], #1
 8013b6a:	45a0      	cmp	r8, r4
 8013b6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013b70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013b74:	d118      	bne.n	8013ba8 <_dtoa_r+0x568>
 8013b76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013b7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013b7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b86:	dc4d      	bgt.n	8013c24 <_dtoa_r+0x5e4>
 8013b88:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013b8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b94:	f57f af41 	bpl.w	8013a1a <_dtoa_r+0x3da>
 8013b98:	4688      	mov	r8, r1
 8013b9a:	3901      	subs	r1, #1
 8013b9c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013ba0:	2b30      	cmp	r3, #48	; 0x30
 8013ba2:	d0f9      	beq.n	8013b98 <_dtoa_r+0x558>
 8013ba4:	46bb      	mov	fp, r7
 8013ba6:	e02a      	b.n	8013bfe <_dtoa_r+0x5be>
 8013ba8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013bac:	e7d6      	b.n	8013b5c <_dtoa_r+0x51c>
 8013bae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013bb2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013bb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013bba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013bbe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013bc2:	ee15 3a10 	vmov	r3, s10
 8013bc6:	3330      	adds	r3, #48	; 0x30
 8013bc8:	f808 3b01 	strb.w	r3, [r8], #1
 8013bcc:	9b01      	ldr	r3, [sp, #4]
 8013bce:	eba8 0303 	sub.w	r3, r8, r3
 8013bd2:	4599      	cmp	r9, r3
 8013bd4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013bd8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013bdc:	d133      	bne.n	8013c46 <_dtoa_r+0x606>
 8013bde:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013be2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bea:	dc1a      	bgt.n	8013c22 <_dtoa_r+0x5e2>
 8013bec:	eeb4 7b46 	vcmp.f64	d7, d6
 8013bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf4:	d103      	bne.n	8013bfe <_dtoa_r+0x5be>
 8013bf6:	ee15 3a10 	vmov	r3, s10
 8013bfa:	07d9      	lsls	r1, r3, #31
 8013bfc:	d411      	bmi.n	8013c22 <_dtoa_r+0x5e2>
 8013bfe:	4629      	mov	r1, r5
 8013c00:	4630      	mov	r0, r6
 8013c02:	f000 fc1d 	bl	8014440 <_Bfree>
 8013c06:	2300      	movs	r3, #0
 8013c08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c0a:	f888 3000 	strb.w	r3, [r8]
 8013c0e:	f10b 0301 	add.w	r3, fp, #1
 8013c12:	6013      	str	r3, [r2, #0]
 8013c14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	f43f ad61 	beq.w	80136de <_dtoa_r+0x9e>
 8013c1c:	f8c3 8000 	str.w	r8, [r3]
 8013c20:	e55d      	b.n	80136de <_dtoa_r+0x9e>
 8013c22:	465f      	mov	r7, fp
 8013c24:	4643      	mov	r3, r8
 8013c26:	4698      	mov	r8, r3
 8013c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c2c:	2a39      	cmp	r2, #57	; 0x39
 8013c2e:	d106      	bne.n	8013c3e <_dtoa_r+0x5fe>
 8013c30:	9a01      	ldr	r2, [sp, #4]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d1f7      	bne.n	8013c26 <_dtoa_r+0x5e6>
 8013c36:	9901      	ldr	r1, [sp, #4]
 8013c38:	2230      	movs	r2, #48	; 0x30
 8013c3a:	3701      	adds	r7, #1
 8013c3c:	700a      	strb	r2, [r1, #0]
 8013c3e:	781a      	ldrb	r2, [r3, #0]
 8013c40:	3201      	adds	r2, #1
 8013c42:	701a      	strb	r2, [r3, #0]
 8013c44:	e7ae      	b.n	8013ba4 <_dtoa_r+0x564>
 8013c46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013c4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c52:	d1b2      	bne.n	8013bba <_dtoa_r+0x57a>
 8013c54:	e7d3      	b.n	8013bfe <_dtoa_r+0x5be>
 8013c56:	bf00      	nop
 8013c58:	080158f8 	.word	0x080158f8
 8013c5c:	080158d0 	.word	0x080158d0
 8013c60:	9907      	ldr	r1, [sp, #28]
 8013c62:	2900      	cmp	r1, #0
 8013c64:	f000 80d0 	beq.w	8013e08 <_dtoa_r+0x7c8>
 8013c68:	9906      	ldr	r1, [sp, #24]
 8013c6a:	2901      	cmp	r1, #1
 8013c6c:	f300 80b4 	bgt.w	8013dd8 <_dtoa_r+0x798>
 8013c70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013c72:	2900      	cmp	r1, #0
 8013c74:	f000 80ac 	beq.w	8013dd0 <_dtoa_r+0x790>
 8013c78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013c7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013c80:	461c      	mov	r4, r3
 8013c82:	930a      	str	r3, [sp, #40]	; 0x28
 8013c84:	9b04      	ldr	r3, [sp, #16]
 8013c86:	4413      	add	r3, r2
 8013c88:	9304      	str	r3, [sp, #16]
 8013c8a:	9b05      	ldr	r3, [sp, #20]
 8013c8c:	2101      	movs	r1, #1
 8013c8e:	4413      	add	r3, r2
 8013c90:	4630      	mov	r0, r6
 8013c92:	9305      	str	r3, [sp, #20]
 8013c94:	f000 fc8c 	bl	80145b0 <__i2b>
 8013c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c9a:	4607      	mov	r7, r0
 8013c9c:	f1b8 0f00 	cmp.w	r8, #0
 8013ca0:	dd0d      	ble.n	8013cbe <_dtoa_r+0x67e>
 8013ca2:	9a05      	ldr	r2, [sp, #20]
 8013ca4:	2a00      	cmp	r2, #0
 8013ca6:	dd0a      	ble.n	8013cbe <_dtoa_r+0x67e>
 8013ca8:	4542      	cmp	r2, r8
 8013caa:	9904      	ldr	r1, [sp, #16]
 8013cac:	bfa8      	it	ge
 8013cae:	4642      	movge	r2, r8
 8013cb0:	1a89      	subs	r1, r1, r2
 8013cb2:	9104      	str	r1, [sp, #16]
 8013cb4:	9905      	ldr	r1, [sp, #20]
 8013cb6:	eba8 0802 	sub.w	r8, r8, r2
 8013cba:	1a8a      	subs	r2, r1, r2
 8013cbc:	9205      	str	r2, [sp, #20]
 8013cbe:	b303      	cbz	r3, 8013d02 <_dtoa_r+0x6c2>
 8013cc0:	9a07      	ldr	r2, [sp, #28]
 8013cc2:	2a00      	cmp	r2, #0
 8013cc4:	f000 80a5 	beq.w	8013e12 <_dtoa_r+0x7d2>
 8013cc8:	2c00      	cmp	r4, #0
 8013cca:	dd13      	ble.n	8013cf4 <_dtoa_r+0x6b4>
 8013ccc:	4639      	mov	r1, r7
 8013cce:	4622      	mov	r2, r4
 8013cd0:	4630      	mov	r0, r6
 8013cd2:	930d      	str	r3, [sp, #52]	; 0x34
 8013cd4:	f000 fd2c 	bl	8014730 <__pow5mult>
 8013cd8:	462a      	mov	r2, r5
 8013cda:	4601      	mov	r1, r0
 8013cdc:	4607      	mov	r7, r0
 8013cde:	4630      	mov	r0, r6
 8013ce0:	f000 fc7c 	bl	80145dc <__multiply>
 8013ce4:	4629      	mov	r1, r5
 8013ce6:	900a      	str	r0, [sp, #40]	; 0x28
 8013ce8:	4630      	mov	r0, r6
 8013cea:	f000 fba9 	bl	8014440 <_Bfree>
 8013cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cf2:	4615      	mov	r5, r2
 8013cf4:	1b1a      	subs	r2, r3, r4
 8013cf6:	d004      	beq.n	8013d02 <_dtoa_r+0x6c2>
 8013cf8:	4629      	mov	r1, r5
 8013cfa:	4630      	mov	r0, r6
 8013cfc:	f000 fd18 	bl	8014730 <__pow5mult>
 8013d00:	4605      	mov	r5, r0
 8013d02:	2101      	movs	r1, #1
 8013d04:	4630      	mov	r0, r6
 8013d06:	f000 fc53 	bl	80145b0 <__i2b>
 8013d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	4604      	mov	r4, r0
 8013d10:	f340 8081 	ble.w	8013e16 <_dtoa_r+0x7d6>
 8013d14:	461a      	mov	r2, r3
 8013d16:	4601      	mov	r1, r0
 8013d18:	4630      	mov	r0, r6
 8013d1a:	f000 fd09 	bl	8014730 <__pow5mult>
 8013d1e:	9b06      	ldr	r3, [sp, #24]
 8013d20:	2b01      	cmp	r3, #1
 8013d22:	4604      	mov	r4, r0
 8013d24:	dd7a      	ble.n	8013e1c <_dtoa_r+0x7dc>
 8013d26:	2300      	movs	r3, #0
 8013d28:	930a      	str	r3, [sp, #40]	; 0x28
 8013d2a:	6922      	ldr	r2, [r4, #16]
 8013d2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013d30:	6910      	ldr	r0, [r2, #16]
 8013d32:	f000 fbed 	bl	8014510 <__hi0bits>
 8013d36:	f1c0 0020 	rsb	r0, r0, #32
 8013d3a:	9b05      	ldr	r3, [sp, #20]
 8013d3c:	4418      	add	r0, r3
 8013d3e:	f010 001f 	ands.w	r0, r0, #31
 8013d42:	f000 808c 	beq.w	8013e5e <_dtoa_r+0x81e>
 8013d46:	f1c0 0220 	rsb	r2, r0, #32
 8013d4a:	2a04      	cmp	r2, #4
 8013d4c:	f340 8085 	ble.w	8013e5a <_dtoa_r+0x81a>
 8013d50:	f1c0 001c 	rsb	r0, r0, #28
 8013d54:	9b04      	ldr	r3, [sp, #16]
 8013d56:	4403      	add	r3, r0
 8013d58:	9304      	str	r3, [sp, #16]
 8013d5a:	9b05      	ldr	r3, [sp, #20]
 8013d5c:	4403      	add	r3, r0
 8013d5e:	4480      	add	r8, r0
 8013d60:	9305      	str	r3, [sp, #20]
 8013d62:	9b04      	ldr	r3, [sp, #16]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	dd05      	ble.n	8013d74 <_dtoa_r+0x734>
 8013d68:	4629      	mov	r1, r5
 8013d6a:	461a      	mov	r2, r3
 8013d6c:	4630      	mov	r0, r6
 8013d6e:	f000 fd39 	bl	80147e4 <__lshift>
 8013d72:	4605      	mov	r5, r0
 8013d74:	9b05      	ldr	r3, [sp, #20]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	dd05      	ble.n	8013d86 <_dtoa_r+0x746>
 8013d7a:	4621      	mov	r1, r4
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	4630      	mov	r0, r6
 8013d80:	f000 fd30 	bl	80147e4 <__lshift>
 8013d84:	4604      	mov	r4, r0
 8013d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d06a      	beq.n	8013e62 <_dtoa_r+0x822>
 8013d8c:	4621      	mov	r1, r4
 8013d8e:	4628      	mov	r0, r5
 8013d90:	f000 fd98 	bl	80148c4 <__mcmp>
 8013d94:	2800      	cmp	r0, #0
 8013d96:	da64      	bge.n	8013e62 <_dtoa_r+0x822>
 8013d98:	2300      	movs	r3, #0
 8013d9a:	4629      	mov	r1, r5
 8013d9c:	220a      	movs	r2, #10
 8013d9e:	4630      	mov	r0, r6
 8013da0:	f000 fb70 	bl	8014484 <__multadd>
 8013da4:	9b07      	ldr	r3, [sp, #28]
 8013da6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013daa:	4605      	mov	r5, r0
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	f000 8191 	beq.w	80140d4 <_dtoa_r+0xa94>
 8013db2:	4639      	mov	r1, r7
 8013db4:	2300      	movs	r3, #0
 8013db6:	220a      	movs	r2, #10
 8013db8:	4630      	mov	r0, r6
 8013dba:	f000 fb63 	bl	8014484 <__multadd>
 8013dbe:	f1ba 0f00 	cmp.w	sl, #0
 8013dc2:	4607      	mov	r7, r0
 8013dc4:	f300 808d 	bgt.w	8013ee2 <_dtoa_r+0x8a2>
 8013dc8:	9b06      	ldr	r3, [sp, #24]
 8013dca:	2b02      	cmp	r3, #2
 8013dcc:	dc50      	bgt.n	8013e70 <_dtoa_r+0x830>
 8013dce:	e088      	b.n	8013ee2 <_dtoa_r+0x8a2>
 8013dd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013dd2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013dd6:	e751      	b.n	8013c7c <_dtoa_r+0x63c>
 8013dd8:	f109 34ff 	add.w	r4, r9, #4294967295
 8013ddc:	42a3      	cmp	r3, r4
 8013dde:	bfbf      	itttt	lt
 8013de0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8013de2:	1ae3      	sublt	r3, r4, r3
 8013de4:	18d2      	addlt	r2, r2, r3
 8013de6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8013de8:	bfb6      	itet	lt
 8013dea:	4623      	movlt	r3, r4
 8013dec:	1b1c      	subge	r4, r3, r4
 8013dee:	2400      	movlt	r4, #0
 8013df0:	f1b9 0f00 	cmp.w	r9, #0
 8013df4:	bfb5      	itete	lt
 8013df6:	9a04      	ldrlt	r2, [sp, #16]
 8013df8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013dfc:	eba2 0809 	sublt.w	r8, r2, r9
 8013e00:	464a      	movge	r2, r9
 8013e02:	bfb8      	it	lt
 8013e04:	2200      	movlt	r2, #0
 8013e06:	e73c      	b.n	8013c82 <_dtoa_r+0x642>
 8013e08:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013e0c:	9f07      	ldr	r7, [sp, #28]
 8013e0e:	461c      	mov	r4, r3
 8013e10:	e744      	b.n	8013c9c <_dtoa_r+0x65c>
 8013e12:	461a      	mov	r2, r3
 8013e14:	e770      	b.n	8013cf8 <_dtoa_r+0x6b8>
 8013e16:	9b06      	ldr	r3, [sp, #24]
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	dc18      	bgt.n	8013e4e <_dtoa_r+0x80e>
 8013e1c:	9b02      	ldr	r3, [sp, #8]
 8013e1e:	b9b3      	cbnz	r3, 8013e4e <_dtoa_r+0x80e>
 8013e20:	9b03      	ldr	r3, [sp, #12]
 8013e22:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013e26:	b9a2      	cbnz	r2, 8013e52 <_dtoa_r+0x812>
 8013e28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013e2c:	0d12      	lsrs	r2, r2, #20
 8013e2e:	0512      	lsls	r2, r2, #20
 8013e30:	b18a      	cbz	r2, 8013e56 <_dtoa_r+0x816>
 8013e32:	9b04      	ldr	r3, [sp, #16]
 8013e34:	3301      	adds	r3, #1
 8013e36:	9304      	str	r3, [sp, #16]
 8013e38:	9b05      	ldr	r3, [sp, #20]
 8013e3a:	3301      	adds	r3, #1
 8013e3c:	9305      	str	r3, [sp, #20]
 8013e3e:	2301      	movs	r3, #1
 8013e40:	930a      	str	r3, [sp, #40]	; 0x28
 8013e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	f47f af70 	bne.w	8013d2a <_dtoa_r+0x6ea>
 8013e4a:	2001      	movs	r0, #1
 8013e4c:	e775      	b.n	8013d3a <_dtoa_r+0x6fa>
 8013e4e:	2300      	movs	r3, #0
 8013e50:	e7f6      	b.n	8013e40 <_dtoa_r+0x800>
 8013e52:	9b02      	ldr	r3, [sp, #8]
 8013e54:	e7f4      	b.n	8013e40 <_dtoa_r+0x800>
 8013e56:	920a      	str	r2, [sp, #40]	; 0x28
 8013e58:	e7f3      	b.n	8013e42 <_dtoa_r+0x802>
 8013e5a:	d082      	beq.n	8013d62 <_dtoa_r+0x722>
 8013e5c:	4610      	mov	r0, r2
 8013e5e:	301c      	adds	r0, #28
 8013e60:	e778      	b.n	8013d54 <_dtoa_r+0x714>
 8013e62:	f1b9 0f00 	cmp.w	r9, #0
 8013e66:	dc37      	bgt.n	8013ed8 <_dtoa_r+0x898>
 8013e68:	9b06      	ldr	r3, [sp, #24]
 8013e6a:	2b02      	cmp	r3, #2
 8013e6c:	dd34      	ble.n	8013ed8 <_dtoa_r+0x898>
 8013e6e:	46ca      	mov	sl, r9
 8013e70:	f1ba 0f00 	cmp.w	sl, #0
 8013e74:	d10d      	bne.n	8013e92 <_dtoa_r+0x852>
 8013e76:	4621      	mov	r1, r4
 8013e78:	4653      	mov	r3, sl
 8013e7a:	2205      	movs	r2, #5
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	f000 fb01 	bl	8014484 <__multadd>
 8013e82:	4601      	mov	r1, r0
 8013e84:	4604      	mov	r4, r0
 8013e86:	4628      	mov	r0, r5
 8013e88:	f000 fd1c 	bl	80148c4 <__mcmp>
 8013e8c:	2800      	cmp	r0, #0
 8013e8e:	f73f adeb 	bgt.w	8013a68 <_dtoa_r+0x428>
 8013e92:	9b08      	ldr	r3, [sp, #32]
 8013e94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013e98:	ea6f 0b03 	mvn.w	fp, r3
 8013e9c:	f04f 0900 	mov.w	r9, #0
 8013ea0:	4621      	mov	r1, r4
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f000 facc 	bl	8014440 <_Bfree>
 8013ea8:	2f00      	cmp	r7, #0
 8013eaa:	f43f aea8 	beq.w	8013bfe <_dtoa_r+0x5be>
 8013eae:	f1b9 0f00 	cmp.w	r9, #0
 8013eb2:	d005      	beq.n	8013ec0 <_dtoa_r+0x880>
 8013eb4:	45b9      	cmp	r9, r7
 8013eb6:	d003      	beq.n	8013ec0 <_dtoa_r+0x880>
 8013eb8:	4649      	mov	r1, r9
 8013eba:	4630      	mov	r0, r6
 8013ebc:	f000 fac0 	bl	8014440 <_Bfree>
 8013ec0:	4639      	mov	r1, r7
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	f000 fabc 	bl	8014440 <_Bfree>
 8013ec8:	e699      	b.n	8013bfe <_dtoa_r+0x5be>
 8013eca:	2400      	movs	r4, #0
 8013ecc:	4627      	mov	r7, r4
 8013ece:	e7e0      	b.n	8013e92 <_dtoa_r+0x852>
 8013ed0:	46bb      	mov	fp, r7
 8013ed2:	4604      	mov	r4, r0
 8013ed4:	4607      	mov	r7, r0
 8013ed6:	e5c7      	b.n	8013a68 <_dtoa_r+0x428>
 8013ed8:	9b07      	ldr	r3, [sp, #28]
 8013eda:	46ca      	mov	sl, r9
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	f000 8100 	beq.w	80140e2 <_dtoa_r+0xaa2>
 8013ee2:	f1b8 0f00 	cmp.w	r8, #0
 8013ee6:	dd05      	ble.n	8013ef4 <_dtoa_r+0x8b4>
 8013ee8:	4639      	mov	r1, r7
 8013eea:	4642      	mov	r2, r8
 8013eec:	4630      	mov	r0, r6
 8013eee:	f000 fc79 	bl	80147e4 <__lshift>
 8013ef2:	4607      	mov	r7, r0
 8013ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d05d      	beq.n	8013fb6 <_dtoa_r+0x976>
 8013efa:	6879      	ldr	r1, [r7, #4]
 8013efc:	4630      	mov	r0, r6
 8013efe:	f000 fa5f 	bl	80143c0 <_Balloc>
 8013f02:	4680      	mov	r8, r0
 8013f04:	b928      	cbnz	r0, 8013f12 <_dtoa_r+0x8d2>
 8013f06:	4b82      	ldr	r3, [pc, #520]	; (8014110 <_dtoa_r+0xad0>)
 8013f08:	4602      	mov	r2, r0
 8013f0a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013f0e:	f7ff bbaf 	b.w	8013670 <_dtoa_r+0x30>
 8013f12:	693a      	ldr	r2, [r7, #16]
 8013f14:	3202      	adds	r2, #2
 8013f16:	0092      	lsls	r2, r2, #2
 8013f18:	f107 010c 	add.w	r1, r7, #12
 8013f1c:	300c      	adds	r0, #12
 8013f1e:	f7fe fbe8 	bl	80126f2 <memcpy>
 8013f22:	2201      	movs	r2, #1
 8013f24:	4641      	mov	r1, r8
 8013f26:	4630      	mov	r0, r6
 8013f28:	f000 fc5c 	bl	80147e4 <__lshift>
 8013f2c:	9b01      	ldr	r3, [sp, #4]
 8013f2e:	3301      	adds	r3, #1
 8013f30:	9304      	str	r3, [sp, #16]
 8013f32:	9b01      	ldr	r3, [sp, #4]
 8013f34:	4453      	add	r3, sl
 8013f36:	9308      	str	r3, [sp, #32]
 8013f38:	9b02      	ldr	r3, [sp, #8]
 8013f3a:	f003 0301 	and.w	r3, r3, #1
 8013f3e:	46b9      	mov	r9, r7
 8013f40:	9307      	str	r3, [sp, #28]
 8013f42:	4607      	mov	r7, r0
 8013f44:	9b04      	ldr	r3, [sp, #16]
 8013f46:	4621      	mov	r1, r4
 8013f48:	3b01      	subs	r3, #1
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	9302      	str	r3, [sp, #8]
 8013f4e:	f7ff faeb 	bl	8013528 <quorem>
 8013f52:	4603      	mov	r3, r0
 8013f54:	3330      	adds	r3, #48	; 0x30
 8013f56:	9005      	str	r0, [sp, #20]
 8013f58:	4649      	mov	r1, r9
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8013f5e:	f000 fcb1 	bl	80148c4 <__mcmp>
 8013f62:	463a      	mov	r2, r7
 8013f64:	4682      	mov	sl, r0
 8013f66:	4621      	mov	r1, r4
 8013f68:	4630      	mov	r0, r6
 8013f6a:	f000 fcc7 	bl	80148fc <__mdiff>
 8013f6e:	68c2      	ldr	r2, [r0, #12]
 8013f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f72:	4680      	mov	r8, r0
 8013f74:	bb0a      	cbnz	r2, 8013fba <_dtoa_r+0x97a>
 8013f76:	4601      	mov	r1, r0
 8013f78:	4628      	mov	r0, r5
 8013f7a:	f000 fca3 	bl	80148c4 <__mcmp>
 8013f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f80:	4602      	mov	r2, r0
 8013f82:	4641      	mov	r1, r8
 8013f84:	4630      	mov	r0, r6
 8013f86:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8013f8a:	f000 fa59 	bl	8014440 <_Bfree>
 8013f8e:	9b06      	ldr	r3, [sp, #24]
 8013f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f92:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013f96:	ea43 0102 	orr.w	r1, r3, r2
 8013f9a:	9b07      	ldr	r3, [sp, #28]
 8013f9c:	430b      	orrs	r3, r1
 8013f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fa0:	d10d      	bne.n	8013fbe <_dtoa_r+0x97e>
 8013fa2:	2b39      	cmp	r3, #57	; 0x39
 8013fa4:	d029      	beq.n	8013ffa <_dtoa_r+0x9ba>
 8013fa6:	f1ba 0f00 	cmp.w	sl, #0
 8013faa:	dd01      	ble.n	8013fb0 <_dtoa_r+0x970>
 8013fac:	9b05      	ldr	r3, [sp, #20]
 8013fae:	3331      	adds	r3, #49	; 0x31
 8013fb0:	9a02      	ldr	r2, [sp, #8]
 8013fb2:	7013      	strb	r3, [r2, #0]
 8013fb4:	e774      	b.n	8013ea0 <_dtoa_r+0x860>
 8013fb6:	4638      	mov	r0, r7
 8013fb8:	e7b8      	b.n	8013f2c <_dtoa_r+0x8ec>
 8013fba:	2201      	movs	r2, #1
 8013fbc:	e7e1      	b.n	8013f82 <_dtoa_r+0x942>
 8013fbe:	f1ba 0f00 	cmp.w	sl, #0
 8013fc2:	db06      	blt.n	8013fd2 <_dtoa_r+0x992>
 8013fc4:	9906      	ldr	r1, [sp, #24]
 8013fc6:	ea41 0a0a 	orr.w	sl, r1, sl
 8013fca:	9907      	ldr	r1, [sp, #28]
 8013fcc:	ea5a 0101 	orrs.w	r1, sl, r1
 8013fd0:	d120      	bne.n	8014014 <_dtoa_r+0x9d4>
 8013fd2:	2a00      	cmp	r2, #0
 8013fd4:	ddec      	ble.n	8013fb0 <_dtoa_r+0x970>
 8013fd6:	4629      	mov	r1, r5
 8013fd8:	2201      	movs	r2, #1
 8013fda:	4630      	mov	r0, r6
 8013fdc:	9304      	str	r3, [sp, #16]
 8013fde:	f000 fc01 	bl	80147e4 <__lshift>
 8013fe2:	4621      	mov	r1, r4
 8013fe4:	4605      	mov	r5, r0
 8013fe6:	f000 fc6d 	bl	80148c4 <__mcmp>
 8013fea:	2800      	cmp	r0, #0
 8013fec:	9b04      	ldr	r3, [sp, #16]
 8013fee:	dc02      	bgt.n	8013ff6 <_dtoa_r+0x9b6>
 8013ff0:	d1de      	bne.n	8013fb0 <_dtoa_r+0x970>
 8013ff2:	07da      	lsls	r2, r3, #31
 8013ff4:	d5dc      	bpl.n	8013fb0 <_dtoa_r+0x970>
 8013ff6:	2b39      	cmp	r3, #57	; 0x39
 8013ff8:	d1d8      	bne.n	8013fac <_dtoa_r+0x96c>
 8013ffa:	9a02      	ldr	r2, [sp, #8]
 8013ffc:	2339      	movs	r3, #57	; 0x39
 8013ffe:	7013      	strb	r3, [r2, #0]
 8014000:	4643      	mov	r3, r8
 8014002:	4698      	mov	r8, r3
 8014004:	3b01      	subs	r3, #1
 8014006:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801400a:	2a39      	cmp	r2, #57	; 0x39
 801400c:	d051      	beq.n	80140b2 <_dtoa_r+0xa72>
 801400e:	3201      	adds	r2, #1
 8014010:	701a      	strb	r2, [r3, #0]
 8014012:	e745      	b.n	8013ea0 <_dtoa_r+0x860>
 8014014:	2a00      	cmp	r2, #0
 8014016:	dd03      	ble.n	8014020 <_dtoa_r+0x9e0>
 8014018:	2b39      	cmp	r3, #57	; 0x39
 801401a:	d0ee      	beq.n	8013ffa <_dtoa_r+0x9ba>
 801401c:	3301      	adds	r3, #1
 801401e:	e7c7      	b.n	8013fb0 <_dtoa_r+0x970>
 8014020:	9a04      	ldr	r2, [sp, #16]
 8014022:	9908      	ldr	r1, [sp, #32]
 8014024:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014028:	428a      	cmp	r2, r1
 801402a:	d02b      	beq.n	8014084 <_dtoa_r+0xa44>
 801402c:	4629      	mov	r1, r5
 801402e:	2300      	movs	r3, #0
 8014030:	220a      	movs	r2, #10
 8014032:	4630      	mov	r0, r6
 8014034:	f000 fa26 	bl	8014484 <__multadd>
 8014038:	45b9      	cmp	r9, r7
 801403a:	4605      	mov	r5, r0
 801403c:	f04f 0300 	mov.w	r3, #0
 8014040:	f04f 020a 	mov.w	r2, #10
 8014044:	4649      	mov	r1, r9
 8014046:	4630      	mov	r0, r6
 8014048:	d107      	bne.n	801405a <_dtoa_r+0xa1a>
 801404a:	f000 fa1b 	bl	8014484 <__multadd>
 801404e:	4681      	mov	r9, r0
 8014050:	4607      	mov	r7, r0
 8014052:	9b04      	ldr	r3, [sp, #16]
 8014054:	3301      	adds	r3, #1
 8014056:	9304      	str	r3, [sp, #16]
 8014058:	e774      	b.n	8013f44 <_dtoa_r+0x904>
 801405a:	f000 fa13 	bl	8014484 <__multadd>
 801405e:	4639      	mov	r1, r7
 8014060:	4681      	mov	r9, r0
 8014062:	2300      	movs	r3, #0
 8014064:	220a      	movs	r2, #10
 8014066:	4630      	mov	r0, r6
 8014068:	f000 fa0c 	bl	8014484 <__multadd>
 801406c:	4607      	mov	r7, r0
 801406e:	e7f0      	b.n	8014052 <_dtoa_r+0xa12>
 8014070:	f1ba 0f00 	cmp.w	sl, #0
 8014074:	9a01      	ldr	r2, [sp, #4]
 8014076:	bfcc      	ite	gt
 8014078:	46d0      	movgt	r8, sl
 801407a:	f04f 0801 	movle.w	r8, #1
 801407e:	4490      	add	r8, r2
 8014080:	f04f 0900 	mov.w	r9, #0
 8014084:	4629      	mov	r1, r5
 8014086:	2201      	movs	r2, #1
 8014088:	4630      	mov	r0, r6
 801408a:	9302      	str	r3, [sp, #8]
 801408c:	f000 fbaa 	bl	80147e4 <__lshift>
 8014090:	4621      	mov	r1, r4
 8014092:	4605      	mov	r5, r0
 8014094:	f000 fc16 	bl	80148c4 <__mcmp>
 8014098:	2800      	cmp	r0, #0
 801409a:	dcb1      	bgt.n	8014000 <_dtoa_r+0x9c0>
 801409c:	d102      	bne.n	80140a4 <_dtoa_r+0xa64>
 801409e:	9b02      	ldr	r3, [sp, #8]
 80140a0:	07db      	lsls	r3, r3, #31
 80140a2:	d4ad      	bmi.n	8014000 <_dtoa_r+0x9c0>
 80140a4:	4643      	mov	r3, r8
 80140a6:	4698      	mov	r8, r3
 80140a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80140ac:	2a30      	cmp	r2, #48	; 0x30
 80140ae:	d0fa      	beq.n	80140a6 <_dtoa_r+0xa66>
 80140b0:	e6f6      	b.n	8013ea0 <_dtoa_r+0x860>
 80140b2:	9a01      	ldr	r2, [sp, #4]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d1a4      	bne.n	8014002 <_dtoa_r+0x9c2>
 80140b8:	f10b 0b01 	add.w	fp, fp, #1
 80140bc:	2331      	movs	r3, #49	; 0x31
 80140be:	e778      	b.n	8013fb2 <_dtoa_r+0x972>
 80140c0:	4b14      	ldr	r3, [pc, #80]	; (8014114 <_dtoa_r+0xad4>)
 80140c2:	f7ff bb27 	b.w	8013714 <_dtoa_r+0xd4>
 80140c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	f47f ab03 	bne.w	80136d4 <_dtoa_r+0x94>
 80140ce:	4b12      	ldr	r3, [pc, #72]	; (8014118 <_dtoa_r+0xad8>)
 80140d0:	f7ff bb20 	b.w	8013714 <_dtoa_r+0xd4>
 80140d4:	f1ba 0f00 	cmp.w	sl, #0
 80140d8:	dc03      	bgt.n	80140e2 <_dtoa_r+0xaa2>
 80140da:	9b06      	ldr	r3, [sp, #24]
 80140dc:	2b02      	cmp	r3, #2
 80140de:	f73f aec7 	bgt.w	8013e70 <_dtoa_r+0x830>
 80140e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80140e6:	4621      	mov	r1, r4
 80140e8:	4628      	mov	r0, r5
 80140ea:	f7ff fa1d 	bl	8013528 <quorem>
 80140ee:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80140f2:	f808 3b01 	strb.w	r3, [r8], #1
 80140f6:	9a01      	ldr	r2, [sp, #4]
 80140f8:	eba8 0202 	sub.w	r2, r8, r2
 80140fc:	4592      	cmp	sl, r2
 80140fe:	ddb7      	ble.n	8014070 <_dtoa_r+0xa30>
 8014100:	4629      	mov	r1, r5
 8014102:	2300      	movs	r3, #0
 8014104:	220a      	movs	r2, #10
 8014106:	4630      	mov	r0, r6
 8014108:	f000 f9bc 	bl	8014484 <__multadd>
 801410c:	4605      	mov	r5, r0
 801410e:	e7ea      	b.n	80140e6 <_dtoa_r+0xaa6>
 8014110:	08015863 	.word	0x08015863
 8014114:	080157c0 	.word	0x080157c0
 8014118:	080157e4 	.word	0x080157e4

0801411c <__sflush_r>:
 801411c:	898a      	ldrh	r2, [r1, #12]
 801411e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014122:	4605      	mov	r5, r0
 8014124:	0710      	lsls	r0, r2, #28
 8014126:	460c      	mov	r4, r1
 8014128:	d458      	bmi.n	80141dc <__sflush_r+0xc0>
 801412a:	684b      	ldr	r3, [r1, #4]
 801412c:	2b00      	cmp	r3, #0
 801412e:	dc05      	bgt.n	801413c <__sflush_r+0x20>
 8014130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014132:	2b00      	cmp	r3, #0
 8014134:	dc02      	bgt.n	801413c <__sflush_r+0x20>
 8014136:	2000      	movs	r0, #0
 8014138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801413c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801413e:	2e00      	cmp	r6, #0
 8014140:	d0f9      	beq.n	8014136 <__sflush_r+0x1a>
 8014142:	2300      	movs	r3, #0
 8014144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014148:	682f      	ldr	r7, [r5, #0]
 801414a:	602b      	str	r3, [r5, #0]
 801414c:	d032      	beq.n	80141b4 <__sflush_r+0x98>
 801414e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014150:	89a3      	ldrh	r3, [r4, #12]
 8014152:	075a      	lsls	r2, r3, #29
 8014154:	d505      	bpl.n	8014162 <__sflush_r+0x46>
 8014156:	6863      	ldr	r3, [r4, #4]
 8014158:	1ac0      	subs	r0, r0, r3
 801415a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801415c:	b10b      	cbz	r3, 8014162 <__sflush_r+0x46>
 801415e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014160:	1ac0      	subs	r0, r0, r3
 8014162:	2300      	movs	r3, #0
 8014164:	4602      	mov	r2, r0
 8014166:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014168:	6a21      	ldr	r1, [r4, #32]
 801416a:	4628      	mov	r0, r5
 801416c:	47b0      	blx	r6
 801416e:	1c43      	adds	r3, r0, #1
 8014170:	89a3      	ldrh	r3, [r4, #12]
 8014172:	d106      	bne.n	8014182 <__sflush_r+0x66>
 8014174:	6829      	ldr	r1, [r5, #0]
 8014176:	291d      	cmp	r1, #29
 8014178:	d82c      	bhi.n	80141d4 <__sflush_r+0xb8>
 801417a:	4a2a      	ldr	r2, [pc, #168]	; (8014224 <__sflush_r+0x108>)
 801417c:	40ca      	lsrs	r2, r1
 801417e:	07d6      	lsls	r6, r2, #31
 8014180:	d528      	bpl.n	80141d4 <__sflush_r+0xb8>
 8014182:	2200      	movs	r2, #0
 8014184:	6062      	str	r2, [r4, #4]
 8014186:	04d9      	lsls	r1, r3, #19
 8014188:	6922      	ldr	r2, [r4, #16]
 801418a:	6022      	str	r2, [r4, #0]
 801418c:	d504      	bpl.n	8014198 <__sflush_r+0x7c>
 801418e:	1c42      	adds	r2, r0, #1
 8014190:	d101      	bne.n	8014196 <__sflush_r+0x7a>
 8014192:	682b      	ldr	r3, [r5, #0]
 8014194:	b903      	cbnz	r3, 8014198 <__sflush_r+0x7c>
 8014196:	6560      	str	r0, [r4, #84]	; 0x54
 8014198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801419a:	602f      	str	r7, [r5, #0]
 801419c:	2900      	cmp	r1, #0
 801419e:	d0ca      	beq.n	8014136 <__sflush_r+0x1a>
 80141a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141a4:	4299      	cmp	r1, r3
 80141a6:	d002      	beq.n	80141ae <__sflush_r+0x92>
 80141a8:	4628      	mov	r0, r5
 80141aa:	f000 fca3 	bl	8014af4 <_free_r>
 80141ae:	2000      	movs	r0, #0
 80141b0:	6360      	str	r0, [r4, #52]	; 0x34
 80141b2:	e7c1      	b.n	8014138 <__sflush_r+0x1c>
 80141b4:	6a21      	ldr	r1, [r4, #32]
 80141b6:	2301      	movs	r3, #1
 80141b8:	4628      	mov	r0, r5
 80141ba:	47b0      	blx	r6
 80141bc:	1c41      	adds	r1, r0, #1
 80141be:	d1c7      	bne.n	8014150 <__sflush_r+0x34>
 80141c0:	682b      	ldr	r3, [r5, #0]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d0c4      	beq.n	8014150 <__sflush_r+0x34>
 80141c6:	2b1d      	cmp	r3, #29
 80141c8:	d001      	beq.n	80141ce <__sflush_r+0xb2>
 80141ca:	2b16      	cmp	r3, #22
 80141cc:	d101      	bne.n	80141d2 <__sflush_r+0xb6>
 80141ce:	602f      	str	r7, [r5, #0]
 80141d0:	e7b1      	b.n	8014136 <__sflush_r+0x1a>
 80141d2:	89a3      	ldrh	r3, [r4, #12]
 80141d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141d8:	81a3      	strh	r3, [r4, #12]
 80141da:	e7ad      	b.n	8014138 <__sflush_r+0x1c>
 80141dc:	690f      	ldr	r7, [r1, #16]
 80141de:	2f00      	cmp	r7, #0
 80141e0:	d0a9      	beq.n	8014136 <__sflush_r+0x1a>
 80141e2:	0793      	lsls	r3, r2, #30
 80141e4:	680e      	ldr	r6, [r1, #0]
 80141e6:	bf08      	it	eq
 80141e8:	694b      	ldreq	r3, [r1, #20]
 80141ea:	600f      	str	r7, [r1, #0]
 80141ec:	bf18      	it	ne
 80141ee:	2300      	movne	r3, #0
 80141f0:	eba6 0807 	sub.w	r8, r6, r7
 80141f4:	608b      	str	r3, [r1, #8]
 80141f6:	f1b8 0f00 	cmp.w	r8, #0
 80141fa:	dd9c      	ble.n	8014136 <__sflush_r+0x1a>
 80141fc:	6a21      	ldr	r1, [r4, #32]
 80141fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014200:	4643      	mov	r3, r8
 8014202:	463a      	mov	r2, r7
 8014204:	4628      	mov	r0, r5
 8014206:	47b0      	blx	r6
 8014208:	2800      	cmp	r0, #0
 801420a:	dc06      	bgt.n	801421a <__sflush_r+0xfe>
 801420c:	89a3      	ldrh	r3, [r4, #12]
 801420e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014212:	81a3      	strh	r3, [r4, #12]
 8014214:	f04f 30ff 	mov.w	r0, #4294967295
 8014218:	e78e      	b.n	8014138 <__sflush_r+0x1c>
 801421a:	4407      	add	r7, r0
 801421c:	eba8 0800 	sub.w	r8, r8, r0
 8014220:	e7e9      	b.n	80141f6 <__sflush_r+0xda>
 8014222:	bf00      	nop
 8014224:	20400001 	.word	0x20400001

08014228 <_fflush_r>:
 8014228:	b538      	push	{r3, r4, r5, lr}
 801422a:	690b      	ldr	r3, [r1, #16]
 801422c:	4605      	mov	r5, r0
 801422e:	460c      	mov	r4, r1
 8014230:	b913      	cbnz	r3, 8014238 <_fflush_r+0x10>
 8014232:	2500      	movs	r5, #0
 8014234:	4628      	mov	r0, r5
 8014236:	bd38      	pop	{r3, r4, r5, pc}
 8014238:	b118      	cbz	r0, 8014242 <_fflush_r+0x1a>
 801423a:	6983      	ldr	r3, [r0, #24]
 801423c:	b90b      	cbnz	r3, 8014242 <_fflush_r+0x1a>
 801423e:	f7fe f993 	bl	8012568 <__sinit>
 8014242:	4b14      	ldr	r3, [pc, #80]	; (8014294 <_fflush_r+0x6c>)
 8014244:	429c      	cmp	r4, r3
 8014246:	d11b      	bne.n	8014280 <_fflush_r+0x58>
 8014248:	686c      	ldr	r4, [r5, #4]
 801424a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d0ef      	beq.n	8014232 <_fflush_r+0xa>
 8014252:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014254:	07d0      	lsls	r0, r2, #31
 8014256:	d404      	bmi.n	8014262 <_fflush_r+0x3a>
 8014258:	0599      	lsls	r1, r3, #22
 801425a:	d402      	bmi.n	8014262 <_fflush_r+0x3a>
 801425c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801425e:	f7fe fa46 	bl	80126ee <__retarget_lock_acquire_recursive>
 8014262:	4628      	mov	r0, r5
 8014264:	4621      	mov	r1, r4
 8014266:	f7ff ff59 	bl	801411c <__sflush_r>
 801426a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801426c:	07da      	lsls	r2, r3, #31
 801426e:	4605      	mov	r5, r0
 8014270:	d4e0      	bmi.n	8014234 <_fflush_r+0xc>
 8014272:	89a3      	ldrh	r3, [r4, #12]
 8014274:	059b      	lsls	r3, r3, #22
 8014276:	d4dd      	bmi.n	8014234 <_fflush_r+0xc>
 8014278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801427a:	f7fe fa39 	bl	80126f0 <__retarget_lock_release_recursive>
 801427e:	e7d9      	b.n	8014234 <_fflush_r+0xc>
 8014280:	4b05      	ldr	r3, [pc, #20]	; (8014298 <_fflush_r+0x70>)
 8014282:	429c      	cmp	r4, r3
 8014284:	d101      	bne.n	801428a <_fflush_r+0x62>
 8014286:	68ac      	ldr	r4, [r5, #8]
 8014288:	e7df      	b.n	801424a <_fflush_r+0x22>
 801428a:	4b04      	ldr	r3, [pc, #16]	; (801429c <_fflush_r+0x74>)
 801428c:	429c      	cmp	r4, r3
 801428e:	bf08      	it	eq
 8014290:	68ec      	ldreq	r4, [r5, #12]
 8014292:	e7da      	b.n	801424a <_fflush_r+0x22>
 8014294:	0801576c 	.word	0x0801576c
 8014298:	0801578c 	.word	0x0801578c
 801429c:	0801574c 	.word	0x0801574c

080142a0 <_localeconv_r>:
 80142a0:	4800      	ldr	r0, [pc, #0]	; (80142a4 <_localeconv_r+0x4>)
 80142a2:	4770      	bx	lr
 80142a4:	20000338 	.word	0x20000338

080142a8 <_lseek_r>:
 80142a8:	b538      	push	{r3, r4, r5, lr}
 80142aa:	4d07      	ldr	r5, [pc, #28]	; (80142c8 <_lseek_r+0x20>)
 80142ac:	4604      	mov	r4, r0
 80142ae:	4608      	mov	r0, r1
 80142b0:	4611      	mov	r1, r2
 80142b2:	2200      	movs	r2, #0
 80142b4:	602a      	str	r2, [r5, #0]
 80142b6:	461a      	mov	r2, r3
 80142b8:	f7f1 ff40 	bl	800613c <_lseek>
 80142bc:	1c43      	adds	r3, r0, #1
 80142be:	d102      	bne.n	80142c6 <_lseek_r+0x1e>
 80142c0:	682b      	ldr	r3, [r5, #0]
 80142c2:	b103      	cbz	r3, 80142c6 <_lseek_r+0x1e>
 80142c4:	6023      	str	r3, [r4, #0]
 80142c6:	bd38      	pop	{r3, r4, r5, pc}
 80142c8:	20005cbc 	.word	0x20005cbc

080142cc <__swhatbuf_r>:
 80142cc:	b570      	push	{r4, r5, r6, lr}
 80142ce:	460e      	mov	r6, r1
 80142d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142d4:	2900      	cmp	r1, #0
 80142d6:	b096      	sub	sp, #88	; 0x58
 80142d8:	4614      	mov	r4, r2
 80142da:	461d      	mov	r5, r3
 80142dc:	da08      	bge.n	80142f0 <__swhatbuf_r+0x24>
 80142de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80142e2:	2200      	movs	r2, #0
 80142e4:	602a      	str	r2, [r5, #0]
 80142e6:	061a      	lsls	r2, r3, #24
 80142e8:	d410      	bmi.n	801430c <__swhatbuf_r+0x40>
 80142ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80142ee:	e00e      	b.n	801430e <__swhatbuf_r+0x42>
 80142f0:	466a      	mov	r2, sp
 80142f2:	f000 fde7 	bl	8014ec4 <_fstat_r>
 80142f6:	2800      	cmp	r0, #0
 80142f8:	dbf1      	blt.n	80142de <__swhatbuf_r+0x12>
 80142fa:	9a01      	ldr	r2, [sp, #4]
 80142fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014300:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014304:	425a      	negs	r2, r3
 8014306:	415a      	adcs	r2, r3
 8014308:	602a      	str	r2, [r5, #0]
 801430a:	e7ee      	b.n	80142ea <__swhatbuf_r+0x1e>
 801430c:	2340      	movs	r3, #64	; 0x40
 801430e:	2000      	movs	r0, #0
 8014310:	6023      	str	r3, [r4, #0]
 8014312:	b016      	add	sp, #88	; 0x58
 8014314:	bd70      	pop	{r4, r5, r6, pc}
	...

08014318 <__smakebuf_r>:
 8014318:	898b      	ldrh	r3, [r1, #12]
 801431a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801431c:	079d      	lsls	r5, r3, #30
 801431e:	4606      	mov	r6, r0
 8014320:	460c      	mov	r4, r1
 8014322:	d507      	bpl.n	8014334 <__smakebuf_r+0x1c>
 8014324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014328:	6023      	str	r3, [r4, #0]
 801432a:	6123      	str	r3, [r4, #16]
 801432c:	2301      	movs	r3, #1
 801432e:	6163      	str	r3, [r4, #20]
 8014330:	b002      	add	sp, #8
 8014332:	bd70      	pop	{r4, r5, r6, pc}
 8014334:	ab01      	add	r3, sp, #4
 8014336:	466a      	mov	r2, sp
 8014338:	f7ff ffc8 	bl	80142cc <__swhatbuf_r>
 801433c:	9900      	ldr	r1, [sp, #0]
 801433e:	4605      	mov	r5, r0
 8014340:	4630      	mov	r0, r6
 8014342:	f7fe fa0d 	bl	8012760 <_malloc_r>
 8014346:	b948      	cbnz	r0, 801435c <__smakebuf_r+0x44>
 8014348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801434c:	059a      	lsls	r2, r3, #22
 801434e:	d4ef      	bmi.n	8014330 <__smakebuf_r+0x18>
 8014350:	f023 0303 	bic.w	r3, r3, #3
 8014354:	f043 0302 	orr.w	r3, r3, #2
 8014358:	81a3      	strh	r3, [r4, #12]
 801435a:	e7e3      	b.n	8014324 <__smakebuf_r+0xc>
 801435c:	4b0d      	ldr	r3, [pc, #52]	; (8014394 <__smakebuf_r+0x7c>)
 801435e:	62b3      	str	r3, [r6, #40]	; 0x28
 8014360:	89a3      	ldrh	r3, [r4, #12]
 8014362:	6020      	str	r0, [r4, #0]
 8014364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014368:	81a3      	strh	r3, [r4, #12]
 801436a:	9b00      	ldr	r3, [sp, #0]
 801436c:	6163      	str	r3, [r4, #20]
 801436e:	9b01      	ldr	r3, [sp, #4]
 8014370:	6120      	str	r0, [r4, #16]
 8014372:	b15b      	cbz	r3, 801438c <__smakebuf_r+0x74>
 8014374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014378:	4630      	mov	r0, r6
 801437a:	f000 fdb5 	bl	8014ee8 <_isatty_r>
 801437e:	b128      	cbz	r0, 801438c <__smakebuf_r+0x74>
 8014380:	89a3      	ldrh	r3, [r4, #12]
 8014382:	f023 0303 	bic.w	r3, r3, #3
 8014386:	f043 0301 	orr.w	r3, r3, #1
 801438a:	81a3      	strh	r3, [r4, #12]
 801438c:	89a0      	ldrh	r0, [r4, #12]
 801438e:	4305      	orrs	r5, r0
 8014390:	81a5      	strh	r5, [r4, #12]
 8014392:	e7cd      	b.n	8014330 <__smakebuf_r+0x18>
 8014394:	08012501 	.word	0x08012501

08014398 <malloc>:
 8014398:	4b02      	ldr	r3, [pc, #8]	; (80143a4 <malloc+0xc>)
 801439a:	4601      	mov	r1, r0
 801439c:	6818      	ldr	r0, [r3, #0]
 801439e:	f7fe b9df 	b.w	8012760 <_malloc_r>
 80143a2:	bf00      	nop
 80143a4:	200001e4 	.word	0x200001e4

080143a8 <__malloc_lock>:
 80143a8:	4801      	ldr	r0, [pc, #4]	; (80143b0 <__malloc_lock+0x8>)
 80143aa:	f7fe b9a0 	b.w	80126ee <__retarget_lock_acquire_recursive>
 80143ae:	bf00      	nop
 80143b0:	20005cb0 	.word	0x20005cb0

080143b4 <__malloc_unlock>:
 80143b4:	4801      	ldr	r0, [pc, #4]	; (80143bc <__malloc_unlock+0x8>)
 80143b6:	f7fe b99b 	b.w	80126f0 <__retarget_lock_release_recursive>
 80143ba:	bf00      	nop
 80143bc:	20005cb0 	.word	0x20005cb0

080143c0 <_Balloc>:
 80143c0:	b570      	push	{r4, r5, r6, lr}
 80143c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80143c4:	4604      	mov	r4, r0
 80143c6:	460d      	mov	r5, r1
 80143c8:	b976      	cbnz	r6, 80143e8 <_Balloc+0x28>
 80143ca:	2010      	movs	r0, #16
 80143cc:	f7ff ffe4 	bl	8014398 <malloc>
 80143d0:	4602      	mov	r2, r0
 80143d2:	6260      	str	r0, [r4, #36]	; 0x24
 80143d4:	b920      	cbnz	r0, 80143e0 <_Balloc+0x20>
 80143d6:	4b18      	ldr	r3, [pc, #96]	; (8014438 <_Balloc+0x78>)
 80143d8:	4818      	ldr	r0, [pc, #96]	; (801443c <_Balloc+0x7c>)
 80143da:	2166      	movs	r1, #102	; 0x66
 80143dc:	f000 fd42 	bl	8014e64 <__assert_func>
 80143e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80143e4:	6006      	str	r6, [r0, #0]
 80143e6:	60c6      	str	r6, [r0, #12]
 80143e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80143ea:	68f3      	ldr	r3, [r6, #12]
 80143ec:	b183      	cbz	r3, 8014410 <_Balloc+0x50>
 80143ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143f0:	68db      	ldr	r3, [r3, #12]
 80143f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80143f6:	b9b8      	cbnz	r0, 8014428 <_Balloc+0x68>
 80143f8:	2101      	movs	r1, #1
 80143fa:	fa01 f605 	lsl.w	r6, r1, r5
 80143fe:	1d72      	adds	r2, r6, #5
 8014400:	0092      	lsls	r2, r2, #2
 8014402:	4620      	mov	r0, r4
 8014404:	f000 fb60 	bl	8014ac8 <_calloc_r>
 8014408:	b160      	cbz	r0, 8014424 <_Balloc+0x64>
 801440a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801440e:	e00e      	b.n	801442e <_Balloc+0x6e>
 8014410:	2221      	movs	r2, #33	; 0x21
 8014412:	2104      	movs	r1, #4
 8014414:	4620      	mov	r0, r4
 8014416:	f000 fb57 	bl	8014ac8 <_calloc_r>
 801441a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801441c:	60f0      	str	r0, [r6, #12]
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d1e4      	bne.n	80143ee <_Balloc+0x2e>
 8014424:	2000      	movs	r0, #0
 8014426:	bd70      	pop	{r4, r5, r6, pc}
 8014428:	6802      	ldr	r2, [r0, #0]
 801442a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801442e:	2300      	movs	r3, #0
 8014430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014434:	e7f7      	b.n	8014426 <_Balloc+0x66>
 8014436:	bf00      	nop
 8014438:	080157f1 	.word	0x080157f1
 801443c:	08015874 	.word	0x08015874

08014440 <_Bfree>:
 8014440:	b570      	push	{r4, r5, r6, lr}
 8014442:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014444:	4605      	mov	r5, r0
 8014446:	460c      	mov	r4, r1
 8014448:	b976      	cbnz	r6, 8014468 <_Bfree+0x28>
 801444a:	2010      	movs	r0, #16
 801444c:	f7ff ffa4 	bl	8014398 <malloc>
 8014450:	4602      	mov	r2, r0
 8014452:	6268      	str	r0, [r5, #36]	; 0x24
 8014454:	b920      	cbnz	r0, 8014460 <_Bfree+0x20>
 8014456:	4b09      	ldr	r3, [pc, #36]	; (801447c <_Bfree+0x3c>)
 8014458:	4809      	ldr	r0, [pc, #36]	; (8014480 <_Bfree+0x40>)
 801445a:	218a      	movs	r1, #138	; 0x8a
 801445c:	f000 fd02 	bl	8014e64 <__assert_func>
 8014460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014464:	6006      	str	r6, [r0, #0]
 8014466:	60c6      	str	r6, [r0, #12]
 8014468:	b13c      	cbz	r4, 801447a <_Bfree+0x3a>
 801446a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801446c:	6862      	ldr	r2, [r4, #4]
 801446e:	68db      	ldr	r3, [r3, #12]
 8014470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014474:	6021      	str	r1, [r4, #0]
 8014476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801447a:	bd70      	pop	{r4, r5, r6, pc}
 801447c:	080157f1 	.word	0x080157f1
 8014480:	08015874 	.word	0x08015874

08014484 <__multadd>:
 8014484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014488:	690d      	ldr	r5, [r1, #16]
 801448a:	4607      	mov	r7, r0
 801448c:	460c      	mov	r4, r1
 801448e:	461e      	mov	r6, r3
 8014490:	f101 0c14 	add.w	ip, r1, #20
 8014494:	2000      	movs	r0, #0
 8014496:	f8dc 3000 	ldr.w	r3, [ip]
 801449a:	b299      	uxth	r1, r3
 801449c:	fb02 6101 	mla	r1, r2, r1, r6
 80144a0:	0c1e      	lsrs	r6, r3, #16
 80144a2:	0c0b      	lsrs	r3, r1, #16
 80144a4:	fb02 3306 	mla	r3, r2, r6, r3
 80144a8:	b289      	uxth	r1, r1
 80144aa:	3001      	adds	r0, #1
 80144ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80144b0:	4285      	cmp	r5, r0
 80144b2:	f84c 1b04 	str.w	r1, [ip], #4
 80144b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80144ba:	dcec      	bgt.n	8014496 <__multadd+0x12>
 80144bc:	b30e      	cbz	r6, 8014502 <__multadd+0x7e>
 80144be:	68a3      	ldr	r3, [r4, #8]
 80144c0:	42ab      	cmp	r3, r5
 80144c2:	dc19      	bgt.n	80144f8 <__multadd+0x74>
 80144c4:	6861      	ldr	r1, [r4, #4]
 80144c6:	4638      	mov	r0, r7
 80144c8:	3101      	adds	r1, #1
 80144ca:	f7ff ff79 	bl	80143c0 <_Balloc>
 80144ce:	4680      	mov	r8, r0
 80144d0:	b928      	cbnz	r0, 80144de <__multadd+0x5a>
 80144d2:	4602      	mov	r2, r0
 80144d4:	4b0c      	ldr	r3, [pc, #48]	; (8014508 <__multadd+0x84>)
 80144d6:	480d      	ldr	r0, [pc, #52]	; (801450c <__multadd+0x88>)
 80144d8:	21b5      	movs	r1, #181	; 0xb5
 80144da:	f000 fcc3 	bl	8014e64 <__assert_func>
 80144de:	6922      	ldr	r2, [r4, #16]
 80144e0:	3202      	adds	r2, #2
 80144e2:	f104 010c 	add.w	r1, r4, #12
 80144e6:	0092      	lsls	r2, r2, #2
 80144e8:	300c      	adds	r0, #12
 80144ea:	f7fe f902 	bl	80126f2 <memcpy>
 80144ee:	4621      	mov	r1, r4
 80144f0:	4638      	mov	r0, r7
 80144f2:	f7ff ffa5 	bl	8014440 <_Bfree>
 80144f6:	4644      	mov	r4, r8
 80144f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80144fc:	3501      	adds	r5, #1
 80144fe:	615e      	str	r6, [r3, #20]
 8014500:	6125      	str	r5, [r4, #16]
 8014502:	4620      	mov	r0, r4
 8014504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014508:	08015863 	.word	0x08015863
 801450c:	08015874 	.word	0x08015874

08014510 <__hi0bits>:
 8014510:	0c03      	lsrs	r3, r0, #16
 8014512:	041b      	lsls	r3, r3, #16
 8014514:	b9d3      	cbnz	r3, 801454c <__hi0bits+0x3c>
 8014516:	0400      	lsls	r0, r0, #16
 8014518:	2310      	movs	r3, #16
 801451a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801451e:	bf04      	itt	eq
 8014520:	0200      	lsleq	r0, r0, #8
 8014522:	3308      	addeq	r3, #8
 8014524:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014528:	bf04      	itt	eq
 801452a:	0100      	lsleq	r0, r0, #4
 801452c:	3304      	addeq	r3, #4
 801452e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014532:	bf04      	itt	eq
 8014534:	0080      	lsleq	r0, r0, #2
 8014536:	3302      	addeq	r3, #2
 8014538:	2800      	cmp	r0, #0
 801453a:	db05      	blt.n	8014548 <__hi0bits+0x38>
 801453c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014540:	f103 0301 	add.w	r3, r3, #1
 8014544:	bf08      	it	eq
 8014546:	2320      	moveq	r3, #32
 8014548:	4618      	mov	r0, r3
 801454a:	4770      	bx	lr
 801454c:	2300      	movs	r3, #0
 801454e:	e7e4      	b.n	801451a <__hi0bits+0xa>

08014550 <__lo0bits>:
 8014550:	6803      	ldr	r3, [r0, #0]
 8014552:	f013 0207 	ands.w	r2, r3, #7
 8014556:	4601      	mov	r1, r0
 8014558:	d00b      	beq.n	8014572 <__lo0bits+0x22>
 801455a:	07da      	lsls	r2, r3, #31
 801455c:	d423      	bmi.n	80145a6 <__lo0bits+0x56>
 801455e:	0798      	lsls	r0, r3, #30
 8014560:	bf49      	itett	mi
 8014562:	085b      	lsrmi	r3, r3, #1
 8014564:	089b      	lsrpl	r3, r3, #2
 8014566:	2001      	movmi	r0, #1
 8014568:	600b      	strmi	r3, [r1, #0]
 801456a:	bf5c      	itt	pl
 801456c:	600b      	strpl	r3, [r1, #0]
 801456e:	2002      	movpl	r0, #2
 8014570:	4770      	bx	lr
 8014572:	b298      	uxth	r0, r3
 8014574:	b9a8      	cbnz	r0, 80145a2 <__lo0bits+0x52>
 8014576:	0c1b      	lsrs	r3, r3, #16
 8014578:	2010      	movs	r0, #16
 801457a:	b2da      	uxtb	r2, r3
 801457c:	b90a      	cbnz	r2, 8014582 <__lo0bits+0x32>
 801457e:	3008      	adds	r0, #8
 8014580:	0a1b      	lsrs	r3, r3, #8
 8014582:	071a      	lsls	r2, r3, #28
 8014584:	bf04      	itt	eq
 8014586:	091b      	lsreq	r3, r3, #4
 8014588:	3004      	addeq	r0, #4
 801458a:	079a      	lsls	r2, r3, #30
 801458c:	bf04      	itt	eq
 801458e:	089b      	lsreq	r3, r3, #2
 8014590:	3002      	addeq	r0, #2
 8014592:	07da      	lsls	r2, r3, #31
 8014594:	d403      	bmi.n	801459e <__lo0bits+0x4e>
 8014596:	085b      	lsrs	r3, r3, #1
 8014598:	f100 0001 	add.w	r0, r0, #1
 801459c:	d005      	beq.n	80145aa <__lo0bits+0x5a>
 801459e:	600b      	str	r3, [r1, #0]
 80145a0:	4770      	bx	lr
 80145a2:	4610      	mov	r0, r2
 80145a4:	e7e9      	b.n	801457a <__lo0bits+0x2a>
 80145a6:	2000      	movs	r0, #0
 80145a8:	4770      	bx	lr
 80145aa:	2020      	movs	r0, #32
 80145ac:	4770      	bx	lr
	...

080145b0 <__i2b>:
 80145b0:	b510      	push	{r4, lr}
 80145b2:	460c      	mov	r4, r1
 80145b4:	2101      	movs	r1, #1
 80145b6:	f7ff ff03 	bl	80143c0 <_Balloc>
 80145ba:	4602      	mov	r2, r0
 80145bc:	b928      	cbnz	r0, 80145ca <__i2b+0x1a>
 80145be:	4b05      	ldr	r3, [pc, #20]	; (80145d4 <__i2b+0x24>)
 80145c0:	4805      	ldr	r0, [pc, #20]	; (80145d8 <__i2b+0x28>)
 80145c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80145c6:	f000 fc4d 	bl	8014e64 <__assert_func>
 80145ca:	2301      	movs	r3, #1
 80145cc:	6144      	str	r4, [r0, #20]
 80145ce:	6103      	str	r3, [r0, #16]
 80145d0:	bd10      	pop	{r4, pc}
 80145d2:	bf00      	nop
 80145d4:	08015863 	.word	0x08015863
 80145d8:	08015874 	.word	0x08015874

080145dc <__multiply>:
 80145dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e0:	4691      	mov	r9, r2
 80145e2:	690a      	ldr	r2, [r1, #16]
 80145e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80145e8:	429a      	cmp	r2, r3
 80145ea:	bfb8      	it	lt
 80145ec:	460b      	movlt	r3, r1
 80145ee:	460c      	mov	r4, r1
 80145f0:	bfbc      	itt	lt
 80145f2:	464c      	movlt	r4, r9
 80145f4:	4699      	movlt	r9, r3
 80145f6:	6927      	ldr	r7, [r4, #16]
 80145f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80145fc:	68a3      	ldr	r3, [r4, #8]
 80145fe:	6861      	ldr	r1, [r4, #4]
 8014600:	eb07 060a 	add.w	r6, r7, sl
 8014604:	42b3      	cmp	r3, r6
 8014606:	b085      	sub	sp, #20
 8014608:	bfb8      	it	lt
 801460a:	3101      	addlt	r1, #1
 801460c:	f7ff fed8 	bl	80143c0 <_Balloc>
 8014610:	b930      	cbnz	r0, 8014620 <__multiply+0x44>
 8014612:	4602      	mov	r2, r0
 8014614:	4b44      	ldr	r3, [pc, #272]	; (8014728 <__multiply+0x14c>)
 8014616:	4845      	ldr	r0, [pc, #276]	; (801472c <__multiply+0x150>)
 8014618:	f240 115d 	movw	r1, #349	; 0x15d
 801461c:	f000 fc22 	bl	8014e64 <__assert_func>
 8014620:	f100 0514 	add.w	r5, r0, #20
 8014624:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014628:	462b      	mov	r3, r5
 801462a:	2200      	movs	r2, #0
 801462c:	4543      	cmp	r3, r8
 801462e:	d321      	bcc.n	8014674 <__multiply+0x98>
 8014630:	f104 0314 	add.w	r3, r4, #20
 8014634:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014638:	f109 0314 	add.w	r3, r9, #20
 801463c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014640:	9202      	str	r2, [sp, #8]
 8014642:	1b3a      	subs	r2, r7, r4
 8014644:	3a15      	subs	r2, #21
 8014646:	f022 0203 	bic.w	r2, r2, #3
 801464a:	3204      	adds	r2, #4
 801464c:	f104 0115 	add.w	r1, r4, #21
 8014650:	428f      	cmp	r7, r1
 8014652:	bf38      	it	cc
 8014654:	2204      	movcc	r2, #4
 8014656:	9201      	str	r2, [sp, #4]
 8014658:	9a02      	ldr	r2, [sp, #8]
 801465a:	9303      	str	r3, [sp, #12]
 801465c:	429a      	cmp	r2, r3
 801465e:	d80c      	bhi.n	801467a <__multiply+0x9e>
 8014660:	2e00      	cmp	r6, #0
 8014662:	dd03      	ble.n	801466c <__multiply+0x90>
 8014664:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014668:	2b00      	cmp	r3, #0
 801466a:	d05a      	beq.n	8014722 <__multiply+0x146>
 801466c:	6106      	str	r6, [r0, #16]
 801466e:	b005      	add	sp, #20
 8014670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014674:	f843 2b04 	str.w	r2, [r3], #4
 8014678:	e7d8      	b.n	801462c <__multiply+0x50>
 801467a:	f8b3 a000 	ldrh.w	sl, [r3]
 801467e:	f1ba 0f00 	cmp.w	sl, #0
 8014682:	d024      	beq.n	80146ce <__multiply+0xf2>
 8014684:	f104 0e14 	add.w	lr, r4, #20
 8014688:	46a9      	mov	r9, r5
 801468a:	f04f 0c00 	mov.w	ip, #0
 801468e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014692:	f8d9 1000 	ldr.w	r1, [r9]
 8014696:	fa1f fb82 	uxth.w	fp, r2
 801469a:	b289      	uxth	r1, r1
 801469c:	fb0a 110b 	mla	r1, sl, fp, r1
 80146a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80146a4:	f8d9 2000 	ldr.w	r2, [r9]
 80146a8:	4461      	add	r1, ip
 80146aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80146ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80146b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80146b6:	b289      	uxth	r1, r1
 80146b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80146bc:	4577      	cmp	r7, lr
 80146be:	f849 1b04 	str.w	r1, [r9], #4
 80146c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80146c6:	d8e2      	bhi.n	801468e <__multiply+0xb2>
 80146c8:	9a01      	ldr	r2, [sp, #4]
 80146ca:	f845 c002 	str.w	ip, [r5, r2]
 80146ce:	9a03      	ldr	r2, [sp, #12]
 80146d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80146d4:	3304      	adds	r3, #4
 80146d6:	f1b9 0f00 	cmp.w	r9, #0
 80146da:	d020      	beq.n	801471e <__multiply+0x142>
 80146dc:	6829      	ldr	r1, [r5, #0]
 80146de:	f104 0c14 	add.w	ip, r4, #20
 80146e2:	46ae      	mov	lr, r5
 80146e4:	f04f 0a00 	mov.w	sl, #0
 80146e8:	f8bc b000 	ldrh.w	fp, [ip]
 80146ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80146f0:	fb09 220b 	mla	r2, r9, fp, r2
 80146f4:	4492      	add	sl, r2
 80146f6:	b289      	uxth	r1, r1
 80146f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80146fc:	f84e 1b04 	str.w	r1, [lr], #4
 8014700:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014704:	f8be 1000 	ldrh.w	r1, [lr]
 8014708:	0c12      	lsrs	r2, r2, #16
 801470a:	fb09 1102 	mla	r1, r9, r2, r1
 801470e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014712:	4567      	cmp	r7, ip
 8014714:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014718:	d8e6      	bhi.n	80146e8 <__multiply+0x10c>
 801471a:	9a01      	ldr	r2, [sp, #4]
 801471c:	50a9      	str	r1, [r5, r2]
 801471e:	3504      	adds	r5, #4
 8014720:	e79a      	b.n	8014658 <__multiply+0x7c>
 8014722:	3e01      	subs	r6, #1
 8014724:	e79c      	b.n	8014660 <__multiply+0x84>
 8014726:	bf00      	nop
 8014728:	08015863 	.word	0x08015863
 801472c:	08015874 	.word	0x08015874

08014730 <__pow5mult>:
 8014730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014734:	4615      	mov	r5, r2
 8014736:	f012 0203 	ands.w	r2, r2, #3
 801473a:	4606      	mov	r6, r0
 801473c:	460f      	mov	r7, r1
 801473e:	d007      	beq.n	8014750 <__pow5mult+0x20>
 8014740:	4c25      	ldr	r4, [pc, #148]	; (80147d8 <__pow5mult+0xa8>)
 8014742:	3a01      	subs	r2, #1
 8014744:	2300      	movs	r3, #0
 8014746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801474a:	f7ff fe9b 	bl	8014484 <__multadd>
 801474e:	4607      	mov	r7, r0
 8014750:	10ad      	asrs	r5, r5, #2
 8014752:	d03d      	beq.n	80147d0 <__pow5mult+0xa0>
 8014754:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014756:	b97c      	cbnz	r4, 8014778 <__pow5mult+0x48>
 8014758:	2010      	movs	r0, #16
 801475a:	f7ff fe1d 	bl	8014398 <malloc>
 801475e:	4602      	mov	r2, r0
 8014760:	6270      	str	r0, [r6, #36]	; 0x24
 8014762:	b928      	cbnz	r0, 8014770 <__pow5mult+0x40>
 8014764:	4b1d      	ldr	r3, [pc, #116]	; (80147dc <__pow5mult+0xac>)
 8014766:	481e      	ldr	r0, [pc, #120]	; (80147e0 <__pow5mult+0xb0>)
 8014768:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801476c:	f000 fb7a 	bl	8014e64 <__assert_func>
 8014770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014774:	6004      	str	r4, [r0, #0]
 8014776:	60c4      	str	r4, [r0, #12]
 8014778:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801477c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014780:	b94c      	cbnz	r4, 8014796 <__pow5mult+0x66>
 8014782:	f240 2171 	movw	r1, #625	; 0x271
 8014786:	4630      	mov	r0, r6
 8014788:	f7ff ff12 	bl	80145b0 <__i2b>
 801478c:	2300      	movs	r3, #0
 801478e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014792:	4604      	mov	r4, r0
 8014794:	6003      	str	r3, [r0, #0]
 8014796:	f04f 0900 	mov.w	r9, #0
 801479a:	07eb      	lsls	r3, r5, #31
 801479c:	d50a      	bpl.n	80147b4 <__pow5mult+0x84>
 801479e:	4639      	mov	r1, r7
 80147a0:	4622      	mov	r2, r4
 80147a2:	4630      	mov	r0, r6
 80147a4:	f7ff ff1a 	bl	80145dc <__multiply>
 80147a8:	4639      	mov	r1, r7
 80147aa:	4680      	mov	r8, r0
 80147ac:	4630      	mov	r0, r6
 80147ae:	f7ff fe47 	bl	8014440 <_Bfree>
 80147b2:	4647      	mov	r7, r8
 80147b4:	106d      	asrs	r5, r5, #1
 80147b6:	d00b      	beq.n	80147d0 <__pow5mult+0xa0>
 80147b8:	6820      	ldr	r0, [r4, #0]
 80147ba:	b938      	cbnz	r0, 80147cc <__pow5mult+0x9c>
 80147bc:	4622      	mov	r2, r4
 80147be:	4621      	mov	r1, r4
 80147c0:	4630      	mov	r0, r6
 80147c2:	f7ff ff0b 	bl	80145dc <__multiply>
 80147c6:	6020      	str	r0, [r4, #0]
 80147c8:	f8c0 9000 	str.w	r9, [r0]
 80147cc:	4604      	mov	r4, r0
 80147ce:	e7e4      	b.n	801479a <__pow5mult+0x6a>
 80147d0:	4638      	mov	r0, r7
 80147d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147d6:	bf00      	nop
 80147d8:	080159c0 	.word	0x080159c0
 80147dc:	080157f1 	.word	0x080157f1
 80147e0:	08015874 	.word	0x08015874

080147e4 <__lshift>:
 80147e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147e8:	460c      	mov	r4, r1
 80147ea:	6849      	ldr	r1, [r1, #4]
 80147ec:	6923      	ldr	r3, [r4, #16]
 80147ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80147f2:	68a3      	ldr	r3, [r4, #8]
 80147f4:	4607      	mov	r7, r0
 80147f6:	4691      	mov	r9, r2
 80147f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80147fc:	f108 0601 	add.w	r6, r8, #1
 8014800:	42b3      	cmp	r3, r6
 8014802:	db0b      	blt.n	801481c <__lshift+0x38>
 8014804:	4638      	mov	r0, r7
 8014806:	f7ff fddb 	bl	80143c0 <_Balloc>
 801480a:	4605      	mov	r5, r0
 801480c:	b948      	cbnz	r0, 8014822 <__lshift+0x3e>
 801480e:	4602      	mov	r2, r0
 8014810:	4b2a      	ldr	r3, [pc, #168]	; (80148bc <__lshift+0xd8>)
 8014812:	482b      	ldr	r0, [pc, #172]	; (80148c0 <__lshift+0xdc>)
 8014814:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014818:	f000 fb24 	bl	8014e64 <__assert_func>
 801481c:	3101      	adds	r1, #1
 801481e:	005b      	lsls	r3, r3, #1
 8014820:	e7ee      	b.n	8014800 <__lshift+0x1c>
 8014822:	2300      	movs	r3, #0
 8014824:	f100 0114 	add.w	r1, r0, #20
 8014828:	f100 0210 	add.w	r2, r0, #16
 801482c:	4618      	mov	r0, r3
 801482e:	4553      	cmp	r3, sl
 8014830:	db37      	blt.n	80148a2 <__lshift+0xbe>
 8014832:	6920      	ldr	r0, [r4, #16]
 8014834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014838:	f104 0314 	add.w	r3, r4, #20
 801483c:	f019 091f 	ands.w	r9, r9, #31
 8014840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014844:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014848:	d02f      	beq.n	80148aa <__lshift+0xc6>
 801484a:	f1c9 0e20 	rsb	lr, r9, #32
 801484e:	468a      	mov	sl, r1
 8014850:	f04f 0c00 	mov.w	ip, #0
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	fa02 f209 	lsl.w	r2, r2, r9
 801485a:	ea42 020c 	orr.w	r2, r2, ip
 801485e:	f84a 2b04 	str.w	r2, [sl], #4
 8014862:	f853 2b04 	ldr.w	r2, [r3], #4
 8014866:	4298      	cmp	r0, r3
 8014868:	fa22 fc0e 	lsr.w	ip, r2, lr
 801486c:	d8f2      	bhi.n	8014854 <__lshift+0x70>
 801486e:	1b03      	subs	r3, r0, r4
 8014870:	3b15      	subs	r3, #21
 8014872:	f023 0303 	bic.w	r3, r3, #3
 8014876:	3304      	adds	r3, #4
 8014878:	f104 0215 	add.w	r2, r4, #21
 801487c:	4290      	cmp	r0, r2
 801487e:	bf38      	it	cc
 8014880:	2304      	movcc	r3, #4
 8014882:	f841 c003 	str.w	ip, [r1, r3]
 8014886:	f1bc 0f00 	cmp.w	ip, #0
 801488a:	d001      	beq.n	8014890 <__lshift+0xac>
 801488c:	f108 0602 	add.w	r6, r8, #2
 8014890:	3e01      	subs	r6, #1
 8014892:	4638      	mov	r0, r7
 8014894:	612e      	str	r6, [r5, #16]
 8014896:	4621      	mov	r1, r4
 8014898:	f7ff fdd2 	bl	8014440 <_Bfree>
 801489c:	4628      	mov	r0, r5
 801489e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80148a6:	3301      	adds	r3, #1
 80148a8:	e7c1      	b.n	801482e <__lshift+0x4a>
 80148aa:	3904      	subs	r1, #4
 80148ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80148b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80148b4:	4298      	cmp	r0, r3
 80148b6:	d8f9      	bhi.n	80148ac <__lshift+0xc8>
 80148b8:	e7ea      	b.n	8014890 <__lshift+0xac>
 80148ba:	bf00      	nop
 80148bc:	08015863 	.word	0x08015863
 80148c0:	08015874 	.word	0x08015874

080148c4 <__mcmp>:
 80148c4:	b530      	push	{r4, r5, lr}
 80148c6:	6902      	ldr	r2, [r0, #16]
 80148c8:	690c      	ldr	r4, [r1, #16]
 80148ca:	1b12      	subs	r2, r2, r4
 80148cc:	d10e      	bne.n	80148ec <__mcmp+0x28>
 80148ce:	f100 0314 	add.w	r3, r0, #20
 80148d2:	3114      	adds	r1, #20
 80148d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80148d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80148dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80148e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80148e4:	42a5      	cmp	r5, r4
 80148e6:	d003      	beq.n	80148f0 <__mcmp+0x2c>
 80148e8:	d305      	bcc.n	80148f6 <__mcmp+0x32>
 80148ea:	2201      	movs	r2, #1
 80148ec:	4610      	mov	r0, r2
 80148ee:	bd30      	pop	{r4, r5, pc}
 80148f0:	4283      	cmp	r3, r0
 80148f2:	d3f3      	bcc.n	80148dc <__mcmp+0x18>
 80148f4:	e7fa      	b.n	80148ec <__mcmp+0x28>
 80148f6:	f04f 32ff 	mov.w	r2, #4294967295
 80148fa:	e7f7      	b.n	80148ec <__mcmp+0x28>

080148fc <__mdiff>:
 80148fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014900:	460c      	mov	r4, r1
 8014902:	4606      	mov	r6, r0
 8014904:	4611      	mov	r1, r2
 8014906:	4620      	mov	r0, r4
 8014908:	4690      	mov	r8, r2
 801490a:	f7ff ffdb 	bl	80148c4 <__mcmp>
 801490e:	1e05      	subs	r5, r0, #0
 8014910:	d110      	bne.n	8014934 <__mdiff+0x38>
 8014912:	4629      	mov	r1, r5
 8014914:	4630      	mov	r0, r6
 8014916:	f7ff fd53 	bl	80143c0 <_Balloc>
 801491a:	b930      	cbnz	r0, 801492a <__mdiff+0x2e>
 801491c:	4b3a      	ldr	r3, [pc, #232]	; (8014a08 <__mdiff+0x10c>)
 801491e:	4602      	mov	r2, r0
 8014920:	f240 2132 	movw	r1, #562	; 0x232
 8014924:	4839      	ldr	r0, [pc, #228]	; (8014a0c <__mdiff+0x110>)
 8014926:	f000 fa9d 	bl	8014e64 <__assert_func>
 801492a:	2301      	movs	r3, #1
 801492c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014934:	bfa4      	itt	ge
 8014936:	4643      	movge	r3, r8
 8014938:	46a0      	movge	r8, r4
 801493a:	4630      	mov	r0, r6
 801493c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014940:	bfa6      	itte	ge
 8014942:	461c      	movge	r4, r3
 8014944:	2500      	movge	r5, #0
 8014946:	2501      	movlt	r5, #1
 8014948:	f7ff fd3a 	bl	80143c0 <_Balloc>
 801494c:	b920      	cbnz	r0, 8014958 <__mdiff+0x5c>
 801494e:	4b2e      	ldr	r3, [pc, #184]	; (8014a08 <__mdiff+0x10c>)
 8014950:	4602      	mov	r2, r0
 8014952:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014956:	e7e5      	b.n	8014924 <__mdiff+0x28>
 8014958:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801495c:	6926      	ldr	r6, [r4, #16]
 801495e:	60c5      	str	r5, [r0, #12]
 8014960:	f104 0914 	add.w	r9, r4, #20
 8014964:	f108 0514 	add.w	r5, r8, #20
 8014968:	f100 0e14 	add.w	lr, r0, #20
 801496c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014970:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014974:	f108 0210 	add.w	r2, r8, #16
 8014978:	46f2      	mov	sl, lr
 801497a:	2100      	movs	r1, #0
 801497c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014980:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014984:	fa1f f883 	uxth.w	r8, r3
 8014988:	fa11 f18b 	uxtah	r1, r1, fp
 801498c:	0c1b      	lsrs	r3, r3, #16
 801498e:	eba1 0808 	sub.w	r8, r1, r8
 8014992:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014996:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801499a:	fa1f f888 	uxth.w	r8, r8
 801499e:	1419      	asrs	r1, r3, #16
 80149a0:	454e      	cmp	r6, r9
 80149a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80149a6:	f84a 3b04 	str.w	r3, [sl], #4
 80149aa:	d8e7      	bhi.n	801497c <__mdiff+0x80>
 80149ac:	1b33      	subs	r3, r6, r4
 80149ae:	3b15      	subs	r3, #21
 80149b0:	f023 0303 	bic.w	r3, r3, #3
 80149b4:	3304      	adds	r3, #4
 80149b6:	3415      	adds	r4, #21
 80149b8:	42a6      	cmp	r6, r4
 80149ba:	bf38      	it	cc
 80149bc:	2304      	movcc	r3, #4
 80149be:	441d      	add	r5, r3
 80149c0:	4473      	add	r3, lr
 80149c2:	469e      	mov	lr, r3
 80149c4:	462e      	mov	r6, r5
 80149c6:	4566      	cmp	r6, ip
 80149c8:	d30e      	bcc.n	80149e8 <__mdiff+0xec>
 80149ca:	f10c 0203 	add.w	r2, ip, #3
 80149ce:	1b52      	subs	r2, r2, r5
 80149d0:	f022 0203 	bic.w	r2, r2, #3
 80149d4:	3d03      	subs	r5, #3
 80149d6:	45ac      	cmp	ip, r5
 80149d8:	bf38      	it	cc
 80149da:	2200      	movcc	r2, #0
 80149dc:	441a      	add	r2, r3
 80149de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80149e2:	b17b      	cbz	r3, 8014a04 <__mdiff+0x108>
 80149e4:	6107      	str	r7, [r0, #16]
 80149e6:	e7a3      	b.n	8014930 <__mdiff+0x34>
 80149e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80149ec:	fa11 f288 	uxtah	r2, r1, r8
 80149f0:	1414      	asrs	r4, r2, #16
 80149f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80149f6:	b292      	uxth	r2, r2
 80149f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80149fc:	f84e 2b04 	str.w	r2, [lr], #4
 8014a00:	1421      	asrs	r1, r4, #16
 8014a02:	e7e0      	b.n	80149c6 <__mdiff+0xca>
 8014a04:	3f01      	subs	r7, #1
 8014a06:	e7ea      	b.n	80149de <__mdiff+0xe2>
 8014a08:	08015863 	.word	0x08015863
 8014a0c:	08015874 	.word	0x08015874

08014a10 <__d2b>:
 8014a10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014a14:	4689      	mov	r9, r1
 8014a16:	2101      	movs	r1, #1
 8014a18:	ec57 6b10 	vmov	r6, r7, d0
 8014a1c:	4690      	mov	r8, r2
 8014a1e:	f7ff fccf 	bl	80143c0 <_Balloc>
 8014a22:	4604      	mov	r4, r0
 8014a24:	b930      	cbnz	r0, 8014a34 <__d2b+0x24>
 8014a26:	4602      	mov	r2, r0
 8014a28:	4b25      	ldr	r3, [pc, #148]	; (8014ac0 <__d2b+0xb0>)
 8014a2a:	4826      	ldr	r0, [pc, #152]	; (8014ac4 <__d2b+0xb4>)
 8014a2c:	f240 310a 	movw	r1, #778	; 0x30a
 8014a30:	f000 fa18 	bl	8014e64 <__assert_func>
 8014a34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014a38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014a3c:	bb35      	cbnz	r5, 8014a8c <__d2b+0x7c>
 8014a3e:	2e00      	cmp	r6, #0
 8014a40:	9301      	str	r3, [sp, #4]
 8014a42:	d028      	beq.n	8014a96 <__d2b+0x86>
 8014a44:	4668      	mov	r0, sp
 8014a46:	9600      	str	r6, [sp, #0]
 8014a48:	f7ff fd82 	bl	8014550 <__lo0bits>
 8014a4c:	9900      	ldr	r1, [sp, #0]
 8014a4e:	b300      	cbz	r0, 8014a92 <__d2b+0x82>
 8014a50:	9a01      	ldr	r2, [sp, #4]
 8014a52:	f1c0 0320 	rsb	r3, r0, #32
 8014a56:	fa02 f303 	lsl.w	r3, r2, r3
 8014a5a:	430b      	orrs	r3, r1
 8014a5c:	40c2      	lsrs	r2, r0
 8014a5e:	6163      	str	r3, [r4, #20]
 8014a60:	9201      	str	r2, [sp, #4]
 8014a62:	9b01      	ldr	r3, [sp, #4]
 8014a64:	61a3      	str	r3, [r4, #24]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	bf14      	ite	ne
 8014a6a:	2202      	movne	r2, #2
 8014a6c:	2201      	moveq	r2, #1
 8014a6e:	6122      	str	r2, [r4, #16]
 8014a70:	b1d5      	cbz	r5, 8014aa8 <__d2b+0x98>
 8014a72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014a76:	4405      	add	r5, r0
 8014a78:	f8c9 5000 	str.w	r5, [r9]
 8014a7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014a80:	f8c8 0000 	str.w	r0, [r8]
 8014a84:	4620      	mov	r0, r4
 8014a86:	b003      	add	sp, #12
 8014a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a90:	e7d5      	b.n	8014a3e <__d2b+0x2e>
 8014a92:	6161      	str	r1, [r4, #20]
 8014a94:	e7e5      	b.n	8014a62 <__d2b+0x52>
 8014a96:	a801      	add	r0, sp, #4
 8014a98:	f7ff fd5a 	bl	8014550 <__lo0bits>
 8014a9c:	9b01      	ldr	r3, [sp, #4]
 8014a9e:	6163      	str	r3, [r4, #20]
 8014aa0:	2201      	movs	r2, #1
 8014aa2:	6122      	str	r2, [r4, #16]
 8014aa4:	3020      	adds	r0, #32
 8014aa6:	e7e3      	b.n	8014a70 <__d2b+0x60>
 8014aa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014aac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014ab0:	f8c9 0000 	str.w	r0, [r9]
 8014ab4:	6918      	ldr	r0, [r3, #16]
 8014ab6:	f7ff fd2b 	bl	8014510 <__hi0bits>
 8014aba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014abe:	e7df      	b.n	8014a80 <__d2b+0x70>
 8014ac0:	08015863 	.word	0x08015863
 8014ac4:	08015874 	.word	0x08015874

08014ac8 <_calloc_r>:
 8014ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014aca:	fba1 2402 	umull	r2, r4, r1, r2
 8014ace:	b94c      	cbnz	r4, 8014ae4 <_calloc_r+0x1c>
 8014ad0:	4611      	mov	r1, r2
 8014ad2:	9201      	str	r2, [sp, #4]
 8014ad4:	f7fd fe44 	bl	8012760 <_malloc_r>
 8014ad8:	9a01      	ldr	r2, [sp, #4]
 8014ada:	4605      	mov	r5, r0
 8014adc:	b930      	cbnz	r0, 8014aec <_calloc_r+0x24>
 8014ade:	4628      	mov	r0, r5
 8014ae0:	b003      	add	sp, #12
 8014ae2:	bd30      	pop	{r4, r5, pc}
 8014ae4:	220c      	movs	r2, #12
 8014ae6:	6002      	str	r2, [r0, #0]
 8014ae8:	2500      	movs	r5, #0
 8014aea:	e7f8      	b.n	8014ade <_calloc_r+0x16>
 8014aec:	4621      	mov	r1, r4
 8014aee:	f7fd fe0e 	bl	801270e <memset>
 8014af2:	e7f4      	b.n	8014ade <_calloc_r+0x16>

08014af4 <_free_r>:
 8014af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014af6:	2900      	cmp	r1, #0
 8014af8:	d044      	beq.n	8014b84 <_free_r+0x90>
 8014afa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014afe:	9001      	str	r0, [sp, #4]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	f1a1 0404 	sub.w	r4, r1, #4
 8014b06:	bfb8      	it	lt
 8014b08:	18e4      	addlt	r4, r4, r3
 8014b0a:	f7ff fc4d 	bl	80143a8 <__malloc_lock>
 8014b0e:	4a1e      	ldr	r2, [pc, #120]	; (8014b88 <_free_r+0x94>)
 8014b10:	9801      	ldr	r0, [sp, #4]
 8014b12:	6813      	ldr	r3, [r2, #0]
 8014b14:	b933      	cbnz	r3, 8014b24 <_free_r+0x30>
 8014b16:	6063      	str	r3, [r4, #4]
 8014b18:	6014      	str	r4, [r2, #0]
 8014b1a:	b003      	add	sp, #12
 8014b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b20:	f7ff bc48 	b.w	80143b4 <__malloc_unlock>
 8014b24:	42a3      	cmp	r3, r4
 8014b26:	d908      	bls.n	8014b3a <_free_r+0x46>
 8014b28:	6825      	ldr	r5, [r4, #0]
 8014b2a:	1961      	adds	r1, r4, r5
 8014b2c:	428b      	cmp	r3, r1
 8014b2e:	bf01      	itttt	eq
 8014b30:	6819      	ldreq	r1, [r3, #0]
 8014b32:	685b      	ldreq	r3, [r3, #4]
 8014b34:	1949      	addeq	r1, r1, r5
 8014b36:	6021      	streq	r1, [r4, #0]
 8014b38:	e7ed      	b.n	8014b16 <_free_r+0x22>
 8014b3a:	461a      	mov	r2, r3
 8014b3c:	685b      	ldr	r3, [r3, #4]
 8014b3e:	b10b      	cbz	r3, 8014b44 <_free_r+0x50>
 8014b40:	42a3      	cmp	r3, r4
 8014b42:	d9fa      	bls.n	8014b3a <_free_r+0x46>
 8014b44:	6811      	ldr	r1, [r2, #0]
 8014b46:	1855      	adds	r5, r2, r1
 8014b48:	42a5      	cmp	r5, r4
 8014b4a:	d10b      	bne.n	8014b64 <_free_r+0x70>
 8014b4c:	6824      	ldr	r4, [r4, #0]
 8014b4e:	4421      	add	r1, r4
 8014b50:	1854      	adds	r4, r2, r1
 8014b52:	42a3      	cmp	r3, r4
 8014b54:	6011      	str	r1, [r2, #0]
 8014b56:	d1e0      	bne.n	8014b1a <_free_r+0x26>
 8014b58:	681c      	ldr	r4, [r3, #0]
 8014b5a:	685b      	ldr	r3, [r3, #4]
 8014b5c:	6053      	str	r3, [r2, #4]
 8014b5e:	4421      	add	r1, r4
 8014b60:	6011      	str	r1, [r2, #0]
 8014b62:	e7da      	b.n	8014b1a <_free_r+0x26>
 8014b64:	d902      	bls.n	8014b6c <_free_r+0x78>
 8014b66:	230c      	movs	r3, #12
 8014b68:	6003      	str	r3, [r0, #0]
 8014b6a:	e7d6      	b.n	8014b1a <_free_r+0x26>
 8014b6c:	6825      	ldr	r5, [r4, #0]
 8014b6e:	1961      	adds	r1, r4, r5
 8014b70:	428b      	cmp	r3, r1
 8014b72:	bf04      	itt	eq
 8014b74:	6819      	ldreq	r1, [r3, #0]
 8014b76:	685b      	ldreq	r3, [r3, #4]
 8014b78:	6063      	str	r3, [r4, #4]
 8014b7a:	bf04      	itt	eq
 8014b7c:	1949      	addeq	r1, r1, r5
 8014b7e:	6021      	streq	r1, [r4, #0]
 8014b80:	6054      	str	r4, [r2, #4]
 8014b82:	e7ca      	b.n	8014b1a <_free_r+0x26>
 8014b84:	b003      	add	sp, #12
 8014b86:	bd30      	pop	{r4, r5, pc}
 8014b88:	20005cb4 	.word	0x20005cb4

08014b8c <__sfputc_r>:
 8014b8c:	6893      	ldr	r3, [r2, #8]
 8014b8e:	3b01      	subs	r3, #1
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	b410      	push	{r4}
 8014b94:	6093      	str	r3, [r2, #8]
 8014b96:	da08      	bge.n	8014baa <__sfputc_r+0x1e>
 8014b98:	6994      	ldr	r4, [r2, #24]
 8014b9a:	42a3      	cmp	r3, r4
 8014b9c:	db01      	blt.n	8014ba2 <__sfputc_r+0x16>
 8014b9e:	290a      	cmp	r1, #10
 8014ba0:	d103      	bne.n	8014baa <__sfputc_r+0x1e>
 8014ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ba6:	f7fe bbdd 	b.w	8013364 <__swbuf_r>
 8014baa:	6813      	ldr	r3, [r2, #0]
 8014bac:	1c58      	adds	r0, r3, #1
 8014bae:	6010      	str	r0, [r2, #0]
 8014bb0:	7019      	strb	r1, [r3, #0]
 8014bb2:	4608      	mov	r0, r1
 8014bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bb8:	4770      	bx	lr

08014bba <__sfputs_r>:
 8014bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bbc:	4606      	mov	r6, r0
 8014bbe:	460f      	mov	r7, r1
 8014bc0:	4614      	mov	r4, r2
 8014bc2:	18d5      	adds	r5, r2, r3
 8014bc4:	42ac      	cmp	r4, r5
 8014bc6:	d101      	bne.n	8014bcc <__sfputs_r+0x12>
 8014bc8:	2000      	movs	r0, #0
 8014bca:	e007      	b.n	8014bdc <__sfputs_r+0x22>
 8014bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bd0:	463a      	mov	r2, r7
 8014bd2:	4630      	mov	r0, r6
 8014bd4:	f7ff ffda 	bl	8014b8c <__sfputc_r>
 8014bd8:	1c43      	adds	r3, r0, #1
 8014bda:	d1f3      	bne.n	8014bc4 <__sfputs_r+0xa>
 8014bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014be0 <_vfiprintf_r>:
 8014be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be4:	460d      	mov	r5, r1
 8014be6:	b09d      	sub	sp, #116	; 0x74
 8014be8:	4614      	mov	r4, r2
 8014bea:	4698      	mov	r8, r3
 8014bec:	4606      	mov	r6, r0
 8014bee:	b118      	cbz	r0, 8014bf8 <_vfiprintf_r+0x18>
 8014bf0:	6983      	ldr	r3, [r0, #24]
 8014bf2:	b90b      	cbnz	r3, 8014bf8 <_vfiprintf_r+0x18>
 8014bf4:	f7fd fcb8 	bl	8012568 <__sinit>
 8014bf8:	4b89      	ldr	r3, [pc, #548]	; (8014e20 <_vfiprintf_r+0x240>)
 8014bfa:	429d      	cmp	r5, r3
 8014bfc:	d11b      	bne.n	8014c36 <_vfiprintf_r+0x56>
 8014bfe:	6875      	ldr	r5, [r6, #4]
 8014c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c02:	07d9      	lsls	r1, r3, #31
 8014c04:	d405      	bmi.n	8014c12 <_vfiprintf_r+0x32>
 8014c06:	89ab      	ldrh	r3, [r5, #12]
 8014c08:	059a      	lsls	r2, r3, #22
 8014c0a:	d402      	bmi.n	8014c12 <_vfiprintf_r+0x32>
 8014c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c0e:	f7fd fd6e 	bl	80126ee <__retarget_lock_acquire_recursive>
 8014c12:	89ab      	ldrh	r3, [r5, #12]
 8014c14:	071b      	lsls	r3, r3, #28
 8014c16:	d501      	bpl.n	8014c1c <_vfiprintf_r+0x3c>
 8014c18:	692b      	ldr	r3, [r5, #16]
 8014c1a:	b9eb      	cbnz	r3, 8014c58 <_vfiprintf_r+0x78>
 8014c1c:	4629      	mov	r1, r5
 8014c1e:	4630      	mov	r0, r6
 8014c20:	f7fe fc04 	bl	801342c <__swsetup_r>
 8014c24:	b1c0      	cbz	r0, 8014c58 <_vfiprintf_r+0x78>
 8014c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c28:	07dc      	lsls	r4, r3, #31
 8014c2a:	d50e      	bpl.n	8014c4a <_vfiprintf_r+0x6a>
 8014c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c30:	b01d      	add	sp, #116	; 0x74
 8014c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c36:	4b7b      	ldr	r3, [pc, #492]	; (8014e24 <_vfiprintf_r+0x244>)
 8014c38:	429d      	cmp	r5, r3
 8014c3a:	d101      	bne.n	8014c40 <_vfiprintf_r+0x60>
 8014c3c:	68b5      	ldr	r5, [r6, #8]
 8014c3e:	e7df      	b.n	8014c00 <_vfiprintf_r+0x20>
 8014c40:	4b79      	ldr	r3, [pc, #484]	; (8014e28 <_vfiprintf_r+0x248>)
 8014c42:	429d      	cmp	r5, r3
 8014c44:	bf08      	it	eq
 8014c46:	68f5      	ldreq	r5, [r6, #12]
 8014c48:	e7da      	b.n	8014c00 <_vfiprintf_r+0x20>
 8014c4a:	89ab      	ldrh	r3, [r5, #12]
 8014c4c:	0598      	lsls	r0, r3, #22
 8014c4e:	d4ed      	bmi.n	8014c2c <_vfiprintf_r+0x4c>
 8014c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c52:	f7fd fd4d 	bl	80126f0 <__retarget_lock_release_recursive>
 8014c56:	e7e9      	b.n	8014c2c <_vfiprintf_r+0x4c>
 8014c58:	2300      	movs	r3, #0
 8014c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8014c5c:	2320      	movs	r3, #32
 8014c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c66:	2330      	movs	r3, #48	; 0x30
 8014c68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014e2c <_vfiprintf_r+0x24c>
 8014c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c70:	f04f 0901 	mov.w	r9, #1
 8014c74:	4623      	mov	r3, r4
 8014c76:	469a      	mov	sl, r3
 8014c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c7c:	b10a      	cbz	r2, 8014c82 <_vfiprintf_r+0xa2>
 8014c7e:	2a25      	cmp	r2, #37	; 0x25
 8014c80:	d1f9      	bne.n	8014c76 <_vfiprintf_r+0x96>
 8014c82:	ebba 0b04 	subs.w	fp, sl, r4
 8014c86:	d00b      	beq.n	8014ca0 <_vfiprintf_r+0xc0>
 8014c88:	465b      	mov	r3, fp
 8014c8a:	4622      	mov	r2, r4
 8014c8c:	4629      	mov	r1, r5
 8014c8e:	4630      	mov	r0, r6
 8014c90:	f7ff ff93 	bl	8014bba <__sfputs_r>
 8014c94:	3001      	adds	r0, #1
 8014c96:	f000 80aa 	beq.w	8014dee <_vfiprintf_r+0x20e>
 8014c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c9c:	445a      	add	r2, fp
 8014c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8014ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	f000 80a2 	beq.w	8014dee <_vfiprintf_r+0x20e>
 8014caa:	2300      	movs	r3, #0
 8014cac:	f04f 32ff 	mov.w	r2, #4294967295
 8014cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014cb4:	f10a 0a01 	add.w	sl, sl, #1
 8014cb8:	9304      	str	r3, [sp, #16]
 8014cba:	9307      	str	r3, [sp, #28]
 8014cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8014cc2:	4654      	mov	r4, sl
 8014cc4:	2205      	movs	r2, #5
 8014cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cca:	4858      	ldr	r0, [pc, #352]	; (8014e2c <_vfiprintf_r+0x24c>)
 8014ccc:	f7eb fac0 	bl	8000250 <memchr>
 8014cd0:	9a04      	ldr	r2, [sp, #16]
 8014cd2:	b9d8      	cbnz	r0, 8014d0c <_vfiprintf_r+0x12c>
 8014cd4:	06d1      	lsls	r1, r2, #27
 8014cd6:	bf44      	itt	mi
 8014cd8:	2320      	movmi	r3, #32
 8014cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cde:	0713      	lsls	r3, r2, #28
 8014ce0:	bf44      	itt	mi
 8014ce2:	232b      	movmi	r3, #43	; 0x2b
 8014ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8014cec:	2b2a      	cmp	r3, #42	; 0x2a
 8014cee:	d015      	beq.n	8014d1c <_vfiprintf_r+0x13c>
 8014cf0:	9a07      	ldr	r2, [sp, #28]
 8014cf2:	4654      	mov	r4, sl
 8014cf4:	2000      	movs	r0, #0
 8014cf6:	f04f 0c0a 	mov.w	ip, #10
 8014cfa:	4621      	mov	r1, r4
 8014cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d00:	3b30      	subs	r3, #48	; 0x30
 8014d02:	2b09      	cmp	r3, #9
 8014d04:	d94e      	bls.n	8014da4 <_vfiprintf_r+0x1c4>
 8014d06:	b1b0      	cbz	r0, 8014d36 <_vfiprintf_r+0x156>
 8014d08:	9207      	str	r2, [sp, #28]
 8014d0a:	e014      	b.n	8014d36 <_vfiprintf_r+0x156>
 8014d0c:	eba0 0308 	sub.w	r3, r0, r8
 8014d10:	fa09 f303 	lsl.w	r3, r9, r3
 8014d14:	4313      	orrs	r3, r2
 8014d16:	9304      	str	r3, [sp, #16]
 8014d18:	46a2      	mov	sl, r4
 8014d1a:	e7d2      	b.n	8014cc2 <_vfiprintf_r+0xe2>
 8014d1c:	9b03      	ldr	r3, [sp, #12]
 8014d1e:	1d19      	adds	r1, r3, #4
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	9103      	str	r1, [sp, #12]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	bfbb      	ittet	lt
 8014d28:	425b      	neglt	r3, r3
 8014d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8014d2e:	9307      	strge	r3, [sp, #28]
 8014d30:	9307      	strlt	r3, [sp, #28]
 8014d32:	bfb8      	it	lt
 8014d34:	9204      	strlt	r2, [sp, #16]
 8014d36:	7823      	ldrb	r3, [r4, #0]
 8014d38:	2b2e      	cmp	r3, #46	; 0x2e
 8014d3a:	d10c      	bne.n	8014d56 <_vfiprintf_r+0x176>
 8014d3c:	7863      	ldrb	r3, [r4, #1]
 8014d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8014d40:	d135      	bne.n	8014dae <_vfiprintf_r+0x1ce>
 8014d42:	9b03      	ldr	r3, [sp, #12]
 8014d44:	1d1a      	adds	r2, r3, #4
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	9203      	str	r2, [sp, #12]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	bfb8      	it	lt
 8014d4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014d52:	3402      	adds	r4, #2
 8014d54:	9305      	str	r3, [sp, #20]
 8014d56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014e3c <_vfiprintf_r+0x25c>
 8014d5a:	7821      	ldrb	r1, [r4, #0]
 8014d5c:	2203      	movs	r2, #3
 8014d5e:	4650      	mov	r0, sl
 8014d60:	f7eb fa76 	bl	8000250 <memchr>
 8014d64:	b140      	cbz	r0, 8014d78 <_vfiprintf_r+0x198>
 8014d66:	2340      	movs	r3, #64	; 0x40
 8014d68:	eba0 000a 	sub.w	r0, r0, sl
 8014d6c:	fa03 f000 	lsl.w	r0, r3, r0
 8014d70:	9b04      	ldr	r3, [sp, #16]
 8014d72:	4303      	orrs	r3, r0
 8014d74:	3401      	adds	r4, #1
 8014d76:	9304      	str	r3, [sp, #16]
 8014d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d7c:	482c      	ldr	r0, [pc, #176]	; (8014e30 <_vfiprintf_r+0x250>)
 8014d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d82:	2206      	movs	r2, #6
 8014d84:	f7eb fa64 	bl	8000250 <memchr>
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	d03f      	beq.n	8014e0c <_vfiprintf_r+0x22c>
 8014d8c:	4b29      	ldr	r3, [pc, #164]	; (8014e34 <_vfiprintf_r+0x254>)
 8014d8e:	bb1b      	cbnz	r3, 8014dd8 <_vfiprintf_r+0x1f8>
 8014d90:	9b03      	ldr	r3, [sp, #12]
 8014d92:	3307      	adds	r3, #7
 8014d94:	f023 0307 	bic.w	r3, r3, #7
 8014d98:	3308      	adds	r3, #8
 8014d9a:	9303      	str	r3, [sp, #12]
 8014d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d9e:	443b      	add	r3, r7
 8014da0:	9309      	str	r3, [sp, #36]	; 0x24
 8014da2:	e767      	b.n	8014c74 <_vfiprintf_r+0x94>
 8014da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014da8:	460c      	mov	r4, r1
 8014daa:	2001      	movs	r0, #1
 8014dac:	e7a5      	b.n	8014cfa <_vfiprintf_r+0x11a>
 8014dae:	2300      	movs	r3, #0
 8014db0:	3401      	adds	r4, #1
 8014db2:	9305      	str	r3, [sp, #20]
 8014db4:	4619      	mov	r1, r3
 8014db6:	f04f 0c0a 	mov.w	ip, #10
 8014dba:	4620      	mov	r0, r4
 8014dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014dc0:	3a30      	subs	r2, #48	; 0x30
 8014dc2:	2a09      	cmp	r2, #9
 8014dc4:	d903      	bls.n	8014dce <_vfiprintf_r+0x1ee>
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d0c5      	beq.n	8014d56 <_vfiprintf_r+0x176>
 8014dca:	9105      	str	r1, [sp, #20]
 8014dcc:	e7c3      	b.n	8014d56 <_vfiprintf_r+0x176>
 8014dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	e7f0      	b.n	8014dba <_vfiprintf_r+0x1da>
 8014dd8:	ab03      	add	r3, sp, #12
 8014dda:	9300      	str	r3, [sp, #0]
 8014ddc:	462a      	mov	r2, r5
 8014dde:	4b16      	ldr	r3, [pc, #88]	; (8014e38 <_vfiprintf_r+0x258>)
 8014de0:	a904      	add	r1, sp, #16
 8014de2:	4630      	mov	r0, r6
 8014de4:	f7fd fdc0 	bl	8012968 <_printf_float>
 8014de8:	4607      	mov	r7, r0
 8014dea:	1c78      	adds	r0, r7, #1
 8014dec:	d1d6      	bne.n	8014d9c <_vfiprintf_r+0x1bc>
 8014dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014df0:	07d9      	lsls	r1, r3, #31
 8014df2:	d405      	bmi.n	8014e00 <_vfiprintf_r+0x220>
 8014df4:	89ab      	ldrh	r3, [r5, #12]
 8014df6:	059a      	lsls	r2, r3, #22
 8014df8:	d402      	bmi.n	8014e00 <_vfiprintf_r+0x220>
 8014dfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014dfc:	f7fd fc78 	bl	80126f0 <__retarget_lock_release_recursive>
 8014e00:	89ab      	ldrh	r3, [r5, #12]
 8014e02:	065b      	lsls	r3, r3, #25
 8014e04:	f53f af12 	bmi.w	8014c2c <_vfiprintf_r+0x4c>
 8014e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e0a:	e711      	b.n	8014c30 <_vfiprintf_r+0x50>
 8014e0c:	ab03      	add	r3, sp, #12
 8014e0e:	9300      	str	r3, [sp, #0]
 8014e10:	462a      	mov	r2, r5
 8014e12:	4b09      	ldr	r3, [pc, #36]	; (8014e38 <_vfiprintf_r+0x258>)
 8014e14:	a904      	add	r1, sp, #16
 8014e16:	4630      	mov	r0, r6
 8014e18:	f7fe f832 	bl	8012e80 <_printf_i>
 8014e1c:	e7e4      	b.n	8014de8 <_vfiprintf_r+0x208>
 8014e1e:	bf00      	nop
 8014e20:	0801576c 	.word	0x0801576c
 8014e24:	0801578c 	.word	0x0801578c
 8014e28:	0801574c 	.word	0x0801574c
 8014e2c:	080159cc 	.word	0x080159cc
 8014e30:	080159d6 	.word	0x080159d6
 8014e34:	08012969 	.word	0x08012969
 8014e38:	08014bbb 	.word	0x08014bbb
 8014e3c:	080159d2 	.word	0x080159d2

08014e40 <_read_r>:
 8014e40:	b538      	push	{r3, r4, r5, lr}
 8014e42:	4d07      	ldr	r5, [pc, #28]	; (8014e60 <_read_r+0x20>)
 8014e44:	4604      	mov	r4, r0
 8014e46:	4608      	mov	r0, r1
 8014e48:	4611      	mov	r1, r2
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	602a      	str	r2, [r5, #0]
 8014e4e:	461a      	mov	r2, r3
 8014e50:	f7f1 f930 	bl	80060b4 <_read>
 8014e54:	1c43      	adds	r3, r0, #1
 8014e56:	d102      	bne.n	8014e5e <_read_r+0x1e>
 8014e58:	682b      	ldr	r3, [r5, #0]
 8014e5a:	b103      	cbz	r3, 8014e5e <_read_r+0x1e>
 8014e5c:	6023      	str	r3, [r4, #0]
 8014e5e:	bd38      	pop	{r3, r4, r5, pc}
 8014e60:	20005cbc 	.word	0x20005cbc

08014e64 <__assert_func>:
 8014e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014e66:	4614      	mov	r4, r2
 8014e68:	461a      	mov	r2, r3
 8014e6a:	4b09      	ldr	r3, [pc, #36]	; (8014e90 <__assert_func+0x2c>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	4605      	mov	r5, r0
 8014e70:	68d8      	ldr	r0, [r3, #12]
 8014e72:	b14c      	cbz	r4, 8014e88 <__assert_func+0x24>
 8014e74:	4b07      	ldr	r3, [pc, #28]	; (8014e94 <__assert_func+0x30>)
 8014e76:	9100      	str	r1, [sp, #0]
 8014e78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014e7c:	4906      	ldr	r1, [pc, #24]	; (8014e98 <__assert_func+0x34>)
 8014e7e:	462b      	mov	r3, r5
 8014e80:	f000 f80e 	bl	8014ea0 <fiprintf>
 8014e84:	f000 f85f 	bl	8014f46 <abort>
 8014e88:	4b04      	ldr	r3, [pc, #16]	; (8014e9c <__assert_func+0x38>)
 8014e8a:	461c      	mov	r4, r3
 8014e8c:	e7f3      	b.n	8014e76 <__assert_func+0x12>
 8014e8e:	bf00      	nop
 8014e90:	200001e4 	.word	0x200001e4
 8014e94:	080159dd 	.word	0x080159dd
 8014e98:	080159ea 	.word	0x080159ea
 8014e9c:	08015a18 	.word	0x08015a18

08014ea0 <fiprintf>:
 8014ea0:	b40e      	push	{r1, r2, r3}
 8014ea2:	b503      	push	{r0, r1, lr}
 8014ea4:	4601      	mov	r1, r0
 8014ea6:	ab03      	add	r3, sp, #12
 8014ea8:	4805      	ldr	r0, [pc, #20]	; (8014ec0 <fiprintf+0x20>)
 8014eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8014eae:	6800      	ldr	r0, [r0, #0]
 8014eb0:	9301      	str	r3, [sp, #4]
 8014eb2:	f7ff fe95 	bl	8014be0 <_vfiprintf_r>
 8014eb6:	b002      	add	sp, #8
 8014eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ebc:	b003      	add	sp, #12
 8014ebe:	4770      	bx	lr
 8014ec0:	200001e4 	.word	0x200001e4

08014ec4 <_fstat_r>:
 8014ec4:	b538      	push	{r3, r4, r5, lr}
 8014ec6:	4d07      	ldr	r5, [pc, #28]	; (8014ee4 <_fstat_r+0x20>)
 8014ec8:	2300      	movs	r3, #0
 8014eca:	4604      	mov	r4, r0
 8014ecc:	4608      	mov	r0, r1
 8014ece:	4611      	mov	r1, r2
 8014ed0:	602b      	str	r3, [r5, #0]
 8014ed2:	f7f1 f918 	bl	8006106 <_fstat>
 8014ed6:	1c43      	adds	r3, r0, #1
 8014ed8:	d102      	bne.n	8014ee0 <_fstat_r+0x1c>
 8014eda:	682b      	ldr	r3, [r5, #0]
 8014edc:	b103      	cbz	r3, 8014ee0 <_fstat_r+0x1c>
 8014ede:	6023      	str	r3, [r4, #0]
 8014ee0:	bd38      	pop	{r3, r4, r5, pc}
 8014ee2:	bf00      	nop
 8014ee4:	20005cbc 	.word	0x20005cbc

08014ee8 <_isatty_r>:
 8014ee8:	b538      	push	{r3, r4, r5, lr}
 8014eea:	4d06      	ldr	r5, [pc, #24]	; (8014f04 <_isatty_r+0x1c>)
 8014eec:	2300      	movs	r3, #0
 8014eee:	4604      	mov	r4, r0
 8014ef0:	4608      	mov	r0, r1
 8014ef2:	602b      	str	r3, [r5, #0]
 8014ef4:	f7f1 f917 	bl	8006126 <_isatty>
 8014ef8:	1c43      	adds	r3, r0, #1
 8014efa:	d102      	bne.n	8014f02 <_isatty_r+0x1a>
 8014efc:	682b      	ldr	r3, [r5, #0]
 8014efe:	b103      	cbz	r3, 8014f02 <_isatty_r+0x1a>
 8014f00:	6023      	str	r3, [r4, #0]
 8014f02:	bd38      	pop	{r3, r4, r5, pc}
 8014f04:	20005cbc 	.word	0x20005cbc

08014f08 <__ascii_mbtowc>:
 8014f08:	b082      	sub	sp, #8
 8014f0a:	b901      	cbnz	r1, 8014f0e <__ascii_mbtowc+0x6>
 8014f0c:	a901      	add	r1, sp, #4
 8014f0e:	b142      	cbz	r2, 8014f22 <__ascii_mbtowc+0x1a>
 8014f10:	b14b      	cbz	r3, 8014f26 <__ascii_mbtowc+0x1e>
 8014f12:	7813      	ldrb	r3, [r2, #0]
 8014f14:	600b      	str	r3, [r1, #0]
 8014f16:	7812      	ldrb	r2, [r2, #0]
 8014f18:	1e10      	subs	r0, r2, #0
 8014f1a:	bf18      	it	ne
 8014f1c:	2001      	movne	r0, #1
 8014f1e:	b002      	add	sp, #8
 8014f20:	4770      	bx	lr
 8014f22:	4610      	mov	r0, r2
 8014f24:	e7fb      	b.n	8014f1e <__ascii_mbtowc+0x16>
 8014f26:	f06f 0001 	mvn.w	r0, #1
 8014f2a:	e7f8      	b.n	8014f1e <__ascii_mbtowc+0x16>

08014f2c <__ascii_wctomb>:
 8014f2c:	b149      	cbz	r1, 8014f42 <__ascii_wctomb+0x16>
 8014f2e:	2aff      	cmp	r2, #255	; 0xff
 8014f30:	bf85      	ittet	hi
 8014f32:	238a      	movhi	r3, #138	; 0x8a
 8014f34:	6003      	strhi	r3, [r0, #0]
 8014f36:	700a      	strbls	r2, [r1, #0]
 8014f38:	f04f 30ff 	movhi.w	r0, #4294967295
 8014f3c:	bf98      	it	ls
 8014f3e:	2001      	movls	r0, #1
 8014f40:	4770      	bx	lr
 8014f42:	4608      	mov	r0, r1
 8014f44:	4770      	bx	lr

08014f46 <abort>:
 8014f46:	b508      	push	{r3, lr}
 8014f48:	2006      	movs	r0, #6
 8014f4a:	f000 f82b 	bl	8014fa4 <raise>
 8014f4e:	2001      	movs	r0, #1
 8014f50:	f7f1 f8a6 	bl	80060a0 <_exit>

08014f54 <_raise_r>:
 8014f54:	291f      	cmp	r1, #31
 8014f56:	b538      	push	{r3, r4, r5, lr}
 8014f58:	4604      	mov	r4, r0
 8014f5a:	460d      	mov	r5, r1
 8014f5c:	d904      	bls.n	8014f68 <_raise_r+0x14>
 8014f5e:	2316      	movs	r3, #22
 8014f60:	6003      	str	r3, [r0, #0]
 8014f62:	f04f 30ff 	mov.w	r0, #4294967295
 8014f66:	bd38      	pop	{r3, r4, r5, pc}
 8014f68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014f6a:	b112      	cbz	r2, 8014f72 <_raise_r+0x1e>
 8014f6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f70:	b94b      	cbnz	r3, 8014f86 <_raise_r+0x32>
 8014f72:	4620      	mov	r0, r4
 8014f74:	f000 f830 	bl	8014fd8 <_getpid_r>
 8014f78:	462a      	mov	r2, r5
 8014f7a:	4601      	mov	r1, r0
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f82:	f000 b817 	b.w	8014fb4 <_kill_r>
 8014f86:	2b01      	cmp	r3, #1
 8014f88:	d00a      	beq.n	8014fa0 <_raise_r+0x4c>
 8014f8a:	1c59      	adds	r1, r3, #1
 8014f8c:	d103      	bne.n	8014f96 <_raise_r+0x42>
 8014f8e:	2316      	movs	r3, #22
 8014f90:	6003      	str	r3, [r0, #0]
 8014f92:	2001      	movs	r0, #1
 8014f94:	e7e7      	b.n	8014f66 <_raise_r+0x12>
 8014f96:	2400      	movs	r4, #0
 8014f98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	4798      	blx	r3
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	e7e0      	b.n	8014f66 <_raise_r+0x12>

08014fa4 <raise>:
 8014fa4:	4b02      	ldr	r3, [pc, #8]	; (8014fb0 <raise+0xc>)
 8014fa6:	4601      	mov	r1, r0
 8014fa8:	6818      	ldr	r0, [r3, #0]
 8014faa:	f7ff bfd3 	b.w	8014f54 <_raise_r>
 8014fae:	bf00      	nop
 8014fb0:	200001e4 	.word	0x200001e4

08014fb4 <_kill_r>:
 8014fb4:	b538      	push	{r3, r4, r5, lr}
 8014fb6:	4d07      	ldr	r5, [pc, #28]	; (8014fd4 <_kill_r+0x20>)
 8014fb8:	2300      	movs	r3, #0
 8014fba:	4604      	mov	r4, r0
 8014fbc:	4608      	mov	r0, r1
 8014fbe:	4611      	mov	r1, r2
 8014fc0:	602b      	str	r3, [r5, #0]
 8014fc2:	f7f1 f85d 	bl	8006080 <_kill>
 8014fc6:	1c43      	adds	r3, r0, #1
 8014fc8:	d102      	bne.n	8014fd0 <_kill_r+0x1c>
 8014fca:	682b      	ldr	r3, [r5, #0]
 8014fcc:	b103      	cbz	r3, 8014fd0 <_kill_r+0x1c>
 8014fce:	6023      	str	r3, [r4, #0]
 8014fd0:	bd38      	pop	{r3, r4, r5, pc}
 8014fd2:	bf00      	nop
 8014fd4:	20005cbc 	.word	0x20005cbc

08014fd8 <_getpid_r>:
 8014fd8:	f7f1 b84a 	b.w	8006070 <_getpid>

08014fdc <lrintf>:
 8014fdc:	ee10 3a10 	vmov	r3, s0
 8014fe0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014fe4:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8014fe8:	281e      	cmp	r0, #30
 8014fea:	b082      	sub	sp, #8
 8014fec:	dc2e      	bgt.n	801504c <lrintf+0x70>
 8014fee:	1c41      	adds	r1, r0, #1
 8014ff0:	da02      	bge.n	8014ff8 <lrintf+0x1c>
 8014ff2:	2000      	movs	r0, #0
 8014ff4:	b002      	add	sp, #8
 8014ff6:	4770      	bx	lr
 8014ff8:	2816      	cmp	r0, #22
 8014ffa:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8014ffe:	dd09      	ble.n	8015014 <lrintf+0x38>
 8015000:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8015004:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015008:	3a96      	subs	r2, #150	; 0x96
 801500a:	4090      	lsls	r0, r2
 801500c:	2900      	cmp	r1, #0
 801500e:	d0f1      	beq.n	8014ff4 <lrintf+0x18>
 8015010:	4240      	negs	r0, r0
 8015012:	e7ef      	b.n	8014ff4 <lrintf+0x18>
 8015014:	4b10      	ldr	r3, [pc, #64]	; (8015058 <lrintf+0x7c>)
 8015016:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801501a:	ed93 7a00 	vldr	s14, [r3]
 801501e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8015022:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015026:	eddd 7a01 	vldr	s15, [sp, #4]
 801502a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801502e:	ee17 3a90 	vmov	r3, s15
 8015032:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015036:	d0dc      	beq.n	8014ff2 <lrintf+0x16>
 8015038:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801503c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8015040:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015044:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8015048:	40d8      	lsrs	r0, r3
 801504a:	e7df      	b.n	801500c <lrintf+0x30>
 801504c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8015050:	ee17 0a90 	vmov	r0, s15
 8015054:	e7ce      	b.n	8014ff4 <lrintf+0x18>
 8015056:	bf00      	nop
 8015058:	08015b24 	.word	0x08015b24

0801505c <checkint>:
 801505c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015060:	2b7e      	cmp	r3, #126	; 0x7e
 8015062:	dd10      	ble.n	8015086 <checkint+0x2a>
 8015064:	2b96      	cmp	r3, #150	; 0x96
 8015066:	dc0c      	bgt.n	8015082 <checkint+0x26>
 8015068:	2201      	movs	r2, #1
 801506a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801506e:	fa02 f303 	lsl.w	r3, r2, r3
 8015072:	1e5a      	subs	r2, r3, #1
 8015074:	4202      	tst	r2, r0
 8015076:	d106      	bne.n	8015086 <checkint+0x2a>
 8015078:	4203      	tst	r3, r0
 801507a:	bf0c      	ite	eq
 801507c:	2002      	moveq	r0, #2
 801507e:	2001      	movne	r0, #1
 8015080:	4770      	bx	lr
 8015082:	2002      	movs	r0, #2
 8015084:	4770      	bx	lr
 8015086:	2000      	movs	r0, #0
 8015088:	4770      	bx	lr
 801508a:	0000      	movs	r0, r0
 801508c:	0000      	movs	r0, r0
	...

08015090 <powf>:
 8015090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015092:	ee10 1a10 	vmov	r1, s0
 8015096:	ee10 4a90 	vmov	r4, s1
 801509a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801509e:	0062      	lsls	r2, r4, #1
 80150a0:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80150a4:	eef0 7a40 	vmov.f32	s15, s0
 80150a8:	f102 30ff 	add.w	r0, r2, #4294967295
 80150ac:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80150b0:	d252      	bcs.n	8015158 <powf+0xc8>
 80150b2:	4298      	cmp	r0, r3
 80150b4:	d252      	bcs.n	801515c <powf+0xcc>
 80150b6:	2000      	movs	r0, #0
 80150b8:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 80150bc:	4ca0      	ldr	r4, [pc, #640]	; (8015340 <powf+0x2b0>)
 80150be:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 80150c2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80150c6:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 80150ca:	0dd2      	lsrs	r2, r2, #23
 80150cc:	05d2      	lsls	r2, r2, #23
 80150ce:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 80150d2:	1a8b      	subs	r3, r1, r2
 80150d4:	ed95 6b00 	vldr	d6, [r5]
 80150d8:	ee07 3a90 	vmov	s15, r3
 80150dc:	15d2      	asrs	r2, r2, #23
 80150de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80150e2:	eea6 5b07 	vfma.f64	d5, d6, d7
 80150e6:	ed95 6b02 	vldr	d6, [r5, #8]
 80150ea:	ee25 2b05 	vmul.f64	d2, d5, d5
 80150ee:	ee22 1b02 	vmul.f64	d1, d2, d2
 80150f2:	ee07 2a90 	vmov	s15, r2
 80150f6:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 80150fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80150fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015102:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 8015106:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 801510a:	eea5 3b06 	vfma.f64	d3, d5, d6
 801510e:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 8015112:	eea5 6b04 	vfma.f64	d6, d5, d4
 8015116:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 801511a:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801511e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8015122:	eea2 7b06 	vfma.f64	d7, d2, d6
 8015126:	eea3 7b01 	vfma.f64	d7, d3, d1
 801512a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801512e:	ee10 3a90 	vmov	r3, s1
 8015132:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8015136:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801513a:	429a      	cmp	r2, r3
 801513c:	f0c0 80b1 	bcc.w	80152a2 <powf+0x212>
 8015140:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8015320 <powf+0x290>
 8015144:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801514c:	dd79      	ble.n	8015242 <powf+0x1b2>
 801514e:	b003      	add	sp, #12
 8015150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015154:	f000 b940 	b.w	80153d8 <__math_oflowf>
 8015158:	4298      	cmp	r0, r3
 801515a:	d32d      	bcc.n	80151b8 <powf+0x128>
 801515c:	b952      	cbnz	r2, 8015174 <powf+0xe4>
 801515e:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 8015162:	005b      	lsls	r3, r3, #1
 8015164:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 8015168:	f240 80c9 	bls.w	80152fe <powf+0x26e>
 801516c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8015170:	b003      	add	sp, #12
 8015172:	bd30      	pop	{r4, r5, pc}
 8015174:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8015178:	d105      	bne.n	8015186 <powf+0xf6>
 801517a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801517e:	0064      	lsls	r4, r4, #1
 8015180:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8015184:	e7f0      	b.n	8015168 <powf+0xd8>
 8015186:	004b      	lsls	r3, r1, #1
 8015188:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801518c:	d8ee      	bhi.n	801516c <powf+0xdc>
 801518e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8015192:	d1eb      	bne.n	801516c <powf+0xdc>
 8015194:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8015198:	f000 80b1 	beq.w	80152fe <powf+0x26e>
 801519c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80151a0:	ea6f 0404 	mvn.w	r4, r4
 80151a4:	bf34      	ite	cc
 80151a6:	2300      	movcc	r3, #0
 80151a8:	2301      	movcs	r3, #1
 80151aa:	0fe4      	lsrs	r4, r4, #31
 80151ac:	42a3      	cmp	r3, r4
 80151ae:	f040 80a9 	bne.w	8015304 <powf+0x274>
 80151b2:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80151b6:	e7db      	b.n	8015170 <powf+0xe0>
 80151b8:	004d      	lsls	r5, r1, #1
 80151ba:	1e6a      	subs	r2, r5, #1
 80151bc:	429a      	cmp	r2, r3
 80151be:	d31c      	bcc.n	80151fa <powf+0x16a>
 80151c0:	2900      	cmp	r1, #0
 80151c2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80151c6:	da0f      	bge.n	80151e8 <powf+0x158>
 80151c8:	ee10 0a90 	vmov	r0, s1
 80151cc:	f7ff ff46 	bl	801505c <checkint>
 80151d0:	2801      	cmp	r0, #1
 80151d2:	d109      	bne.n	80151e8 <powf+0x158>
 80151d4:	eeb1 0a40 	vneg.f32	s0, s0
 80151d8:	b945      	cbnz	r5, 80151ec <powf+0x15c>
 80151da:	2c00      	cmp	r4, #0
 80151dc:	dac8      	bge.n	8015170 <powf+0xe0>
 80151de:	b003      	add	sp, #12
 80151e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80151e4:	f000 b8fe 	b.w	80153e4 <__math_divzerof>
 80151e8:	2000      	movs	r0, #0
 80151ea:	e7f5      	b.n	80151d8 <powf+0x148>
 80151ec:	2c00      	cmp	r4, #0
 80151ee:	dabf      	bge.n	8015170 <powf+0xe0>
 80151f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80151f4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80151f8:	e7ba      	b.n	8015170 <powf+0xe0>
 80151fa:	2900      	cmp	r1, #0
 80151fc:	da1f      	bge.n	801523e <powf+0x1ae>
 80151fe:	ee10 0a90 	vmov	r0, s1
 8015202:	f7ff ff2b 	bl	801505c <checkint>
 8015206:	b920      	cbnz	r0, 8015212 <powf+0x182>
 8015208:	b003      	add	sp, #12
 801520a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801520e:	f000 b8f9 	b.w	8015404 <__math_invalidf>
 8015212:	2801      	cmp	r0, #1
 8015214:	bf14      	ite	ne
 8015216:	2000      	movne	r0, #0
 8015218:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801521c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015220:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8015224:	f4bf af48 	bcs.w	80150b8 <powf+0x28>
 8015228:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8015344 <powf+0x2b4>
 801522c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015230:	ee10 3a10 	vmov	r3, s0
 8015234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015238:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801523c:	e73c      	b.n	80150b8 <powf+0x28>
 801523e:	2000      	movs	r0, #0
 8015240:	e7ee      	b.n	8015220 <powf+0x190>
 8015242:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8015328 <powf+0x298>
 8015246:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801524a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801524e:	dd10      	ble.n	8015272 <powf+0x1e2>
 8015250:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8015254:	2800      	cmp	r0, #0
 8015256:	d158      	bne.n	801530a <powf+0x27a>
 8015258:	9300      	str	r3, [sp, #0]
 801525a:	eddd 7a00 	vldr	s15, [sp]
 801525e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015262:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015266:	eef4 7a47 	vcmp.f32	s15, s14
 801526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801526e:	f47f af6e 	bne.w	801514e <powf+0xbe>
 8015272:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8015330 <powf+0x2a0>
 8015276:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527e:	d804      	bhi.n	801528a <powf+0x1fa>
 8015280:	b003      	add	sp, #12
 8015282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015286:	f000 b89b 	b.w	80153c0 <__math_uflowf>
 801528a:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8015338 <powf+0x2a8>
 801528e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015296:	d504      	bpl.n	80152a2 <powf+0x212>
 8015298:	b003      	add	sp, #12
 801529a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801529e:	f000 b895 	b.w	80153cc <__math_may_uflowf>
 80152a2:	4b29      	ldr	r3, [pc, #164]	; (8015348 <powf+0x2b8>)
 80152a4:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 80152a8:	ee30 6b07 	vadd.f64	d6, d0, d7
 80152ac:	ee16 2a10 	vmov	r2, s12
 80152b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80152b4:	f002 011f 	and.w	r1, r2, #31
 80152b8:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80152bc:	ee30 7b47 	vsub.f64	d7, d0, d7
 80152c0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80152c4:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80152c8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80152cc:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80152d0:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80152d4:	eea7 6b05 	vfma.f64	d6, d7, d5
 80152d8:	686d      	ldr	r5, [r5, #4]
 80152da:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80152de:	1882      	adds	r2, r0, r2
 80152e0:	2300      	movs	r3, #0
 80152e2:	1918      	adds	r0, r3, r4
 80152e4:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80152e8:	eea7 0b05 	vfma.f64	d0, d7, d5
 80152ec:	ec41 0b17 	vmov	d7, r0, r1
 80152f0:	eea6 0b04 	vfma.f64	d0, d6, d4
 80152f4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80152f8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80152fc:	e738      	b.n	8015170 <powf+0xe0>
 80152fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015302:	e735      	b.n	8015170 <powf+0xe0>
 8015304:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801534c <powf+0x2bc>
 8015308:	e732      	b.n	8015170 <powf+0xe0>
 801530a:	9301      	str	r3, [sp, #4]
 801530c:	eddd 7a01 	vldr	s15, [sp, #4]
 8015310:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8015314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015318:	e7a5      	b.n	8015266 <powf+0x1d6>
 801531a:	bf00      	nop
 801531c:	f3af 8000 	nop.w
 8015320:	ffd1d571 	.word	0xffd1d571
 8015324:	405fffff 	.word	0x405fffff
 8015328:	ffa3aae2 	.word	0xffa3aae2
 801532c:	405fffff 	.word	0x405fffff
 8015330:	00000000 	.word	0x00000000
 8015334:	c062c000 	.word	0xc062c000
 8015338:	00000000 	.word	0x00000000
 801533c:	c062a000 	.word	0xc062a000
 8015340:	08015b30 	.word	0x08015b30
 8015344:	4b000000 	.word	0x4b000000
 8015348:	08015c58 	.word	0x08015c58
 801534c:	00000000 	.word	0x00000000

08015350 <sqrtf>:
 8015350:	b508      	push	{r3, lr}
 8015352:	ed2d 8b02 	vpush	{d8}
 8015356:	eeb0 8a40 	vmov.f32	s16, s0
 801535a:	f000 f817 	bl	801538c <__ieee754_sqrtf>
 801535e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015366:	d60c      	bvs.n	8015382 <sqrtf+0x32>
 8015368:	eddf 8a07 	vldr	s17, [pc, #28]	; 8015388 <sqrtf+0x38>
 801536c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015374:	d505      	bpl.n	8015382 <sqrtf+0x32>
 8015376:	f7fd f899 	bl	80124ac <__errno>
 801537a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801537e:	2321      	movs	r3, #33	; 0x21
 8015380:	6003      	str	r3, [r0, #0]
 8015382:	ecbd 8b02 	vpop	{d8}
 8015386:	bd08      	pop	{r3, pc}
 8015388:	00000000 	.word	0x00000000

0801538c <__ieee754_sqrtf>:
 801538c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015390:	4770      	bx	lr

08015392 <with_errnof>:
 8015392:	b513      	push	{r0, r1, r4, lr}
 8015394:	4604      	mov	r4, r0
 8015396:	ed8d 0a01 	vstr	s0, [sp, #4]
 801539a:	f7fd f887 	bl	80124ac <__errno>
 801539e:	ed9d 0a01 	vldr	s0, [sp, #4]
 80153a2:	6004      	str	r4, [r0, #0]
 80153a4:	b002      	add	sp, #8
 80153a6:	bd10      	pop	{r4, pc}

080153a8 <xflowf>:
 80153a8:	b130      	cbz	r0, 80153b8 <xflowf+0x10>
 80153aa:	eef1 7a40 	vneg.f32	s15, s0
 80153ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 80153b2:	2022      	movs	r0, #34	; 0x22
 80153b4:	f7ff bfed 	b.w	8015392 <with_errnof>
 80153b8:	eef0 7a40 	vmov.f32	s15, s0
 80153bc:	e7f7      	b.n	80153ae <xflowf+0x6>
	...

080153c0 <__math_uflowf>:
 80153c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80153c8 <__math_uflowf+0x8>
 80153c4:	f7ff bff0 	b.w	80153a8 <xflowf>
 80153c8:	10000000 	.word	0x10000000

080153cc <__math_may_uflowf>:
 80153cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80153d4 <__math_may_uflowf+0x8>
 80153d0:	f7ff bfea 	b.w	80153a8 <xflowf>
 80153d4:	1a200000 	.word	0x1a200000

080153d8 <__math_oflowf>:
 80153d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80153e0 <__math_oflowf+0x8>
 80153dc:	f7ff bfe4 	b.w	80153a8 <xflowf>
 80153e0:	70000000 	.word	0x70000000

080153e4 <__math_divzerof>:
 80153e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80153e8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80153ec:	2800      	cmp	r0, #0
 80153ee:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80153f2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8015400 <__math_divzerof+0x1c>
 80153f6:	2022      	movs	r0, #34	; 0x22
 80153f8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80153fc:	f7ff bfc9 	b.w	8015392 <with_errnof>
 8015400:	00000000 	.word	0x00000000

08015404 <__math_invalidf>:
 8015404:	eef0 7a40 	vmov.f32	s15, s0
 8015408:	ee30 7a40 	vsub.f32	s14, s0, s0
 801540c:	eef4 7a67 	vcmp.f32	s15, s15
 8015410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015414:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8015418:	d602      	bvs.n	8015420 <__math_invalidf+0x1c>
 801541a:	2021      	movs	r0, #33	; 0x21
 801541c:	f7ff bfb9 	b.w	8015392 <with_errnof>
 8015420:	4770      	bx	lr
	...

08015424 <_init>:
 8015424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015426:	bf00      	nop
 8015428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801542a:	bc08      	pop	{r3}
 801542c:	469e      	mov	lr, r3
 801542e:	4770      	bx	lr

08015430 <_fini>:
 8015430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015432:	bf00      	nop
 8015434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015436:	bc08      	pop	{r3}
 8015438:	469e      	mov	lr, r3
 801543a:	4770      	bx	lr
